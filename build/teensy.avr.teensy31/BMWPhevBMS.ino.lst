
C:\Users\tomde\AppData\Local\Temp\arduino\sketches\DBFEEBE2320E44169C10E1E3B07D1B50/BMWPhevBMS.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  moduleAddress = 0;
  error = 0;
}

void BMSModule::clearmodule()
{
       0:	00 80 00 20 bd 01 00 00 b9 9b 00 00 75 9b 00 00     ... ........u...
  temperatures[2] = 0.0f;
  temperatures[3] = 0.0f;
  variant = 0;
  exists = false;
  reset = false;
  moduleAddress = 0;
      10:	75 9b 00 00 75 9b 00 00 75 9b 00 00 75 9b 00 00     u...u...u...u...
  temperatures[2] = 0.0f;
      20:	75 9b 00 00 75 9b 00 00 75 9b 00 00 b9 9b 00 00     u...u...u.......
}
      30:	b9 9b 00 00 75 9b 00 00 85 90 00 00 89 90 00 00     ....u...........
int BMSModuleManager::seriescells()
{
  spack = 0;
  for (int y = 1; y < 63; y++)
  {
    if (modules[y].isExisting())
      40:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
    {
      spack = spack + modules[y].getscells();
      50:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
  for (int y = 1; y < 63; y++)
      60:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
    }
  }
  return spack;
      70:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
}

float BMSModuleManager::getAvgCellVolt()
{
  float avg = 0.0f;
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
      80:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
  {
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
      90:	65 73 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     es..............
      a0:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
  }
  avg = avg / (float)numFoundModules;
      b0:	b9 9b 00 00 25 86 00 00 31 86 00 00 35 86 00 00     ....%...1...5...

  Logger::console("");
  Logger::console("");
  Logger::console("");
  Logger::console("Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
                  getPackVoltage(), getAvgCellVolt(), getAvgTemperature());
      c0:	41 86 00 00 45 86 00 00 49 86 00 00 b9 9b 00 00     A...E...I.......
  Logger::console("Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
      d0:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
  Logger::console("");
      e0:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
  for (int y = 1; y < 63; y++)
      f0:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 dd aa 00 00     ................
  {
    if (modules[y].isExisting())
     100:	b9 9b 00 00 05 b2 00 00 b9 9b 00 00 b9 9b 00 00     ................
    {
      faults = modules[y].getFaults();
      alerts = modules[y].getAlerts();
     110:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
      COV = modules[y].getCOVCells();
     120:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
      CUV = modules[y].getCUVCells();

      Logger::console("                               Module #%i", y);
     130:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................

      Logger::console("  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
                      modules[y].getLowCellV(), modules[y].getHighCellV(), modules[y].getLowTemp(), modules[y].getHighTemp());
     140:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
     150:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
      Logger::console("  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
     160:	b9 9b 00 00 05 b5 00 00 b9 9b 00 00 b9 9b 00 00     ................
     170:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
     180:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
     190:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
      if (faults > 0)
     1a0:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00 b9 9b 00 00     ................
        Logger::console("  MODULE HAS ALERTS:");
        if (alerts & 1)
        {
          Logger::console("    Over temperature on TS1");
        }
        if (alerts & 2)
     1b0:	b9 9b 00 00 b9 9b 00 00 b9 9b 00 00                 ............

000001bc <ResetHandler>:
        }
        if (alerts & 8)
        {
          Logger::console("    Thermal shutdown active");
        }
        if (alerts & 0x10)
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
        {
          Logger::console("    Test Alert");
        }
        if (alerts & 0x20)
     1c2:	b510      	push	{r4, lr}
        {
          Logger::console("    OTP EPROM Uncorrectable Error");
        }
        if (alerts & 0x40)
     1c4:	81da      	strh	r2, [r3, #14]
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
        {
          Logger::console("    GROUP3 Regs Invalid");
        }
        if (alerts & 0x80)
     1ca:	81da      	strh	r2, [r3, #14]
        {
          Logger::console("    Address not registered");
        }
      }
      if (faults > 0 || alerts > 0) SERIALCONSOLE.println();
     1cc:	bf00      	nop
  for (int y = 1; y < 63; y++)
     1ce:	bf00      	nop
     1d0:	f009 fcf6 	bl	9bc0 <startup_early_hook>
      if (faults > 0 || alerts > 0) SERIALCONSOLE.println();
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
  for (int y = 1; y < 63; y++)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	631a      	str	r2, [r3, #48]	; 0x30
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
     1de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
}
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
        Logger::console("  MODULE IS FAULTED:");
     1e6:	6913      	ldr	r3, [r2, #16]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
        if (faults & 1)
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
     1ee:	6153      	str	r3, [r2, #20]
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
        if (faults & 2)
     1f4:	6113      	str	r3, [r2, #16]
        if (faults & 4)
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
     1f8:	789a      	ldrb	r2, [r3, #2]
        if (faults & 8)
     1fa:	0711      	lsls	r1, r2, #28
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
        if (faults & 0x10)
     1fe:	789a      	ldrb	r2, [r3, #2]
     200:	f042 0208 	orr.w	r2, r2, #8
        if (faults & 0x20)
     204:	709a      	strb	r2, [r3, #2]
      if (alerts > 0)
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
     20a:	222a      	movs	r2, #42	; 0x2a
          Logger::console("    Internal registers inconsistent");
     20c:	701a      	strb	r2, [r3, #0]
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
      if (alerts > 0)
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
     216:	f022 0203 	bic.w	r2, r2, #3
          Logger::console("    Test fault active");
     21a:	4299      	cmp	r1, r3
     21c:	bf88      	it	hi
     21e:	2200      	movhi	r2, #0
          Logger::console("    Power on reset has occurred");
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
     222:	f009 fbd3 	bl	99cc <memcpy>
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
          Logger::console("    CRC error in received packet");
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
     22a:	1cda      	adds	r2, r3, #3
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
          Logger::console("    GROUP3 Regs Invalid");
     230:	f022 0203 	bic.w	r2, r2, #3
     234:	4299      	cmp	r1, r3
        if (alerts & 0x80)
     236:	bf88      	it	hi
     238:	2200      	movhi	r2, #0
          Logger::console("    Address not registered");
     23a:	2100      	movs	r1, #0
     23c:	f00d fd8c 	bl	dd58 <memset>
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
          Logger::console("    OTP EPROM Uncorrectable Error");
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
     248:	f009 fbc0 	bl	99cc <memcpy>
          Logger::console("    Test Alert");
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
          Logger::console("    Thermal shutdown active");
     252:	f803 1b01 	strb.w	r1, [r3], #1
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
          Logger::console("    Sleep mode active");
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
          Logger::console("    Over temperature on TS2");
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
          Logger::console("    Over temperature on TS1");
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     272:	22a0      	movs	r2, #160	; 0xa0
     274:	701a      	strb	r2, [r3, #0]
     276:	799a      	ldrb	r2, [r3, #6]
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
     27c:	799a      	ldrb	r2, [r3, #6]
            if (CUV & (1 << i))
     27e:	06d4      	lsls	r4, r2, #27
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
          for (int i = 0; i < 12; i++)
     286:	f002 020c 	and.w	r2, r2, #12
     28a:	2a08      	cmp	r2, #8
            if (CUV & (1 << i))
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     296:	799a      	ldrb	r2, [r3, #6]
     298:	0690      	lsls	r0, r2, #26
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
          for (int i = 0; i < 12; i++)
     29e:	7993      	ldrb	r3, [r2, #6]
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
     2aa:	2102      	movs	r1, #2
          SERIALCONSOLE.println();
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
     2ae:	2120      	movs	r1, #32
     2b0:	7011      	strb	r1, [r2, #0]
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
     2c8:	2200      	movs	r2, #0
     2ca:	619a      	str	r2, [r3, #24]
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
     2d6:	b662      	cpsie	i
     2d8:	f009 fd9c 	bl	9e14 <_init_Teensyduino_internal_>
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
     2e6:	f009 fd89 	bl	9dfc <rtc_set>
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f009 fd7a 	bl	9dfc <rtc_set>
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
     30c:	f009 fc5e 	bl	9bcc <startup_late_hook>
     310:	f00d fe18 	bl	df44 <__libc_init_array>
            if (COV & (1 << i))
     314:	f009 fb52 	bl	99bc <main>
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
          for (int i = 0; i < 12; i++)
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
            if (COV & (1 << i))
     324:	00043f82 	.word	0x00043f82
     328:	2b000001 	.word	0x2b000001
     32c:	4003d000 	.word	0x4003d000
     330:	4007d000 	.word	0x4007d000
          for (int i = 0; i < 12; i++)
     334:	4007e000 	.word	0x4007e000
     338:	1fff8720 	.word	0x1fff8720
     33c:	1fff9168 	.word	0x1fff9168
     340:	0001586c 	.word	0x0001586c
          SERIALCONSOLE.println();
     344:	1fffe210 	.word	0x1fffe210
     348:	1fff9168 	.word	0x1fff9168
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
     354:	e000e400 	.word	0xe000e400
	startup_late_hook();
	__libc_init_array();

	main();
	
	while (1) ;
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
     374:	645c22f7 	.word	0x645c22f7
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff9168 	.word	0x1fff9168
     42c:	1fff9168 	.word	0x1fff9168
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff9168 	.word	0x1fff9168
     454:	0001586c 	.word	0x0001586c

00000458 <BMSModule::BMSModule()>:
BMSModule::BMSModule()
     458:	b510      	push	{r4, lr}
    cellVolt[i] = 0.0f;
     45a:	2240      	movs	r2, #64	; 0x40
     45c:	2100      	movs	r1, #0
BMSModule::BMSModule()
     45e:	4604      	mov	r4, r0
    cellVolt[i] = 0.0f;
     460:	f00d fc7a 	bl	dd58 <memset>
    lowestCellVolt[i] = 5.0f;
     464:	4916      	ldr	r1, [pc, #88]	; (4c0 <BMSModule::BMSModule()+0x68>)
     466:	f104 033c 	add.w	r3, r4, #60	; 0x3c
     46a:	f104 027c 	add.w	r2, r4, #124	; 0x7c
     46e:	f843 1f04 	str.w	r1, [r3, #4]!
  for (int i = 0; i < 16; i++)
     472:	429a      	cmp	r2, r3
     474:	d1fb      	bne.n	46e <BMSModule::BMSModule()+0x16>
    highestCellVolt[i] = 0.0f;
     476:	2240      	movs	r2, #64	; 0x40
     478:	2100      	movs	r1, #0
     47a:	f104 0080 	add.w	r0, r4, #128	; 0x80
     47e:	f00d fc6b 	bl	dd58 <memset>
  exists = false;
     482:	2200      	movs	r2, #0
  moduleVolt = 0.0f;
     484:	2300      	movs	r3, #0
  lowestTemperature = 200.0f;
     486:	490f      	ldr	r1, [pc, #60]	; (4c4 <BMSModule::BMSModule()+0x6c>)
  highestTemperature = -100.0f;
     488:	480f      	ldr	r0, [pc, #60]	; (4c8 <BMSModule::BMSModule()+0x70>)
  moduleAddress = 0;
     48a:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
  highestTemperature = -100.0f;
     48e:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  moduleVolt = 0.0f;
     492:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  temperatures[0] = 0.0f;
     496:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  temperatures[1] = 0.0f;
     49a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  temperatures[2] = 0.0f;
     49e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  temperatures[3] = 0.0f;
     4a2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  lowestTemperature = 200.0f;
     4a6:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
  lowestModuleVolt = 200.0f;
     4aa:	f8c4 10dc 	str.w	r1, [r4, #220]	; 0xdc
  highestModuleVolt = 0.0f;
     4ae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  exists = false;
     4b2:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
  error = 0;
     4b6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
}
     4ba:	4620      	mov	r0, r4
     4bc:	bd10      	pop	{r4, pc}
     4be:	bf00      	nop
     4c0:	40a00000 	.word	0x40a00000
     4c4:	43480000 	.word	0x43480000
     4c8:	c2c80000 	.word	0xc2c80000

000004cc <BMSModule::decodetemp(CAN_message_t&, int)>:

void BMSModule::decodetemp(CAN_message_t &msg, int CSC)
{
     4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  for (int g = 0; g < 4; g++)
  {
    temperatures[g] = msg.buf[g] - 40;
    if (temperatures[g] > -40)
     4d0:	f8df 9040 	ldr.w	r9, [pc, #64]	; 514 <BMSModule::decodetemp(CAN_message_t&, int)+0x48>
{
     4d4:	4607      	mov	r7, r0
  for (int g = 0; g < 4; g++)
     4d6:	1dce      	adds	r6, r1, #7
     4d8:	f100 05c4 	add.w	r5, r0, #196	; 0xc4
     4dc:	f100 08d4 	add.w	r8, r0, #212	; 0xd4
    temperatures[g] = msg.buf[g] - 40;
     4e0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
     4e4:	3828      	subs	r0, #40	; 0x28
     4e6:	f00c fb61 	bl	cbac <__aeabi_i2f>
    if (temperatures[g] > -40)
     4ea:	4649      	mov	r1, r9
    temperatures[g] = msg.buf[g] - 40;
     4ec:	f845 0b04 	str.w	r0, [r5], #4
     4f0:	4604      	mov	r4, r0
    if (temperatures[g] > -40)
     4f2:	f00c fd6b 	bl	cfcc <__aeabi_fcmpgt>
     4f6:	b140      	cbz	r0, 50a <BMSModule::decodetemp(CAN_message_t&, int)+0x3e>
    {
      temperatures[g] = temperatures[g] + TempOff;
     4f8:	f9b7 0114 	ldrsh.w	r0, [r7, #276]	; 0x114
     4fc:	f00c fb56 	bl	cbac <__aeabi_i2f>
     500:	4621      	mov	r1, r4
     502:	f00c fa9f 	bl	ca44 <__addsf3>
     506:	f845 0c04 	str.w	r0, [r5, #-4]
  for (int g = 0; g < 4; g++)
     50a:	4545      	cmp	r5, r8
     50c:	d1e8      	bne.n	4e0 <BMSModule::decodetemp(CAN_message_t&, int)+0x14>
    }
  }
}
     50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     512:	bf00      	nop
     514:	c2200000 	.word	0xc2200000

00000518 <BMSModule::decodecan(int, CAN_message_t&, bool)>:

void BMSModule::decodecan(int Id, CAN_message_t &msg, bool Ign)
{
     518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     51c:	4680      	mov	r8, r0
     51e:	4614      	mov	r4, r2
  switch (Id)
     520:	2906      	cmp	r1, #6
     522:	d81a      	bhi.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
     524:	e8df f011 	tbh	[pc, r1, lsl #1]
     528:	00530007 	.word	0x00530007
     52c:	00af0081 	.word	0x00af0081
     530:	010f00df 	.word	0x010f00df
     534:	003f      	.short	0x003f
  {
    case 0:
      error = msg.buf[0] + (msg.buf[1] << 8) + (msg.buf[2] << 16) + (msg.buf[3] << 24);
     536:	7a61      	ldrb	r1, [r4, #9]
     538:	7a23      	ldrb	r3, [r4, #8]
     53a:	7aa2      	ldrb	r2, [r4, #10]
     53c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
     540:	eb03 4302 	add.w	r3, r3, r2, lsl #16
     544:	7ae2      	ldrb	r2, [r4, #11]
     546:	eb03 6302 	add.w	r3, r3, r2, lsl #24
     54a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
      balstat = (msg.buf[5]<< 8) + msg.buf[4];
     54e:	7b62      	ldrb	r2, [r4, #13]
     550:	7b23      	ldrb	r3, [r4, #12]
     552:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     556:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
      break;
  }
  for (int i = 0; i < 16; i++)
  {
    if (lowestCellVolt[i] > cellVolt[i] && cellVolt[i] >= IgnoreCell) lowestCellVolt[i] = cellVolt[i];
    if (highestCellVolt[i] < cellVolt[i] && cellVolt[i] > 5.0) highestCellVolt[i] = cellVolt[i];
     55a:	4f93      	ldr	r7, [pc, #588]	; (7a8 <BMSModule::decodecan(int, CAN_message_t&, bool)+0x290>)
     55c:	f1a8 0404 	sub.w	r4, r8, #4
     560:	f108 063c 	add.w	r6, r8, #60	; 0x3c
    if (lowestCellVolt[i] > cellVolt[i] && cellVolt[i] >= IgnoreCell) lowestCellVolt[i] = cellVolt[i];
     564:	6c60      	ldr	r0, [r4, #68]	; 0x44
     566:	f854 5f04 	ldr.w	r5, [r4, #4]!
     56a:	4629      	mov	r1, r5
     56c:	f00c fd2e 	bl	cfcc <__aeabi_fcmpgt>
     570:	4603      	mov	r3, r0
     572:	4628      	mov	r0, r5
     574:	b12b      	cbz	r3, 582 <BMSModule::decodecan(int, CAN_message_t&, bool)+0x6a>
     576:	f8d8 10e4 	ldr.w	r1, [r8, #228]	; 0xe4
     57a:	f00c fd1d 	bl	cfb8 <__aeabi_fcmpge>
     57e:	b100      	cbz	r0, 582 <BMSModule::decodecan(int, CAN_message_t&, bool)+0x6a>
     580:	6425      	str	r5, [r4, #64]	; 0x40
    if (highestCellVolt[i] < cellVolt[i] && cellVolt[i] > 5.0) highestCellVolt[i] = cellVolt[i];
     582:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
     586:	4628      	mov	r0, r5
     588:	f00c fd20 	bl	cfcc <__aeabi_fcmpgt>
     58c:	4603      	mov	r3, r0
     58e:	4639      	mov	r1, r7
     590:	4628      	mov	r0, r5
     592:	b123      	cbz	r3, 59e <BMSModule::decodecan(int, CAN_message_t&, bool)+0x86>
     594:	f00c fd1a 	bl	cfcc <__aeabi_fcmpgt>
     598:	b108      	cbz	r0, 59e <BMSModule::decodecan(int, CAN_message_t&, bool)+0x86>
     59a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  for (int i = 0; i < 16; i++)
     59e:	42b4      	cmp	r4, r6
     5a0:	d1e0      	bne.n	564 <BMSModule::decodecan(int, CAN_message_t&, bool)+0x4c>
  }
}
     5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (balstat == 0 && Ign == 0)
     5a6:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
     5aa:	2a00      	cmp	r2, #0
     5ac:	d1d5      	bne.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
     5ae:	2b00      	cmp	r3, #0
     5b0:	d1d3      	bne.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
        cellVolt[15] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     5b2:	7a63      	ldrb	r3, [r4, #9]
     5b4:	7a20      	ldrb	r0, [r4, #8]
     5b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     5ba:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     5be:	f00c faf5 	bl	cbac <__aeabi_i2f>
     5c2:	497a      	ldr	r1, [pc, #488]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     5c4:	f00c fbfa 	bl	cdbc <__aeabi_fdiv>
     5c8:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
     5cc:	e7c5      	b.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
      if (balstat == 0 && Ign == 0)
     5ce:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
     5d2:	2a00      	cmp	r2, #0
     5d4:	d1c1      	bne.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
     5d6:	2b00      	cmp	r3, #0
     5d8:	d1bf      	bne.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
        cellVolt[0] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     5da:	7a63      	ldrb	r3, [r4, #9]
     5dc:	7a20      	ldrb	r0, [r4, #8]
     5de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     5e2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     5e6:	f00c fae1 	bl	cbac <__aeabi_i2f>
     5ea:	4970      	ldr	r1, [pc, #448]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     5ec:	f00c fbe6 	bl	cdbc <__aeabi_fdiv>
     5f0:	f8c8 0000 	str.w	r0, [r8]
        cellVolt[1] = float(msg.buf[2] + (msg.buf[3] & 0x3F) * 256) / 1000;
     5f4:	7ae3      	ldrb	r3, [r4, #11]
     5f6:	7aa0      	ldrb	r0, [r4, #10]
     5f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     5fc:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     600:	f00c fad4 	bl	cbac <__aeabi_i2f>
     604:	4969      	ldr	r1, [pc, #420]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     606:	f00c fbd9 	bl	cdbc <__aeabi_fdiv>
     60a:	f8c8 0004 	str.w	r0, [r8, #4]
        cellVolt[2] = float(msg.buf[4] + (msg.buf[5] & 0x3F) * 256) / 1000;
     60e:	7b63      	ldrb	r3, [r4, #13]
     610:	7b20      	ldrb	r0, [r4, #12]
     612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     616:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     61a:	f00c fac7 	bl	cbac <__aeabi_i2f>
     61e:	4963      	ldr	r1, [pc, #396]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     620:	f00c fbcc 	bl	cdbc <__aeabi_fdiv>
     624:	f8c8 0008 	str.w	r0, [r8, #8]
     628:	e797      	b.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
      if (balstat == 0 && Ign == 0)
     62a:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
     62e:	2a00      	cmp	r2, #0
     630:	d193      	bne.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
     632:	2b00      	cmp	r3, #0
     634:	d191      	bne.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
        cellVolt[3] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     636:	7a63      	ldrb	r3, [r4, #9]
     638:	7a20      	ldrb	r0, [r4, #8]
     63a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     63e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     642:	f00c fab3 	bl	cbac <__aeabi_i2f>
     646:	4959      	ldr	r1, [pc, #356]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     648:	f00c fbb8 	bl	cdbc <__aeabi_fdiv>
     64c:	f8c8 000c 	str.w	r0, [r8, #12]
        cellVolt[4] = float(msg.buf[2] + (msg.buf[3] & 0x3F) * 256) / 1000;
     650:	7ae3      	ldrb	r3, [r4, #11]
     652:	7aa0      	ldrb	r0, [r4, #10]
     654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     658:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     65c:	f00c faa6 	bl	cbac <__aeabi_i2f>
     660:	4952      	ldr	r1, [pc, #328]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     662:	f00c fbab 	bl	cdbc <__aeabi_fdiv>
     666:	f8c8 0010 	str.w	r0, [r8, #16]
        cellVolt[5] = float(msg.buf[4] + (msg.buf[5] & 0x3F) * 256) / 1000;
     66a:	7b63      	ldrb	r3, [r4, #13]
     66c:	7b20      	ldrb	r0, [r4, #12]
     66e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     672:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     676:	f00c fa99 	bl	cbac <__aeabi_i2f>
     67a:	494c      	ldr	r1, [pc, #304]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     67c:	f00c fb9e 	bl	cdbc <__aeabi_fdiv>
     680:	f8c8 0014 	str.w	r0, [r8, #20]
     684:	e769      	b.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
      if (balstat == 0 && Ign == 0)
     686:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
     68a:	2a00      	cmp	r2, #0
     68c:	f47f af65 	bne.w	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
     690:	2b00      	cmp	r3, #0
     692:	f47f af62 	bne.w	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
        cellVolt[6] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     696:	7a63      	ldrb	r3, [r4, #9]
     698:	7a20      	ldrb	r0, [r4, #8]
     69a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     69e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     6a2:	f00c fa83 	bl	cbac <__aeabi_i2f>
     6a6:	4941      	ldr	r1, [pc, #260]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     6a8:	f00c fb88 	bl	cdbc <__aeabi_fdiv>
     6ac:	f8c8 0018 	str.w	r0, [r8, #24]
        cellVolt[7] = float(msg.buf[2] + (msg.buf[3] & 0x3F) * 256) / 1000;
     6b0:	7ae3      	ldrb	r3, [r4, #11]
     6b2:	7aa0      	ldrb	r0, [r4, #10]
     6b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     6b8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     6bc:	f00c fa76 	bl	cbac <__aeabi_i2f>
     6c0:	493a      	ldr	r1, [pc, #232]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     6c2:	f00c fb7b 	bl	cdbc <__aeabi_fdiv>
     6c6:	f8c8 001c 	str.w	r0, [r8, #28]
        cellVolt[8] = float(msg.buf[4] + (msg.buf[5] & 0x3F) * 256) / 1000;
     6ca:	7b63      	ldrb	r3, [r4, #13]
     6cc:	7b20      	ldrb	r0, [r4, #12]
     6ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     6d2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     6d6:	f00c fa69 	bl	cbac <__aeabi_i2f>
     6da:	4934      	ldr	r1, [pc, #208]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     6dc:	f00c fb6e 	bl	cdbc <__aeabi_fdiv>
     6e0:	f8c8 0020 	str.w	r0, [r8, #32]
     6e4:	e739      	b.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
      if (balstat == 0 && Ign == 0)
     6e6:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
     6ea:	2a00      	cmp	r2, #0
     6ec:	f47f af35 	bne.w	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
     6f0:	2b00      	cmp	r3, #0
     6f2:	f47f af32 	bne.w	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
        cellVolt[9] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     6f6:	7a63      	ldrb	r3, [r4, #9]
     6f8:	7a20      	ldrb	r0, [r4, #8]
     6fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     6fe:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     702:	f00c fa53 	bl	cbac <__aeabi_i2f>
     706:	4929      	ldr	r1, [pc, #164]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     708:	f00c fb58 	bl	cdbc <__aeabi_fdiv>
     70c:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
        cellVolt[10] = float(msg.buf[2] + (msg.buf[3] & 0x3F) * 256) / 1000;
     710:	7ae3      	ldrb	r3, [r4, #11]
     712:	7aa0      	ldrb	r0, [r4, #10]
     714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     718:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     71c:	f00c fa46 	bl	cbac <__aeabi_i2f>
     720:	4922      	ldr	r1, [pc, #136]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     722:	f00c fb4b 	bl	cdbc <__aeabi_fdiv>
     726:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
        cellVolt[11] = float(msg.buf[4] + (msg.buf[5] & 0x3F) * 256) / 1000;
     72a:	7b63      	ldrb	r3, [r4, #13]
     72c:	7b20      	ldrb	r0, [r4, #12]
     72e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     732:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     736:	f00c fa39 	bl	cbac <__aeabi_i2f>
     73a:	491c      	ldr	r1, [pc, #112]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     73c:	f00c fb3e 	bl	cdbc <__aeabi_fdiv>
     740:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
     744:	e709      	b.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
      if (balstat == 0 && Ign == 0)
     746:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
     74a:	2a00      	cmp	r2, #0
     74c:	f47f af05 	bne.w	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
     750:	2b00      	cmp	r3, #0
     752:	f47f af02 	bne.w	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
        cellVolt[12] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     756:	7a63      	ldrb	r3, [r4, #9]
     758:	7a20      	ldrb	r0, [r4, #8]
     75a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     75e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     762:	f00c fa23 	bl	cbac <__aeabi_i2f>
     766:	4911      	ldr	r1, [pc, #68]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     768:	f00c fb28 	bl	cdbc <__aeabi_fdiv>
     76c:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
        cellVolt[13] = float(msg.buf[2] + (msg.buf[3] & 0x3F) * 256) / 1000;
     770:	7ae3      	ldrb	r3, [r4, #11]
     772:	7aa0      	ldrb	r0, [r4, #10]
     774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     778:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     77c:	f00c fa16 	bl	cbac <__aeabi_i2f>
     780:	490a      	ldr	r1, [pc, #40]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     782:	f00c fb1b 	bl	cdbc <__aeabi_fdiv>
     786:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
        cellVolt[14] = float(msg.buf[4] + (msg.buf[5] & 0x3F) * 256) / 1000;
     78a:	7b63      	ldrb	r3, [r4, #13]
     78c:	7b20      	ldrb	r0, [r4, #12]
     78e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
     792:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     796:	f00c fa09 	bl	cbac <__aeabi_i2f>
     79a:	4904      	ldr	r1, [pc, #16]	; (7ac <BMSModule::decodecan(int, CAN_message_t&, bool)+0x294>)
     79c:	f00c fb0e 	bl	cdbc <__aeabi_fdiv>
     7a0:	f8c8 0038 	str.w	r0, [r8, #56]	; 0x38
     7a4:	e6d9      	b.n	55a <BMSModule::decodecan(int, CAN_message_t&, bool)+0x42>
     7a6:	bf00      	nop
     7a8:	40a00000 	.word	0x40a00000
     7ac:	447a0000 	.word	0x447a0000

000007b0 <BMSModule::getFaults()>:
*/

uint8_t BMSModule::getFaults()
{
  return faults;
}
     7b0:	f890 00f0 	ldrb.w	r0, [r0, #240]	; 0xf0
     7b4:	4770      	bx	lr
     7b6:	bf00      	nop

000007b8 <BMSModule::getAlerts()>:

uint8_t BMSModule::getAlerts()
{
  return alerts;
}
     7b8:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
     7bc:	4770      	bx	lr
     7be:	bf00      	nop

000007c0 <BMSModule::getCOVCells()>:

uint8_t BMSModule::getCOVCells()
{
  return COVFaults;
}
     7c0:	f890 00f4 	ldrb.w	r0, [r0, #244]	; 0xf4
     7c4:	4770      	bx	lr
     7c6:	bf00      	nop

000007c8 <BMSModule::getCUVCells()>:

uint8_t BMSModule::getCUVCells()
{
  return CUVFaults;
}
     7c8:	f890 00f8 	ldrb.w	r0, [r0, #248]	; 0xf8
     7cc:	4770      	bx	lr
     7ce:	bf00      	nop

000007d0 <BMSModule::getCellVoltage(int)>:
  Tset = 35 + (5 * (buff[9] >> 4));
  } */

float BMSModule::getCellVoltage(int cell)
{
  if (cell < 0 || cell > 16) return 0.0f;
     7d0:	2910      	cmp	r1, #16
  return cellVolt[cell];
     7d2:	bf94      	ite	ls
     7d4:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (cell < 0 || cell > 16) return 0.0f;
     7d8:	2000      	movhi	r0, #0
}
     7da:	4770      	bx	lr

000007dc <BMSModule::getLowCellV()>:

float BMSModule::getLowCellV()
{
     7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float lowVal = 10.0f;
     7e0:	4e0c      	ldr	r6, [pc, #48]	; (814 <BMSModule::getLowCellV()+0x38>)
{
     7e2:	4680      	mov	r8, r0
     7e4:	1f05      	subs	r5, r0, #4
     7e6:	f100 072c 	add.w	r7, r0, #44	; 0x2c
  for (int i = 0; i < 12; i++) if (cellVolt[i] < lowVal && cellVolt[i] > IgnoreCell) lowVal = cellVolt[i];
     7ea:	f855 4f04 	ldr.w	r4, [r5, #4]!
     7ee:	4631      	mov	r1, r6
     7f0:	4620      	mov	r0, r4
     7f2:	f00c fbcd 	bl	cf90 <__aeabi_fcmplt>
     7f6:	4603      	mov	r3, r0
     7f8:	4620      	mov	r0, r4
     7fa:	b12b      	cbz	r3, 808 <BMSModule::getLowCellV()+0x2c>
     7fc:	f8d8 10e4 	ldr.w	r1, [r8, #228]	; 0xe4
     800:	f00c fbe4 	bl	cfcc <__aeabi_fcmpgt>
     804:	b100      	cbz	r0, 808 <BMSModule::getLowCellV()+0x2c>
     806:	4626      	mov	r6, r4
     808:	42bd      	cmp	r5, r7
     80a:	d1ee      	bne.n	7ea <BMSModule::getLowCellV()+0xe>
  return lowVal;
}
     80c:	4630      	mov	r0, r6
     80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     812:	bf00      	nop
     814:	41200000 	.word	0x41200000

00000818 <BMSModule::getHighCellV()>:

float BMSModule::getHighCellV()
{
     818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float hiVal = 0.0f;
  for (int i = 0; i < 16; i++)
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     81c:	f8d0 80e4 	ldr.w	r8, [r0, #228]	; 0xe4
     820:	4f0f      	ldr	r7, [pc, #60]	; (860 <BMSModule::getHighCellV()+0x48>)
  float hiVal = 0.0f;
     822:	f04f 0900 	mov.w	r9, #0
     826:	1f05      	subs	r5, r0, #4
     828:	f100 063c 	add.w	r6, r0, #60	; 0x3c
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     82c:	f855 4f04 	ldr.w	r4, [r5, #4]!
     830:	4641      	mov	r1, r8
     832:	4620      	mov	r0, r4
     834:	f00c fbca 	bl	cfcc <__aeabi_fcmpgt>
     838:	4603      	mov	r3, r0
     83a:	4639      	mov	r1, r7
     83c:	4620      	mov	r0, r4
     83e:	b14b      	cbz	r3, 854 <BMSModule::getHighCellV()+0x3c>
     840:	f00c fba6 	bl	cf90 <__aeabi_fcmplt>
     844:	4603      	mov	r3, r0
    {
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     846:	4649      	mov	r1, r9
     848:	4620      	mov	r0, r4
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     84a:	b11b      	cbz	r3, 854 <BMSModule::getHighCellV()+0x3c>
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     84c:	f00c fbbe 	bl	cfcc <__aeabi_fcmpgt>
     850:	b100      	cbz	r0, 854 <BMSModule::getHighCellV()+0x3c>
     852:	46a1      	mov	r9, r4
  for (int i = 0; i < 16; i++)
     854:	42b5      	cmp	r5, r6
     856:	d1e9      	bne.n	82c <BMSModule::getHighCellV()+0x14>
    }
  return hiVal;
}
     858:	4648      	mov	r0, r9
     85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     85e:	bf00      	nop
     860:	40a00000 	.word	0x40a00000

00000864 <BMSModule::getAverageV()>:

float BMSModule::getAverageV()
{
     864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int x = 0;
  float avgVal = 0.0f;
  for (int i = 0; i < 16; i++)
  {
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     868:	f8d0 90e4 	ldr.w	r9, [r0, #228]	; 0xe4
     86c:	4f14      	ldr	r7, [pc, #80]	; (8c0 <BMSModule::getAverageV()+0x5c>)
{
     86e:	4683      	mov	fp, r0
  float avgVal = 0.0f;
     870:	2600      	movs	r6, #0
     872:	1f05      	subs	r5, r0, #4
     874:	f100 083c 	add.w	r8, r0, #60	; 0x3c
  int x = 0;
     878:	f04f 0a00 	mov.w	sl, #0
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     87c:	f855 4f04 	ldr.w	r4, [r5, #4]!
     880:	4649      	mov	r1, r9
     882:	4620      	mov	r0, r4
     884:	f00c fba2 	bl	cfcc <__aeabi_fcmpgt>
     888:	4603      	mov	r3, r0
     88a:	4639      	mov	r1, r7
     88c:	4620      	mov	r0, r4
     88e:	b14b      	cbz	r3, 8a4 <BMSModule::getAverageV()+0x40>
     890:	f00c fb7e 	bl	cf90 <__aeabi_fcmplt>
     894:	b130      	cbz	r0, 8a4 <BMSModule::getAverageV()+0x40>
    {
      x++;
      avgVal += cellVolt[i];
     896:	4630      	mov	r0, r6
     898:	4621      	mov	r1, r4
     89a:	f00c f8d3 	bl	ca44 <__addsf3>
      x++;
     89e:	f10a 0a01 	add.w	sl, sl, #1
      avgVal += cellVolt[i];
     8a2:	4606      	mov	r6, r0
  for (int i = 0; i < 16; i++)
     8a4:	4545      	cmp	r5, r8
     8a6:	d1e9      	bne.n	87c <BMSModule::getAverageV()+0x18>
    }
  }

  scells = x;
     8a8:	f8cb a104 	str.w	sl, [fp, #260]	; 0x104
  avgVal /= x;
     8ac:	4650      	mov	r0, sl
     8ae:	f00c f97d 	bl	cbac <__aeabi_i2f>
     8b2:	4601      	mov	r1, r0
     8b4:	4630      	mov	r0, r6
     8b6:	f00c fa81 	bl	cdbc <__aeabi_fdiv>
  return avgVal;
}
     8ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8be:	bf00      	nop
     8c0:	40a00000 	.word	0x40a00000

000008c4 <BMSModule::getscells()>:

int BMSModule::getscells()
{
  return scells;
}
     8c4:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop

000008cc <BMSModule::getbalstat()>:

int BMSModule::getbalstat()
{
  return balstat;
}
     8cc:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
     8d0:	4770      	bx	lr
     8d2:	bf00      	nop

000008d4 <BMSModule::getLowTemp()>:
{
  return lowestTemperature;
}

float BMSModule::getLowTemp()
{
     8d4:	b538      	push	{r3, r4, r5, lr}
      templow = temperatures[g];
    }
    }
    return (templow);
  */
  if (temperatures[0] < temperatures[1] )
     8d6:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
     8da:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
     8de:	4629      	mov	r1, r5
     8e0:	4620      	mov	r0, r4
     8e2:	f00c fb55 	bl	cf90 <__aeabi_fcmplt>
     8e6:	b900      	cbnz	r0, 8ea <BMSModule::getLowTemp()+0x16>
  {
    return (temperatures[0]);
  }
  else
  {
    return (temperatures[1]);
     8e8:	462c      	mov	r4, r5
  }
}
     8ea:	4620      	mov	r0, r4
     8ec:	bd38      	pop	{r3, r4, r5, pc}
     8ee:	bf00      	nop

000008f0 <BMSModule::getHighTemp()>:

float BMSModule::getHighTemp()
{
     8f0:	b538      	push	{r3, r4, r5, lr}
    }
    }
    return (temphigh);
  */

  if (temperatures[0] > temperatures[1])
     8f2:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
     8f6:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
     8fa:	4629      	mov	r1, r5
     8fc:	4620      	mov	r0, r4
     8fe:	f00c fb65 	bl	cfcc <__aeabi_fcmpgt>
     902:	b900      	cbnz	r0, 906 <BMSModule::getHighTemp()+0x16>
  {
    return (temperatures[0]);
  }
  else
  {
    return (temperatures[1]);
     904:	462c      	mov	r4, r5
  }
}
     906:	4620      	mov	r0, r4
     908:	bd38      	pop	{r3, r4, r5, pc}
     90a:	bf00      	nop

0000090c <BMSModule::getAvgTemp()>:

float BMSModule::getAvgTemp()
{
     90c:	b570      	push	{r4, r5, r6, lr}
  float avgtemp = 0;
  int num = 0;
  for (int g = 0; g < 2; g++)
  {
    if (temperatures[g] > -40)
     90e:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
     912:	4912      	ldr	r1, [pc, #72]	; (95c <BMSModule::getAvgTemp()+0x50>)
{
     914:	4605      	mov	r5, r0
    if (temperatures[g] > -40)
     916:	4630      	mov	r0, r6
     918:	f00c fb58 	bl	cfcc <__aeabi_fcmpgt>
     91c:	b1d0      	cbz	r0, 954 <BMSModule::getAvgTemp()+0x48>
    {
      avgtemp = avgtemp + temperatures[g];
     91e:	4630      	mov	r0, r6
     920:	2100      	movs	r1, #0
     922:	f00c f88f 	bl	ca44 <__addsf3>
      num++;
     926:	2401      	movs	r4, #1
      avgtemp = avgtemp + temperatures[g];
     928:	4606      	mov	r6, r0
    if (temperatures[g] > -40)
     92a:	f8d5 50c8 	ldr.w	r5, [r5, #200]	; 0xc8
     92e:	490b      	ldr	r1, [pc, #44]	; (95c <BMSModule::getAvgTemp()+0x50>)
     930:	4628      	mov	r0, r5
     932:	f00c fb4b 	bl	cfcc <__aeabi_fcmpgt>
     936:	b128      	cbz	r0, 944 <BMSModule::getAvgTemp()+0x38>
      avgtemp = avgtemp + temperatures[g];
     938:	4630      	mov	r0, r6
     93a:	4629      	mov	r1, r5
     93c:	f00c f882 	bl	ca44 <__addsf3>
      num++;
     940:	3401      	adds	r4, #1
      avgtemp = avgtemp + temperatures[g];
     942:	4606      	mov	r6, r0
    }
  }
  avgtemp = avgtemp / (float)(num);
     944:	4620      	mov	r0, r4
     946:	f00c f931 	bl	cbac <__aeabi_i2f>
     94a:	4601      	mov	r1, r0
     94c:	4630      	mov	r0, r6
     94e:	f00c fa35 	bl	cdbc <__aeabi_fdiv>
  return (avgtemp);
}
     952:	bd70      	pop	{r4, r5, r6, pc}
     954:	4604      	mov	r4, r0
  float avgtemp = 0;
     956:	2600      	movs	r6, #0
     958:	e7e7      	b.n	92a <BMSModule::getAvgTemp()+0x1e>
     95a:	bf00      	nop
     95c:	c2200000 	.word	0xc2200000

00000960 <BMSModule::getModuleVoltage()>:

float BMSModule::getModuleVoltage()
{
     960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  moduleVolt = 0;
     964:	2600      	movs	r6, #0
  for (int I; I < 16; I++)
  {
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     966:	f8d0 90e4 	ldr.w	r9, [r0, #228]	; 0xe4
     96a:	4f10      	ldr	r7, [pc, #64]	; (9ac <BMSModule::getModuleVoltage()+0x4c>)
  moduleVolt = 0;
     96c:	f8c0 60c0 	str.w	r6, [r0, #192]	; 0xc0
{
     970:	4682      	mov	sl, r0
     972:	1f05      	subs	r5, r0, #4
     974:	f100 083c 	add.w	r8, r0, #60	; 0x3c
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     978:	f855 4f04 	ldr.w	r4, [r5, #4]!
     97c:	4649      	mov	r1, r9
     97e:	4620      	mov	r0, r4
     980:	f00c fb24 	bl	cfcc <__aeabi_fcmpgt>
     984:	4603      	mov	r3, r0
     986:	4639      	mov	r1, r7
     988:	4620      	mov	r0, r4
     98a:	b153      	cbz	r3, 9a2 <BMSModule::getModuleVoltage()+0x42>
     98c:	f00c fb00 	bl	cf90 <__aeabi_fcmplt>
     990:	4603      	mov	r3, r0
    {
      moduleVolt = moduleVolt + cellVolt[I];
     992:	4621      	mov	r1, r4
     994:	4630      	mov	r0, r6
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     996:	b123      	cbz	r3, 9a2 <BMSModule::getModuleVoltage()+0x42>
      moduleVolt = moduleVolt + cellVolt[I];
     998:	f00c f854 	bl	ca44 <__addsf3>
     99c:	4606      	mov	r6, r0
     99e:	f8ca 00c0 	str.w	r0, [sl, #192]	; 0xc0
  for (int I; I < 16; I++)
     9a2:	4545      	cmp	r5, r8
     9a4:	d1e8      	bne.n	978 <BMSModule::getModuleVoltage()+0x18>
    }
  }
  return moduleVolt;
}
     9a6:	4630      	mov	r0, r6
     9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9ac:	40a00000 	.word	0x40a00000

000009b0 <BMSModule::getTemperature(int)>:

float BMSModule::getTemperature(int temp)
{
  if (temp < 0 || temp > 3) return 0.0f;
     9b0:	2903      	cmp	r1, #3
  return temperatures[temp];
     9b2:	bf9a      	itte	ls
     9b4:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
     9b8:	f8d0 00c4 	ldrls.w	r0, [r0, #196]	; 0xc4
  if (temp < 0 || temp > 3) return 0.0f;
     9bc:	2000      	movhi	r0, #0
}
     9be:	4770      	bx	lr

000009c0 <BMSModule::setAddress(int)>:

void BMSModule::setAddress(int newAddr)
{
  if (newAddr < 0 || newAddr > MAX_MODULE_ADDR) return;
     9c0:	293e      	cmp	r1, #62	; 0x3e
  moduleAddress = newAddr;
     9c2:	bf98      	it	ls
     9c4:	f880 1100 	strbls.w	r1, [r0, #256]	; 0x100
}
     9c8:	4770      	bx	lr
     9ca:	bf00      	nop

000009cc <BMSModule::getError()>:
}

uint32_t BMSModule::getError()
{
  return error;
}
     9cc:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
     9d0:	4770      	bx	lr
     9d2:	bf00      	nop

000009d4 <BMSModule::isExisting()>:

bool BMSModule::isExisting()
{
  return exists;
}
     9d4:	f890 00e8 	ldrb.w	r0, [r0, #232]	; 0xe8
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <BMSModule::isReset()>:

bool BMSModule::isReset()
{
  return reset;
}
     9dc:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
     9e0:	4770      	bx	lr
     9e2:	bf00      	nop

000009e4 <BMSModule::settempsensor(int)>:


void BMSModule::settempsensor(int tempsensor)
{
  sensor = tempsensor;
     9e4:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
}
     9e8:	4770      	bx	lr
     9ea:	bf00      	nop

000009ec <BMSModule::setExists(bool)>:

void BMSModule::setExists(bool ex)
{
  exists = ex;
     9ec:	f880 10e8 	strb.w	r1, [r0, #232]	; 0xe8
}
     9f0:	4770      	bx	lr
     9f2:	bf00      	nop

000009f4 <BMSModule::setReset(bool)>:

void BMSModule::setReset(bool ex)
{
  reset = ex;
     9f4:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
}
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <BMSModule::setIgnoreCell(float)>:

void BMSModule::setIgnoreCell(float Ignore)
{
  IgnoreCell = Ignore;
     9fc:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
    Serial.println();
    Serial.println();
    Serial.println(Ignore);
    Serial.println();
  */
}
     a00:	4770      	bx	lr
     a02:	bf00      	nop

00000a04 <BMSModule::setTempOff(short)>:

void  BMSModule::setTempOff( int16_t tempoff)
{
  TempOff = tempoff;
     a04:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
}
     a08:	4770      	bx	lr
     a0a:	bf00      	nop

00000a0c <BMSModuleManager::BMSModuleManager()>:
BMSModuleManager::BMSModuleManager()
     a0c:	b570      	push	{r4, r5, r6, lr}
     a0e:	f500 458a 	add.w	r5, r0, #17664	; 0x4500
     a12:	4606      	mov	r6, r0
     a14:	f100 042c 	add.w	r4, r0, #44	; 0x2c
     a18:	3514      	adds	r5, #20
     a1a:	4620      	mov	r0, r4
     a1c:	f504 748c 	add.w	r4, r4, #280	; 0x118
     a20:	f7ff fd1a 	bl	458 <BMSModule::BMSModule()>
     a24:	42ac      	cmp	r4, r5
     a26:	d1f8      	bne.n	a1a <BMSModuleManager::BMSModuleManager()+0xe>
     a28:	f506 75a2 	add.w	r5, r6, #324	; 0x144
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     a2c:	2401      	movs	r4, #1
    modules[i].setExists(false);
     a2e:	4628      	mov	r0, r5
     a30:	2100      	movs	r1, #0
     a32:	f7ff ffdb 	bl	9ec <BMSModule::setExists(bool)>
    modules[i].setAddress(i);
     a36:	4621      	mov	r1, r4
     a38:	4628      	mov	r0, r5
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     a3a:	3401      	adds	r4, #1
    modules[i].setAddress(i);
     a3c:	f7ff ffc0 	bl	9c0 <BMSModule::setAddress(int)>
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     a40:	2c3f      	cmp	r4, #63	; 0x3f
     a42:	f505 758c 	add.w	r5, r5, #280	; 0x118
     a46:	d1f2      	bne.n	a2e <BMSModuleManager::BMSModuleManager()+0x22>
  lowestPackVolt = 1000.0f;
     a48:	4907      	ldr	r1, [pc, #28]	; (a68 <BMSModuleManager::BMSModuleManager()+0x5c>)
     a4a:	6171      	str	r1, [r6, #20]
  isFaulted = false;
     a4c:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
  highestPackVolt = 0.0f;
     a50:	2200      	movs	r2, #0
     a52:	61b2      	str	r2, [r6, #24]
  lowestPackTemp = 200.0f;
     a54:	4805      	ldr	r0, [pc, #20]	; (a6c <BMSModuleManager::BMSModuleManager()+0x60>)
  highestPackTemp = -100.0f;
     a56:	4906      	ldr	r1, [pc, #24]	; (a70 <BMSModuleManager::BMSModuleManager()+0x64>)
  lowestPackTemp = 200.0f;
     a58:	61f0      	str	r0, [r6, #28]
  isFaulted = false;
     a5a:	2200      	movs	r2, #0
  highestPackTemp = -100.0f;
     a5c:	6231      	str	r1, [r6, #32]
}
     a5e:	4630      	mov	r0, r6
  isFaulted = false;
     a60:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
}
     a64:	bd70      	pop	{r4, r5, r6, pc}
     a66:	bf00      	nop
     a68:	447a0000 	.word	0x447a0000
     a6c:	43480000 	.word	0x43480000
     a70:	c2c80000 	.word	0xc2c80000

00000a74 <BMSModuleManager::checkcomms()>:
{
     a74:	b570      	push	{r4, r5, r6, lr}
     a76:	f500 468a 	add.w	r6, r0, #17664	; 0x4500
     a7a:	f500 74a2 	add.w	r4, r0, #324	; 0x144
     a7e:	3614      	adds	r6, #20
  int g = 0;
     a80:	2500      	movs	r5, #0
     a82:	e008      	b.n	a96 <BMSModuleManager::checkcomms()+0x22>
      g = 1;
     a84:	2501      	movs	r5, #1
    modules[y].setReset(false);
     a86:	4620      	mov	r0, r4
     a88:	2100      	movs	r1, #0
  for (int y = 1; y < 63; y++)
     a8a:	f504 748c 	add.w	r4, r4, #280	; 0x118
    modules[y].setReset(false);
     a8e:	f7ff ffb1 	bl	9f4 <BMSModule::setReset(bool)>
  for (int y = 1; y < 63; y++)
     a92:	42b4      	cmp	r4, r6
     a94:	d00b      	beq.n	aae <BMSModuleManager::checkcomms()+0x3a>
    if (modules[y].isExisting())
     a96:	4620      	mov	r0, r4
     a98:	f7ff ff9c 	bl	9d4 <BMSModule::isExisting()>
     a9c:	4603      	mov	r3, r0
      if (modules[y].isReset())
     a9e:	4620      	mov	r0, r4
    if (modules[y].isExisting())
     aa0:	2b00      	cmp	r3, #0
     aa2:	d0f0      	beq.n	a86 <BMSModuleManager::checkcomms()+0x12>
      if (modules[y].isReset())
     aa4:	f7ff ff9a 	bl	9dc <BMSModule::isReset()>
     aa8:	2800      	cmp	r0, #0
     aaa:	d1eb      	bne.n	a84 <BMSModuleManager::checkcomms()+0x10>
}
     aac:	bd70      	pop	{r4, r5, r6, pc}
  if ( g == 0)
     aae:	4628      	mov	r0, r5
}
     ab0:	bd70      	pop	{r4, r5, r6, pc}
     ab2:	bf00      	nop

00000ab4 <BMSModuleManager::checkstatus()>:
{
     ab4:	b570      	push	{r4, r5, r6, lr}
     ab6:	f500 56b0 	add.w	r6, r0, #5632	; 0x1600
     aba:	f500 74a2 	add.w	r4, r0, #324	; 0x144
     abe:	360c      	adds	r6, #12
     ac0:	e003      	b.n	aca <BMSModuleManager::checkstatus()+0x16>
  for (int y = 1; y < 20; y++)
     ac2:	f504 748c 	add.w	r4, r4, #280	; 0x118
     ac6:	42b4      	cmp	r4, r6
     ac8:	d00c      	beq.n	ae4 <BMSModuleManager::checkstatus()+0x30>
    if (modules[y].isExisting())
     aca:	4620      	mov	r0, r4
     acc:	f7ff ff82 	bl	9d4 <BMSModule::isExisting()>
     ad0:	4605      	mov	r5, r0
     ad2:	2800      	cmp	r0, #0
     ad4:	d0f5      	beq.n	ac2 <BMSModuleManager::checkstatus()+0xe>
      if (modules[y].getError() & 0x2000 >= 0)
     ad6:	4620      	mov	r0, r4
     ad8:	f7ff ff78 	bl	9cc <BMSModule::getError()>
     adc:	07c3      	lsls	r3, r0, #31
     ade:	d5f0      	bpl.n	ac2 <BMSModuleManager::checkstatus()+0xe>
}
     ae0:	4628      	mov	r0, r5
     ae2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
     ae4:	2500      	movs	r5, #0
}
     ae6:	4628      	mov	r0, r5
     ae8:	bd70      	pop	{r4, r5, r6, pc}
     aea:	bf00      	nop

00000aec <BMSModuleManager::seriescells()>:
{
     aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  spack = 0;
     aee:	f500 4780 	add.w	r7, r0, #16384	; 0x4000
     af2:	2300      	movs	r3, #0
     af4:	f500 468a 	add.w	r6, r0, #17664	; 0x4500
     af8:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
  for (int y = 1; y < 63; y++)
     afc:	f500 74a2 	add.w	r4, r0, #324	; 0x144
     b00:	3614      	adds	r6, #20
     b02:	e003      	b.n	b0c <BMSModuleManager::seriescells()+0x20>
     b04:	f504 748c 	add.w	r4, r4, #280	; 0x118
     b08:	42b4      	cmp	r4, r6
     b0a:	d010      	beq.n	b2e <BMSModuleManager::seriescells()+0x42>
    if (modules[y].isExisting())
     b0c:	4620      	mov	r0, r4
     b0e:	f7ff ff61 	bl	9d4 <BMSModule::isExisting()>
     b12:	2800      	cmp	r0, #0
     b14:	d0f6      	beq.n	b04 <BMSModuleManager::seriescells()+0x18>
      spack = spack + modules[y].getscells();
     b16:	4620      	mov	r0, r4
     b18:	f8d7 5520 	ldr.w	r5, [r7, #1312]	; 0x520
     b1c:	f7ff fed2 	bl	8c4 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
     b20:	f504 748c 	add.w	r4, r4, #280	; 0x118
      spack = spack + modules[y].getscells();
     b24:	4405      	add	r5, r0
  for (int y = 1; y < 63; y++)
     b26:	42b4      	cmp	r4, r6
      spack = spack + modules[y].getscells();
     b28:	f8c7 5520 	str.w	r5, [r7, #1312]	; 0x520
  for (int y = 1; y < 63; y++)
     b2c:	d1ee      	bne.n	b0c <BMSModuleManager::seriescells()+0x20>
}
     b2e:	f8d7 0520 	ldr.w	r0, [r7, #1312]	; 0x520
     b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000b34 <BMSModuleManager::getNumModules()>:
  return numFoundModules;
     b34:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
}
     b38:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
     b3c:	4770      	bx	lr
     b3e:	bf00      	nop

00000b40 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>:
{
     b40:	b538      	push	{r3, r4, r5, lr}
  int CMU = (msg.id & 0x00F) + 1;
     b42:	680c      	ldr	r4, [r1, #0]
{
     b44:	4615      	mov	r5, r2
  int CMU = (msg.id & 0x00F) + 1;
     b46:	f004 0c0f 	and.w	ip, r4, #15
  modules[CMU].decodetemp(msg, CSC);
     b4a:	461a      	mov	r2, r3
     b4c:	f44f 738c 	mov.w	r3, #280	; 0x118
     b50:	fb0c 3303 	mla	r3, ip, r3, r3
     b54:	332c      	adds	r3, #44	; 0x2c
     b56:	4418      	add	r0, r3
  int CMU = (msg.id & 0x00F) + 1;
     b58:	f10c 0401 	add.w	r4, ip, #1
  modules[CMU].decodetemp(msg, CSC);
     b5c:	f7ff fcb6 	bl	4cc <BMSModule::decodetemp(CAN_message_t&, int)>
  if (debug == 1 && CMU > 0)
     b60:	2d01      	cmp	r5, #1
     b62:	d000      	beq.n	b66 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x26>
}
     b64:	bd38      	pop	{r3, r4, r5, pc}
    Serial.println();
     b66:	4806      	ldr	r0, [pc, #24]	; (b80 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x40>)
     b68:	f008 fc50 	bl	940c <Print::println()>
     b6c:	4621      	mov	r1, r4
     b6e:	4804      	ldr	r0, [pc, #16]	; (b80 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x40>)
     b70:	f008 fc44 	bl	93fc <Print::print(long)>
}
     b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     b78:	4802      	ldr	r0, [pc, #8]	; (b84 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x44>)
     b7a:	210b      	movs	r1, #11
     b7c:	f00b b98a 	b.w	be94 <usb_serial_write>
     b80:	1fff89fc 	.word	0x1fff89fc
     b84:	0001398c 	.word	0x0001398c

00000b88 <BMSModuleManager::decodecan(CAN_message_t&, int)>:
{
     b88:	b5f0      	push	{r4, r5, r6, r7, lr}
  int Id = (msg.id & 0x0F0);
     b8a:	680c      	ldr	r4, [r1, #0]
     b8c:	f004 05f0 	and.w	r5, r4, #240	; 0xf0
  switch (Id)
     b90:	2d40      	cmp	r5, #64	; 0x40
  int CMU = (msg.id & 0x00F) + 1;
     b92:	f004 040f 	and.w	r4, r4, #15
{
     b96:	b083      	sub	sp, #12
     b98:	460e      	mov	r6, r1
     b9a:	4607      	mov	r7, r0
  int CMU = (msg.id & 0x00F) + 1;
     b9c:	f104 0401 	add.w	r4, r4, #1
  switch (Id)
     ba0:	d04a      	beq.n	c38 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xb0>
     ba2:	dc25      	bgt.n	bf0 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x68>
     ba4:	2d20      	cmp	r5, #32
     ba6:	d04c      	beq.n	c42 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xba>
     ba8:	2d30      	cmp	r5, #48	; 0x30
     baa:	d11b      	bne.n	be4 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x5c>
  if (CMU < 14 && Id < 7)
     bac:	2c0d      	cmp	r4, #13
      Id = 2;
     bae:	f04f 0502 	mov.w	r5, #2
  if (CMU < 14 && Id < 7)
     bb2:	d801      	bhi.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x30>
    if (debug == 1)
     bb4:	2a01      	cmp	r2, #1
     bb6:	d028      	beq.n	c0a <BMSModuleManager::decodecan(CAN_message_t&, int)+0x82>
  modules[CMU].setExists(true);
     bb8:	f44f 738c 	mov.w	r3, #280	; 0x118
     bbc:	fb03 7404 	mla	r4, r3, r4, r7
     bc0:	342c      	adds	r4, #44	; 0x2c
     bc2:	4620      	mov	r0, r4
     bc4:	2101      	movs	r1, #1
     bc6:	f7ff ff11 	bl	9ec <BMSModule::setExists(bool)>
  modules[CMU].setReset(true);
     bca:	4620      	mov	r0, r4
     bcc:	2101      	movs	r1, #1
     bce:	f7ff ff11 	bl	9f4 <BMSModule::setReset(bool)>
  modules[CMU].decodecan(Id, msg, BalIgnore);
     bd2:	783b      	ldrb	r3, [r7, #0]
     bd4:	4632      	mov	r2, r6
     bd6:	4629      	mov	r1, r5
     bd8:	4620      	mov	r0, r4
}
     bda:	b003      	add	sp, #12
     bdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  modules[CMU].decodecan(Id, msg, BalIgnore);
     be0:	f7ff bc9a 	b.w	518 <BMSModule::decodecan(int, CAN_message_t&, bool)>
  switch (Id)
     be4:	bb7d      	cbnz	r5, c46 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xbe>
  if (CMU < 14 && Id < 7)
     be6:	2c0d      	cmp	r4, #13
     be8:	d8e6      	bhi.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x30>
    if (debug == 1)
     bea:	2a01      	cmp	r2, #1
     bec:	d1e4      	bne.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x30>
     bee:	e00c      	b.n	c0a <BMSModuleManager::decodecan(CAN_message_t&, int)+0x82>
  switch (Id)
     bf0:	2d60      	cmp	r5, #96	; 0x60
     bf2:	d01c      	beq.n	c2e <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa6>
     bf4:	2d70      	cmp	r5, #112	; 0x70
     bf6:	d101      	bne.n	bfc <BMSModuleManager::decodecan(CAN_message_t&, int)+0x74>
      Id = 6;
     bf8:	2506      	movs	r5, #6
     bfa:	e7f4      	b.n	be6 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x5e>
  switch (Id)
     bfc:	2d50      	cmp	r5, #80	; 0x50
     bfe:	d1db      	bne.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x30>
  if (CMU < 14 && Id < 7)
     c00:	2c0d      	cmp	r4, #13
      Id = 4;
     c02:	f04f 0504 	mov.w	r5, #4
  if (CMU < 14 && Id < 7)
     c06:	d9d5      	bls.n	bb4 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2c>
     c08:	e7d6      	b.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x30>
     c0a:	4621      	mov	r1, r4
     c0c:	4810      	ldr	r0, [pc, #64]	; (c50 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xc8>)
     c0e:	9201      	str	r2, [sp, #4]
     c10:	f008 fbf4 	bl	93fc <Print::print(long)>
     c14:	9a01      	ldr	r2, [sp, #4]
     c16:	480f      	ldr	r0, [pc, #60]	; (c54 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xcc>)
     c18:	4611      	mov	r1, r2
     c1a:	f00b f93b 	bl	be94 <usb_serial_write>
     c1e:	4629      	mov	r1, r5
     c20:	480b      	ldr	r0, [pc, #44]	; (c50 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xc8>)
     c22:	f008 fbeb 	bl	93fc <Print::print(long)>
      Serial.println();
     c26:	480a      	ldr	r0, [pc, #40]	; (c50 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xc8>)
     c28:	f008 fbf0 	bl	940c <Print::println()>
     c2c:	e7c4      	b.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x30>
  if (CMU < 14 && Id < 7)
     c2e:	2c0d      	cmp	r4, #13
      Id = 5;
     c30:	f04f 0505 	mov.w	r5, #5
  if (CMU < 14 && Id < 7)
     c34:	d9be      	bls.n	bb4 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2c>
     c36:	e7bf      	b.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x30>
     c38:	2c0d      	cmp	r4, #13
      Id = 3;
     c3a:	f04f 0503 	mov.w	r5, #3
  if (CMU < 14 && Id < 7)
     c3e:	d9b9      	bls.n	bb4 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2c>
     c40:	e7ba      	b.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x30>
      Id = 1;
     c42:	2501      	movs	r5, #1
     c44:	e7cf      	b.n	be6 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x5e>
  if (CMU < 14 && Id < 7)
     c46:	2c0d      	cmp	r4, #13
     c48:	d8b6      	bhi.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x30>
     c4a:	2d06      	cmp	r5, #6
     c4c:	ddb2      	ble.n	bb4 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2c>
     c4e:	e7b3      	b.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x30>
     c50:	1fff89fc 	.word	0x1fff89fc
     c54:	00013998 	.word	0x00013998

00000c58 <BMSModuleManager::getAllVoltTemp()>:
{
     c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  packVolt = 0.0f;
     c5c:	2300      	movs	r3, #0
      Logger::debug("");
     c5e:	f8df 9164 	ldr.w	r9, [pc, #356]	; dc4 <BMSModuleManager::getAllVoltTemp()+0x16c>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
     c62:	f8df 8164 	ldr.w	r8, [pc, #356]	; dc8 <BMSModuleManager::getAllVoltTemp()+0x170>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
     c66:	4f59      	ldr	r7, [pc, #356]	; (dcc <BMSModuleManager::getAllVoltTemp()+0x174>)
  packVolt = 0.0f;
     c68:	6043      	str	r3, [r0, #4]
{
     c6a:	b083      	sub	sp, #12
     c6c:	4606      	mov	r6, r0
     c6e:	f500 74a2 	add.w	r4, r0, #324	; 0x144
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c72:	2501      	movs	r5, #1
     c74:	e004      	b.n	c80 <BMSModuleManager::getAllVoltTemp()+0x28>
     c76:	3501      	adds	r5, #1
     c78:	2d3f      	cmp	r5, #63	; 0x3f
     c7a:	f504 748c 	add.w	r4, r4, #280	; 0x118
     c7e:	d068      	beq.n	d52 <BMSModuleManager::getAllVoltTemp()+0xfa>
    if (modules[x].isExisting())
     c80:	4620      	mov	r0, r4
     c82:	f7ff fea7 	bl	9d4 <BMSModule::isExisting()>
     c86:	2800      	cmp	r0, #0
     c88:	d0f5      	beq.n	c76 <BMSModuleManager::getAllVoltTemp()+0x1e>
      Logger::debug("");
     c8a:	4648      	mov	r0, r9
     c8c:	f006 ff62 	bl	7b54 <Logger::debug(char*, ...)>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
     c90:	4629      	mov	r1, r5
     c92:	4640      	mov	r0, r8
     c94:	f006 ff5e 	bl	7b54 <Logger::debug(char*, ...)>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
     c98:	4620      	mov	r0, r4
     c9a:	f7ff fe61 	bl	960 <BMSModule::getModuleVoltage()>
     c9e:	f00b fdb5 	bl	c80c <__aeabi_f2d>
     ca2:	4602      	mov	r2, r0
     ca4:	460b      	mov	r3, r1
     ca6:	4638      	mov	r0, r7
     ca8:	f006 ff54 	bl	7b54 <Logger::debug(char*, ...)>
      Logger::debug("Lowest Cell V: %f     Highest Cell V: %f", modules[x].getLowCellV(), modules[x].getHighCellV());
     cac:	4620      	mov	r0, r4
     cae:	f7ff fd95 	bl	7dc <BMSModule::getLowCellV()>
     cb2:	4682      	mov	sl, r0
     cb4:	4620      	mov	r0, r4
     cb6:	f7ff fdaf 	bl	818 <BMSModule::getHighCellV()>
     cba:	4683      	mov	fp, r0
     cbc:	4650      	mov	r0, sl
     cbe:	f00b fda5 	bl	c80c <__aeabi_f2d>
     cc2:	4602      	mov	r2, r0
     cc4:	4658      	mov	r0, fp
     cc6:	4692      	mov	sl, r2
     cc8:	468b      	mov	fp, r1
     cca:	f00b fd9f 	bl	c80c <__aeabi_f2d>
     cce:	465b      	mov	r3, fp
     cd0:	4652      	mov	r2, sl
     cd2:	e9cd 0100 	strd	r0, r1, [sp]
     cd6:	483e      	ldr	r0, [pc, #248]	; (dd0 <BMSModuleManager::getAllVoltTemp()+0x178>)
     cd8:	f006 ff3c 	bl	7b54 <Logger::debug(char*, ...)>
      Logger::debug("Temp1: %f       Temp2: %f", modules[x].getTemperature(0), modules[x].getTemperature(1));
     cdc:	2100      	movs	r1, #0
     cde:	4620      	mov	r0, r4
     ce0:	f7ff fe66 	bl	9b0 <BMSModule::getTemperature(int)>
     ce4:	2101      	movs	r1, #1
     ce6:	4682      	mov	sl, r0
     ce8:	4620      	mov	r0, r4
     cea:	f7ff fe61 	bl	9b0 <BMSModule::getTemperature(int)>
     cee:	4683      	mov	fp, r0
     cf0:	4650      	mov	r0, sl
     cf2:	f00b fd8b 	bl	c80c <__aeabi_f2d>
     cf6:	4602      	mov	r2, r0
     cf8:	4658      	mov	r0, fp
     cfa:	4692      	mov	sl, r2
     cfc:	468b      	mov	fp, r1
     cfe:	f00b fd85 	bl	c80c <__aeabi_f2d>
     d02:	4652      	mov	r2, sl
     d04:	e9cd 0100 	strd	r0, r1, [sp]
     d08:	465b      	mov	r3, fp
     d0a:	4832      	ldr	r0, [pc, #200]	; (dd4 <BMSModuleManager::getAllVoltTemp()+0x17c>)
     d0c:	f006 ff22 	bl	7b54 <Logger::debug(char*, ...)>
      packVolt += modules[x].getModuleVoltage();
     d10:	4620      	mov	r0, r4
     d12:	f7ff fe25 	bl	960 <BMSModule::getModuleVoltage()>
     d16:	4601      	mov	r1, r0
     d18:	6870      	ldr	r0, [r6, #4]
     d1a:	f00b fe93 	bl	ca44 <__addsf3>
     d1e:	6070      	str	r0, [r6, #4]
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
     d20:	4620      	mov	r0, r4
     d22:	f7ff fdd7 	bl	8d4 <BMSModule::getLowTemp()>
     d26:	69f1      	ldr	r1, [r6, #28]
     d28:	f00c f932 	bl	cf90 <__aeabi_fcmplt>
     d2c:	2800      	cmp	r0, #0
     d2e:	d133      	bne.n	d98 <BMSModuleManager::getAllVoltTemp()+0x140>
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
     d30:	4620      	mov	r0, r4
     d32:	f7ff fddd 	bl	8f0 <BMSModule::getHighTemp()>
     d36:	6a31      	ldr	r1, [r6, #32]
     d38:	f00c f948 	bl	cfcc <__aeabi_fcmpgt>
     d3c:	2800      	cmp	r0, #0
     d3e:	d09a      	beq.n	c76 <BMSModuleManager::getAllVoltTemp()+0x1e>
     d40:	4620      	mov	r0, r4
     d42:	f7ff fdd5 	bl	8f0 <BMSModule::getHighTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d46:	3501      	adds	r5, #1
     d48:	2d3f      	cmp	r5, #63	; 0x3f
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
     d4a:	6230      	str	r0, [r6, #32]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d4c:	f504 748c 	add.w	r4, r4, #280	; 0x118
     d50:	d196      	bne.n	c80 <BMSModuleManager::getAllVoltTemp()+0x28>
  packVolt = packVolt / Pstring;
     d52:	68b0      	ldr	r0, [r6, #8]
     d54:	f00b ff2a 	bl	cbac <__aeabi_i2f>
     d58:	4601      	mov	r1, r0
     d5a:	6870      	ldr	r0, [r6, #4]
     d5c:	f00c f82e 	bl	cdbc <__aeabi_fdiv>
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
     d60:	69b1      	ldr	r1, [r6, #24]
  packVolt = packVolt / Pstring;
     d62:	6070      	str	r0, [r6, #4]
     d64:	4604      	mov	r4, r0
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
     d66:	f00c f931 	bl	cfcc <__aeabi_fcmpgt>
     d6a:	b100      	cbz	r0, d6e <BMSModuleManager::getAllVoltTemp()+0x116>
     d6c:	61b4      	str	r4, [r6, #24]
  if (packVolt < lowestPackVolt) lowestPackVolt = packVolt;
     d6e:	6971      	ldr	r1, [r6, #20]
     d70:	4620      	mov	r0, r4
     d72:	f00c f90d 	bl	cf90 <__aeabi_fcmplt>
     d76:	b100      	cbz	r0, d7a <BMSModuleManager::getAllVoltTemp()+0x122>
     d78:	6174      	str	r4, [r6, #20]
  if (digitalRead(11) == LOW) {
     d7a:	200b      	movs	r0, #11
     d7c:	f009 fa3e 	bl	a1fc <digitalRead>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
     d80:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
     d84:	f896 351c 	ldrb.w	r3, [r6, #1308]	; 0x51c
  if (digitalRead(11) == LOW) {
     d88:	b958      	cbnz	r0, da2 <BMSModuleManager::getAllVoltTemp()+0x14a>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
     d8a:	b1b3      	cbz	r3, dba <BMSModuleManager::getAllVoltTemp()+0x162>
    isFaulted = true;
     d8c:	2301      	movs	r3, #1
     d8e:	f886 351c 	strb.w	r3, [r6, #1308]	; 0x51c
}
     d92:	b003      	add	sp, #12
     d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
     d98:	4620      	mov	r0, r4
     d9a:	f7ff fd9b 	bl	8d4 <BMSModule::getLowTemp()>
     d9e:	61f0      	str	r0, [r6, #28]
     da0:	e7c6      	b.n	d30 <BMSModuleManager::getAllVoltTemp()+0xd8>
    if (isFaulted) Logger::info("All modules have exited a faulted state");
     da2:	b92b      	cbnz	r3, db0 <BMSModuleManager::getAllVoltTemp()+0x158>
    isFaulted = false;
     da4:	2300      	movs	r3, #0
    isFaulted = true;
     da6:	f886 351c 	strb.w	r3, [r6, #1308]	; 0x51c
}
     daa:	b003      	add	sp, #12
     dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (isFaulted) Logger::info("All modules have exited a faulted state");
     db0:	4809      	ldr	r0, [pc, #36]	; (dd8 <BMSModuleManager::getAllVoltTemp()+0x180>)
     db2:	f006 fee1 	bl	7b78 <Logger::info(char*, ...)>
    isFaulted = false;
     db6:	2300      	movs	r3, #0
     db8:	e7f5      	b.n	da6 <BMSModuleManager::getAllVoltTemp()+0x14e>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
     dba:	4808      	ldr	r0, [pc, #32]	; (ddc <BMSModuleManager::getAllVoltTemp()+0x184>)
     dbc:	f006 fef0 	bl	7ba0 <Logger::error(char*, ...)>
     dc0:	e7e4      	b.n	d8c <BMSModuleManager::getAllVoltTemp()+0x134>
     dc2:	bf00      	nop
     dc4:	00014068 	.word	0x00014068
     dc8:	0001399c 	.word	0x0001399c
     dcc:	000139d8 	.word	0x000139d8
     dd0:	000139ec 	.word	0x000139ec
     dd4:	00013a18 	.word	0x00013a18
     dd8:	00013a6c 	.word	0x00013a6c
     ddc:	00013a34 	.word	0x00013a34

00000de0 <BMSModuleManager::getLowCellVolt()>:
{
     de0:	b570      	push	{r4, r5, r6, lr}
  LowCellVolt = 5.0;
     de2:	4b12      	ldr	r3, [pc, #72]	; (e2c <BMSModuleManager::getLowCellVolt()+0x4c>)
     de4:	60c3      	str	r3, [r0, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     de6:	f500 458a 	add.w	r5, r0, #17664	; 0x4500
{
     dea:	4606      	mov	r6, r0
     dec:	f500 74a2 	add.w	r4, r0, #324	; 0x144
     df0:	3514      	adds	r5, #20
     df2:	e003      	b.n	dfc <BMSModuleManager::getLowCellVolt()+0x1c>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     df4:	f504 748c 	add.w	r4, r4, #280	; 0x118
     df8:	42ac      	cmp	r4, r5
     dfa:	d014      	beq.n	e26 <BMSModuleManager::getLowCellVolt()+0x46>
    if (modules[x].isExisting())
     dfc:	4620      	mov	r0, r4
     dfe:	f7ff fde9 	bl	9d4 <BMSModule::isExisting()>
     e02:	2800      	cmp	r0, #0
     e04:	d0f6      	beq.n	df4 <BMSModuleManager::getLowCellVolt()+0x14>
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
     e06:	4620      	mov	r0, r4
     e08:	f7ff fce8 	bl	7dc <BMSModule::getLowCellV()>
     e0c:	68f1      	ldr	r1, [r6, #12]
     e0e:	f00c f8bf 	bl	cf90 <__aeabi_fcmplt>
     e12:	2800      	cmp	r0, #0
     e14:	d0ee      	beq.n	df4 <BMSModuleManager::getLowCellVolt()+0x14>
     e16:	4620      	mov	r0, r4
     e18:	f7ff fce0 	bl	7dc <BMSModule::getLowCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e1c:	f504 748c 	add.w	r4, r4, #280	; 0x118
     e20:	42ac      	cmp	r4, r5
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
     e22:	60f0      	str	r0, [r6, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e24:	d1ea      	bne.n	dfc <BMSModuleManager::getLowCellVolt()+0x1c>
}
     e26:	68f0      	ldr	r0, [r6, #12]
     e28:	bd70      	pop	{r4, r5, r6, pc}
     e2a:	bf00      	nop
     e2c:	40a00000 	.word	0x40a00000

00000e30 <BMSModuleManager::getHighCellVolt()>:
{
     e30:	b570      	push	{r4, r5, r6, lr}
  HighCellVolt = 0.0;
     e32:	2300      	movs	r3, #0
     e34:	f500 458a 	add.w	r5, r0, #17664	; 0x4500
{
     e38:	4606      	mov	r6, r0
  HighCellVolt = 0.0;
     e3a:	6103      	str	r3, [r0, #16]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e3c:	f500 74a2 	add.w	r4, r0, #324	; 0x144
     e40:	3514      	adds	r5, #20
     e42:	e003      	b.n	e4c <BMSModuleManager::getHighCellVolt()+0x1c>
     e44:	f504 748c 	add.w	r4, r4, #280	; 0x118
     e48:	42ac      	cmp	r4, r5
     e4a:	d014      	beq.n	e76 <BMSModuleManager::getHighCellVolt()+0x46>
    if (modules[x].isExisting())
     e4c:	4620      	mov	r0, r4
     e4e:	f7ff fdc1 	bl	9d4 <BMSModule::isExisting()>
     e52:	2800      	cmp	r0, #0
     e54:	d0f6      	beq.n	e44 <BMSModuleManager::getHighCellVolt()+0x14>
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
     e56:	4620      	mov	r0, r4
     e58:	f7ff fcde 	bl	818 <BMSModule::getHighCellV()>
     e5c:	6931      	ldr	r1, [r6, #16]
     e5e:	f00c f8b5 	bl	cfcc <__aeabi_fcmpgt>
     e62:	2800      	cmp	r0, #0
     e64:	d0ee      	beq.n	e44 <BMSModuleManager::getHighCellVolt()+0x14>
     e66:	4620      	mov	r0, r4
     e68:	f7ff fcd6 	bl	818 <BMSModule::getHighCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e6c:	f504 748c 	add.w	r4, r4, #280	; 0x118
     e70:	42ac      	cmp	r4, r5
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
     e72:	6130      	str	r0, [r6, #16]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e74:	d1ea      	bne.n	e4c <BMSModuleManager::getHighCellVolt()+0x1c>
}
     e76:	6930      	ldr	r0, [r6, #16]
     e78:	bd70      	pop	{r4, r5, r6, pc}
     e7a:	bf00      	nop

00000e7c <BMSModuleManager::getPackVoltage()>:
}
     e7c:	6840      	ldr	r0, [r0, #4]
     e7e:	4770      	bx	lr

00000e80 <BMSModuleManager::setBalIgnore(bool)>:
  BalIgnore = BalIgn;
     e80:	7001      	strb	r1, [r0, #0]
}
     e82:	4770      	bx	lr

00000e84 <BMSModuleManager::setPstrings(int)>:
  Pstring = Pstrings;
     e84:	6081      	str	r1, [r0, #8]
}
     e86:	4770      	bx	lr

00000e88 <BMSModuleManager::setSensors(int, float, int)>:
{
     e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e8c:	f500 458a 	add.w	r5, r0, #17664	; 0x4500
     e90:	4688      	mov	r8, r1
     e92:	4617      	mov	r7, r2
     e94:	f500 74a2 	add.w	r4, r0, #324	; 0x144
     e98:	3514      	adds	r5, #20
      modules[x].setTempOff(tempoff);
     e9a:	b21e      	sxth	r6, r3
     e9c:	e003      	b.n	ea6 <BMSModuleManager::setSensors(int, float, int)+0x1e>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e9e:	f504 748c 	add.w	r4, r4, #280	; 0x118
     ea2:	42ac      	cmp	r4, r5
     ea4:	d014      	beq.n	ed0 <BMSModuleManager::setSensors(int, float, int)+0x48>
    if (modules[x].isExisting())
     ea6:	4620      	mov	r0, r4
     ea8:	f7ff fd94 	bl	9d4 <BMSModule::isExisting()>
     eac:	2800      	cmp	r0, #0
     eae:	d0f6      	beq.n	e9e <BMSModuleManager::setSensors(int, float, int)+0x16>
      modules[x].settempsensor(sensor);
     eb0:	4620      	mov	r0, r4
     eb2:	4641      	mov	r1, r8
     eb4:	f7ff fd96 	bl	9e4 <BMSModule::settempsensor(int)>
      modules[x].setIgnoreCell(Ignore);
     eb8:	4620      	mov	r0, r4
     eba:	4639      	mov	r1, r7
     ebc:	f7ff fd9e 	bl	9fc <BMSModule::setIgnoreCell(float)>
      modules[x].setTempOff(tempoff);
     ec0:	4620      	mov	r0, r4
     ec2:	4631      	mov	r1, r6
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ec4:	f504 748c 	add.w	r4, r4, #280	; 0x118
      modules[x].setTempOff(tempoff);
     ec8:	f7ff fd9c 	bl	a04 <BMSModule::setTempOff(short)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ecc:	42ac      	cmp	r4, r5
     ece:	d1ea      	bne.n	ea6 <BMSModuleManager::setSensors(int, float, int)+0x1e>
}
     ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000ed4 <BMSModuleManager::getAvgTemperature()>:
{
     ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  numFoundModules = 0;
     ed8:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
  lowTemp = 999.0f;
     edc:	4a2e      	ldr	r2, [pc, #184]	; (f98 <BMSModuleManager::getAvgTemperature()+0xc4>)
  highTemp = -999.0f;
     ede:	4b2f      	ldr	r3, [pc, #188]	; (f9c <BMSModuleManager::getAvgTemperature()+0xc8>)
  lowTemp = 999.0f;
     ee0:	6282      	str	r2, [r0, #40]	; 0x28
  numFoundModules = 0;
     ee2:	2700      	movs	r7, #0
     ee4:	f500 458a 	add.w	r5, r0, #17664	; 0x4500
  highTemp = -999.0f;
     ee8:	6243      	str	r3, [r0, #36]	; 0x24
      if (modules[x].getAvgTemp() > -70)
     eea:	f8df a0b4 	ldr.w	sl, [pc, #180]	; fa0 <BMSModuleManager::getAvgTemperature()+0xcc>
  numFoundModules = 0;
     eee:	f8c6 7518 	str.w	r7, [r6, #1304]	; 0x518
{
     ef2:	4681      	mov	r9, r0
     ef4:	f500 74a2 	add.w	r4, r0, #324	; 0x144
     ef8:	3514      	adds	r5, #20
  float avg = 0.0f;
     efa:	f04f 0800 	mov.w	r8, #0
     efe:	e003      	b.n	f08 <BMSModuleManager::getAvgTemperature()+0x34>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     f00:	f504 748c 	add.w	r4, r4, #280	; 0x118
     f04:	42a5      	cmp	r5, r4
     f06:	d016      	beq.n	f36 <BMSModuleManager::getAvgTemperature()+0x62>
    if (modules[x].isExisting())
     f08:	4620      	mov	r0, r4
     f0a:	f7ff fd63 	bl	9d4 <BMSModule::isExisting()>
     f0e:	2800      	cmp	r0, #0
     f10:	d0f6      	beq.n	f00 <BMSModuleManager::getAvgTemperature()+0x2c>
      numFoundModules++;
     f12:	f8d6 3518 	ldr.w	r3, [r6, #1304]	; 0x518
     f16:	3301      	adds	r3, #1
      if (modules[x].getAvgTemp() > -70)
     f18:	4620      	mov	r0, r4
      numFoundModules++;
     f1a:	f8c6 3518 	str.w	r3, [r6, #1304]	; 0x518
      if (modules[x].getAvgTemp() > -70)
     f1e:	f7ff fcf5 	bl	90c <BMSModule::getAvgTemp()>
     f22:	4651      	mov	r1, sl
     f24:	f00c f852 	bl	cfcc <__aeabi_fcmpgt>
     f28:	b980      	cbnz	r0, f4c <BMSModuleManager::getAvgTemperature()+0x78>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     f2a:	f504 748c 	add.w	r4, r4, #280	; 0x118
     f2e:	42a5      	cmp	r5, r4
        y++;
     f30:	f107 0701 	add.w	r7, r7, #1
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     f34:	d1e8      	bne.n	f08 <BMSModuleManager::getAvgTemperature()+0x34>
  avg = avg / (float)(numFoundModules - y);
     f36:	f8d6 0518 	ldr.w	r0, [r6, #1304]	; 0x518
     f3a:	1bc0      	subs	r0, r0, r7
     f3c:	f00b fe36 	bl	cbac <__aeabi_i2f>
     f40:	4601      	mov	r1, r0
     f42:	4640      	mov	r0, r8
     f44:	f00b ff3a 	bl	cdbc <__aeabi_fdiv>
}
     f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        avg += modules[x].getAvgTemp();
     f4c:	4620      	mov	r0, r4
     f4e:	f7ff fcdd 	bl	90c <BMSModule::getAvgTemp()>
     f52:	4601      	mov	r1, r0
     f54:	4640      	mov	r0, r8
     f56:	f00b fd75 	bl	ca44 <__addsf3>
     f5a:	4680      	mov	r8, r0
        if (modules[x].getHighTemp() > highTemp)
     f5c:	4620      	mov	r0, r4
     f5e:	f7ff fcc7 	bl	8f0 <BMSModule::getHighTemp()>
     f62:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
     f66:	f00c f831 	bl	cfcc <__aeabi_fcmpgt>
     f6a:	b970      	cbnz	r0, f8a <BMSModuleManager::getAvgTemperature()+0xb6>
        if (modules[x].getLowTemp() < lowTemp)
     f6c:	4620      	mov	r0, r4
     f6e:	f7ff fcb1 	bl	8d4 <BMSModule::getLowTemp()>
     f72:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
     f76:	f00c f80b 	bl	cf90 <__aeabi_fcmplt>
     f7a:	2800      	cmp	r0, #0
     f7c:	d0c0      	beq.n	f00 <BMSModuleManager::getAvgTemperature()+0x2c>
          lowTemp = modules[x].getLowTemp();
     f7e:	4620      	mov	r0, r4
     f80:	f7ff fca8 	bl	8d4 <BMSModule::getLowTemp()>
     f84:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
     f88:	e7ba      	b.n	f00 <BMSModuleManager::getAvgTemperature()+0x2c>
          highTemp = modules[x].getHighTemp();
     f8a:	4620      	mov	r0, r4
     f8c:	f7ff fcb0 	bl	8f0 <BMSModule::getHighTemp()>
     f90:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
     f94:	e7ea      	b.n	f6c <BMSModuleManager::getAvgTemperature()+0x98>
     f96:	bf00      	nop
     f98:	4479c000 	.word	0x4479c000
     f9c:	c479c000 	.word	0xc479c000
     fa0:	c28c0000 	.word	0xc28c0000

00000fa4 <BMSModuleManager::getHighTemperature()>:
}
     fa4:	6a40      	ldr	r0, [r0, #36]	; 0x24
     fa6:	4770      	bx	lr

00000fa8 <BMSModuleManager::getLowTemperature()>:
}
     fa8:	6a80      	ldr	r0, [r0, #40]	; 0x28
     faa:	4770      	bx	lr

00000fac <BMSModuleManager::getAvgCellVolt()>:
{
     fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fae:	f500 468a 	add.w	r6, r0, #17664	; 0x4500
     fb2:	4607      	mov	r7, r0
  float avg = 0.0f;
     fb4:	2500      	movs	r5, #0
     fb6:	f500 74a2 	add.w	r4, r0, #324	; 0x144
     fba:	3614      	adds	r6, #20
     fbc:	e003      	b.n	fc6 <BMSModuleManager::getAvgCellVolt()+0x1a>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     fbe:	f504 748c 	add.w	r4, r4, #280	; 0x118
     fc2:	42b4      	cmp	r4, r6
     fc4:	d010      	beq.n	fe8 <BMSModuleManager::getAvgCellVolt()+0x3c>
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
     fc6:	4620      	mov	r0, r4
     fc8:	f7ff fd04 	bl	9d4 <BMSModule::isExisting()>
     fcc:	2800      	cmp	r0, #0
     fce:	d0f6      	beq.n	fbe <BMSModuleManager::getAvgCellVolt()+0x12>
     fd0:	4620      	mov	r0, r4
     fd2:	f7ff fc47 	bl	864 <BMSModule::getAverageV()>
     fd6:	4601      	mov	r1, r0
     fd8:	4628      	mov	r0, r5
     fda:	f00b fd33 	bl	ca44 <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     fde:	f504 748c 	add.w	r4, r4, #280	; 0x118
     fe2:	42b4      	cmp	r4, r6
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
     fe4:	4605      	mov	r5, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     fe6:	d1ee      	bne.n	fc6 <BMSModuleManager::getAvgCellVolt()+0x1a>
  avg = avg / (float)numFoundModules;
     fe8:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
     fec:	f8d7 0518 	ldr.w	r0, [r7, #1304]	; 0x518
     ff0:	f00b fddc 	bl	cbac <__aeabi_i2f>
     ff4:	4601      	mov	r1, r0
     ff6:	4628      	mov	r0, r5
     ff8:	f00b fee0 	bl	cdbc <__aeabi_fdiv>
}
     ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ffe:	bf00      	nop

00001000 <BMSModuleManager::printPackDetails(int, int)>:

void BMSModuleManager::printPackDetails(int digits, int CSCvariant)
{
    1000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1004:	b093      	sub	sp, #76	; 0x4c
    1006:	4680      	mov	r8, r0
  uint8_t alerts;
  uint8_t COV;
  uint8_t CUV;
  int cellNum = 0;

  Logger::console("");
    1008:	48ac      	ldr	r0, [pc, #688]	; (12bc <BMSModuleManager::printPackDetails(int, int)+0x2bc>)
{
    100a:	910d      	str	r1, [sp, #52]	; 0x34
  Logger::console("");
  Logger::console("");
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    100c:	f508 4780 	add.w	r7, r8, #16384	; 0x4000
  Logger::console("");
    1010:	f006 fd46 	bl	7aa0 <Logger::console(char*, ...)>
  Logger::console("");
    1014:	48a9      	ldr	r0, [pc, #676]	; (12bc <BMSModuleManager::printPackDetails(int, int)+0x2bc>)
    1016:	f006 fd43 	bl	7aa0 <Logger::console(char*, ...)>
  Logger::console("");
    101a:	f508 448a 	add.w	r4, r8, #17664	; 0x4500
    101e:	48a7      	ldr	r0, [pc, #668]	; (12bc <BMSModuleManager::printPackDetails(int, int)+0x2bc>)
    1020:	f006 fd3e 	bl	7aa0 <Logger::console(char*, ...)>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1024:	f508 75a2 	add.w	r5, r8, #324	; 0x144
    1028:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
    102c:	920c      	str	r2, [sp, #48]	; 0x30
  spack = 0;
    102e:	2300      	movs	r3, #0
    1030:	3414      	adds	r4, #20
    1032:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    1036:	462e      	mov	r6, r5
    1038:	46a1      	mov	r9, r4
    103a:	e003      	b.n	1044 <BMSModuleManager::printPackDetails(int, int)+0x44>
  for (int y = 1; y < 63; y++)
    103c:	f506 768c 	add.w	r6, r6, #280	; 0x118
    1040:	454e      	cmp	r6, r9
    1042:	d010      	beq.n	1066 <BMSModuleManager::printPackDetails(int, int)+0x66>
    if (modules[y].isExisting())
    1044:	4630      	mov	r0, r6
    1046:	f7ff fcc5 	bl	9d4 <BMSModule::isExisting()>
    104a:	2800      	cmp	r0, #0
    104c:	d0f6      	beq.n	103c <BMSModuleManager::printPackDetails(int, int)+0x3c>
      spack = spack + modules[y].getscells();
    104e:	4630      	mov	r0, r6
    1050:	f8d7 4520 	ldr.w	r4, [r7, #1312]	; 0x520
    1054:	f7ff fc36 	bl	8c4 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
    1058:	f506 768c 	add.w	r6, r6, #280	; 0x118
      spack = spack + modules[y].getscells();
    105c:	4420      	add	r0, r4
  for (int y = 1; y < 63; y++)
    105e:	454e      	cmp	r6, r9
      spack = spack + modules[y].getscells();
    1060:	f8c7 0520 	str.w	r0, [r7, #1312]	; 0x520
  for (int y = 1; y < 63; y++)
    1064:	d1ee      	bne.n	1044 <BMSModuleManager::printPackDetails(int, int)+0x44>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1066:	f8d8 0004 	ldr.w	r0, [r8, #4]
    106a:	f00b fbcf 	bl	c80c <__aeabi_f2d>
    106e:	464c      	mov	r4, r9
    1070:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  return spack;
    1074:	f8d7 b520 	ldr.w	fp, [r7, #1312]	; 0x520
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1078:	f8d8 a008 	ldr.w	sl, [r8, #8]
  float avg = 0.0f;
    107c:	2600      	movs	r6, #0
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    107e:	46a9      	mov	r9, r5
    1080:	e003      	b.n	108a <BMSModuleManager::printPackDetails(int, int)+0x8a>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1082:	f509 798c 	add.w	r9, r9, #280	; 0x118
    1086:	45a1      	cmp	r9, r4
    1088:	d010      	beq.n	10ac <BMSModuleManager::printPackDetails(int, int)+0xac>
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
    108a:	4648      	mov	r0, r9
    108c:	f7ff fca2 	bl	9d4 <BMSModule::isExisting()>
    1090:	2800      	cmp	r0, #0
    1092:	d0f6      	beq.n	1082 <BMSModuleManager::printPackDetails(int, int)+0x82>
    1094:	4648      	mov	r0, r9
    1096:	f7ff fbe5 	bl	864 <BMSModule::getAverageV()>
    109a:	4601      	mov	r1, r0
    109c:	4630      	mov	r0, r6
    109e:	f00b fcd1 	bl	ca44 <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    10a2:	f509 798c 	add.w	r9, r9, #280	; 0x118
    10a6:	45a1      	cmp	r9, r4
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
    10a8:	4606      	mov	r6, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    10aa:	d1ee      	bne.n	108a <BMSModuleManager::printPackDetails(int, int)+0x8a>
  avg = avg / (float)numFoundModules;
    10ac:	f8d7 0518 	ldr.w	r0, [r7, #1304]	; 0x518
    10b0:	f00b fd7c 	bl	cbac <__aeabi_i2f>
    10b4:	4601      	mov	r1, r0
    10b6:	4630      	mov	r0, r6
    10b8:	f00b fe80 	bl	cdbc <__aeabi_fdiv>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    10bc:	f00b fba6 	bl	c80c <__aeabi_f2d>
    10c0:	4602      	mov	r2, r0
    10c2:	460b      	mov	r3, r1
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    10c4:	4640      	mov	r0, r8
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    10c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    10ca:	f8d8 400c 	ldr.w	r4, [r8, #12]
    10ce:	f8d8 6010 	ldr.w	r6, [r8, #16]
    10d2:	f7ff feff 	bl	ed4 <BMSModuleManager::getAvgTemperature()>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    10d6:	f00b fb99 	bl	c80c <__aeabi_f2d>
    10da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    10de:	4621      	mov	r1, r4
    10e0:	4630      	mov	r0, r6
    10e2:	f00b fcad 	bl	ca40 <__aeabi_fsub>
    10e6:	4976      	ldr	r1, [pc, #472]	; (12c0 <BMSModuleManager::printPackDetails(int, int)+0x2c0>)
    10e8:	f00b fdb4 	bl	cc54 <__aeabi_fmul>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    10ec:	f00b fb8e 	bl	c80c <__aeabi_f2d>
    10f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    10f4:	4630      	mov	r0, r6
    10f6:	f00b fb89 	bl	c80c <__aeabi_f2d>
    10fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
    10fe:	4620      	mov	r0, r4
    1100:	f00b fb84 	bl	c80c <__aeabi_f2d>
    1104:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1108:	e9cd 2302 	strd	r2, r3, [sp, #8]
    110c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
    1110:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1114:	e9cd 3400 	strd	r3, r4, [sp]
    1118:	990c      	ldr	r1, [sp, #48]	; 0x30
    111a:	486a      	ldr	r0, [pc, #424]	; (12c4 <BMSModuleManager::printPackDetails(int, int)+0x2c4>)
    111c:	4e6a      	ldr	r6, [pc, #424]	; (12c8 <BMSModuleManager::printPackDetails(int, int)+0x2c8>)
    111e:	4653      	mov	r3, sl
    1120:	465a      	mov	r2, fp
    1122:	f006 fcbd 	bl	7aa0 <Logger::console(char*, ...)>
  Logger::console("");
    1126:	4865      	ldr	r0, [pc, #404]	; (12bc <BMSModuleManager::printPackDetails(int, int)+0x2bc>)
    1128:	f006 fcba 	bl	7aa0 <Logger::console(char*, ...)>
  int cellNum = 0;
    112c:	2300      	movs	r3, #0
  for (int y = 1; y < 63; y++)
    112e:	f04f 0801 	mov.w	r8, #1
  int cellNum = 0;
    1132:	930c      	str	r3, [sp, #48]	; 0x30
    1134:	e007      	b.n	1146 <BMSModuleManager::printPackDetails(int, int)+0x146>
  for (int y = 1; y < 63; y++)
    1136:	f108 0801 	add.w	r8, r8, #1
    113a:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    113e:	f505 758c 	add.w	r5, r5, #280	; 0x118
    1142:	f000 80b3 	beq.w	12ac <BMSModuleManager::printPackDetails(int, int)+0x2ac>
  {
    if (modules[y].isExisting())
    1146:	4628      	mov	r0, r5
    1148:	f7ff fc44 	bl	9d4 <BMSModule::isExisting()>
    114c:	2800      	cmp	r0, #0
    114e:	d0f2      	beq.n	1136 <BMSModuleManager::printPackDetails(int, int)+0x136>
    {
      faults = modules[y].getFaults();
    1150:	4628      	mov	r0, r5
    1152:	f7ff fb2d 	bl	7b0 <BMSModule::getFaults()>
      alerts = modules[y].getAlerts();
    1156:	4628      	mov	r0, r5
    1158:	f7ff fb2e 	bl	7b8 <BMSModule::getAlerts()>
      COV = modules[y].getCOVCells();
    115c:	4628      	mov	r0, r5
    115e:	f7ff fb2f 	bl	7c0 <BMSModule::getCOVCells()>
      CUV = modules[y].getCUVCells();
    1162:	4628      	mov	r0, r5
    1164:	f7ff fb30 	bl	7c8 <BMSModule::getCUVCells()>
    1168:	2108      	movs	r1, #8
    116a:	4858      	ldr	r0, [pc, #352]	; (12cc <BMSModuleManager::printPackDetails(int, int)+0x2cc>)
    116c:	f00a fe92 	bl	be94 <usb_serial_write>
    1170:	4641      	mov	r1, r8
    1172:	4630      	mov	r0, r6
    1174:	f008 f942 	bl	93fc <Print::print(long)>

      SERIALCONSOLE.print("Module #");
      SERIALCONSOLE.print(y);
      if (y < 10) SERIALCONSOLE.print(" ");
    1178:	f1b8 0f09 	cmp.w	r8, #9
    117c:	f340 8099 	ble.w	12b2 <BMSModuleManager::printPackDetails(int, int)+0x2b2>
    1180:	2102      	movs	r1, #2
    1182:	4853      	ldr	r0, [pc, #332]	; (12d0 <BMSModuleManager::printPackDetails(int, int)+0x2d0>)
    1184:	f8df a14c 	ldr.w	sl, [pc, #332]	; 12d4 <BMSModuleManager::printPackDetails(int, int)+0x2d4>
    1188:	f00a fe84 	bl	be94 <usb_serial_write>
      SERIALCONSOLE.print("  ");
      SERIALCONSOLE.print(modules[y].getModuleVoltage(), digits);
    118c:	4628      	mov	r0, r5
    118e:	f7ff fbe7 	bl	960 <BMSModule::getModuleVoltage()>
    1192:	f00b fb3b 	bl	c80c <__aeabi_f2d>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1196:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    119a:	f8cd 9000 	str.w	r9, [sp]
    119e:	460b      	mov	r3, r1
    11a0:	4602      	mov	r2, r0
    11a2:	4630      	mov	r0, r6
    11a4:	f008 f954 	bl	9450 <Print::printFloat(double, unsigned char)>
    11a8:	484b      	ldr	r0, [pc, #300]	; (12d8 <BMSModuleManager::printPackDetails(int, int)+0x2d8>)
    11aa:	2101      	movs	r1, #1
    11ac:	f00a fe72 	bl	be94 <usb_serial_write>
      SERIALCONSOLE.print("V");
      for (int i = 0; i < 16; i++)
    11b0:	462b      	mov	r3, r5
    11b2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    11b6:	464d      	mov	r5, r9
    11b8:	2400      	movs	r4, #0
    11ba:	4699      	mov	r9, r3
    11bc:	e01f      	b.n	11fe <BMSModuleManager::printPackDetails(int, int)+0x1fe>
    11be:	2106      	movs	r1, #6
    11c0:	4846      	ldr	r0, [pc, #280]	; (12dc <BMSModuleManager::printPackDetails(int, int)+0x2dc>)
    11c2:	f00a fe67 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    11c6:	4659      	mov	r1, fp
    11c8:	4630      	mov	r0, r6
    11ca:	f008 f917 	bl	93fc <Print::print(long)>
    11ce:	2102      	movs	r1, #2
    11d0:	4843      	ldr	r0, [pc, #268]	; (12e0 <BMSModuleManager::printPackDetails(int, int)+0x2e0>)
    11d2:	f00a fe5f 	bl	be94 <usb_serial_write>
      {
        if (cellNum < 10) SERIALCONSOLE.print(" ");
        SERIALCONSOLE.print("  Cell");
        SERIALCONSOLE.print(cellNum++);
        SERIALCONSOLE.print(": ");
        SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    11d6:	4621      	mov	r1, r4
    11d8:	4648      	mov	r0, r9
    11da:	f7ff faf9 	bl	7d0 <BMSModule::getCellVoltage(int)>
    11de:	f00b fb15 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    11e2:	9500      	str	r5, [sp, #0]
    11e4:	4602      	mov	r2, r0
    11e6:	460b      	mov	r3, r1
    11e8:	4630      	mov	r0, r6
    11ea:	f008 f931 	bl	9450 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 16; i++)
    11ee:	3401      	adds	r4, #1
    11f0:	4839      	ldr	r0, [pc, #228]	; (12d8 <BMSModuleManager::printPackDetails(int, int)+0x2d8>)
    11f2:	2101      	movs	r1, #1
    11f4:	f00a fe4e 	bl	be94 <usb_serial_write>
    11f8:	2c10      	cmp	r4, #16
    11fa:	d00a      	beq.n	1212 <BMSModuleManager::printPackDetails(int, int)+0x212>
        SERIALCONSOLE.print(cellNum++);
    11fc:	46bb      	mov	fp, r7
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    11fe:	f1bb 0f09 	cmp.w	fp, #9
        SERIALCONSOLE.print(cellNum++);
    1202:	f10b 0701 	add.w	r7, fp, #1
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    1206:	dcda      	bgt.n	11be <BMSModuleManager::printPackDetails(int, int)+0x1be>
    1208:	2101      	movs	r1, #1
    120a:	4650      	mov	r0, sl
    120c:	f00a fe42 	bl	be94 <usb_serial_write>
    1210:	e7d5      	b.n	11be <BMSModuleManager::printPackDetails(int, int)+0x1be>
          SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
          SERIALCONSOLE.print("V");
        }
        }
      */
      SERIALCONSOLE.println();
    1212:	4630      	mov	r0, r6
    1214:	f008 f8fa 	bl	940c <Print::println()>
    1218:	2109      	movs	r1, #9
    121a:	4832      	ldr	r0, [pc, #200]	; (12e4 <BMSModuleManager::printPackDetails(int, int)+0x2e4>)
    121c:	f00a fe3a 	bl	be94 <usb_serial_write>

      SERIALCONSOLE.print(" Temp 1: ");
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    1220:	2100      	movs	r1, #0
    1222:	4648      	mov	r0, r9
    1224:	f7ff fbc4 	bl	9b0 <BMSModule::getTemperature(int)>
    1228:	f00b faf0 	bl	c80c <__aeabi_f2d>
    122c:	2702      	movs	r7, #2
    122e:	4602      	mov	r2, r0
    1230:	460b      	mov	r3, r1
    1232:	9700      	str	r7, [sp, #0]
    1234:	4630      	mov	r0, r6
    1236:	f008 f90b 	bl	9450 <Print::printFloat(double, unsigned char)>
    123a:	210a      	movs	r1, #10
    123c:	482a      	ldr	r0, [pc, #168]	; (12e8 <BMSModuleManager::printPackDetails(int, int)+0x2e8>)
    123e:	f00a fe29 	bl	be94 <usb_serial_write>

      SERIALCONSOLE.print("C Temp 2: ");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    1242:	2101      	movs	r1, #1
    1244:	4648      	mov	r0, r9
    1246:	f7ff fbb3 	bl	9b0 <BMSModule::getTemperature(int)>
    124a:	f00b fadf 	bl	c80c <__aeabi_f2d>
    124e:	9700      	str	r7, [sp, #0]
    1250:	4602      	mov	r2, r0
    1252:	460b      	mov	r3, r1
    1254:	4630      	mov	r0, r6
    1256:	f008 f8fb 	bl	9450 <Print::printFloat(double, unsigned char)>
    125a:	210c      	movs	r1, #12
    125c:	4823      	ldr	r0, [pc, #140]	; (12ec <BMSModuleManager::printPackDetails(int, int)+0x2ec>)
    125e:	f00a fe19 	bl	be94 <usb_serial_write>
      SERIALCONSOLE.print("C Status: 0x");
      SERIALCONSOLE.print(modules[y].getError(), HEX);
    1262:	4648      	mov	r0, r9
    1264:	f7ff fbb2 	bl	9cc <BMSModule::getError()>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    1268:	2300      	movs	r3, #0
    126a:	4622      	mov	r2, r4
    126c:	4601      	mov	r1, r0
    126e:	4630      	mov	r0, r6
    1270:	f008 f8e4 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1274:	2108      	movs	r1, #8
    1276:	481e      	ldr	r0, [pc, #120]	; (12f0 <BMSModuleManager::printPackDetails(int, int)+0x2f0>)
    1278:	f00a fe0c 	bl	be94 <usb_serial_write>
      SERIALCONSOLE.print(" Bal: 0x");
      SERIALCONSOLE.println(modules[y].getbalstat(), HEX);
    127c:	4648      	mov	r0, r9
    127e:	f7ff fb25 	bl	8cc <BMSModule::getbalstat()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    1282:	2300      	movs	r3, #0
    1284:	4601      	mov	r1, r0
    1286:	4622      	mov	r2, r4
    1288:	4630      	mov	r0, r6
    128a:	f008 f8d7 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        SERIALCONSOLE.print(cellNum++);
    128e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
    1290:	4630      	mov	r0, r6
    1292:	3310      	adds	r3, #16
  for (int y = 1; y < 63; y++)
    1294:	f108 0801 	add.w	r8, r8, #1
      SERIALCONSOLE.println();
    1298:	464d      	mov	r5, r9
        SERIALCONSOLE.print(cellNum++);
    129a:	930c      	str	r3, [sp, #48]	; 0x30
    129c:	f008 f8b6 	bl	940c <Print::println()>
  for (int y = 1; y < 63; y++)
    12a0:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    12a4:	f505 758c 	add.w	r5, r5, #280	; 0x118
    12a8:	f47f af4d 	bne.w	1146 <BMSModuleManager::printPackDetails(int, int)+0x146>

    }
  }
}
    12ac:	b013      	add	sp, #76	; 0x4c
    12ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12b2:	2101      	movs	r1, #1
    12b4:	4807      	ldr	r0, [pc, #28]	; (12d4 <BMSModuleManager::printPackDetails(int, int)+0x2d4>)
    12b6:	f00a fded 	bl	be94 <usb_serial_write>
    12ba:	e761      	b.n	1180 <BMSModuleManager::printPackDetails(int, int)+0x180>
    12bc:	00014068 	.word	0x00014068
    12c0:	447a0000 	.word	0x447a0000
    12c4:	00013d1c 	.word	0x00013d1c
    12c8:	1fff89fc 	.word	0x1fff89fc
    12cc:	00013dbc 	.word	0x00013dbc
    12d0:	00014200 	.word	0x00014200
    12d4:	00013e3c 	.word	0x00013e3c
    12d8:	00013dc8 	.word	0x00013dc8
    12dc:	00013dcc 	.word	0x00013dcc
    12e0:	00013e2c 	.word	0x00013e2c
    12e4:	00013dd4 	.word	0x00013dd4
    12e8:	00013de0 	.word	0x00013de0
    12ec:	00013dec 	.word	0x00013dec
    12f0:	00013dfc 	.word	0x00013dfc

000012f4 <BMSModuleManager::printAllCSV(unsigned long, float, int)>:

void BMSModuleManager::printAllCSV(unsigned long timestamp, float current, int SOC)
{
    12f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12f8:	b087      	sub	sp, #28
    12fa:	f500 75a2 	add.w	r5, r0, #324	; 0x144
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    12fe:	f8df 9224 	ldr.w	r9, [pc, #548]	; 1524 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x230>
    1302:	f8df a224 	ldr.w	sl, [pc, #548]	; 1528 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x234>
    1306:	9103      	str	r1, [sp, #12]
    1308:	9204      	str	r2, [sp, #16]
    130a:	4698      	mov	r8, r3
    130c:	462e      	mov	r6, r5
  for (int y = 1; y < 63; y++)
    130e:	2701      	movs	r7, #1
    1310:	9505      	str	r5, [sp, #20]
    1312:	4693      	mov	fp, r2
    1314:	e004      	b.n	1320 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    1316:	3701      	adds	r7, #1
    1318:	2f3f      	cmp	r7, #63	; 0x3f
    131a:	f506 768c 	add.w	r6, r6, #280	; 0x118
    131e:	d075      	beq.n	140c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x118>
  {
    if (modules[y].isExisting())
    1320:	4630      	mov	r0, r6
    1322:	f7ff fb57 	bl	9d4 <BMSModule::isExisting()>
    1326:	2800      	cmp	r0, #0
    1328:	d0f5      	beq.n	1316 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x22>
    132a:	2300      	movs	r3, #0
    132c:	220a      	movs	r2, #10
    132e:	9903      	ldr	r1, [sp, #12]
    1330:	4648      	mov	r0, r9
    1332:	f008 f883 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1336:	2101      	movs	r1, #1
    1338:	4650      	mov	r0, sl
    133a:	f00a fdab 	bl	be94 <usb_serial_write>
    {
      SERIALCONSOLE.print(timestamp);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(current, 0);
    133e:	4658      	mov	r0, fp
    1340:	f00b fa64 	bl	c80c <__aeabi_f2d>
    1344:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1346:	2100      	movs	r1, #0
    1348:	4602      	mov	r2, r0
    134a:	9100      	str	r1, [sp, #0]
    134c:	4648      	mov	r0, r9
    134e:	f008 f87f 	bl	9450 <Print::printFloat(double, unsigned char)>
    1352:	2101      	movs	r1, #1
    1354:	4650      	mov	r0, sl
    1356:	f00a fd9d 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    135a:	4641      	mov	r1, r8
    135c:	4648      	mov	r0, r9
    135e:	f008 f84d 	bl	93fc <Print::print(long)>
    1362:	2101      	movs	r1, #1
    1364:	4650      	mov	r0, sl
    1366:	f00a fd95 	bl	be94 <usb_serial_write>
    136a:	4639      	mov	r1, r7
    136c:	4648      	mov	r0, r9
    136e:	f008 f845 	bl	93fc <Print::print(long)>
    1372:	2101      	movs	r1, #1
    1374:	4650      	mov	r0, sl
    1376:	f00a fd8d 	bl	be94 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(SOC);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(y);
      SERIALCONSOLE.print(",");
      for (int i = 0; i < 8; i++)
    137a:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    137c:	2502      	movs	r5, #2
      {
        SERIALCONSOLE.print(modules[y].getCellVoltage(i));
    137e:	4621      	mov	r1, r4
    1380:	4630      	mov	r0, r6
    1382:	f7ff fa25 	bl	7d0 <BMSModule::getCellVoltage(int)>
    1386:	f00b fa41 	bl	c80c <__aeabi_f2d>
    138a:	9500      	str	r5, [sp, #0]
    138c:	4602      	mov	r2, r0
    138e:	460b      	mov	r3, r1
    1390:	4648      	mov	r0, r9
    1392:	f008 f85d 	bl	9450 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    1396:	3401      	adds	r4, #1
    1398:	2101      	movs	r1, #1
    139a:	4650      	mov	r0, sl
    139c:	f00a fd7a 	bl	be94 <usb_serial_write>
    13a0:	2c08      	cmp	r4, #8
    13a2:	d1ec      	bne.n	137e <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x8a>
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    13a4:	2100      	movs	r1, #0
    13a6:	4630      	mov	r0, r6
    13a8:	f7ff fb02 	bl	9b0 <BMSModule::getTemperature(int)>
    13ac:	f00b fa2e 	bl	c80c <__aeabi_f2d>
    13b0:	9500      	str	r5, [sp, #0]
    13b2:	4602      	mov	r2, r0
    13b4:	460b      	mov	r3, r1
    13b6:	4648      	mov	r0, r9
    13b8:	f008 f84a 	bl	9450 <Print::printFloat(double, unsigned char)>
    13bc:	2101      	movs	r1, #1
    13be:	4650      	mov	r0, sl
    13c0:	f00a fd68 	bl	be94 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    13c4:	2101      	movs	r1, #1
    13c6:	4630      	mov	r0, r6
    13c8:	f7ff faf2 	bl	9b0 <BMSModule::getTemperature(int)>
    13cc:	f00b fa1e 	bl	c80c <__aeabi_f2d>
    13d0:	9500      	str	r5, [sp, #0]
    13d2:	4602      	mov	r2, r0
    13d4:	460b      	mov	r3, r1
    13d6:	4648      	mov	r0, r9
    13d8:	f008 f83a 	bl	9450 <Print::printFloat(double, unsigned char)>
    13dc:	2101      	movs	r1, #1
    13de:	4650      	mov	r0, sl
    13e0:	f00a fd58 	bl	be94 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    13e4:	2102      	movs	r1, #2
    13e6:	4630      	mov	r0, r6
    13e8:	f7ff fae2 	bl	9b0 <BMSModule::getTemperature(int)>
    13ec:	f00b fa0e 	bl	c80c <__aeabi_f2d>
    13f0:	9500      	str	r5, [sp, #0]
    13f2:	4602      	mov	r2, r0
    13f4:	460b      	mov	r3, r1
    13f6:	4648      	mov	r0, r9
    13f8:	f008 f82a 	bl	9450 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    13fc:	3701      	adds	r7, #1
      SERIALCONSOLE.println();
    13fe:	4648      	mov	r0, r9
    1400:	f008 f804 	bl	940c <Print::println()>
  for (int y = 1; y < 63; y++)
    1404:	2f3f      	cmp	r7, #63	; 0x3f
    1406:	f506 768c 	add.w	r6, r6, #280	; 0x118
    140a:	d189      	bne.n	1320 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    }
  }
  for (int y = 1; y < 63; y++)
    140c:	9d05      	ldr	r5, [sp, #20]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    140e:	4f47      	ldr	r7, [pc, #284]	; (152c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x238>)
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
    1410:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1528 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x234>
    1414:	2601      	movs	r6, #1
    1416:	f04f 0b00 	mov.w	fp, #0
    141a:	e004      	b.n	1426 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    141c:	3601      	adds	r6, #1
    141e:	2e3f      	cmp	r6, #63	; 0x3f
    1420:	f505 758c 	add.w	r5, r5, #280	; 0x118
    1424:	d07a      	beq.n	151c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x228>
  {
    if (modules[y].isExisting())
    1426:	4628      	mov	r0, r5
    1428:	f7ff fad4 	bl	9d4 <BMSModule::isExisting()>
    142c:	2800      	cmp	r0, #0
    142e:	d0f5      	beq.n	141c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    1430:	2300      	movs	r3, #0
    1432:	220a      	movs	r2, #10
    1434:	9903      	ldr	r1, [sp, #12]
    1436:	4638      	mov	r0, r7
    1438:	f008 f800 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    143c:	2101      	movs	r1, #1
    143e:	4648      	mov	r0, r9
    1440:	f009 f9fc 	bl	a83c <serial2_write>
    {
      Serial2.print(timestamp);
      Serial2.print(",");
      Serial2.print(current, 0);
    1444:	9804      	ldr	r0, [sp, #16]
    1446:	f00b f9e1 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    144a:	f8cd b000 	str.w	fp, [sp]
    144e:	4602      	mov	r2, r0
    1450:	460b      	mov	r3, r1
    1452:	4638      	mov	r0, r7
    1454:	f007 fffc 	bl	9450 <Print::printFloat(double, unsigned char)>
    1458:	2101      	movs	r1, #1
    145a:	4648      	mov	r0, r9
    145c:	f009 f9ee 	bl	a83c <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    1460:	4641      	mov	r1, r8
    1462:	4638      	mov	r0, r7
    1464:	f007 ffca 	bl	93fc <Print::print(long)>
    1468:	2101      	movs	r1, #1
    146a:	4648      	mov	r0, r9
    146c:	f009 f9e6 	bl	a83c <serial2_write>
    1470:	4631      	mov	r1, r6
    1472:	4638      	mov	r0, r7
    1474:	f007 ffc2 	bl	93fc <Print::print(long)>
    1478:	2101      	movs	r1, #1
    147a:	4648      	mov	r0, r9
    147c:	f009 f9de 	bl	a83c <serial2_write>
      Serial2.print(",");
      Serial2.print(SOC);
      Serial2.print(",");
      Serial2.print(y);
      Serial2.print(",");
      for (int i = 0; i < 8; i++)
    1480:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1482:	f04f 0a02 	mov.w	sl, #2
      {
        Serial2.print(modules[y].getCellVoltage(i));
    1486:	4621      	mov	r1, r4
    1488:	4628      	mov	r0, r5
    148a:	f7ff f9a1 	bl	7d0 <BMSModule::getCellVoltage(int)>
    148e:	f00b f9bd 	bl	c80c <__aeabi_f2d>
    1492:	f8cd a000 	str.w	sl, [sp]
    1496:	4602      	mov	r2, r0
    1498:	460b      	mov	r3, r1
    149a:	4638      	mov	r0, r7
    149c:	f007 ffd8 	bl	9450 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    14a0:	3401      	adds	r4, #1
    14a2:	2101      	movs	r1, #1
    14a4:	4648      	mov	r0, r9
    14a6:	f009 f9c9 	bl	a83c <serial2_write>
    14aa:	2c08      	cmp	r4, #8
    14ac:	d1eb      	bne.n	1486 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x192>
        Serial2.print(",");
      }
      Serial2.print(modules[y].getTemperature(0));
    14ae:	2100      	movs	r1, #0
    14b0:	4628      	mov	r0, r5
    14b2:	f7ff fa7d 	bl	9b0 <BMSModule::getTemperature(int)>
    14b6:	f00b f9a9 	bl	c80c <__aeabi_f2d>
    14ba:	f8cd a000 	str.w	sl, [sp]
    14be:	4602      	mov	r2, r0
    14c0:	460b      	mov	r3, r1
    14c2:	4638      	mov	r0, r7
    14c4:	f007 ffc4 	bl	9450 <Print::printFloat(double, unsigned char)>
    14c8:	2101      	movs	r1, #1
    14ca:	4648      	mov	r0, r9
    14cc:	f009 f9b6 	bl	a83c <serial2_write>
      Serial2.print(",");
      Serial2.print(modules[y].getTemperature(1));
    14d0:	2101      	movs	r1, #1
    14d2:	4628      	mov	r0, r5
    14d4:	f7ff fa6c 	bl	9b0 <BMSModule::getTemperature(int)>
    14d8:	f00b f998 	bl	c80c <__aeabi_f2d>
    14dc:	f8cd a000 	str.w	sl, [sp]
    14e0:	4602      	mov	r2, r0
    14e2:	460b      	mov	r3, r1
    14e4:	4638      	mov	r0, r7
    14e6:	f007 ffb3 	bl	9450 <Print::printFloat(double, unsigned char)>
    14ea:	2101      	movs	r1, #1
    14ec:	4648      	mov	r0, r9
    14ee:	f009 f9a5 	bl	a83c <serial2_write>
      Serial2.print(",");
      Serial2.print(modules[y].getTemperature(2));
    14f2:	2102      	movs	r1, #2
    14f4:	4628      	mov	r0, r5
    14f6:	f7ff fa5b 	bl	9b0 <BMSModule::getTemperature(int)>
    14fa:	f00b f987 	bl	c80c <__aeabi_f2d>
    14fe:	f8cd a000 	str.w	sl, [sp]
    1502:	4602      	mov	r2, r0
    1504:	460b      	mov	r3, r1
    1506:	4638      	mov	r0, r7
    1508:	f007 ffa2 	bl	9450 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    150c:	3601      	adds	r6, #1
      Serial2.println();
    150e:	4638      	mov	r0, r7
    1510:	f007 ff7c 	bl	940c <Print::println()>
  for (int y = 1; y < 63; y++)
    1514:	2e3f      	cmp	r6, #63	; 0x3f
    1516:	f505 758c 	add.w	r5, r5, #280	; 0x118
    151a:	d184      	bne.n	1426 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    }
  }
}
    151c:	b007      	add	sp, #28
    151e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1522:	bf00      	nop
    1524:	1fff89fc 	.word	0x1fff89fc
    1528:	00013998 	.word	0x00013998
    152c:	1fff88bc 	.word	0x1fff88bc

00001530 <isrCP()>:
  NextID++;

  findUnassigned();
}

void isrCP() {
    1530:	b570      	push	{r4, r5, r6, lr}
  if (digitalRead(IN4) == LOW) {
    1532:	2013      	movs	r0, #19
    1534:	f008 fe62 	bl	a1fc <digitalRead>
    1538:	b958      	cbnz	r0, 1552 <isrCP()+0x22>
    duration = micros() - pilottimer;
    153a:	4c11      	ldr	r4, [pc, #68]	; (1580 <isrCP()+0x50>)
    153c:	f008 fea8 	bl	a290 <micros>
    1540:	6822      	ldr	r2, [r4, #0]
    1542:	4b10      	ldr	r3, [pc, #64]	; (1584 <isrCP()+0x54>)
    1544:	1a80      	subs	r0, r0, r2
    1546:	b280      	uxth	r0, r0
    1548:	8018      	strh	r0, [r3, #0]
    pilottimer = micros();
    154a:	f008 fea1 	bl	a290 <micros>
    154e:	6020      	str	r0, [r4, #0]
  } else {
    accurlim = ((duration - (micros() - pilottimer + 35)) * 60) / duration;  //pilottimer + "xx" optocoupler decade ms
  }
}  // ******** end of isr CP ********
    1550:	bd70      	pop	{r4, r5, r6, pc}
    accurlim = ((duration - (micros() - pilottimer + 35)) * 60) / duration;  //pilottimer + "xx" optocoupler decade ms
    1552:	4d0c      	ldr	r5, [pc, #48]	; (1584 <isrCP()+0x54>)
    1554:	4b0a      	ldr	r3, [pc, #40]	; (1580 <isrCP()+0x50>)
    1556:	882c      	ldrh	r4, [r5, #0]
    1558:	681e      	ldr	r6, [r3, #0]
    155a:	f008 fe99 	bl	a290 <micros>
    155e:	b2a4      	uxth	r4, r4
    1560:	4434      	add	r4, r6
    1562:	1a20      	subs	r0, r4, r0
    1564:	882a      	ldrh	r2, [r5, #0]
    1566:	4908      	ldr	r1, [pc, #32]	; (1588 <isrCP()+0x58>)
    1568:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
    156c:	009b      	lsls	r3, r3, #2
    156e:	b292      	uxth	r2, r2
    1570:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
    1574:	fbb3 f3f2 	udiv	r3, r3, r2
    1578:	b29b      	uxth	r3, r3
    157a:	800b      	strh	r3, [r1, #0]
}  // ******** end of isr CP ********
    157c:	bd70      	pop	{r4, r5, r6, pc}
    157e:	bf00      	nop
    1580:	1fffd9b4 	.word	0x1fffd9b4
    1584:	1fffd8ac 	.word	0x1fffd8ac
    1588:	1fff91c8 	.word	0x1fff91c8

0000158c <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>:
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
	long in_range = in_max - in_min;
	long out_range = out_max - out_min;
    158c:	f8dd c000 	ldr.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
    1590:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
    1592:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
    1596:	d01c      	beq.n	15d2 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
    1598:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
    159a:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
    159e:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
    15a2:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
    15a6:	db09      	blt.n	15bc <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
    15a8:	eb00 0061 	add.w	r0, r0, r1, asr #1
	} else {
		num -= in_range / 2;
	}
	long result = num / in_range + out_min;
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
    15ac:	fb00 f102 	mul.w	r1, r0, r2
    15b0:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    15b2:	fb90 f0f2 	sdiv	r0, r0, r2
    15b6:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
    15b8:	db10      	blt.n	15dc <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x50>
		if (in_range * num >= 0) return result + 1;
	}
	return result;
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
}
    15ba:	4770      	bx	lr
		num -= in_range / 2;
    15bc:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
    15c0:	fb00 f102 	mul.w	r1, r0, r2
    15c4:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    15c6:	fb90 f0f2 	sdiv	r0, r0, r2
    15ca:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
    15cc:	dbf5      	blt.n	15ba <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x2e>
    15ce:	3001      	adds	r0, #1
}
    15d0:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
    15d2:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
    15d6:	eb03 006c 	add.w	r0, r3, ip, asr #1
    15da:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
    15dc:	3801      	subs	r0, #1
    15de:	4770      	bx	lr

000015e0 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    15e0:	b538      	push	{r3, r4, r5, lr}
    15e2:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    15e4:	b149      	cbz	r1, 15fa <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    15e6:	4608      	mov	r0, r1
    15e8:	460d      	mov	r5, r1
    15ea:	f00c fce9 	bl	dfc0 <strlen>
    15ee:	6823      	ldr	r3, [r4, #0]
    15f0:	4602      	mov	r2, r0
    15f2:	685b      	ldr	r3, [r3, #4]
    15f4:	4629      	mov	r1, r5
    15f6:	4620      	mov	r0, r4
    15f8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    15fa:	4620      	mov	r0, r4
    15fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1600:	f007 bf04 	b.w	940c <Print::println()>

00001604 <loadSettings()>:
void loadSettings() {
    1604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Logger::console("Resetting to factory defaults");
    1608:	484b      	ldr	r0, [pc, #300]	; (1738 <loadSettings()+0x134>)
  settings.UnderVSetpoint = 3.0f;
    160a:	4e4c      	ldr	r6, [pc, #304]	; (173c <loadSettings()+0x138>)
  settings.OverVSetpoint = 4.2f;
    160c:	4c4c      	ldr	r4, [pc, #304]	; (1740 <loadSettings()+0x13c>)
  settings.convhigh = 58;      // mV/A current sensor high range channel
    160e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 1744 <loadSettings()+0x140>
  settings.offset1 = 1750;     //mV mid point of channel 1
    1612:	4f4d      	ldr	r7, [pc, #308]	; (1748 <loadSettings()+0x144>)
  Logger::console("Resetting to factory defaults");
    1614:	f006 fa44 	bl	7aa0 <Logger::console(char*, ...)>
  settings.version = EEPROM_VERSION;
    1618:	4b4c      	ldr	r3, [pc, #304]	; (174c <loadSettings()+0x148>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    161a:	494d      	ldr	r1, [pc, #308]	; (1750 <loadSettings()+0x14c>)
    161c:	6219      	str	r1, [r3, #32]
  settings.DischHys = 0.2f;  // Discharge voltage offset
    161e:	6159      	str	r1, [r3, #20]
  settings.CellGap = 0.2f;   //max delta between high and low cell
    1620:	6459      	str	r1, [r3, #68]	; 0x44
  settings.OverTSetpoint = 65.0f;
    1622:	494c      	ldr	r1, [pc, #304]	; (1754 <loadSettings()+0x150>)
    1624:	62d9      	str	r1, [r3, #44]	; 0x2c
  settings.UnderTSetpoint = -10.0f;
    1626:	494c      	ldr	r1, [pc, #304]	; (1758 <loadSettings()+0x154>)
    1628:	6319      	str	r1, [r3, #48]	; 0x30
  settings.ChargeTSetpoint = 0.0f;
    162a:	2100      	movs	r1, #0
    162c:	6399      	str	r1, [r3, #56]	; 0x38
  settings.triptime = 500;  //mS of delay before counting over or undervoltage
    162e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    1632:	8699      	strh	r1, [r3, #52]	; 0x34
  settings.DisTSetpoint = 40.0f;
    1634:	4949      	ldr	r1, [pc, #292]	; (175c <loadSettings()+0x158>)
    1636:	63d9      	str	r1, [r3, #60]	; 0x3c
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    1638:	4949      	ldr	r1, [pc, #292]	; (1760 <loadSettings()+0x15c>)
    163a:	6419      	str	r1, [r3, #64]	; 0x40
  settings.IgnoreVolt = 0.5;  //
    163c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    1640:	64d9      	str	r1, [r3, #76]	; 0x4c
  settings.balanceVoltage = 3.9f;
    1642:	4948      	ldr	r1, [pc, #288]	; (1764 <loadSettings()+0x160>)
    1644:	6519      	str	r1, [r3, #80]	; 0x50
  settings.balanceHyst = 0.04f;
    1646:	4948      	ldr	r1, [pc, #288]	; (1768 <loadSettings()+0x164>)
    1648:	6559      	str	r1, [r3, #84]	; 0x54
  settings.canSpeed = 500000;
    164a:	4948      	ldr	r1, [pc, #288]	; (176c <loadSettings()+0x168>)
    164c:	6059      	str	r1, [r3, #4]
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    164e:	f240 2101 	movw	r1, #513	; 0x201
    1652:	8119      	strh	r1, [r3, #8]
  settings.Scells = 12;              //Cells in series
    1654:	210c      	movs	r1, #12
    1656:	6599      	str	r1, [r3, #88]	; 0x58
  settings.StoreVsetpoint = 3.8;     // V storage mode charge max
    1658:	4945      	ldr	r1, [pc, #276]	; (1770 <loadSettings()+0x16c>)
    165a:	6259      	str	r1, [r3, #36]	; 0x24
  settings.chargecurrentmax = 300;   //max charge current in 0.1A
    165c:	f44f 7196 	mov.w	r1, #300	; 0x12c
    1660:	6659      	str	r1, [r3, #100]	; 0x64
  settings.discurrentmax = 300;      // max discharge current in 0.1A
    1662:	6719      	str	r1, [r3, #112]	; 0x70
  settings.socvolt[0] = 3100;        //Voltage and SOC curve for voltage based SOC calc
    1664:	f640 411c 	movw	r1, #3100	; 0xc1c
    1668:	6759      	str	r1, [r3, #116]	; 0x74
  settings.UnderVSetpoint = 3.0f;
    166a:	611e      	str	r6, [r3, #16]
  settings.socvolt[1] = 10;          //Voltage and SOC curve for voltage based SOC calc
    166c:	210a      	movs	r1, #10
  settings.ChargeVsetpoint = 4.1f;
    166e:	4e41      	ldr	r6, [pc, #260]	; (1774 <loadSettings()+0x170>)
  settings.socvolt[1] = 10;          //Voltage and SOC curve for voltage based SOC calc
    1670:	6799      	str	r1, [r3, #120]	; 0x78
  settings.ChargeVsetpoint = 4.1f;
    1672:	619e      	str	r6, [r3, #24]
  settings.socvolt[2] = 4100;        //Voltage and SOC curve for voltage based SOC calc
    1674:	f241 0104 	movw	r1, #4100	; 0x1004
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    1678:	4e3f      	ldr	r6, [pc, #252]	; (1778 <loadSettings()+0x174>)
  settings.OverVSetpoint = 4.2f;
    167a:	60dc      	str	r4, [r3, #12]
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    167c:	2200      	movs	r2, #0
  settings.Pstrings = 1;             // strings in parallel used to divide voltage of pack
    167e:	2001      	movs	r0, #1
  settings.CAP = 100;                //battery size in Ah
    1680:	2564      	movs	r5, #100	; 0x64
  settings.version = EEPROM_VERSION;
    1682:	f240 2411 	movw	r4, #529	; 0x211
  settings.socvolt[2] = 4100;        //Voltage and SOC curve for voltage based SOC calc
    1686:	67d9      	str	r1, [r3, #124]	; 0x7c
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    1688:	629e      	str	r6, [r3, #40]	; 0x28
  settings.chargecurrentend = 50;    //end charge current in 0.1A
    168a:	2132      	movs	r1, #50	; 0x32
  settings.DischVsetpoint = 3.2f;
    168c:	4e3b      	ldr	r6, [pc, #236]	; (177c <loadSettings()+0x178>)
  settings.version = EEPROM_VERSION;
    168e:	801c      	strh	r4, [r3, #0]
  settings.socvolt[3] = 90;          //Voltage and SOC curve for voltage based SOC calc
    1690:	f04f 095a 	mov.w	r9, #90	; 0x5a
  settings.chargecurrent2max = 150;  //max charge current in 0.1A
    1694:	f04f 0a96 	mov.w	sl, #150	; 0x96
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    1698:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  settings.Pstrings = 1;             // strings in parallel used to divide voltage of pack
    169c:	65d8      	str	r0, [r3, #92]	; 0x5c
  settings.chargecurrentend = 50;    //end charge current in 0.1A
    169e:	66d9      	str	r1, [r3, #108]	; 0x6c
  settings.DischVsetpoint = 3.2f;
    16a0:	61de      	str	r6, [r3, #28]
  settings.CAP = 100;                //battery size in Ah
    16a2:	661d      	str	r5, [r3, #96]	; 0x60
  settings.chargecurrent2max = 150;  //max charge current in 0.1A
    16a4:	f8a3 a068 	strh.w	sl, [r3, #104]	; 0x68
  settings.socvolt[3] = 90;          //Voltage and SOC curve for voltage based SOC calc
    16a8:	f8c3 9080 	str.w	r9, [r3, #128]	; 0x80
  settings.conthold = 50;      //holding duty cycle for contactor 0-255
    16ac:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  settings.gaugelow = 50;      //empty fuel gauge pwm
    16b0:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
  settings.gaugehigh = 255;    //full fuel gauge pwm
    16b4:	21ff      	movs	r1, #255	; 0xff
  settings.cursens = 2;
    16b6:	2402      	movs	r4, #2
  settings.invertcur = 0;            //Invert current sensor direction
    16b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  settings.curcan = LemCAB300;
    16bc:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  settings.ncur = 1;           //number of multiples to use for current measurement
    16c0:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
  settings.voltsoc = 0;        //SOC purely voltage based
    16c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  settings.ChargerDirect = 1;  //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    16c8:	f240 1001 	movw	r0, #257	; 0x101
  settings.ESSmode = 0;        //activate ESS mode
    16cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  settings.gaugehigh = 255;    //full fuel gauge pwm
    16d0:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
  settings.CSCvariant = 0;     //0 BMW I3 - 1 Mini-E
    16d4:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
  settings.Precurrent = 1000;  //ma before closing main contator
    16d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  settings.TempOff = 0;        //Temperature offset
    16dc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
  settings.changecur = 20000;  //mA change overpoint
    16e0:	f644 6220 	movw	r2, #20000	; 0x4e20
  settings.convlow = 643;      // mV/A current sensor low range channel
    16e4:	f8df e098 	ldr.w	lr, [pc, #152]	; 1780 <loadSettings()+0x17c>
  settings.UnderDur = 5000;    //ms of allowed undervoltage before throwing open stopping discharge.
    16e8:	4e26      	ldr	r6, [pc, #152]	; (1784 <loadSettings()+0x180>)
  settings.DisTaper = 0.3f;          //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    16ea:	f8df c09c 	ldr.w	ip, [pc, #156]	; 1788 <loadSettings()+0x184>
  settings.cursens = 2;
    16ee:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  settings.chargertype = 2;    // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
    16f2:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  settings.ChargerDirect = 1;  //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    16f6:	f8a3 00d4 	strh.w	r0, [r3, #212]	; 0xd4
  settings.Pretime = 5000;     //ms of precharge time
    16fa:	f241 3488 	movw	r4, #5000	; 0x1388
  settings.balanceDuty = 60;
    16fe:	203c      	movs	r0, #60	; 0x3c
  settings.Precurrent = 1000;  //ma before closing main contator
    1700:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
  settings.changecur = 20000;  //mA change overpoint
    1704:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  settings.chargereff = 85;    //% effiecency of charger
    1708:	2155      	movs	r1, #85	; 0x55
  settings.chargerACv = 240;   // AC input voltage into Charger
    170a:	22f0      	movs	r2, #240	; 0xf0
  settings.convhigh = 58;      // mV/A current sensor high range channel
    170c:	f8c3 80a0 	str.w	r8, [r3, #160]	; 0xa0
  settings.convlow = 643;      // mV/A current sensor low range channel
    1710:	f8c3 e0a4 	str.w	lr, [r3, #164]	; 0xa4
  settings.offset1 = 1750;     //mV mid point of channel 1
    1714:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
  settings.chargerspd = 100;   //ms per message
    1718:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
  settings.UnderDur = 5000;    //ms of allowed undervoltage before throwing open stopping discharge.
    171c:	f8c3 60cc 	str.w	r6, [r3, #204]	; 0xcc
  settings.DisTaper = 0.3f;          //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    1720:	f8c3 c0d0 	str.w	ip, [r3, #208]	; 0xd0
  settings.Pretime = 5000;     //ms of precharge time
    1724:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  settings.balanceDuty = 60;
    1728:	f8a3 00b0 	strh.w	r0, [r3, #176]	; 0xb0
  settings.chargereff = 85;    //% effiecency of charger
    172c:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
  settings.chargerACv = 240;   // AC input voltage into Charger
    1730:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
    1734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1738:	00013e08 	.word	0x00013e08
    173c:	40400000 	.word	0x40400000
    1740:	40866666 	.word	0x40866666
    1744:	42680000 	.word	0x42680000
    1748:	06d606d6 	.word	0x06d606d6
    174c:	1fffd9bc 	.word	0x1fffd9bc
    1750:	3e4ccccd 	.word	0x3e4ccccd
    1754:	42820000 	.word	0x42820000
    1758:	c1200000 	.word	0xc1200000
    175c:	42200000 	.word	0x42200000
    1760:	40a00000 	.word	0x40a00000
    1764:	4079999a 	.word	0x4079999a
    1768:	3d23d70a 	.word	0x3d23d70a
    176c:	0007a120 	.word	0x0007a120
    1770:	40733333 	.word	0x40733333
    1774:	40833333 	.word	0x40833333
    1778:	3dcccccd 	.word	0x3dcccccd
    177c:	404ccccd 	.word	0x404ccccd
    1780:	4420c000 	.word	0x4420c000
    1784:	00051388 	.word	0x00051388
    1788:	3e99999a 	.word	0x3e99999a

0000178c <alarmupdate()>:
void alarmupdate() {
    178c:	b570      	push	{r4, r5, r6, lr}
  alarm[0] = 0x00;
    178e:	4d45      	ldr	r5, [pc, #276]	; (18a4 <alarmupdate()+0x118>)
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    1790:	4c45      	ldr	r4, [pc, #276]	; (18a8 <alarmupdate()+0x11c>)
    1792:	4846      	ldr	r0, [pc, #280]	; (18ac <alarmupdate()+0x120>)
    1794:	68e6      	ldr	r6, [r4, #12]
  alarm[0] = 0x00;
    1796:	2300      	movs	r3, #0
    1798:	702b      	strb	r3, [r5, #0]
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    179a:	f7ff fb49 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    179e:	4601      	mov	r1, r0
    17a0:	4630      	mov	r0, r6
    17a2:	f00b fbf5 	bl	cf90 <__aeabi_fcmplt>
    17a6:	b108      	cbz	r0, 17ac <alarmupdate()+0x20>
    alarm[0] = 0x04;
    17a8:	2304      	movs	r3, #4
    17aa:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    17ac:	483f      	ldr	r0, [pc, #252]	; (18ac <alarmupdate()+0x120>)
    17ae:	f7ff fb17 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    17b2:	6921      	ldr	r1, [r4, #16]
    17b4:	f00b fbec 	bl	cf90 <__aeabi_fcmplt>
    17b8:	b118      	cbz	r0, 17c2 <alarmupdate()+0x36>
    alarm[0] |= 0x10;
    17ba:	782b      	ldrb	r3, [r5, #0]
    17bc:	f043 0310 	orr.w	r3, r3, #16
    17c0:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > settings.OverTSetpoint) {
    17c2:	483a      	ldr	r0, [pc, #232]	; (18ac <alarmupdate()+0x120>)
    17c4:	f7ff fbee 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    17c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    17ca:	f00b fbff 	bl	cfcc <__aeabi_fcmpgt>
    17ce:	b118      	cbz	r0, 17d8 <alarmupdate()+0x4c>
    alarm[0] |= 0x40;
    17d0:	782b      	ldrb	r3, [r5, #0]
    17d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    17d6:	702b      	strb	r3, [r5, #0]
  alarm[1] = 0;
    17d8:	2300      	movs	r3, #0
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    17da:	4834      	ldr	r0, [pc, #208]	; (18ac <alarmupdate()+0x120>)
  alarm[1] = 0;
    17dc:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    17de:	f7ff fbe3 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    17e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    17e4:	f00b fbd4 	bl	cf90 <__aeabi_fcmplt>
    17e8:	b108      	cbz	r0, 17ee <alarmupdate()+0x62>
    alarm[1] = 0x01;
    17ea:	2301      	movs	r3, #1
    17ec:	706b      	strb	r3, [r5, #1]
  alarm[3] = 0;
    17ee:	2300      	movs	r3, #0
    17f0:	70eb      	strb	r3, [r5, #3]
  if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    17f2:	482e      	ldr	r0, [pc, #184]	; (18ac <alarmupdate()+0x120>)
    17f4:	f7ff fb1c 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    17f8:	4606      	mov	r6, r0
    17fa:	482c      	ldr	r0, [pc, #176]	; (18ac <alarmupdate()+0x120>)
    17fc:	f7ff faf0 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    1800:	4601      	mov	r1, r0
    1802:	4630      	mov	r0, r6
    1804:	f00b f91c 	bl	ca40 <__aeabi_fsub>
    1808:	6c61      	ldr	r1, [r4, #68]	; 0x44
    180a:	f00b fbdf 	bl	cfcc <__aeabi_fcmpgt>
    180e:	b108      	cbz	r0, 1814 <alarmupdate()+0x88>
    alarm[3] = 0x01;
    1810:	2301      	movs	r3, #1
    1812:	70eb      	strb	r3, [r5, #3]
  warning[0] = 0;
    1814:	4d26      	ldr	r5, [pc, #152]	; (18b0 <alarmupdate()+0x124>)
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    1816:	4825      	ldr	r0, [pc, #148]	; (18ac <alarmupdate()+0x120>)
  warning[0] = 0;
    1818:	2300      	movs	r3, #0
    181a:	702b      	strb	r3, [r5, #0]
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    181c:	f7ff fb08 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    1820:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1822:	4606      	mov	r6, r0
    1824:	68e0      	ldr	r0, [r4, #12]
    1826:	f00b f90b 	bl	ca40 <__aeabi_fsub>
    182a:	4601      	mov	r1, r0
    182c:	4630      	mov	r0, r6
    182e:	f00b fbcd 	bl	cfcc <__aeabi_fcmpgt>
    1832:	b108      	cbz	r0, 1838 <alarmupdate()+0xac>
    warning[0] = 0x04;
    1834:	2304      	movs	r3, #4
    1836:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < (settings.UnderVSetpoint + settings.WarnOff)) {
    1838:	481c      	ldr	r0, [pc, #112]	; (18ac <alarmupdate()+0x120>)
    183a:	f7ff fad1 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    183e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1840:	4606      	mov	r6, r0
    1842:	6920      	ldr	r0, [r4, #16]
    1844:	f00b f8fe 	bl	ca44 <__addsf3>
    1848:	4601      	mov	r1, r0
    184a:	4630      	mov	r0, r6
    184c:	f00b fba0 	bl	cf90 <__aeabi_fcmplt>
    1850:	b118      	cbz	r0, 185a <alarmupdate()+0xce>
    warning[0] |= 0x10;
    1852:	782b      	ldrb	r3, [r5, #0]
    1854:	f043 0310 	orr.w	r3, r3, #16
    1858:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > (settings.OverTSetpoint - settings.WarnToff)) {
    185a:	4814      	ldr	r0, [pc, #80]	; (18ac <alarmupdate()+0x120>)
    185c:	f7ff fba2 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    1860:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1862:	4606      	mov	r6, r0
    1864:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1866:	f00b f8eb 	bl	ca40 <__aeabi_fsub>
    186a:	4601      	mov	r1, r0
    186c:	4630      	mov	r0, r6
    186e:	f00b fbad 	bl	cfcc <__aeabi_fcmpgt>
    1872:	b118      	cbz	r0, 187c <alarmupdate()+0xf0>
    warning[0] |= 0x40;
    1874:	782b      	ldrb	r3, [r5, #0]
    1876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    187a:	702b      	strb	r3, [r5, #0]
  warning[1] = 0;
    187c:	2300      	movs	r3, #0
    187e:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < (settings.UnderTSetpoint + settings.WarnToff)) {
    1880:	480a      	ldr	r0, [pc, #40]	; (18ac <alarmupdate()+0x120>)
    1882:	f7ff fb91 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    1886:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1888:	4603      	mov	r3, r0
    188a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    188c:	461c      	mov	r4, r3
    188e:	f00b f8d9 	bl	ca44 <__addsf3>
    1892:	4601      	mov	r1, r0
    1894:	4620      	mov	r0, r4
    1896:	f00b fb7b 	bl	cf90 <__aeabi_fcmplt>
    189a:	b108      	cbz	r0, 18a0 <alarmupdate()+0x114>
    warning[1] = 0x01;
    189c:	2301      	movs	r3, #1
    189e:	706b      	strb	r3, [r5, #1]
}
    18a0:	bd70      	pop	{r4, r5, r6, pc}
    18a2:	bf00      	nop
    18a4:	1fff91d0 	.word	0x1fff91d0
    18a8:	1fffd9bc 	.word	0x1fffd9bc
    18ac:	1fff91e4 	.word	0x1fff91e4
    18b0:	1fffdab8 	.word	0x1fffdab8

000018b4 <gaugeupdate()>:
  if (gaugedebug != 0) {
    18b4:	4b53      	ldr	r3, [pc, #332]	; (1a04 <gaugeupdate()+0x150>)
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	2b00      	cmp	r3, #0
    18ba:	d07c      	beq.n	19b6 <gaugeupdate()+0x102>
void gaugeupdate() {
    18bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    SOCtest = SOCtest + 5;
    18be:	4e52      	ldr	r6, [pc, #328]	; (1a08 <gaugeupdate()+0x154>)
    18c0:	6830      	ldr	r0, [r6, #0]
    18c2:	3005      	adds	r0, #5
    if (SOCtest > 1000) {
    18c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
void gaugeupdate() {
    18c8:	b083      	sub	sp, #12
    if (SOCtest > 1000) {
    18ca:	dc70      	bgt.n	19ae <gaugeupdate()+0xfa>
    SOCtest = SOCtest + 5;
    18cc:	6030      	str	r0, [r6, #0]
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    18ce:	f00b f96d 	bl	cbac <__aeabi_i2f>
    18d2:	494e      	ldr	r1, [pc, #312]	; (1a0c <gaugeupdate()+0x158>)
    18d4:	f00b f9be 	bl	cc54 <__aeabi_fmul>
    18d8:	4607      	mov	r7, r0
    18da:	4d4d      	ldr	r5, [pc, #308]	; (1a10 <gaugeupdate()+0x15c>)
// when the input is a float or double, do all math using the input's type
template <class T, class A, class B, class C, class D>
T map(T x, A in_min, B in_max, C out_min, D out_max, typename std::enable_if<std::is_floating_point<T>::value >::type* = 0)
{
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    18dc:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
    18e0:	f00b f964 	bl	cbac <__aeabi_i2f>
    18e4:	4604      	mov	r4, r0
    18e6:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    18ea:	f00b f95f 	bl	cbac <__aeabi_i2f>
    18ee:	4621      	mov	r1, r4
    18f0:	f00b f8a6 	bl	ca40 <__aeabi_fsub>
    18f4:	4639      	mov	r1, r7
    18f6:	f00b f9ad 	bl	cc54 <__aeabi_fmul>
    18fa:	4946      	ldr	r1, [pc, #280]	; (1a14 <gaugeupdate()+0x160>)
    18fc:	f00b fa5e 	bl	cdbc <__aeabi_fdiv>
    1900:	4621      	mov	r1, r4
    1902:	f00b f89f 	bl	ca44 <__addsf3>
    1906:	f00b fb6b 	bl	cfe0 <__aeabi_f2iz>
    190a:	4601      	mov	r1, r0
    190c:	2006      	movs	r0, #6
    190e:	f008 fad3 	bl	9eb8 <analogWrite>
    1912:	2102      	movs	r1, #2
    1914:	4840      	ldr	r0, [pc, #256]	; (1a18 <gaugeupdate()+0x164>)
    1916:	f00a fabd 	bl	be94 <usb_serial_write>
    191a:	4840      	ldr	r0, [pc, #256]	; (1a1c <gaugeupdate()+0x168>)
    191c:	f007 fd76 	bl	940c <Print::println()>
    1920:	2106      	movs	r1, #6
    1922:	483f      	ldr	r0, [pc, #252]	; (1a20 <gaugeupdate()+0x16c>)
    1924:	f00a fab6 	bl	be94 <usb_serial_write>
    SERIALCONSOLE.print(SOCtest * 0.1);
    1928:	6830      	ldr	r0, [r6, #0]
    192a:	f00b f93f 	bl	cbac <__aeabi_i2f>
    192e:	4937      	ldr	r1, [pc, #220]	; (1a0c <gaugeupdate()+0x158>)
    1930:	f00b f990 	bl	cc54 <__aeabi_fmul>
    1934:	f00a ff6a 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1938:	2702      	movs	r7, #2
    193a:	4602      	mov	r2, r0
    193c:	460b      	mov	r3, r1
    193e:	9700      	str	r7, [sp, #0]
    1940:	4836      	ldr	r0, [pc, #216]	; (1a1c <gaugeupdate()+0x168>)
    1942:	f007 fd85 	bl	9450 <Print::printFloat(double, unsigned char)>
    1946:	210d      	movs	r1, #13
    1948:	4836      	ldr	r0, [pc, #216]	; (1a24 <gaugeupdate()+0x170>)
    194a:	f00a faa3 	bl	be94 <usb_serial_write>
    194e:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
    1952:	f00b f92b 	bl	cbac <__aeabi_i2f>
    1956:	4604      	mov	r4, r0
    SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1958:	6830      	ldr	r0, [r6, #0]
    195a:	f00b f927 	bl	cbac <__aeabi_i2f>
    195e:	492b      	ldr	r1, [pc, #172]	; (1a0c <gaugeupdate()+0x158>)
    1960:	f00b f978 	bl	cc54 <__aeabi_fmul>
    1964:	4603      	mov	r3, r0
    1966:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    196a:	461d      	mov	r5, r3
    196c:	f00b f91e 	bl	cbac <__aeabi_i2f>
    1970:	4621      	mov	r1, r4
    1972:	f00b f865 	bl	ca40 <__aeabi_fsub>
    1976:	4601      	mov	r1, r0
    1978:	4628      	mov	r0, r5
    197a:	f00b f96b 	bl	cc54 <__aeabi_fmul>
    197e:	4925      	ldr	r1, [pc, #148]	; (1a14 <gaugeupdate()+0x160>)
    1980:	f00b fa1c 	bl	cdbc <__aeabi_fdiv>
    1984:	4621      	mov	r1, r4
    1986:	f00b f85d 	bl	ca44 <__addsf3>
    198a:	f00a ff3f 	bl	c80c <__aeabi_f2d>
    198e:	9700      	str	r7, [sp, #0]
    1990:	4602      	mov	r2, r0
    1992:	460b      	mov	r3, r1
    1994:	4821      	ldr	r0, [pc, #132]	; (1a1c <gaugeupdate()+0x168>)
    1996:	f007 fd5b 	bl	9450 <Print::printFloat(double, unsigned char)>
    199a:	4639      	mov	r1, r7
    199c:	481e      	ldr	r0, [pc, #120]	; (1a18 <gaugeupdate()+0x164>)
    199e:	f00a fa79 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    19a2:	481e      	ldr	r0, [pc, #120]	; (1a1c <gaugeupdate()+0x168>)
}
    19a4:	b003      	add	sp, #12
    19a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    19aa:	f007 bd2f 	b.w	940c <Print::println()>
      SOCtest = 0;
    19ae:	2300      	movs	r3, #0
    19b0:	2700      	movs	r7, #0
    19b2:	6033      	str	r3, [r6, #0]
    19b4:	e791      	b.n	18da <gaugeupdate()+0x26>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    19b6:	4b16      	ldr	r3, [pc, #88]	; (1a10 <gaugeupdate()+0x15c>)
    19b8:	481b      	ldr	r0, [pc, #108]	; (1a28 <gaugeupdate()+0x174>)
    19ba:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
	long out_range = out_max - out_min;
    19be:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
	long num = (x - in_min) * out_range;
    19c2:	6803      	ldr	r3, [r0, #0]
	long result = num / in_range + out_min;
    19c4:	4819      	ldr	r0, [pc, #100]	; (1a2c <gaugeupdate()+0x178>)
	long out_range = out_max - out_min;
    19c6:	1a52      	subs	r2, r2, r1
	if (out_range >= 0) {
    19c8:	2a00      	cmp	r2, #0
	long num = (x - in_min) * out_range;
    19ca:	fb02 f303 	mul.w	r3, r2, r3
	if (out_range >= 0) {
    19ce:	db0b      	blt.n	19e8 <gaugeupdate()+0x134>
		num += in_range / 2;
    19d0:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
    19d2:	fb80 2003 	smull	r2, r0, r0, r3
    19d6:	17da      	asrs	r2, r3, #31
    19d8:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num < 0) return result - 1;
    19dc:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    19de:	4411      	add	r1, r2
		if (in_range * num < 0) return result - 1;
    19e0:	db0d      	blt.n	19fe <gaugeupdate()+0x14a>
    19e2:	2006      	movs	r0, #6
    19e4:	f008 ba68 	b.w	9eb8 <analogWrite>
		num -= in_range / 2;
    19e8:	3b32      	subs	r3, #50	; 0x32
	long result = num / in_range + out_min;
    19ea:	fb80 2003 	smull	r2, r0, r0, r3
    19ee:	17da      	asrs	r2, r3, #31
    19f0:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num >= 0) return result + 1;
    19f4:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    19f6:	4411      	add	r1, r2
		if (in_range * num >= 0) return result + 1;
    19f8:	dbf3      	blt.n	19e2 <gaugeupdate()+0x12e>
    19fa:	3101      	adds	r1, #1
    19fc:	e7f1      	b.n	19e2 <gaugeupdate()+0x12e>
		if (in_range * num < 0) return result - 1;
    19fe:	3901      	subs	r1, #1
    1a00:	e7ef      	b.n	19e2 <gaugeupdate()+0x12e>
    1a02:	bf00      	nop
    1a04:	1fffd8b8 	.word	0x1fffd8b8
    1a08:	1fff91bc 	.word	0x1fff91bc
    1a0c:	3dcccccd 	.word	0x3dcccccd
    1a10:	1fffd9bc 	.word	0x1fffd9bc
    1a14:	42c80000 	.word	0x42c80000
    1a18:	00014200 	.word	0x00014200
    1a1c:	1fff89fc 	.word	0x1fff89fc
    1a20:	00013e28 	.word	0x00013e28
    1a24:	00013e30 	.word	0x00013e30
    1a28:	1fff8824 	.word	0x1fff8824
    1a2c:	51eb851f 	.word	0x51eb851f

00001a30 <printbmsstat()>:
void printbmsstat() {
    1a30:	b530      	push	{r4, r5, lr}
  SERIALCONSOLE.println();
    1a32:	48a7      	ldr	r0, [pc, #668]	; (1cd0 <printbmsstat()+0x2a0>)
  if (settings.ESSmode == 1) {
    1a34:	4ca7      	ldr	r4, [pc, #668]	; (1cd4 <printbmsstat()+0x2a4>)
void printbmsstat() {
    1a36:	b085      	sub	sp, #20
  SERIALCONSOLE.println();
    1a38:	f007 fce8 	bl	940c <Print::println()>
  SERIALCONSOLE.println();
    1a3c:	48a4      	ldr	r0, [pc, #656]	; (1cd0 <printbmsstat()+0x2a0>)
    1a3e:	f007 fce5 	bl	940c <Print::println()>
  SERIALCONSOLE.println();
    1a42:	48a3      	ldr	r0, [pc, #652]	; (1cd0 <printbmsstat()+0x2a0>)
    1a44:	f007 fce2 	bl	940c <Print::println()>
    1a48:	48a3      	ldr	r0, [pc, #652]	; (1cd8 <printbmsstat()+0x2a8>)
    1a4a:	210d      	movs	r1, #13
    1a4c:	f00a fa22 	bl	be94 <usb_serial_write>
  if (settings.ESSmode == 1) {
    1a50:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    1a54:	2b01      	cmp	r3, #1
    1a56:	d011      	beq.n	1a7c <printbmsstat()+0x4c>
    SERIALCONSOLE.print(bmsstatus);
    1a58:	4da0      	ldr	r5, [pc, #640]	; (1cdc <printbmsstat()+0x2ac>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a5a:	489d      	ldr	r0, [pc, #628]	; (1cd0 <printbmsstat()+0x2a0>)
    1a5c:	7829      	ldrb	r1, [r5, #0]
    1a5e:	2300      	movs	r3, #0
    1a60:	220a      	movs	r2, #10
    1a62:	f007 fceb 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    switch (bmsstatus) {
    1a66:	782b      	ldrb	r3, [r5, #0]
    1a68:	2b05      	cmp	r3, #5
    1a6a:	d84f      	bhi.n	1b0c <printbmsstat()+0xdc>
    1a6c:	e8df f013 	tbh	[pc, r3, lsl #1]
    1a70:	01c901c4 	.word	0x01c901c4
    1a74:	01ba01ce 	.word	0x01ba01ce
    1a78:	01b501bf 	.word	0x01b501bf
    1a7c:	2109      	movs	r1, #9
    1a7e:	4898      	ldr	r0, [pc, #608]	; (1ce0 <printbmsstat()+0x2b0>)
    1a80:	f00a fa08 	bl	be94 <usb_serial_write>
    if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    1a84:	4897      	ldr	r0, [pc, #604]	; (1ce4 <printbmsstat()+0x2b4>)
    1a86:	f7ff f9ab 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    1a8a:	6921      	ldr	r1, [r4, #16]
    1a8c:	f00b fa80 	bl	cf90 <__aeabi_fcmplt>
    1a90:	2800      	cmp	r0, #0
    1a92:	f040 81de 	bne.w	1e52 <printbmsstat()+0x422>
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    1a96:	4893      	ldr	r0, [pc, #588]	; (1ce4 <printbmsstat()+0x2b4>)
    1a98:	f7ff f9ca 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    1a9c:	68e1      	ldr	r1, [r4, #12]
    1a9e:	f00b fa95 	bl	cfcc <__aeabi_fcmpgt>
    1aa2:	2800      	cmp	r0, #0
    1aa4:	f040 81e9 	bne.w	1e7a <printbmsstat()+0x44a>
    if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    1aa8:	488e      	ldr	r0, [pc, #568]	; (1ce4 <printbmsstat()+0x2b4>)
    1aaa:	f7ff f9c1 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    1aae:	4605      	mov	r5, r0
    1ab0:	488c      	ldr	r0, [pc, #560]	; (1ce4 <printbmsstat()+0x2b4>)
    1ab2:	f7ff f995 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    1ab6:	4601      	mov	r1, r0
    1ab8:	4628      	mov	r0, r5
    1aba:	f00a ffc1 	bl	ca40 <__aeabi_fsub>
    1abe:	6c61      	ldr	r1, [r4, #68]	; 0x44
    1ac0:	f00b fa84 	bl	cfcc <__aeabi_fcmpgt>
    1ac4:	2800      	cmp	r0, #0
    1ac6:	f040 81d3 	bne.w	1e70 <printbmsstat()+0x440>
    if (bms.getAvgTemperature() > settings.OverTSetpoint) {
    1aca:	4886      	ldr	r0, [pc, #536]	; (1ce4 <printbmsstat()+0x2b4>)
    1acc:	f7ff fa02 	bl	ed4 <BMSModuleManager::getAvgTemperature()>
    1ad0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1ad2:	f00b fa7b 	bl	cfcc <__aeabi_fcmpgt>
    1ad6:	2800      	cmp	r0, #0
    1ad8:	f040 81c5 	bne.w	1e66 <printbmsstat()+0x436>
    if (bms.getAvgTemperature() < settings.UnderTSetpoint) {
    1adc:	4881      	ldr	r0, [pc, #516]	; (1ce4 <printbmsstat()+0x2b4>)
    1ade:	f7ff f9f9 	bl	ed4 <BMSModuleManager::getAvgTemperature()>
    1ae2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1ae4:	f00b fa54 	bl	cf90 <__aeabi_fcmplt>
    1ae8:	2800      	cmp	r0, #0
    1aea:	f040 81b7 	bne.w	1e5c <printbmsstat()+0x42c>
    if (storagemode == 1) {
    1aee:	4b7e      	ldr	r3, [pc, #504]	; (1ce8 <printbmsstat()+0x2b8>)
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    1af0:	487c      	ldr	r0, [pc, #496]	; (1ce4 <printbmsstat()+0x2b4>)
    if (storagemode == 1) {
    1af2:	681b      	ldr	r3, [r3, #0]
    1af4:	2b01      	cmp	r3, #1
    1af6:	f000 81a0 	beq.w	1e3a <printbmsstat()+0x40a>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    1afa:	f7ff f971 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    1afe:	6921      	ldr	r1, [r4, #16]
    1b00:	f00b fa64 	bl	cfcc <__aeabi_fcmpgt>
    1b04:	2800      	cmp	r0, #0
    1b06:	f040 8186 	bne.w	1e16 <printbmsstat()+0x3e6>
    1b0a:	4d74      	ldr	r5, [pc, #464]	; (1cdc <printbmsstat()+0x2ac>)
    1b0c:	4877      	ldr	r0, [pc, #476]	; (1cec <printbmsstat()+0x2bc>)
    1b0e:	2102      	movs	r1, #2
    1b10:	f00a f9c0 	bl	be94 <usb_serial_write>
  if (digitalRead(IN3) == HIGH) {
    1b14:	2012      	movs	r0, #18
    1b16:	f008 fb71 	bl	a1fc <digitalRead>
    1b1a:	2801      	cmp	r0, #1
    1b1c:	f000 810a 	beq.w	1d34 <printbmsstat()+0x304>
  if (digitalRead(IN1) == HIGH) {
    1b20:	2011      	movs	r0, #17
    1b22:	f008 fb6b 	bl	a1fc <digitalRead>
    1b26:	2801      	cmp	r0, #1
    1b28:	f000 810e 	beq.w	1d48 <printbmsstat()+0x318>
  if (balancecells == 1) {
    1b2c:	4b70      	ldr	r3, [pc, #448]	; (1cf0 <printbmsstat()+0x2c0>)
    1b2e:	681c      	ldr	r4, [r3, #0]
    1b30:	2c01      	cmp	r4, #1
    1b32:	f000 8112 	beq.w	1d5a <printbmsstat()+0x32a>
    1b36:	2102      	movs	r1, #2
    1b38:	486c      	ldr	r0, [pc, #432]	; (1cec <printbmsstat()+0x2bc>)
  if ((contstat & 1) == 1) {
    1b3a:	4c6e      	ldr	r4, [pc, #440]	; (1cf4 <printbmsstat()+0x2c4>)
    1b3c:	f00a f9aa 	bl	be94 <usb_serial_write>
  SERIALCONSOLE.print(cellspresent);
    1b40:	4b6d      	ldr	r3, [pc, #436]	; (1cf8 <printbmsstat()+0x2c8>)
	size_t print(int n)				{ return print((long)n); }
    1b42:	4863      	ldr	r0, [pc, #396]	; (1cd0 <printbmsstat()+0x2a0>)
    1b44:	6819      	ldr	r1, [r3, #0]
    1b46:	f007 fc59 	bl	93fc <Print::print(long)>
  SERIALCONSOLE.println();
    1b4a:	4861      	ldr	r0, [pc, #388]	; (1cd0 <printbmsstat()+0x2a0>)
    1b4c:	f007 fc5e 	bl	940c <Print::println()>
    1b50:	2104      	movs	r1, #4
    1b52:	486a      	ldr	r0, [pc, #424]	; (1cfc <printbmsstat()+0x2cc>)
    1b54:	f00a f99e 	bl	be94 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(OUT1));
    1b58:	200b      	movs	r0, #11
    1b5a:	f008 fb4f 	bl	a1fc <digitalRead>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1b5e:	2300      	movs	r3, #0
    1b60:	4601      	mov	r1, r0
    1b62:	220a      	movs	r2, #10
    1b64:	485a      	ldr	r0, [pc, #360]	; (1cd0 <printbmsstat()+0x2a0>)
    1b66:	f007 fc69 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT2));
    1b6a:	200c      	movs	r0, #12
    1b6c:	f008 fb46 	bl	a1fc <digitalRead>
    1b70:	2300      	movs	r3, #0
    1b72:	4601      	mov	r1, r0
    1b74:	220a      	movs	r2, #10
    1b76:	4856      	ldr	r0, [pc, #344]	; (1cd0 <printbmsstat()+0x2a0>)
    1b78:	f007 fc60 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT3));
    1b7c:	2014      	movs	r0, #20
    1b7e:	f008 fb3d 	bl	a1fc <digitalRead>
    1b82:	2300      	movs	r3, #0
    1b84:	4601      	mov	r1, r0
    1b86:	220a      	movs	r2, #10
    1b88:	4851      	ldr	r0, [pc, #324]	; (1cd0 <printbmsstat()+0x2a0>)
    1b8a:	f007 fc57 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT4));
    1b8e:	2015      	movs	r0, #21
    1b90:	f008 fb34 	bl	a1fc <digitalRead>
    1b94:	220a      	movs	r2, #10
    1b96:	4601      	mov	r1, r0
    1b98:	2300      	movs	r3, #0
    1b9a:	484d      	ldr	r0, [pc, #308]	; (1cd0 <printbmsstat()+0x2a0>)
    1b9c:	f007 fc4e 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ba0:	2106      	movs	r1, #6
    1ba2:	4857      	ldr	r0, [pc, #348]	; (1d00 <printbmsstat()+0x2d0>)
    1ba4:	f00a f976 	bl	be94 <usb_serial_write>
  if ((contstat & 1) == 1) {
    1ba8:	6823      	ldr	r3, [r4, #0]
    1baa:	07d8      	lsls	r0, r3, #31
    1bac:	bf4b      	itete	mi
    1bae:	2101      	movmi	r1, #1
    1bb0:	2101      	movpl	r1, #1
    1bb2:	4854      	ldrmi	r0, [pc, #336]	; (1d04 <printbmsstat()+0x2d4>)
    1bb4:	4854      	ldrpl	r0, [pc, #336]	; (1d08 <printbmsstat()+0x2d8>)
    1bb6:	f00a f96d 	bl	be94 <usb_serial_write>
  if ((contstat & 2) == 2) {
    1bba:	6823      	ldr	r3, [r4, #0]
    1bbc:	0799      	lsls	r1, r3, #30
    1bbe:	bf4b      	itete	mi
    1bc0:	2101      	movmi	r1, #1
    1bc2:	2101      	movpl	r1, #1
    1bc4:	484f      	ldrmi	r0, [pc, #316]	; (1d04 <printbmsstat()+0x2d4>)
    1bc6:	4850      	ldrpl	r0, [pc, #320]	; (1d08 <printbmsstat()+0x2d8>)
    1bc8:	f00a f964 	bl	be94 <usb_serial_write>
  if ((contstat & 4) == 4) {
    1bcc:	6823      	ldr	r3, [r4, #0]
    1bce:	075a      	lsls	r2, r3, #29
    1bd0:	bf4b      	itete	mi
    1bd2:	2101      	movmi	r1, #1
    1bd4:	2101      	movpl	r1, #1
    1bd6:	484b      	ldrmi	r0, [pc, #300]	; (1d04 <printbmsstat()+0x2d4>)
    1bd8:	484b      	ldrpl	r0, [pc, #300]	; (1d08 <printbmsstat()+0x2d8>)
    1bda:	f00a f95b 	bl	be94 <usb_serial_write>
  if ((contstat & 8) == 8) {
    1bde:	6823      	ldr	r3, [r4, #0]
    1be0:	071b      	lsls	r3, r3, #28
    1be2:	bf4b      	itete	mi
    1be4:	2101      	movmi	r1, #1
    1be6:	2101      	movpl	r1, #1
    1be8:	4846      	ldrmi	r0, [pc, #280]	; (1d04 <printbmsstat()+0x2d4>)
    1bea:	4847      	ldrpl	r0, [pc, #284]	; (1d08 <printbmsstat()+0x2d8>)
    1bec:	f00a f952 	bl	be94 <usb_serial_write>
    1bf0:	2104      	movs	r1, #4
    1bf2:	4846      	ldr	r0, [pc, #280]	; (1d0c <printbmsstat()+0x2dc>)
    1bf4:	f00a f94e 	bl	be94 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(IN1));
    1bf8:	2011      	movs	r0, #17
    1bfa:	f008 faff 	bl	a1fc <digitalRead>
    1bfe:	2300      	movs	r3, #0
    1c00:	4601      	mov	r1, r0
    1c02:	220a      	movs	r2, #10
    1c04:	4832      	ldr	r0, [pc, #200]	; (1cd0 <printbmsstat()+0x2a0>)
    1c06:	f007 fc19 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN2));
    1c0a:	2010      	movs	r0, #16
    1c0c:	f008 faf6 	bl	a1fc <digitalRead>
    1c10:	2300      	movs	r3, #0
    1c12:	4601      	mov	r1, r0
    1c14:	220a      	movs	r2, #10
    1c16:	482e      	ldr	r0, [pc, #184]	; (1cd0 <printbmsstat()+0x2a0>)
    1c18:	f007 fc10 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN3));
    1c1c:	2012      	movs	r0, #18
    1c1e:	f008 faed 	bl	a1fc <digitalRead>
    1c22:	2300      	movs	r3, #0
    1c24:	4601      	mov	r1, r0
    1c26:	220a      	movs	r2, #10
    1c28:	4829      	ldr	r0, [pc, #164]	; (1cd0 <printbmsstat()+0x2a0>)
    1c2a:	f007 fc07 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN4));
    1c2e:	2013      	movs	r0, #19
    1c30:	f008 fae4 	bl	a1fc <digitalRead>
    1c34:	220a      	movs	r2, #10
    1c36:	4601      	mov	r1, r0
    1c38:	2300      	movs	r3, #0
    1c3a:	4825      	ldr	r0, [pc, #148]	; (1cd0 <printbmsstat()+0x2a0>)
    1c3c:	f007 fbfe 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c40:	2118      	movs	r1, #24
    1c42:	4833      	ldr	r0, [pc, #204]	; (1d10 <printbmsstat()+0x2e0>)
    1c44:	f00a f926 	bl	be94 <usb_serial_write>
  SERIALCONSOLE.print(chargecurrent * 0.1, 0);
    1c48:	4b32      	ldr	r3, [pc, #200]	; (1d14 <printbmsstat()+0x2e4>)
    1c4a:	8818      	ldrh	r0, [r3, #0]
    1c4c:	f00a ffae 	bl	cbac <__aeabi_i2f>
    1c50:	4931      	ldr	r1, [pc, #196]	; (1d18 <printbmsstat()+0x2e8>)
    1c52:	f00a ffff 	bl	cc54 <__aeabi_fmul>
    1c56:	f00a fdd9 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1c5a:	2400      	movs	r4, #0
    1c5c:	4602      	mov	r2, r0
    1c5e:	460b      	mov	r3, r1
    1c60:	9400      	str	r4, [sp, #0]
    1c62:	481b      	ldr	r0, [pc, #108]	; (1cd0 <printbmsstat()+0x2a0>)
    1c64:	f007 fbf4 	bl	9450 <Print::printFloat(double, unsigned char)>
    1c68:	211d      	movs	r1, #29
    1c6a:	482c      	ldr	r0, [pc, #176]	; (1d1c <printbmsstat()+0x2ec>)
    1c6c:	f00a f912 	bl	be94 <usb_serial_write>
  SERIALCONSOLE.print(discurrent * 0.1, 0);
    1c70:	4b2b      	ldr	r3, [pc, #172]	; (1d20 <printbmsstat()+0x2f0>)
    1c72:	6818      	ldr	r0, [r3, #0]
    1c74:	f00a ff9a 	bl	cbac <__aeabi_i2f>
    1c78:	4927      	ldr	r1, [pc, #156]	; (1d18 <printbmsstat()+0x2e8>)
    1c7a:	f00a ffeb 	bl	cc54 <__aeabi_fmul>
    1c7e:	f00a fdc5 	bl	c80c <__aeabi_f2d>
    1c82:	9400      	str	r4, [sp, #0]
    1c84:	460b      	mov	r3, r1
    1c86:	4602      	mov	r2, r0
    1c88:	4811      	ldr	r0, [pc, #68]	; (1cd0 <printbmsstat()+0x2a0>)
    1c8a:	4c26      	ldr	r4, [pc, #152]	; (1d24 <printbmsstat()+0x2f4>)
    1c8c:	f007 fbe0 	bl	9450 <Print::printFloat(double, unsigned char)>
    1c90:	4825      	ldr	r0, [pc, #148]	; (1d28 <printbmsstat()+0x2f8>)
    1c92:	2102      	movs	r1, #2
    1c94:	f00a f8fe 	bl	be94 <usb_serial_write>
  if (bmsstatus == Charge || accurlim > 0) {
    1c98:	782b      	ldrb	r3, [r5, #0]
    1c9a:	2b03      	cmp	r3, #3
    1c9c:	d002      	beq.n	1ca4 <printbmsstat()+0x274>
    1c9e:	8823      	ldrh	r3, [r4, #0]
    1ca0:	b29b      	uxth	r3, r3
    1ca2:	b19b      	cbz	r3, 1ccc <printbmsstat()+0x29c>
    1ca4:	2117      	movs	r1, #23
    1ca6:	4821      	ldr	r0, [pc, #132]	; (1d2c <printbmsstat()+0x2fc>)
    1ca8:	f00a f8f4 	bl	be94 <usb_serial_write>
    Serial.print(accurlim);
    1cac:	8821      	ldrh	r1, [r4, #0]
	size_t print(int n)				{ return print((long)n); }
    1cae:	4808      	ldr	r0, [pc, #32]	; (1cd0 <printbmsstat()+0x2a0>)
    1cb0:	b289      	uxth	r1, r1
    1cb2:	f007 fba3 	bl	93fc <Print::print(long)>
    1cb6:	481c      	ldr	r0, [pc, #112]	; (1d28 <printbmsstat()+0x2f8>)
    1cb8:	2102      	movs	r1, #2
    1cba:	f00a f8eb 	bl	be94 <usb_serial_write>
  if (bmsstatus == Charge && CPdebug == 1) {
    1cbe:	782b      	ldrb	r3, [r5, #0]
    1cc0:	2b03      	cmp	r3, #3
    1cc2:	d103      	bne.n	1ccc <printbmsstat()+0x29c>
    1cc4:	4b1a      	ldr	r3, [pc, #104]	; (1d30 <printbmsstat()+0x300>)
    1cc6:	781b      	ldrb	r3, [r3, #0]
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d168      	bne.n	1d9e <printbmsstat()+0x36e>
}
    1ccc:	b005      	add	sp, #20
    1cce:	bd30      	pop	{r4, r5, pc}
    1cd0:	1fff89fc 	.word	0x1fff89fc
    1cd4:	1fffd9bc 	.word	0x1fffd9bc
    1cd8:	00013e40 	.word	0x00013e40
    1cdc:	1fffd708 	.word	0x1fffd708
    1ce0:	00013e50 	.word	0x00013e50
    1ce4:	1fff91e4 	.word	0x1fff91e4
    1ce8:	1fffdaa0 	.word	0x1fffdaa0
    1cec:	00014200 	.word	0x00014200
    1cf0:	1fff91d8 	.word	0x1fff91d8
    1cf4:	1fffd790 	.word	0x1fffd790
    1cf8:	1fffd710 	.word	0x1fffd710
    1cfc:	00013f4c 	.word	0x00013f4c
    1d00:	00013f54 	.word	0x00013f54
    1d04:	00013f5c 	.word	0x00013f5c
    1d08:	00013f60 	.word	0x00013f60
    1d0c:	00013f64 	.word	0x00013f64
    1d10:	00013f6c 	.word	0x00013f6c
    1d14:	1fffd714 	.word	0x1fffd714
    1d18:	3dcccccd 	.word	0x3dcccccd
    1d1c:	00013f88 	.word	0x00013f88
    1d20:	1fffd8a8 	.word	0x1fffd8a8
    1d24:	1fff91c8 	.word	0x1fff91c8
    1d28:	00013fa8 	.word	0x00013fa8
    1d2c:	00013fac 	.word	0x00013fac
    1d30:	1fff9184 	.word	0x1fff9184
    1d34:	210e      	movs	r1, #14
    1d36:	485a      	ldr	r0, [pc, #360]	; (1ea0 <printbmsstat()+0x470>)
    1d38:	f00a f8ac 	bl	be94 <usb_serial_write>
  if (digitalRead(IN1) == HIGH) {
    1d3c:	2011      	movs	r0, #17
    1d3e:	f008 fa5d 	bl	a1fc <digitalRead>
    1d42:	2801      	cmp	r0, #1
    1d44:	f47f aef2 	bne.w	1b2c <printbmsstat()+0xfc>
    1d48:	4856      	ldr	r0, [pc, #344]	; (1ea4 <printbmsstat()+0x474>)
    1d4a:	210a      	movs	r1, #10
    1d4c:	f00a f8a2 	bl	be94 <usb_serial_write>
  if (balancecells == 1) {
    1d50:	4b55      	ldr	r3, [pc, #340]	; (1ea8 <printbmsstat()+0x478>)
    1d52:	681c      	ldr	r4, [r3, #0]
    1d54:	2c01      	cmp	r4, #1
    1d56:	f47f aeee 	bne.w	1b36 <printbmsstat()+0x106>
    1d5a:	2111      	movs	r1, #17
    1d5c:	4853      	ldr	r0, [pc, #332]	; (1eac <printbmsstat()+0x47c>)
    1d5e:	f00a f899 	bl	be94 <usb_serial_write>
    1d62:	4621      	mov	r1, r4
    1d64:	4852      	ldr	r0, [pc, #328]	; (1eb0 <printbmsstat()+0x480>)
    1d66:	f00a f895 	bl	be94 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d6a:	4a52      	ldr	r2, [pc, #328]	; (1eb4 <printbmsstat()+0x484>)
    SERIALCONSOLE.print((balancetimer - millis()) * 0.001, 0);
    1d6c:	4b52      	ldr	r3, [pc, #328]	; (1eb8 <printbmsstat()+0x488>)
    1d6e:	6812      	ldr	r2, [r2, #0]
    1d70:	9203      	str	r2, [sp, #12]
    1d72:	6818      	ldr	r0, [r3, #0]
	return ret;
    1d74:	9b03      	ldr	r3, [sp, #12]
    1d76:	1ac0      	subs	r0, r0, r3
    1d78:	f00a ff14 	bl	cba4 <__aeabi_ui2f>
    1d7c:	494f      	ldr	r1, [pc, #316]	; (1ebc <printbmsstat()+0x48c>)
    1d7e:	f00a ff69 	bl	cc54 <__aeabi_fmul>
    1d82:	f00a fd43 	bl	c80c <__aeabi_f2d>
    1d86:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1d88:	2100      	movs	r1, #0
    1d8a:	4602      	mov	r2, r0
    1d8c:	9100      	str	r1, [sp, #0]
    1d8e:	484c      	ldr	r0, [pc, #304]	; (1ec0 <printbmsstat()+0x490>)
    1d90:	f007 fb5e 	bl	9450 <Print::printFloat(double, unsigned char)>
    1d94:	4621      	mov	r1, r4
    1d96:	4846      	ldr	r0, [pc, #280]	; (1eb0 <printbmsstat()+0x480>)
    1d98:	f00a f87c 	bl	be94 <usb_serial_write>
    1d9c:	e6cb      	b.n	1b36 <printbmsstat()+0x106>
    1d9e:	210b      	movs	r1, #11
    1da0:	4848      	ldr	r0, [pc, #288]	; (1ec4 <printbmsstat()+0x494>)
    1da2:	f00a f877 	bl	be94 <usb_serial_write>
    Serial.print(duration);
    1da6:	4b48      	ldr	r3, [pc, #288]	; (1ec8 <printbmsstat()+0x498>)
	size_t print(int n)				{ return print((long)n); }
    1da8:	4845      	ldr	r0, [pc, #276]	; (1ec0 <printbmsstat()+0x490>)
    1daa:	8819      	ldrh	r1, [r3, #0]
    1dac:	b289      	uxth	r1, r1
    1dae:	f007 fb25 	bl	93fc <Print::print(long)>
    1db2:	2111      	movs	r1, #17
    1db4:	4845      	ldr	r0, [pc, #276]	; (1ecc <printbmsstat()+0x49c>)
    1db6:	f00a f86d 	bl	be94 <usb_serial_write>
    Serial.print(chargerpower);
    1dba:	4b45      	ldr	r3, [pc, #276]	; (1ed0 <printbmsstat()+0x4a0>)
    1dbc:	4840      	ldr	r0, [pc, #256]	; (1ec0 <printbmsstat()+0x490>)
    1dbe:	8819      	ldrh	r1, [r3, #0]
    1dc0:	f007 fb1c 	bl	93fc <Print::print(long)>
    if (chargecurrentlimit == false) {
    1dc4:	4b43      	ldr	r3, [pc, #268]	; (1ed4 <printbmsstat()+0x4a4>)
    1dc6:	781b      	ldrb	r3, [r3, #0]
    1dc8:	2b00      	cmp	r3, #0
    1dca:	d165      	bne.n	1e98 <printbmsstat()+0x468>
    1dcc:	4842      	ldr	r0, [pc, #264]	; (1ed8 <printbmsstat()+0x4a8>)
    1dce:	2119      	movs	r1, #25
}
    1dd0:	b005      	add	sp, #20
    1dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1dd6:	f00a b85d 	b.w	be94 <usb_serial_write>
    1dda:	2107      	movs	r1, #7
    1ddc:	483f      	ldr	r0, [pc, #252]	; (1edc <printbmsstat()+0x4ac>)
    1dde:	f00a f859 	bl	be94 <usb_serial_write>
    1de2:	e693      	b.n	1b0c <printbmsstat()+0xdc>
    1de4:	2108      	movs	r1, #8
    1de6:	483e      	ldr	r0, [pc, #248]	; (1ee0 <printbmsstat()+0x4b0>)
    1de8:	f00a f854 	bl	be94 <usb_serial_write>
    1dec:	e68e      	b.n	1b0c <printbmsstat()+0xdc>
    1dee:	210b      	movs	r1, #11
    1df0:	483c      	ldr	r0, [pc, #240]	; (1ee4 <printbmsstat()+0x4b4>)
    1df2:	f00a f84f 	bl	be94 <usb_serial_write>
    1df6:	e689      	b.n	1b0c <printbmsstat()+0xdc>
    1df8:	2106      	movs	r1, #6
    1dfa:	483b      	ldr	r0, [pc, #236]	; (1ee8 <printbmsstat()+0x4b8>)
    1dfc:	f00a f84a 	bl	be94 <usb_serial_write>
    1e00:	e684      	b.n	1b0c <printbmsstat()+0xdc>
    1e02:	2107      	movs	r1, #7
    1e04:	4839      	ldr	r0, [pc, #228]	; (1eec <printbmsstat()+0x4bc>)
    1e06:	f00a f845 	bl	be94 <usb_serial_write>
    1e0a:	e67f      	b.n	1b0c <printbmsstat()+0xdc>
    1e0c:	2107      	movs	r1, #7
    1e0e:	4838      	ldr	r0, [pc, #224]	; (1ef0 <printbmsstat()+0x4c0>)
    1e10:	f00a f840 	bl	be94 <usb_serial_write>
    1e14:	e67a      	b.n	1b0c <printbmsstat()+0xdc>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    1e16:	4837      	ldr	r0, [pc, #220]	; (1ef4 <printbmsstat()+0x4c4>)
        if (bmsstatus == Error) {
    1e18:	4d37      	ldr	r5, [pc, #220]	; (1ef8 <printbmsstat()+0x4c8>)
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    1e1a:	f7ff f809 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    1e1e:	68e1      	ldr	r1, [r4, #12]
    1e20:	f00b f8b6 	bl	cf90 <__aeabi_fcmplt>
    1e24:	2800      	cmp	r0, #0
    1e26:	f43f ae71 	beq.w	1b0c <printbmsstat()+0xdc>
        if (bmsstatus == Error) {
    1e2a:	782b      	ldrb	r3, [r5, #0]
    1e2c:	2b05      	cmp	r3, #5
    1e2e:	d10b      	bne.n	1e48 <printbmsstat()+0x418>
    1e30:	210a      	movs	r1, #10
    1e32:	4832      	ldr	r0, [pc, #200]	; (1efc <printbmsstat()+0x4cc>)
    1e34:	f00a f82e 	bl	be94 <usb_serial_write>
    1e38:	e668      	b.n	1b0c <printbmsstat()+0xdc>
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    1e3a:	f7fe ffd1 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    1e3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1e40:	f00b f8c4 	bl	cfcc <__aeabi_fcmpgt>
    1e44:	b9f0      	cbnz	r0, 1e84 <printbmsstat()+0x454>
    1e46:	4d2c      	ldr	r5, [pc, #176]	; (1ef8 <printbmsstat()+0x4c8>)
    1e48:	482d      	ldr	r0, [pc, #180]	; (1f00 <printbmsstat()+0x4d0>)
    1e4a:	2108      	movs	r1, #8
    1e4c:	f00a f822 	bl	be94 <usb_serial_write>
    1e50:	e65c      	b.n	1b0c <printbmsstat()+0xdc>
    1e52:	210f      	movs	r1, #15
    1e54:	482b      	ldr	r0, [pc, #172]	; (1f04 <printbmsstat()+0x4d4>)
    1e56:	f00a f81d 	bl	be94 <usb_serial_write>
    1e5a:	e61c      	b.n	1a96 <printbmsstat()+0x66>
    1e5c:	210d      	movs	r1, #13
    1e5e:	482a      	ldr	r0, [pc, #168]	; (1f08 <printbmsstat()+0x4d8>)
    1e60:	f00a f818 	bl	be94 <usb_serial_write>
    1e64:	e643      	b.n	1aee <printbmsstat()+0xbe>
    1e66:	210c      	movs	r1, #12
    1e68:	4828      	ldr	r0, [pc, #160]	; (1f0c <printbmsstat()+0x4dc>)
    1e6a:	f00a f813 	bl	be94 <usb_serial_write>
    1e6e:	e635      	b.n	1adc <printbmsstat()+0xac>
    1e70:	2111      	movs	r1, #17
    1e72:	4827      	ldr	r0, [pc, #156]	; (1f10 <printbmsstat()+0x4e0>)
    1e74:	f00a f80e 	bl	be94 <usb_serial_write>
    1e78:	e627      	b.n	1aca <printbmsstat()+0x9a>
    1e7a:	210e      	movs	r1, #14
    1e7c:	4825      	ldr	r0, [pc, #148]	; (1f14 <printbmsstat()+0x4e4>)
    1e7e:	f00a f809 	bl	be94 <usb_serial_write>
    1e82:	e611      	b.n	1aa8 <printbmsstat()+0x78>
    1e84:	2116      	movs	r1, #22
    1e86:	4824      	ldr	r0, [pc, #144]	; (1f18 <printbmsstat()+0x4e8>)
    1e88:	4d1b      	ldr	r5, [pc, #108]	; (1ef8 <printbmsstat()+0x4c8>)
    1e8a:	f00a f803 	bl	be94 <usb_serial_write>
    1e8e:	481b      	ldr	r0, [pc, #108]	; (1efc <printbmsstat()+0x4cc>)
    1e90:	210a      	movs	r1, #10
    1e92:	f009 ffff 	bl	be94 <usb_serial_write>
    1e96:	e639      	b.n	1b0c <printbmsstat()+0xdc>
    1e98:	4820      	ldr	r0, [pc, #128]	; (1f1c <printbmsstat()+0x4ec>)
    1e9a:	211d      	movs	r1, #29
    1e9c:	e798      	b.n	1dd0 <printbmsstat()+0x3a0>
    1e9e:	bf00      	nop
    1ea0:	00013f18 	.word	0x00013f18
    1ea4:	00013f28 	.word	0x00013f28
    1ea8:	1fff91d8 	.word	0x1fff91d8
    1eac:	00013f34 	.word	0x00013f34
    1eb0:	00013f48 	.word	0x00013f48
    1eb4:	1fffdcc4 	.word	0x1fffdcc4
    1eb8:	1fff91e0 	.word	0x1fff91e0
    1ebc:	3a83126f 	.word	0x3a83126f
    1ec0:	1fff89fc 	.word	0x1fff89fc
    1ec4:	00013fc4 	.word	0x00013fc4
    1ec8:	1fffd8ac 	.word	0x1fffd8ac
    1ecc:	00013fd0 	.word	0x00013fd0
    1ed0:	1fffd720 	.word	0x1fffd720
    1ed4:	1fffd716 	.word	0x1fffd716
    1ed8:	00013fe4 	.word	0x00013fe4
    1edc:	00013f10 	.word	0x00013f10
    1ee0:	00013f04 	.word	0x00013f04
    1ee4:	00013ef0 	.word	0x00013ef0
    1ee8:	00013ee0 	.word	0x00013ee0
    1eec:	00013ee8 	.word	0x00013ee8
    1ef0:	00013efc 	.word	0x00013efc
    1ef4:	1fff91e4 	.word	0x1fff91e4
    1ef8:	1fffd708 	.word	0x1fffd708
    1efc:	00013ec8 	.word	0x00013ec8
    1f00:	00013ed4 	.word	0x00013ed4
    1f04:	00013e5c 	.word	0x00013e5c
    1f08:	00013ea0 	.word	0x00013ea0
    1f0c:	00013e90 	.word	0x00013e90
    1f10:	00013e7c 	.word	0x00013e7c
    1f14:	00013e6c 	.word	0x00013e6c
    1f18:	00013eb0 	.word	0x00013eb0
    1f1c:	00014000 	.word	0x00014000

00001f20 <getcurrent()>:
void getcurrent() {
    1f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    1f24:	4cb5      	ldr	r4, [pc, #724]	; (21fc <getcurrent()+0x2dc>)
    1f26:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
    1f2a:	2e01      	cmp	r6, #1
void getcurrent() {
    1f2c:	b08c      	sub	sp, #48	; 0x30
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    1f2e:	f000 8145 	beq.w	21bc <getcurrent()+0x29c>
    1f32:	2e03      	cmp	r6, #3
    1f34:	d05d      	beq.n	1ff2 <getcurrent()+0xd2>
    1f36:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 2200 <getcurrent()+0x2e0>
    1f3a:	4fb2      	ldr	r7, [pc, #712]	; (2204 <getcurrent()+0x2e4>)
    1f3c:	4eb2      	ldr	r6, [pc, #712]	; (2208 <getcurrent()+0x2e8>)
  if (settings.invertcur == 1) {
    1f3e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  lowpassFilter.input(RawCur);
    1f42:	48b2      	ldr	r0, [pc, #712]	; (220c <getcurrent()+0x2ec>)
  if (settings.invertcur == 1) {
    1f44:	2b01      	cmp	r3, #1
    RawCur = RawCur * -1;
    1f46:	bf09      	itett	eq
    1f48:	6831      	ldreq	r1, [r6, #0]
    1f4a:	6831      	ldrne	r1, [r6, #0]
    1f4c:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    1f50:	6031      	streq	r1, [r6, #0]
  lowpassFilter.input(RawCur);
    1f52:	f006 ffff 	bl	8f54 <FilterOnePole::input(float)>
  if (debugCur != 0) {
    1f56:	683b      	ldr	r3, [r7, #0]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	f040 8115 	bne.w	2188 <getcurrent()+0x268>
  currentact = lowpassFilter.output();
    1f5e:	48ab      	ldr	r0, [pc, #684]	; (220c <getcurrent()+0x2ec>)
    1f60:	f006 ffcc 	bl	8efc <FilterOnePole::output()>
  if (debugCur != 0) {
    1f64:	683b      	ldr	r3, [r7, #0]
  currentact = lowpassFilter.output();
    1f66:	f8c8 0000 	str.w	r0, [r8]
    1f6a:	4605      	mov	r5, r0
  if (debugCur != 0) {
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	f040 80fb 	bne.w	2168 <getcurrent()+0x248>
  if (settings.cursens == Analoguedual) {
    1f72:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    1f76:	2b01      	cmp	r3, #1
    1f78:	f000 80ba 	beq.w	20f0 <getcurrent()+0x1d0>
    if (currentact > 500 || currentact < -500) {
    1f7c:	49a4      	ldr	r1, [pc, #656]	; (2210 <getcurrent()+0x2f0>)
    1f7e:	4628      	mov	r0, r5
    1f80:	f00b f824 	bl	cfcc <__aeabi_fcmpgt>
    1f84:	b930      	cbnz	r0, 1f94 <getcurrent()+0x74>
    1f86:	49a3      	ldr	r1, [pc, #652]	; (2214 <getcurrent()+0x2f4>)
    1f88:	4628      	mov	r0, r5
    1f8a:	f00b f801 	bl	cf90 <__aeabi_fcmplt>
    1f8e:	2800      	cmp	r0, #0
    1f90:	f000 81df 	beq.w	2352 <getcurrent()+0x432>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f94:	f8df a280 	ldr.w	sl, [pc, #640]	; 2218 <getcurrent()+0x2f8>
      ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    1f98:	f8df 9280 	ldr.w	r9, [pc, #640]	; 221c <getcurrent()+0x2fc>
    1f9c:	f8da 3000 	ldr.w	r3, [sl]
    1fa0:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    1fa2:	980a      	ldr	r0, [sp, #40]	; 0x28
    1fa4:	f8d9 3000 	ldr.w	r3, [r9]
    1fa8:	4f9d      	ldr	r7, [pc, #628]	; (2220 <getcurrent()+0x300>)
    1faa:	1ac0      	subs	r0, r0, r3
    1fac:	f00a fdfa 	bl	cba4 <__aeabi_ui2f>
    1fb0:	4629      	mov	r1, r5
    1fb2:	f00a fe4f 	bl	cc54 <__aeabi_fmul>
    1fb6:	499b      	ldr	r1, [pc, #620]	; (2224 <getcurrent()+0x304>)
    1fb8:	f00a ff00 	bl	cdbc <__aeabi_fdiv>
    1fbc:	4999      	ldr	r1, [pc, #612]	; (2224 <getcurrent()+0x304>)
    1fbe:	f00a fefd 	bl	cdbc <__aeabi_fdiv>
    1fc2:	6839      	ldr	r1, [r7, #0]
    1fc4:	f00a fd3e 	bl	ca44 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1fc8:	f8da 3000 	ldr.w	r3, [sl]
    1fcc:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    1fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fd0:	6038      	str	r0, [r7, #0]
      lasttime = millis();
    1fd2:	f8c9 3000 	str.w	r3, [r9]
  currentact = settings.ncur * currentact;
    1fd6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
    1fda:	f00a fde7 	bl	cbac <__aeabi_i2f>
    1fde:	4629      	mov	r1, r5
    1fe0:	f00a fe38 	bl	cc54 <__aeabi_fmul>
  RawCur = 0;
    1fe4:	2300      	movs	r3, #0
  currentact = settings.ncur * currentact;
    1fe6:	f8c8 0000 	str.w	r0, [r8]
  RawCur = 0;
    1fea:	6033      	str	r3, [r6, #0]
}
    1fec:	b00c      	add	sp, #48	; 0x30
    1fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      adc->adc0->startContinuous(ACUR1);
    1ff2:	4d8d      	ldr	r5, [pc, #564]	; (2228 <getcurrent()+0x308>)
      sensor = 1;
    1ff4:	4f8d      	ldr	r7, [pc, #564]	; (222c <getcurrent()+0x30c>)
      adc->adc0->startContinuous(ACUR1);
    1ff6:	682a      	ldr	r2, [r5, #0]
    1ff8:	f8df 8204 	ldr.w	r8, [pc, #516]	; 2200 <getcurrent()+0x2e0>
    1ffc:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      sensor = 1;
    2000:	2301      	movs	r3, #1
      adc->adc0->startContinuous(ACUR1);
    2002:	210f      	movs	r1, #15
      sensor = 1;
    2004:	603b      	str	r3, [r7, #0]
      adc->adc0->startContinuous(ACUR1);
    2006:	f006 fe63 	bl	8cd0 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    200a:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    200c:	4f7d      	ldr	r7, [pc, #500]	; (2204 <getcurrent()+0x2e4>)
    if (sensor == 1) {
    200e:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    2010:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    2012:	f000 812b 	beq.w	226c <getcurrent()+0x34c>
      if (debugCur != 0) {
    2016:	2b00      	cmp	r3, #0
    2018:	f040 81ae 	bne.w	2378 <getcurrent()+0x458>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    201c:	682b      	ldr	r3, [r5, #0]
    201e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 2230 <getcurrent()+0x310>
    2022:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
#else
        return (int16_t)(int32_t)adc_regs.RA;
    2026:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2028:	691e      	ldr	r6, [r3, #16]
    202a:	b2b6      	uxth	r6, r6
    202c:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    2030:	f006 fb96 	bl	8760 <ADC_Module::getMaxValue()>
    2034:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
    2038:	f640 43e4 	movw	r3, #3300	; 0xce4
    203c:	fb06 f303 	mul.w	r3, r6, r3
    2040:	fbb3 f0f0 	udiv	r0, r3, r0
    2044:	1a80      	subs	r0, r0, r2
    2046:	b200      	sxth	r0, r0
    2048:	f00a fdb0 	bl	cbac <__aeabi_i2f>
    204c:	4979      	ldr	r1, [pc, #484]	; (2234 <getcurrent()+0x314>)
    204e:	4606      	mov	r6, r0
    2050:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    2054:	f00a fdfe 	bl	cc54 <__aeabi_fmul>
    2058:	4601      	mov	r1, r0
    205a:	4630      	mov	r0, r6
    205c:	f00a feae 	bl	cdbc <__aeabi_fdiv>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2060:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    2064:	4e68      	ldr	r6, [pc, #416]	; (2208 <getcurrent()+0x2e8>)
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2066:	2b63      	cmp	r3, #99	; 0x63
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    2068:	6030      	str	r0, [r6, #0]
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    206a:	f300 8179 	bgt.w	2360 <getcurrent()+0x440>
        RawCur = 0;
    206e:	2300      	movs	r3, #0
    2070:	6033      	str	r3, [r6, #0]
      if (debugCur != 0) {
    2072:	683b      	ldr	r3, [r7, #0]
    2074:	2b00      	cmp	r3, #0
    2076:	f43f af62 	beq.w	1f3e <getcurrent()+0x1e>
    207a:	2102      	movs	r1, #2
    207c:	486e      	ldr	r0, [pc, #440]	; (2238 <getcurrent()+0x318>)
    207e:	f009 ff09 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print((float(value * 3300 / adc->adc0->getMaxValue()) - settings.offset2));
    2082:	682b      	ldr	r3, [r5, #0]
    2084:	f8d9 5000 	ldr.w	r5, [r9]
    2088:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    208c:	f640 43e4 	movw	r3, #3300	; 0xce4
    2090:	fb03 f505 	mul.w	r5, r3, r5
    2094:	f006 fb64 	bl	8760 <ADC_Module::getMaxValue()>
    2098:	fbb5 f0f0 	udiv	r0, r5, r0
    209c:	f00a fd82 	bl	cba4 <__aeabi_ui2f>
    20a0:	4605      	mov	r5, r0
    20a2:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    20a6:	f00a fd81 	bl	cbac <__aeabi_i2f>
    20aa:	4601      	mov	r1, r0
    20ac:	4628      	mov	r0, r5
    20ae:	f00a fcc7 	bl	ca40 <__aeabi_fsub>
    20b2:	f00a fbab 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    20b6:	2502      	movs	r5, #2
    20b8:	4602      	mov	r2, r0
    20ba:	460b      	mov	r3, r1
    20bc:	9500      	str	r5, [sp, #0]
    20be:	485f      	ldr	r0, [pc, #380]	; (223c <getcurrent()+0x31c>)
    20c0:	f007 f9c6 	bl	9450 <Print::printFloat(double, unsigned char)>
    20c4:	4629      	mov	r1, r5
    20c6:	485c      	ldr	r0, [pc, #368]	; (2238 <getcurrent()+0x318>)
    20c8:	f009 fee4 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    20cc:	6830      	ldr	r0, [r6, #0]
    20ce:	f00a fb9d 	bl	c80c <__aeabi_f2d>
    20d2:	9500      	str	r5, [sp, #0]
    20d4:	4602      	mov	r2, r0
    20d6:	460b      	mov	r3, r1
    20d8:	4858      	ldr	r0, [pc, #352]	; (223c <getcurrent()+0x31c>)
    20da:	f007 f9b9 	bl	9450 <Print::printFloat(double, unsigned char)>
    20de:	4629      	mov	r1, r5
    20e0:	4857      	ldr	r0, [pc, #348]	; (2240 <getcurrent()+0x320>)
    20e2:	f009 fed7 	bl	be94 <usb_serial_write>
    20e6:	4629      	mov	r1, r5
    20e8:	4853      	ldr	r0, [pc, #332]	; (2238 <getcurrent()+0x318>)
    20ea:	f009 fed3 	bl	be94 <usb_serial_write>
    20ee:	e726      	b.n	1f3e <getcurrent()+0x1e>
    if (sensor == 1) {
    20f0:	4b4e      	ldr	r3, [pc, #312]	; (222c <getcurrent()+0x30c>)
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	2b01      	cmp	r3, #1
    20f6:	f000 8174 	beq.w	23e2 <getcurrent()+0x4c2>
    if (sensor == 2) {
    20fa:	2b02      	cmp	r3, #2
    20fc:	f47f af6b 	bne.w	1fd6 <getcurrent()+0xb6>
      if (currentact > settings.changecur || currentact < (settings.changecur * -1)) {
    2100:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
    2104:	4638      	mov	r0, r7
    2106:	f00a fd51 	bl	cbac <__aeabi_i2f>
    210a:	4629      	mov	r1, r5
    210c:	f00a ff40 	bl	cf90 <__aeabi_fcmplt>
    2110:	b940      	cbnz	r0, 2124 <getcurrent()+0x204>
    2112:	4278      	negs	r0, r7
    2114:	f00a fd4a 	bl	cbac <__aeabi_i2f>
    2118:	4629      	mov	r1, r5
    211a:	f00a ff57 	bl	cfcc <__aeabi_fcmpgt>
    211e:	2800      	cmp	r0, #0
    2120:	f000 81cd 	beq.w	24be <getcurrent()+0x59e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2124:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 2218 <getcurrent()+0x2f8>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2128:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 221c <getcurrent()+0x2fc>
    212c:	f8da 3000 	ldr.w	r3, [sl]
    2130:	9307      	str	r3, [sp, #28]
	return ret;
    2132:	9807      	ldr	r0, [sp, #28]
    2134:	f8d9 3000 	ldr.w	r3, [r9]
    2138:	4f39      	ldr	r7, [pc, #228]	; (2220 <getcurrent()+0x300>)
    213a:	1ac0      	subs	r0, r0, r3
    213c:	f00a fd32 	bl	cba4 <__aeabi_ui2f>
    2140:	4629      	mov	r1, r5
    2142:	f00a fd87 	bl	cc54 <__aeabi_fmul>
    2146:	4937      	ldr	r1, [pc, #220]	; (2224 <getcurrent()+0x304>)
    2148:	f00a fe38 	bl	cdbc <__aeabi_fdiv>
    214c:	4935      	ldr	r1, [pc, #212]	; (2224 <getcurrent()+0x304>)
    214e:	f00a fe35 	bl	cdbc <__aeabi_fdiv>
    2152:	6839      	ldr	r1, [r7, #0]
    2154:	f00a fc76 	bl	ca44 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2158:	f8da 3000 	ldr.w	r3, [sl]
    215c:	9306      	str	r3, [sp, #24]
	return ret;
    215e:	9b06      	ldr	r3, [sp, #24]
    2160:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    2162:	f8c9 3000 	str.w	r3, [r9]
    2166:	e736      	b.n	1fd6 <getcurrent()+0xb6>
    SERIALCONSOLE.print(currentact);
    2168:	f00a fb50 	bl	c80c <__aeabi_f2d>
    216c:	460b      	mov	r3, r1
    216e:	2102      	movs	r1, #2
    2170:	4602      	mov	r2, r0
    2172:	9100      	str	r1, [sp, #0]
    2174:	4831      	ldr	r0, [pc, #196]	; (223c <getcurrent()+0x31c>)
    2176:	f007 f96b 	bl	9450 <Print::printFloat(double, unsigned char)>
    217a:	4832      	ldr	r0, [pc, #200]	; (2244 <getcurrent()+0x324>)
    217c:	2104      	movs	r1, #4
    217e:	f009 fe89 	bl	be94 <usb_serial_write>
      if (currentact > 500 || currentact < -500) {
    2182:	f8d8 5000 	ldr.w	r5, [r8]
    2186:	e6f4      	b.n	1f72 <getcurrent()+0x52>
    SERIALCONSOLE.print(lowpassFilter.output());
    2188:	4820      	ldr	r0, [pc, #128]	; (220c <getcurrent()+0x2ec>)
    218a:	f006 feb7 	bl	8efc <FilterOnePole::output()>
    218e:	f00a fb3d 	bl	c80c <__aeabi_f2d>
    2192:	460b      	mov	r3, r1
    2194:	2102      	movs	r1, #2
    2196:	4602      	mov	r2, r0
    2198:	9100      	str	r1, [sp, #0]
    219a:	4828      	ldr	r0, [pc, #160]	; (223c <getcurrent()+0x31c>)
    219c:	f007 f958 	bl	9450 <Print::printFloat(double, unsigned char)>
    21a0:	2103      	movs	r1, #3
    21a2:	4829      	ldr	r0, [pc, #164]	; (2248 <getcurrent()+0x328>)
    21a4:	f009 fe76 	bl	be94 <usb_serial_write>
    SERIALCONSOLE.print(settings.changecur);
    21a8:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
    21ac:	4823      	ldr	r0, [pc, #140]	; (223c <getcurrent()+0x31c>)
    21ae:	f007 f925 	bl	93fc <Print::print(long)>
    21b2:	2103      	movs	r1, #3
    21b4:	4824      	ldr	r0, [pc, #144]	; (2248 <getcurrent()+0x328>)
    21b6:	f009 fe6d 	bl	be94 <usb_serial_write>
    21ba:	e6d0      	b.n	1f5e <getcurrent()+0x3e>
      if (currentact < settings.changecur && currentact > (settings.changecur * -1)) {
    21bc:	f8df 8040 	ldr.w	r8, [pc, #64]	; 2200 <getcurrent()+0x2e0>
    21c0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
    21c4:	f8d8 5000 	ldr.w	r5, [r8]
    21c8:	4638      	mov	r0, r7
    21ca:	f00a fcef 	bl	cbac <__aeabi_i2f>
    21ce:	4629      	mov	r1, r5
    21d0:	f00a fefc 	bl	cfcc <__aeabi_fcmpgt>
    21d4:	2800      	cmp	r0, #0
    21d6:	d039      	beq.n	224c <getcurrent()+0x32c>
    21d8:	4278      	negs	r0, r7
    21da:	f00a fce7 	bl	cbac <__aeabi_i2f>
    21de:	4601      	mov	r1, r0
    21e0:	4628      	mov	r0, r5
    21e2:	f00a fef3 	bl	cfcc <__aeabi_fcmpgt>
    21e6:	b388      	cbz	r0, 224c <getcurrent()+0x32c>
        adc->adc0->startContinuous(ACUR1);
    21e8:	4d0f      	ldr	r5, [pc, #60]	; (2228 <getcurrent()+0x308>)
        sensor = 1;
    21ea:	4f10      	ldr	r7, [pc, #64]	; (222c <getcurrent()+0x30c>)
        adc->adc0->startContinuous(ACUR1);
    21ec:	682b      	ldr	r3, [r5, #0]
        sensor = 1;
    21ee:	603e      	str	r6, [r7, #0]
        adc->adc0->startContinuous(ACUR1);
    21f0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    21f4:	210f      	movs	r1, #15
    21f6:	f006 fd6b 	bl	8cd0 <ADC_Module::startContinuous(unsigned char)>
    21fa:	e706      	b.n	200a <getcurrent()+0xea>
    21fc:	1fffd9bc 	.word	0x1fffd9bc
    2200:	1fffd8a0 	.word	0x1fffd8a0
    2204:	1fffd8a4 	.word	0x1fffd8a4
    2208:	1fff91b0 	.word	0x1fff91b0
    220c:	1fffd8e8 	.word	0x1fffd8e8
    2210:	43fa0000 	.word	0x43fa0000
    2214:	c3fa0000 	.word	0xc3fa0000
    2218:	1fffdcc4 	.word	0x1fffdcc4
    221c:	1fffd8dc 	.word	0x1fffd8dc
    2220:	1fff91d4 	.word	0x1fff91d4
    2224:	447a0000 	.word	0x447a0000
    2228:	1fff91cc 	.word	0x1fff91cc
    222c:	1fff8874 	.word	0x1fff8874
    2230:	1fffdaac 	.word	0x1fffdaac
    2234:	36dd7591 	.word	0x36dd7591
    2238:	00014200 	.word	0x00014200
    223c:	1fff89fc 	.word	0x1fff89fc
    2240:	0001405c 	.word	0x0001405c
    2244:	00014064 	.word	0x00014064
    2248:	00014060 	.word	0x00014060
        sensor = 2;
    224c:	4f9f      	ldr	r7, [pc, #636]	; (24cc <getcurrent()+0x5ac>)
        adc->adc0->startContinuous(ACUR2);
    224e:	4da0      	ldr	r5, [pc, #640]	; (24d0 <getcurrent()+0x5b0>)
        sensor = 2;
    2250:	2302      	movs	r3, #2
    2252:	603b      	str	r3, [r7, #0]
        adc->adc0->startContinuous(ACUR2);
    2254:	682b      	ldr	r3, [r5, #0]
    2256:	210e      	movs	r1, #14
    2258:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    225c:	f006 fd38 	bl	8cd0 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    2260:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    2262:	4f9c      	ldr	r7, [pc, #624]	; (24d4 <getcurrent()+0x5b4>)
    if (sensor == 1) {
    2264:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    2266:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    2268:	f47f aed5 	bne.w	2016 <getcurrent()+0xf6>
      if (debugCur != 0) {
    226c:	2b00      	cmp	r3, #0
    226e:	f040 80e5 	bne.w	243c <getcurrent()+0x51c>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2272:	682b      	ldr	r3, [r5, #0]
    2274:	f8df 9260 	ldr.w	r9, [pc, #608]	; 24d8 <getcurrent()+0x5b8>
    2278:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    227c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    227e:	691e      	ldr	r6, [r3, #16]
    2280:	b2b6      	uxth	r6, r6
    2282:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    2286:	f006 fa6b 	bl	8760 <ADC_Module::getMaxValue()>
    228a:	f8b4 30ac 	ldrh.w	r3, [r4, #172]	; 0xac
    228e:	f640 4ae4 	movw	sl, #3300	; 0xce4
    2292:	fb0a f606 	mul.w	r6, sl, r6
    2296:	fbb6 f6f0 	udiv	r6, r6, r0
    229a:	1af0      	subs	r0, r6, r3
    229c:	b200      	sxth	r0, r0
    229e:	f00a fc85 	bl	cbac <__aeabi_i2f>
    22a2:	498e      	ldr	r1, [pc, #568]	; (24dc <getcurrent()+0x5bc>)
    22a4:	4606      	mov	r6, r0
    22a6:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    22aa:	f00a fcd3 	bl	cc54 <__aeabi_fmul>
    22ae:	4601      	mov	r1, r0
    22b0:	4630      	mov	r0, r6
    22b2:	f00a fd83 	bl	cdbc <__aeabi_fdiv>
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    22b6:	682b      	ldr	r3, [r5, #0]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    22b8:	4e89      	ldr	r6, [pc, #548]	; (24e0 <getcurrent()+0x5c0>)
    22ba:	4602      	mov	r2, r0
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    22bc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    22c0:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    22c4:	6032      	str	r2, [r6, #0]
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    22c6:	fb0a fa03 	mul.w	sl, sl, r3
    22ca:	f006 fa49 	bl	8760 <ADC_Module::getMaxValue()>
    22ce:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
    22d2:	fbba f3f0 	udiv	r3, sl, r0
    22d6:	b21b      	sxth	r3, r3
    22d8:	1a9b      	subs	r3, r3, r2
    22da:	2b00      	cmp	r3, #0
    22dc:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
    22e0:	bfb8      	it	lt
    22e2:	425b      	neglt	r3, r3
    22e4:	429a      	cmp	r2, r3
        RawCur = 0;
    22e6:	bfc4      	itt	gt
    22e8:	2300      	movgt	r3, #0
    22ea:	6033      	strgt	r3, [r6, #0]
      if (debugCur != 0) {
    22ec:	683b      	ldr	r3, [r7, #0]
    22ee:	2b00      	cmp	r3, #0
    22f0:	f43f ae25 	beq.w	1f3e <getcurrent()+0x1e>
    22f4:	2102      	movs	r1, #2
    22f6:	487b      	ldr	r0, [pc, #492]	; (24e4 <getcurrent()+0x5c4>)
    22f8:	f009 fdcc 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1);
    22fc:	682b      	ldr	r3, [r5, #0]
    22fe:	f8d9 5000 	ldr.w	r5, [r9]
    2302:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2306:	f640 43e4 	movw	r3, #3300	; 0xce4
    230a:	fb03 f505 	mul.w	r5, r3, r5
    230e:	f006 fa27 	bl	8760 <ADC_Module::getMaxValue()>
    2312:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
    2316:	fbb5 f5f0 	udiv	r5, r5, r0
    231a:	b22d      	sxth	r5, r5
	size_t print(int n)				{ return print((long)n); }
    231c:	1a69      	subs	r1, r5, r1
    231e:	4872      	ldr	r0, [pc, #456]	; (24e8 <getcurrent()+0x5c8>)
    2320:	f007 f86c 	bl	93fc <Print::print(long)>
    2324:	2102      	movs	r1, #2
    2326:	486f      	ldr	r0, [pc, #444]	; (24e4 <getcurrent()+0x5c4>)
    2328:	f009 fdb4 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    232c:	6830      	ldr	r0, [r6, #0]
    232e:	f00a fa6d 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2332:	2502      	movs	r5, #2
    2334:	4602      	mov	r2, r0
    2336:	460b      	mov	r3, r1
    2338:	9500      	str	r5, [sp, #0]
    233a:	486b      	ldr	r0, [pc, #428]	; (24e8 <getcurrent()+0x5c8>)
    233c:	f007 f888 	bl	9450 <Print::printFloat(double, unsigned char)>
    2340:	2103      	movs	r1, #3
    2342:	486a      	ldr	r0, [pc, #424]	; (24ec <getcurrent()+0x5cc>)
    2344:	f009 fda6 	bl	be94 <usb_serial_write>
    2348:	4629      	mov	r1, r5
    234a:	4866      	ldr	r0, [pc, #408]	; (24e4 <getcurrent()+0x5c4>)
    234c:	f009 fda2 	bl	be94 <usb_serial_write>
    2350:	e5f5      	b.n	1f3e <getcurrent()+0x1e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2352:	4b67      	ldr	r3, [pc, #412]	; (24f0 <getcurrent()+0x5d0>)
    2354:	681b      	ldr	r3, [r3, #0]
    2356:	930b      	str	r3, [sp, #44]	; 0x2c
      lasttime = millis();
    2358:	4b66      	ldr	r3, [pc, #408]	; (24f4 <getcurrent()+0x5d4>)
	return ret;
    235a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    235c:	601a      	str	r2, [r3, #0]
    235e:	e63a      	b.n	1fd6 <getcurrent()+0xb6>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2360:	682b      	ldr	r3, [r5, #0]
    2362:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2366:	f006 f9fb 	bl	8760 <ADC_Module::getMaxValue()>
    236a:	f8d9 3000 	ldr.w	r3, [r9]
    236e:	3864      	subs	r0, #100	; 0x64
    2370:	4298      	cmp	r0, r3
    2372:	f4ff ae7c 	bcc.w	206e <getcurrent()+0x14e>
    2376:	e67c      	b.n	2072 <getcurrent()+0x152>
        SERIALCONSOLE.println();
    2378:	485b      	ldr	r0, [pc, #364]	; (24e8 <getcurrent()+0x5c8>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    237a:	f8df 915c 	ldr.w	r9, [pc, #348]	; 24d8 <getcurrent()+0x5b8>
        SERIALCONSOLE.println();
    237e:	f007 f845 	bl	940c <Print::println()>
    2382:	210c      	movs	r1, #12
    2384:	485c      	ldr	r0, [pc, #368]	; (24f8 <getcurrent()+0x5d8>)
    2386:	f009 fd85 	bl	be94 <usb_serial_write>
    238a:	485c      	ldr	r0, [pc, #368]	; (24fc <getcurrent()+0x5dc>)
    238c:	210c      	movs	r1, #12
    238e:	f009 fd81 	bl	be94 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2392:	682b      	ldr	r3, [r5, #0]
      if (debugCur != 0) {
    2394:	683a      	ldr	r2, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2396:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    239a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    239c:	691e      	ldr	r6, [r3, #16]
    239e:	b2b6      	uxth	r6, r6
    23a0:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    23a4:	2a00      	cmp	r2, #0
    23a6:	f43f ae43 	beq.w	2030 <getcurrent()+0x110>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset2)
    23aa:	f006 f9d9 	bl	8760 <ADC_Module::getMaxValue()>
    23ae:	f640 42e4 	movw	r2, #3300	; 0xce4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    23b2:	2300      	movs	r3, #0
    23b4:	fb06 f202 	mul.w	r2, r6, r2
    23b8:	fbb2 f1f0 	udiv	r1, r2, r0
    23bc:	220a      	movs	r2, #10
    23be:	484a      	ldr	r0, [pc, #296]	; (24e8 <getcurrent()+0x5c8>)
    23c0:	f007 f83c 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    23c4:	2102      	movs	r1, #2
    23c6:	4847      	ldr	r0, [pc, #284]	; (24e4 <getcurrent()+0x5c4>)
    23c8:	f009 fd64 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    23cc:	f8b4 10ae 	ldrh.w	r1, [r4, #174]	; 0xae
    23d0:	4845      	ldr	r0, [pc, #276]	; (24e8 <getcurrent()+0x5c8>)
    23d2:	f007 f813 	bl	93fc <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    23d6:	682b      	ldr	r3, [r5, #0]
    23d8:	f8d9 6000 	ldr.w	r6, [r9]
    23dc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    23e0:	e626      	b.n	2030 <getcurrent()+0x110>
      if (currentact > 500 || currentact < -500) {
    23e2:	4947      	ldr	r1, [pc, #284]	; (2500 <getcurrent()+0x5e0>)
    23e4:	4628      	mov	r0, r5
    23e6:	f00a fdf1 	bl	cfcc <__aeabi_fcmpgt>
    23ea:	b928      	cbnz	r0, 23f8 <getcurrent()+0x4d8>
    23ec:	4945      	ldr	r1, [pc, #276]	; (2504 <getcurrent()+0x5e4>)
    23ee:	4628      	mov	r0, r5
    23f0:	f00a fdce 	bl	cf90 <__aeabi_fcmplt>
    23f4:	2800      	cmp	r0, #0
    23f6:	d05b      	beq.n	24b0 <getcurrent()+0x590>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    23f8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 24f0 <getcurrent()+0x5d0>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    23fc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 24f4 <getcurrent()+0x5d4>
    2400:	f8da 3000 	ldr.w	r3, [sl]
    2404:	9304      	str	r3, [sp, #16]
	return ret;
    2406:	9804      	ldr	r0, [sp, #16]
    2408:	f8d9 3000 	ldr.w	r3, [r9]
    240c:	4f3e      	ldr	r7, [pc, #248]	; (2508 <getcurrent()+0x5e8>)
    240e:	1ac0      	subs	r0, r0, r3
    2410:	f00a fbc8 	bl	cba4 <__aeabi_ui2f>
    2414:	4629      	mov	r1, r5
    2416:	f00a fc1d 	bl	cc54 <__aeabi_fmul>
    241a:	493c      	ldr	r1, [pc, #240]	; (250c <getcurrent()+0x5ec>)
    241c:	f00a fcce 	bl	cdbc <__aeabi_fdiv>
    2420:	493a      	ldr	r1, [pc, #232]	; (250c <getcurrent()+0x5ec>)
    2422:	f00a fccb 	bl	cdbc <__aeabi_fdiv>
    2426:	6839      	ldr	r1, [r7, #0]
    2428:	f00a fb0c 	bl	ca44 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    242c:	f8da 3000 	ldr.w	r3, [sl]
    2430:	9303      	str	r3, [sp, #12]
	return ret;
    2432:	9b03      	ldr	r3, [sp, #12]
    2434:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    2436:	f8c9 3000 	str.w	r3, [r9]
    243a:	e5cc      	b.n	1fd6 <getcurrent()+0xb6>
        SERIALCONSOLE.println();
    243c:	482a      	ldr	r0, [pc, #168]	; (24e8 <getcurrent()+0x5c8>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    243e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 24d8 <getcurrent()+0x5b8>
        SERIALCONSOLE.println();
    2442:	f006 ffe3 	bl	940c <Print::println()>
        if (settings.cursens == Analoguedual) {
    2446:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    244a:	2b01      	cmp	r3, #1
    244c:	bf0c      	ite	eq
    244e:	4830      	ldreq	r0, [pc, #192]	; (2510 <getcurrent()+0x5f0>)
    2450:	4830      	ldrne	r0, [pc, #192]	; (2514 <getcurrent()+0x5f4>)
    2452:	210b      	movs	r1, #11
    2454:	f009 fd1e 	bl	be94 <usb_serial_write>
    2458:	4828      	ldr	r0, [pc, #160]	; (24fc <getcurrent()+0x5dc>)
    245a:	210c      	movs	r1, #12
    245c:	f009 fd1a 	bl	be94 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2460:	682a      	ldr	r2, [r5, #0]
      if (debugCur != 0) {
    2462:	683b      	ldr	r3, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2464:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    2468:	6b42      	ldr	r2, [r0, #52]	; 0x34
    246a:	6916      	ldr	r6, [r2, #16]
    246c:	b2b6      	uxth	r6, r6
    246e:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    2472:	2b00      	cmp	r3, #0
    2474:	f43f af07 	beq.w	2286 <getcurrent()+0x366>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset1)
    2478:	f006 f972 	bl	8760 <ADC_Module::getMaxValue()>
    247c:	f640 43e4 	movw	r3, #3300	; 0xce4
    2480:	fb06 f303 	mul.w	r3, r6, r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2484:	220a      	movs	r2, #10
    2486:	fbb3 f1f0 	udiv	r1, r3, r0
    248a:	2300      	movs	r3, #0
    248c:	4816      	ldr	r0, [pc, #88]	; (24e8 <getcurrent()+0x5c8>)
    248e:	f006 ffd5 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2492:	2101      	movs	r1, #1
    2494:	4820      	ldr	r0, [pc, #128]	; (2518 <getcurrent()+0x5f8>)
    2496:	f009 fcfd 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    249a:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
    249e:	4812      	ldr	r0, [pc, #72]	; (24e8 <getcurrent()+0x5c8>)
    24a0:	f006 ffac 	bl	93fc <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    24a4:	682b      	ldr	r3, [r5, #0]
    24a6:	f8d9 6000 	ldr.w	r6, [r9]
    24aa:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    24ae:	e6ea      	b.n	2286 <getcurrent()+0x366>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    24b0:	4b0f      	ldr	r3, [pc, #60]	; (24f0 <getcurrent()+0x5d0>)
    24b2:	681b      	ldr	r3, [r3, #0]
    24b4:	9305      	str	r3, [sp, #20]
        lasttime = millis();
    24b6:	4b0f      	ldr	r3, [pc, #60]	; (24f4 <getcurrent()+0x5d4>)
	return ret;
    24b8:	9a05      	ldr	r2, [sp, #20]
    24ba:	601a      	str	r2, [r3, #0]
    24bc:	e58b      	b.n	1fd6 <getcurrent()+0xb6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    24be:	4b0c      	ldr	r3, [pc, #48]	; (24f0 <getcurrent()+0x5d0>)
    24c0:	681b      	ldr	r3, [r3, #0]
    24c2:	9308      	str	r3, [sp, #32]
        lasttime = millis();
    24c4:	4b0b      	ldr	r3, [pc, #44]	; (24f4 <getcurrent()+0x5d4>)
	return ret;
    24c6:	9a08      	ldr	r2, [sp, #32]
    24c8:	601a      	str	r2, [r3, #0]
    24ca:	e584      	b.n	1fd6 <getcurrent()+0xb6>
    24cc:	1fff8874 	.word	0x1fff8874
    24d0:	1fff91cc 	.word	0x1fff91cc
    24d4:	1fffd8a4 	.word	0x1fffd8a4
    24d8:	1fffdaac 	.word	0x1fffdaac
    24dc:	36dd7591 	.word	0x36dd7591
    24e0:	1fff91b0 	.word	0x1fff91b0
    24e4:	00014200 	.word	0x00014200
    24e8:	1fff89fc 	.word	0x1fff89fc
    24ec:	00014048 	.word	0x00014048
    24f0:	1fffdcc4 	.word	0x1fffdcc4
    24f4:	1fffd8dc 	.word	0x1fffd8dc
    24f8:	0001404c 	.word	0x0001404c
    24fc:	00014038 	.word	0x00014038
    2500:	43fa0000 	.word	0x43fa0000
    2504:	c3fa0000 	.word	0xc3fa0000
    2508:	1fff91d4 	.word	0x1fff91d4
    250c:	447a0000 	.word	0x447a0000
    2510:	00014020 	.word	0x00014020
    2514:	0001402c 	.word	0x0001402c
    2518:	00013e3c 	.word	0x00013e3c

0000251c <updateSOC()>:
void updateSOC() {
    251c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (SOCset == 0 && SOCmem == 0) {
    2520:	4a8e      	ldr	r2, [pc, #568]	; (275c <updateSOC()+0x240>)
    2522:	4d8f      	ldr	r5, [pc, #572]	; (2760 <updateSOC()+0x244>)
    2524:	6812      	ldr	r2, [r2, #0]
    2526:	682b      	ldr	r3, [r5, #0]
    2528:	4313      	orrs	r3, r2
void updateSOC() {
    252a:	b084      	sub	sp, #16
  if (SOCset == 0 && SOCmem == 0) {
    252c:	d13c      	bne.n	25a8 <updateSOC()+0x8c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    252e:	4e8d      	ldr	r6, [pc, #564]	; (2764 <updateSOC()+0x248>)
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    2530:	4c8d      	ldr	r4, [pc, #564]	; (2768 <updateSOC()+0x24c>)
    2532:	6832      	ldr	r2, [r6, #0]
    2534:	9202      	str	r2, [sp, #8]
	return ret;
    2536:	9a02      	ldr	r2, [sp, #8]
    if (millis() > 9000) {
    2538:	f242 3328 	movw	r3, #9000	; 0x2328
    253c:	429a      	cmp	r2, r3
    253e:	f200 80c6 	bhi.w	26ce <updateSOC()+0x1b2>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2542:	6833      	ldr	r3, [r6, #0]
    2544:	9303      	str	r3, [sp, #12]
	return ret;
    2546:	9a03      	ldr	r2, [sp, #12]
    if (millis() > 10000) {
    2548:	f242 7310 	movw	r3, #10000	; 0x2710
    254c:	429a      	cmp	r2, r3
    254e:	f200 80c7 	bhi.w	26e0 <updateSOC()+0x1c4>
  if (settings.voltsoc == 1) {
    2552:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    2556:	4e85      	ldr	r6, [pc, #532]	; (276c <updateSOC()+0x250>)
    2558:	4f85      	ldr	r7, [pc, #532]	; (2770 <updateSOC()+0x254>)
    255a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 2774 <updateSOC()+0x258>
    255e:	2b01      	cmp	r3, #1
    2560:	d12b      	bne.n	25ba <updateSOC()+0x9e>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2562:	4885      	ldr	r0, [pc, #532]	; (2778 <updateSOC()+0x25c>)
    2564:	f7fe fc3c 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    2568:	4984      	ldr	r1, [pc, #528]	; (277c <updateSOC()+0x260>)
    256a:	f00a fb73 	bl	cc54 <__aeabi_fmul>
    256e:	f00a fd5d 	bl	d02c <__aeabi_f2uiz>
    2572:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
    2576:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    2578:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    257a:	6f61      	ldr	r1, [r4, #116]	; 0x74
    257c:	9500      	str	r5, [sp, #0]
    257e:	b280      	uxth	r0, r0
    2580:	f7ff f804 	bl	158c <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2584:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
    2588:	6de5      	ldr	r5, [r4, #92]	; 0x5c
    258a:	fb0a f000 	mul.w	r0, sl, r0
    258e:	fb05 f000 	mul.w	r0, r5, r0
    2592:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2596:	0040      	lsls	r0, r0, #1
    2598:	f00a fb08 	bl	cbac <__aeabi_i2f>
    259c:	4978      	ldr	r1, [pc, #480]	; (2780 <updateSOC()+0x264>)
    259e:	f00a fc0d 	bl	cdbc <__aeabi_fdiv>
    25a2:	4681      	mov	r9, r0
    25a4:	6038      	str	r0, [r7, #0]
    25a6:	e00d      	b.n	25c4 <updateSOC()+0xa8>
    25a8:	4c6f      	ldr	r4, [pc, #444]	; (2768 <updateSOC()+0x24c>)
    25aa:	4e70      	ldr	r6, [pc, #448]	; (276c <updateSOC()+0x250>)
    25ac:	4f70      	ldr	r7, [pc, #448]	; (2770 <updateSOC()+0x254>)
    25ae:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 2774 <updateSOC()+0x258>
  if (settings.voltsoc == 1) {
    25b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    25b6:	2b01      	cmp	r3, #1
    25b8:	d0d3      	beq.n	2562 <updateSOC()+0x46>
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    25ba:	f8d7 9000 	ldr.w	r9, [r7]
    25be:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
    25c2:	6de5      	ldr	r5, [r4, #92]	; 0x5c
    25c4:	fb0a f505 	mul.w	r5, sl, r5
    25c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    25cc:	fb05 f000 	mul.w	r0, r5, r0
    25d0:	f00a faec 	bl	cbac <__aeabi_i2f>
    25d4:	496a      	ldr	r1, [pc, #424]	; (2780 <updateSOC()+0x264>)
    25d6:	4605      	mov	r5, r0
    25d8:	4648      	mov	r0, r9
    25da:	f00a fb3b 	bl	cc54 <__aeabi_fmul>
    25de:	4629      	mov	r1, r5
    25e0:	f00a fbec 	bl	cdbc <__aeabi_fdiv>
    25e4:	4967      	ldr	r1, [pc, #412]	; (2784 <updateSOC()+0x268>)
    25e6:	f00a fb35 	bl	cc54 <__aeabi_fmul>
    25ea:	f00a fcf9 	bl	cfe0 <__aeabi_f2iz>
  if (SOC >= 100) {
    25ee:	2863      	cmp	r0, #99	; 0x63
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    25f0:	6030      	str	r0, [r6, #0]
  if (SOC >= 100) {
    25f2:	dd47      	ble.n	2684 <updateSOC()+0x168>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    25f4:	4962      	ldr	r1, [pc, #392]	; (2780 <updateSOC()+0x264>)
    25f6:	4628      	mov	r0, r5
    25f8:	f00a fbe0 	bl	cdbc <__aeabi_fdiv>
    SOC = 100;
    25fc:	2364      	movs	r3, #100	; 0x64
    25fe:	6033      	str	r3, [r6, #0]
  if (debug != 0) {
    2600:	f8d8 3000 	ldr.w	r3, [r8]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    2604:	6038      	str	r0, [r7, #0]
  if (debug != 0) {
    2606:	2b00      	cmp	r3, #0
    2608:	d044      	beq.n	2694 <updateSOC()+0x178>
    if (settings.cursens == Analoguedual) {
    260a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    260e:	2b01      	cmp	r3, #1
    2610:	d043      	beq.n	269a <updateSOC()+0x17e>
    if (settings.cursens == Analoguesing) {
    2612:	2b03      	cmp	r3, #3
    2614:	d04e      	beq.n	26b4 <updateSOC()+0x198>
    if (settings.cursens == Canbus) {
    2616:	2b02      	cmp	r3, #2
    2618:	d054      	beq.n	26c4 <updateSOC()+0x1a8>
    261a:	2102      	movs	r1, #2
    261c:	485a      	ldr	r0, [pc, #360]	; (2788 <updateSOC()+0x26c>)
    261e:	f009 fc39 	bl	be94 <usb_serial_write>
    SERIALCONSOLE.print(currentact);
    2622:	4b5a      	ldr	r3, [pc, #360]	; (278c <updateSOC()+0x270>)
    2624:	6818      	ldr	r0, [r3, #0]
    2626:	f00a f8f1 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    262a:	2402      	movs	r4, #2
    262c:	4602      	mov	r2, r0
    262e:	460b      	mov	r3, r1
    2630:	9400      	str	r4, [sp, #0]
    2632:	4857      	ldr	r0, [pc, #348]	; (2790 <updateSOC()+0x274>)
    2634:	f006 ff0c 	bl	9450 <Print::printFloat(double, unsigned char)>
    2638:	4621      	mov	r1, r4
    263a:	4856      	ldr	r0, [pc, #344]	; (2794 <updateSOC()+0x278>)
    263c:	f009 fc2a 	bl	be94 <usb_serial_write>
    2640:	4621      	mov	r1, r4
    2642:	4851      	ldr	r0, [pc, #324]	; (2788 <updateSOC()+0x26c>)
    2644:	f009 fc26 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2648:	6831      	ldr	r1, [r6, #0]
    264a:	4851      	ldr	r0, [pc, #324]	; (2790 <updateSOC()+0x274>)
    264c:	f006 fed6 	bl	93fc <Print::print(long)>
    2650:	2106      	movs	r1, #6
    2652:	4851      	ldr	r0, [pc, #324]	; (2798 <updateSOC()+0x27c>)
    2654:	f009 fc1e 	bl	be94 <usb_serial_write>
    SERIALCONSOLE.print(ampsecond * 0.27777777777778, 2);
    2658:	6838      	ldr	r0, [r7, #0]
    265a:	4949      	ldr	r1, [pc, #292]	; (2780 <updateSOC()+0x264>)
    265c:	f00a fafa 	bl	cc54 <__aeabi_fmul>
    2660:	f00a f8d4 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2664:	9400      	str	r4, [sp, #0]
    2666:	4602      	mov	r2, r0
    2668:	460b      	mov	r3, r1
    266a:	4849      	ldr	r0, [pc, #292]	; (2790 <updateSOC()+0x274>)
    266c:	f006 fef0 	bl	9450 <Print::printFloat(double, unsigned char)>
    2670:	2103      	movs	r1, #3
    2672:	484a      	ldr	r0, [pc, #296]	; (279c <updateSOC()+0x280>)
    2674:	f009 fc0e 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2678:	4845      	ldr	r0, [pc, #276]	; (2790 <updateSOC()+0x274>)
}
    267a:	b004      	add	sp, #16
    267c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2680:	f006 bec4 	b.w	940c <Print::println()>
  if (SOC < 0) {
    2684:	2800      	cmp	r0, #0
    SOC = 0;  //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
    2686:	bfbc      	itt	lt
    2688:	2300      	movlt	r3, #0
    268a:	6033      	strlt	r3, [r6, #0]
  if (debug != 0) {
    268c:	f8d8 3000 	ldr.w	r3, [r8]
    2690:	2b00      	cmp	r3, #0
    2692:	d1ba      	bne.n	260a <updateSOC()+0xee>
}
    2694:	b004      	add	sp, #16
    2696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (sensor == 1) {
    269a:	4b41      	ldr	r3, [pc, #260]	; (27a0 <updateSOC()+0x284>)
    269c:	681b      	ldr	r3, [r3, #0]
    269e:	2b01      	cmp	r3, #1
    26a0:	bf0c      	ite	eq
    26a2:	4840      	ldreq	r0, [pc, #256]	; (27a4 <updateSOC()+0x288>)
    26a4:	4840      	ldrne	r0, [pc, #256]	; (27a8 <updateSOC()+0x28c>)
    26a6:	210a      	movs	r1, #10
    26a8:	f009 fbf4 	bl	be94 <usb_serial_write>
    if (settings.cursens == Analoguesing) {
    26ac:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    26b0:	2b03      	cmp	r3, #3
    26b2:	d1b0      	bne.n	2616 <updateSOC()+0xfa>
    26b4:	483d      	ldr	r0, [pc, #244]	; (27ac <updateSOC()+0x290>)
    26b6:	2110      	movs	r1, #16
    26b8:	f009 fbec 	bl	be94 <usb_serial_write>
    if (settings.cursens == Canbus) {
    26bc:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    26c0:	2b02      	cmp	r3, #2
    26c2:	d1aa      	bne.n	261a <updateSOC()+0xfe>
    26c4:	2107      	movs	r1, #7
    26c6:	483a      	ldr	r0, [pc, #232]	; (27b0 <updateSOC()+0x294>)
    26c8:	f009 fbe4 	bl	be94 <usb_serial_write>
    26cc:	e7a5      	b.n	261a <updateSOC()+0xfe>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    26ce:	f9b4 30d8 	ldrsh.w	r3, [r4, #216]	; 0xd8
    26d2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    26d4:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    26d8:	4827      	ldr	r0, [pc, #156]	; (2778 <updateSOC()+0x25c>)
    26da:	f7fe fbd5 	bl	e88 <BMSModuleManager::setSensors(int, float, int)>
    26de:	e730      	b.n	2542 <updateSOC()+0x26>
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    26e0:	4825      	ldr	r0, [pc, #148]	; (2778 <updateSOC()+0x25c>)
      if (debug != 0) {
    26e2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2774 <updateSOC()+0x258>
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    26e6:	f7fe fb7b 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    26ea:	4924      	ldr	r1, [pc, #144]	; (277c <updateSOC()+0x260>)
    26ec:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
    26ee:	6fa7      	ldr	r7, [r4, #120]	; 0x78
    26f0:	f00a fab0 	bl	cc54 <__aeabi_fmul>
    26f4:	f00a fc9a 	bl	d02c <__aeabi_f2uiz>
    26f8:	4632      	mov	r2, r6
    26fa:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    26fe:	6f61      	ldr	r1, [r4, #116]	; 0x74
    2700:	9600      	str	r6, [sp, #0]
    2702:	463b      	mov	r3, r7
    2704:	b280      	uxth	r0, r0
    2706:	f7fe ff41 	bl	158c <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    270a:	4e18      	ldr	r6, [pc, #96]	; (276c <updateSOC()+0x250>)
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    270c:	6e23      	ldr	r3, [r4, #96]	; 0x60
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    270e:	6030      	str	r0, [r6, #0]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2710:	fb03 f000 	mul.w	r0, r3, r0
    2714:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    2716:	4f16      	ldr	r7, [pc, #88]	; (2770 <updateSOC()+0x254>)
    2718:	fb03 f000 	mul.w	r0, r3, r0
    271c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2720:	0040      	lsls	r0, r0, #1
    2722:	f00a fa43 	bl	cbac <__aeabi_i2f>
    2726:	4916      	ldr	r1, [pc, #88]	; (2780 <updateSOC()+0x264>)
    2728:	f00a fb48 	bl	cdbc <__aeabi_fdiv>
      if (debug != 0) {
    272c:	f8d8 3000 	ldr.w	r3, [r8]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2730:	6038      	str	r0, [r7, #0]
      SOCset = 1;
    2732:	2201      	movs	r2, #1
    2734:	602a      	str	r2, [r5, #0]
      if (debug != 0) {
    2736:	2b00      	cmp	r3, #0
    2738:	f43f af3b 	beq.w	25b2 <updateSOC()+0x96>
    273c:	2102      	movs	r1, #2
    273e:	4812      	ldr	r0, [pc, #72]	; (2788 <updateSOC()+0x26c>)
    2740:	f009 fba8 	bl	be94 <usb_serial_write>
    2744:	4812      	ldr	r0, [pc, #72]	; (2790 <updateSOC()+0x274>)
    2746:	f006 fe61 	bl	940c <Print::println()>
    274a:	2159      	movs	r1, #89	; 0x59
    274c:	4819      	ldr	r0, [pc, #100]	; (27b4 <updateSOC()+0x298>)
    274e:	f009 fba1 	bl	be94 <usb_serial_write>
    2752:	480f      	ldr	r0, [pc, #60]	; (2790 <updateSOC()+0x274>)
    2754:	f006 fe5a 	bl	940c <Print::println()>
    2758:	e72b      	b.n	25b2 <updateSOC()+0x96>
    275a:	bf00      	nop
    275c:	1fff91b4 	.word	0x1fff91b4
    2760:	1fff91b8 	.word	0x1fff91b8
    2764:	1fffdcc4 	.word	0x1fffdcc4
    2768:	1fffd9bc 	.word	0x1fffd9bc
    276c:	1fff8824 	.word	0x1fff8824
    2770:	1fff91d4 	.word	0x1fff91d4
    2774:	1fff8848 	.word	0x1fff8848
    2778:	1fff91e4 	.word	0x1fff91e4
    277c:	447a0000 	.word	0x447a0000
    2780:	3e8e38e4 	.word	0x3e8e38e4
    2784:	42c80000 	.word	0x42c80000
    2788:	00014200 	.word	0x00014200
    278c:	1fffd8a0 	.word	0x1fffd8a0
    2790:	1fff89fc 	.word	0x1fff89fc
    2794:	0001405c 	.word	0x0001405c
    2798:	000140fc 	.word	0x000140fc
    279c:	00014104 	.word	0x00014104
    27a0:	1fff8874 	.word	0x1fff8874
    27a4:	000140c8 	.word	0x000140c8
    27a8:	000140d4 	.word	0x000140d4
    27ac:	000140e0 	.word	0x000140e0
    27b0:	000140f4 	.word	0x000140f4
    27b4:	0001406c 	.word	0x0001406c

000027b8 <Prechargecon()>:
void Prechargecon() {
    27b8:	b530      	push	{r4, r5, lr}
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    27ba:	2011      	movs	r0, #17
void Prechargecon() {
    27bc:	b083      	sub	sp, #12
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    27be:	f007 fd1d 	bl	a1fc <digitalRead>
    27c2:	2801      	cmp	r0, #1
    27c4:	d004      	beq.n	27d0 <Prechargecon()+0x18>
    27c6:	2012      	movs	r0, #18
    27c8:	f007 fd18 	bl	a1fc <digitalRead>
    27cc:	2801      	cmp	r0, #1
    27ce:	d122      	bne.n	2816 <Prechargecon()+0x5e>
    digitalWrite(OUT4, HIGH);  //Negative Contactor Close
    27d0:	2101      	movs	r1, #1
    27d2:	2015      	movs	r0, #21
    27d4:	f007 fcec 	bl	a1b0 <digitalWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27d8:	4b2a      	ldr	r3, [pc, #168]	; (2884 <Prechargecon()+0xcc>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    27da:	4a2b      	ldr	r2, [pc, #172]	; (2888 <Prechargecon()+0xd0>)
    27dc:	4c2b      	ldr	r4, [pc, #172]	; (288c <Prechargecon()+0xd4>)
    27de:	681b      	ldr	r3, [r3, #0]
    contctrl = 2;
    27e0:	4d2b      	ldr	r5, [pc, #172]	; (2890 <Prechargecon()+0xd8>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    27e2:	6811      	ldr	r1, [r2, #0]
    27e4:	9301      	str	r3, [sp, #4]
    contctrl = 2;
    27e6:	2202      	movs	r2, #2
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    27e8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    contctrl = 2;
    27ec:	602a      	str	r2, [r5, #0]
	return ret;
    27ee:	9a01      	ldr	r2, [sp, #4]
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    27f0:	440b      	add	r3, r1
    27f2:	4293      	cmp	r3, r2
    27f4:	d808      	bhi.n	2808 <Prechargecon()+0x50>
    27f6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    27fa:	f00a f9d7 	bl	cbac <__aeabi_i2f>
    27fe:	4b25      	ldr	r3, [pc, #148]	; (2894 <Prechargecon()+0xdc>)
    2800:	6819      	ldr	r1, [r3, #0]
    2802:	f00a fbc5 	bl	cf90 <__aeabi_fcmplt>
    2806:	b1d0      	cbz	r0, 283e <Prechargecon()+0x86>
      digitalWrite(OUT2, HIGH);  //precharge
    2808:	2101      	movs	r1, #1
      digitalWrite(OUT2, LOW);
    280a:	200c      	movs	r0, #12
}
    280c:	b003      	add	sp, #12
    280e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    2812:	f007 bccd 	b.w	a1b0 <digitalWrite>
    digitalWrite(OUT1, LOW);
    2816:	2100      	movs	r1, #0
    2818:	200b      	movs	r0, #11
    281a:	f007 fcc9 	bl	a1b0 <digitalWrite>
    digitalWrite(OUT2, LOW);
    281e:	2100      	movs	r1, #0
    2820:	200c      	movs	r0, #12
    2822:	f007 fcc5 	bl	a1b0 <digitalWrite>
    digitalWrite(OUT4, LOW);
    2826:	2100      	movs	r1, #0
    2828:	2015      	movs	r0, #21
    282a:	f007 fcc1 	bl	a1b0 <digitalWrite>
    bmsstatus = Ready;
    282e:	491a      	ldr	r1, [pc, #104]	; (2898 <Prechargecon()+0xe0>)
    contctrl = 0;
    2830:	4b17      	ldr	r3, [pc, #92]	; (2890 <Prechargecon()+0xd8>)
    bmsstatus = Ready;
    2832:	2001      	movs	r0, #1
    contctrl = 0;
    2834:	2200      	movs	r2, #0
    bmsstatus = Ready;
    2836:	7008      	strb	r0, [r1, #0]
    contctrl = 0;
    2838:	601a      	str	r2, [r3, #0]
}
    283a:	b003      	add	sp, #12
    283c:	bd30      	pop	{r4, r5, pc}
      digitalWrite(OUT1, HIGH);  //Positive Contactor Close
    283e:	2101      	movs	r1, #1
    2840:	200b      	movs	r0, #11
    2842:	f007 fcb5 	bl	a1b0 <digitalWrite>
      if (settings.ChargerDirect == 1) {
    2846:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
      contctrl = 3;
    284a:	2403      	movs	r4, #3
    284c:	602c      	str	r4, [r5, #0]
      if (settings.ChargerDirect == 1) {
    284e:	b14b      	cbz	r3, 2864 <Prechargecon()+0xac>
        bmsstatus = Drive;
    2850:	4b11      	ldr	r3, [pc, #68]	; (2898 <Prechargecon()+0xe0>)
    2852:	2202      	movs	r2, #2
    2854:	701a      	strb	r2, [r3, #0]
      digitalWrite(OUT2, LOW);
    2856:	2100      	movs	r1, #0
    2858:	200c      	movs	r0, #12
}
    285a:	b003      	add	sp, #12
    285c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    2860:	f007 bca6 	b.w	a1b0 <digitalWrite>
        if (digitalRead(IN3) == HIGH) {
    2864:	2012      	movs	r0, #18
    2866:	f007 fcc9 	bl	a1fc <digitalRead>
    286a:	2801      	cmp	r0, #1
          bmsstatus = Charge;
    286c:	bf08      	it	eq
    286e:	4b0a      	ldreq	r3, [pc, #40]	; (2898 <Prechargecon()+0xe0>)
        if (digitalRead(IN1) == HIGH) {
    2870:	f04f 0011 	mov.w	r0, #17
          bmsstatus = Charge;
    2874:	bf08      	it	eq
    2876:	701c      	strbeq	r4, [r3, #0]
        if (digitalRead(IN1) == HIGH) {
    2878:	f007 fcc0 	bl	a1fc <digitalRead>
    287c:	2801      	cmp	r0, #1
    287e:	d1ea      	bne.n	2856 <Prechargecon()+0x9e>
    2880:	e7e6      	b.n	2850 <Prechargecon()+0x98>
    2882:	bf00      	nop
    2884:	1fffdcc4 	.word	0x1fffdcc4
    2888:	1fff91a8 	.word	0x1fff91a8
    288c:	1fffd9bc 	.word	0x1fffd9bc
    2890:	1fffd78c 	.word	0x1fffd78c
    2894:	1fffd8a0 	.word	0x1fffd8a0
    2898:	1fffd708 	.word	0x1fffd708

0000289c <contcon()>:
void contcon() {
    289c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (contctrl != contstat)  //check for contactor request change
    289e:	4e71      	ldr	r6, [pc, #452]	; (2a64 <contcon()+0x1c8>)
    28a0:	4c71      	ldr	r4, [pc, #452]	; (2a68 <contcon()+0x1cc>)
    28a2:	6833      	ldr	r3, [r6, #0]
    28a4:	6825      	ldr	r5, [r4, #0]
    28a6:	42ab      	cmp	r3, r5
void contcon() {
    28a8:	b087      	sub	sp, #28
  if (contctrl != contstat)  //check for contactor request change
    28aa:	d02d      	beq.n	2908 <contcon()+0x6c>
    if ((contctrl & 1) == 0) {
    28ac:	f013 0101 	ands.w	r1, r3, #1
    28b0:	d04b      	beq.n	294a <contcon()+0xae>
    if ((contctrl & 2) == 0) {
    28b2:	f013 0102 	ands.w	r1, r3, #2
    28b6:	d05f      	beq.n	2978 <contcon()+0xdc>
    if ((contctrl & 4) == 0) {
    28b8:	f013 0104 	ands.w	r1, r3, #4
    28bc:	d051      	beq.n	2962 <contcon()+0xc6>
    if ((contctrl & 1) == 1) {
    28be:	07da      	lsls	r2, r3, #31
    28c0:	d50e      	bpl.n	28e0 <contcon()+0x44>
      if ((contstat & 1) != 1) {
    28c2:	6822      	ldr	r2, [r4, #0]
    28c4:	07d7      	lsls	r7, r2, #31
    28c6:	d40b      	bmi.n	28e0 <contcon()+0x44>
        if (conttimer1 == 0) {
    28c8:	4d68      	ldr	r5, [pc, #416]	; (2a6c <contcon()+0x1d0>)
    28ca:	682a      	ldr	r2, [r5, #0]
    28cc:	2a00      	cmp	r2, #0
    28ce:	f000 8093 	beq.w	29f8 <contcon()+0x15c>
    28d2:	4b67      	ldr	r3, [pc, #412]	; (2a70 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28d4:	681b      	ldr	r3, [r3, #0]
    28d6:	9301      	str	r3, [sp, #4]
	return ret;
    28d8:	9b01      	ldr	r3, [sp, #4]
        if (conttimer1 < millis()) {
    28da:	4293      	cmp	r3, r2
    28dc:	d87f      	bhi.n	29de <contcon()+0x142>
    if ((contctrl & 2) == 2) {
    28de:	6833      	ldr	r3, [r6, #0]
    28e0:	079d      	lsls	r5, r3, #30
    28e2:	d414      	bmi.n	290e <contcon()+0x72>
    if ((contctrl & 4) == 4) {
    28e4:	0759      	lsls	r1, r3, #29
    28e6:	d522      	bpl.n	292e <contcon()+0x92>
      if ((contstat & 4) != 4) {
    28e8:	6822      	ldr	r2, [r4, #0]
    28ea:	0752      	lsls	r2, r2, #29
    28ec:	d40d      	bmi.n	290a <contcon()+0x6e>
        if (conttimer3 == 0) {
    28ee:	4f61      	ldr	r7, [pc, #388]	; (2a74 <contcon()+0x1d8>)
    28f0:	683a      	ldr	r2, [r7, #0]
    28f2:	2a00      	cmp	r2, #0
    28f4:	f000 809e 	beq.w	2a34 <contcon()+0x198>
    28f8:	4b5d      	ldr	r3, [pc, #372]	; (2a70 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28fa:	681b      	ldr	r3, [r3, #0]
    28fc:	9305      	str	r3, [sp, #20]
	return ret;
    28fe:	9b05      	ldr	r3, [sp, #20]
        if (conttimer3 < millis()) {
    2900:	4293      	cmp	r3, r2
    2902:	f200 8086 	bhi.w	2a12 <contcon()+0x176>
  if (contctrl == 0) {
    2906:	6835      	ldr	r5, [r6, #0]
    2908:	b1a5      	cbz	r5, 2934 <contcon()+0x98>
}
    290a:	b007      	add	sp, #28
    290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((contstat & 2) != 2) {
    290e:	6822      	ldr	r2, [r4, #0]
    2910:	0790      	lsls	r0, r2, #30
    2912:	d43d      	bmi.n	2990 <contcon()+0xf4>
        if (conttimer2 == 0) {
    2914:	4d58      	ldr	r5, [pc, #352]	; (2a78 <contcon()+0x1dc>)
    2916:	682a      	ldr	r2, [r5, #0]
    2918:	2a00      	cmp	r2, #0
    291a:	d049      	beq.n	29b0 <contcon()+0x114>
    291c:	4b54      	ldr	r3, [pc, #336]	; (2a70 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	9303      	str	r3, [sp, #12]
	return ret;
    2922:	9b03      	ldr	r3, [sp, #12]
        if (conttimer2 < millis()) {
    2924:	429a      	cmp	r2, r3
    2926:	d336      	bcc.n	2996 <contcon()+0xfa>
    if ((contctrl & 4) == 4) {
    2928:	6833      	ldr	r3, [r6, #0]
    292a:	0759      	lsls	r1, r3, #29
    292c:	d4dc      	bmi.n	28e8 <contcon()+0x4c>
    292e:	461d      	mov	r5, r3
  if (contctrl == 0) {
    2930:	2d00      	cmp	r5, #0
    2932:	d1ea      	bne.n	290a <contcon()+0x6e>
    analogWrite(OUT5, 0);
    2934:	4629      	mov	r1, r5
    2936:	2016      	movs	r0, #22
    2938:	f007 fabe 	bl	9eb8 <analogWrite>
    analogWrite(OUT6, 0);
    293c:	4629      	mov	r1, r5
    293e:	2017      	movs	r0, #23
}
    2940:	b007      	add	sp, #28
    2942:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    analogWrite(OUT6, 0);
    2946:	f007 bab7 	b.w	9eb8 <analogWrite>
      analogWrite(OUT5, 0);
    294a:	2016      	movs	r0, #22
    294c:	f007 fab4 	bl	9eb8 <analogWrite>
      contstat = contstat & 254;
    2950:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    2952:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 254;
    2954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if ((contctrl & 2) == 0) {
    2958:	f013 0102 	ands.w	r1, r3, #2
      contstat = contstat & 254;
    295c:	6022      	str	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    295e:	d1ab      	bne.n	28b8 <contcon()+0x1c>
    2960:	e00a      	b.n	2978 <contcon()+0xdc>
      analogWrite(OUT7, 0);
    2962:	2005      	movs	r0, #5
    2964:	f007 faa8 	bl	9eb8 <analogWrite>
      contstat = contstat & 251;
    2968:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    296a:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 251;
    296c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2970:	6022      	str	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    2972:	07da      	lsls	r2, r3, #31
    2974:	d5b4      	bpl.n	28e0 <contcon()+0x44>
    2976:	e7a4      	b.n	28c2 <contcon()+0x26>
      analogWrite(OUT6, 0);
    2978:	2017      	movs	r0, #23
    297a:	f007 fa9d 	bl	9eb8 <analogWrite>
      contstat = contstat & 253;
    297e:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    2980:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 253;
    2982:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    if ((contctrl & 4) == 0) {
    2986:	f013 0104 	ands.w	r1, r3, #4
      contstat = contstat & 253;
    298a:	6022      	str	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    298c:	d197      	bne.n	28be <contcon()+0x22>
    298e:	e7e8      	b.n	2962 <contcon()+0xc6>
    if ((contctrl & 4) == 4) {
    2990:	075b      	lsls	r3, r3, #29
    2992:	d4aa      	bmi.n	28ea <contcon()+0x4e>
    2994:	e7b9      	b.n	290a <contcon()+0x6e>
          analogWrite(OUT6, settings.conthold);
    2996:	4b39      	ldr	r3, [pc, #228]	; (2a7c <contcon()+0x1e0>)
    2998:	2017      	movs	r0, #23
    299a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    299e:	f007 fa8b 	bl	9eb8 <analogWrite>
          contstat = contstat | 2;
    29a2:	6823      	ldr	r3, [r4, #0]
          conttimer2 = 0;
    29a4:	2200      	movs	r2, #0
          contstat = contstat | 2;
    29a6:	f043 0302 	orr.w	r3, r3, #2
    29aa:	6023      	str	r3, [r4, #0]
          conttimer2 = 0;
    29ac:	602a      	str	r2, [r5, #0]
    29ae:	e7bb      	b.n	2928 <contcon()+0x8c>
          Serial.println();
    29b0:	4833      	ldr	r0, [pc, #204]	; (2a80 <contcon()+0x1e4>)
    29b2:	f006 fd2b 	bl	940c <Print::println()>
    29b6:	210c      	movs	r1, #12
    29b8:	4832      	ldr	r0, [pc, #200]	; (2a84 <contcon()+0x1e8>)
    29ba:	f009 fa6b 	bl	be94 <usb_serial_write>
    29be:	4830      	ldr	r0, [pc, #192]	; (2a80 <contcon()+0x1e4>)
    29c0:	f006 fd24 	bl	940c <Print::println()>
          analogWrite(OUT6, 255);
    29c4:	21ff      	movs	r1, #255	; 0xff
    29c6:	2017      	movs	r0, #23
    29c8:	f007 fa76 	bl	9eb8 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    29cc:	4b28      	ldr	r3, [pc, #160]	; (2a70 <contcon()+0x1d4>)
          conttimer2 = millis() + pulltime;
    29ce:	492e      	ldr	r1, [pc, #184]	; (2a88 <contcon()+0x1ec>)
    29d0:	681a      	ldr	r2, [r3, #0]
    29d2:	9202      	str	r2, [sp, #8]
	return ret;
    29d4:	9a02      	ldr	r2, [sp, #8]
    29d6:	6809      	ldr	r1, [r1, #0]
    29d8:	440a      	add	r2, r1
    29da:	602a      	str	r2, [r5, #0]
    29dc:	e79f      	b.n	291e <contcon()+0x82>
          analogWrite(OUT5, settings.conthold);
    29de:	4b27      	ldr	r3, [pc, #156]	; (2a7c <contcon()+0x1e0>)
    29e0:	2016      	movs	r0, #22
    29e2:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    29e6:	f007 fa67 	bl	9eb8 <analogWrite>
          contstat = contstat | 1;
    29ea:	6823      	ldr	r3, [r4, #0]
          conttimer1 = 0;
    29ec:	2200      	movs	r2, #0
          contstat = contstat | 1;
    29ee:	f043 0301 	orr.w	r3, r3, #1
    29f2:	6023      	str	r3, [r4, #0]
          conttimer1 = 0;
    29f4:	602a      	str	r2, [r5, #0]
    29f6:	e772      	b.n	28de <contcon()+0x42>
          analogWrite(OUT5, 255);
    29f8:	21ff      	movs	r1, #255	; 0xff
    29fa:	2016      	movs	r0, #22
    29fc:	f007 fa5c 	bl	9eb8 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a00:	4b1b      	ldr	r3, [pc, #108]	; (2a70 <contcon()+0x1d4>)
          conttimer1 = millis() + pulltime;
    2a02:	4921      	ldr	r1, [pc, #132]	; (2a88 <contcon()+0x1ec>)
    2a04:	681a      	ldr	r2, [r3, #0]
    2a06:	9200      	str	r2, [sp, #0]
	return ret;
    2a08:	9a00      	ldr	r2, [sp, #0]
    2a0a:	6809      	ldr	r1, [r1, #0]
    2a0c:	440a      	add	r2, r1
    2a0e:	602a      	str	r2, [r5, #0]
    2a10:	e760      	b.n	28d4 <contcon()+0x38>
          analogWrite(OUT7, settings.conthold);
    2a12:	4b1a      	ldr	r3, [pc, #104]	; (2a7c <contcon()+0x1e0>)
    2a14:	2005      	movs	r0, #5
    2a16:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    2a1a:	f007 fa4d 	bl	9eb8 <analogWrite>
          contstat = contstat | 4;
    2a1e:	6823      	ldr	r3, [r4, #0]
  if (contctrl == 0) {
    2a20:	6835      	ldr	r5, [r6, #0]
          conttimer3 = 0;
    2a22:	2200      	movs	r2, #0
          contstat = contstat | 4;
    2a24:	f043 0304 	orr.w	r3, r3, #4
    2a28:	6023      	str	r3, [r4, #0]
          conttimer3 = 0;
    2a2a:	603a      	str	r2, [r7, #0]
  if (contctrl == 0) {
    2a2c:	2d00      	cmp	r5, #0
    2a2e:	f47f af6c 	bne.w	290a <contcon()+0x6e>
    2a32:	e77f      	b.n	2934 <contcon()+0x98>
          Serial.println();
    2a34:	4812      	ldr	r0, [pc, #72]	; (2a80 <contcon()+0x1e4>)
    2a36:	f006 fce9 	bl	940c <Print::println()>
    2a3a:	210c      	movs	r1, #12
    2a3c:	4813      	ldr	r0, [pc, #76]	; (2a8c <contcon()+0x1f0>)
    2a3e:	f009 fa29 	bl	be94 <usb_serial_write>
    2a42:	480f      	ldr	r0, [pc, #60]	; (2a80 <contcon()+0x1e4>)
    2a44:	f006 fce2 	bl	940c <Print::println()>
          analogWrite(OUT7, 255);
    2a48:	21ff      	movs	r1, #255	; 0xff
    2a4a:	2005      	movs	r0, #5
    2a4c:	f007 fa34 	bl	9eb8 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a50:	4b07      	ldr	r3, [pc, #28]	; (2a70 <contcon()+0x1d4>)
          conttimer3 = millis() + pulltime;
    2a52:	490d      	ldr	r1, [pc, #52]	; (2a88 <contcon()+0x1ec>)
    2a54:	681a      	ldr	r2, [r3, #0]
    2a56:	9204      	str	r2, [sp, #16]
	return ret;
    2a58:	9a04      	ldr	r2, [sp, #16]
    2a5a:	6809      	ldr	r1, [r1, #0]
    2a5c:	440a      	add	r2, r1
    2a5e:	603a      	str	r2, [r7, #0]
    2a60:	e74b      	b.n	28fa <contcon()+0x5e>
    2a62:	bf00      	nop
    2a64:	1fffd78c 	.word	0x1fffd78c
    2a68:	1fffd790 	.word	0x1fffd790
    2a6c:	1fffd794 	.word	0x1fffd794
    2a70:	1fffdcc4 	.word	0x1fffdcc4
    2a74:	1fffd79c 	.word	0x1fffd79c
    2a78:	1fffd798 	.word	0x1fffd798
    2a7c:	1fffd9bc 	.word	0x1fffd9bc
    2a80:	1fff89fc 	.word	0x1fff89fc
    2a84:	00014108 	.word	0x00014108
    2a88:	1fff8864 	.word	0x1fff8864
    2a8c:	00014118 	.word	0x00014118

00002a90 <calcur()>:
void calcur() {
    2a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  adc->adc0->startContinuous(ACUR1);
    2a94:	4e53      	ldr	r6, [pc, #332]	; (2be4 <calcur()+0x154>)
  sensor = 1;
    2a96:	f8df a150 	ldr.w	sl, [pc, #336]	; 2be8 <calcur()+0x158>
  adc->adc0->startContinuous(ACUR1);
    2a9a:	6833      	ldr	r3, [r6, #0]
  x = 0;
    2a9c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 2bec <calcur()+0x15c>
  adc->adc0->startContinuous(ACUR1);
    2aa0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2aa4:	4d52      	ldr	r5, [pc, #328]	; (2bf0 <calcur()+0x160>)
    2aa6:	210f      	movs	r1, #15
    2aa8:	f006 f912 	bl	8cd0 <ADC_Module::startContinuous(unsigned char)>
  sensor = 1;
    2aac:	2301      	movs	r3, #1
    2aae:	f8ca 3000 	str.w	r3, [sl]
    2ab2:	4850      	ldr	r0, [pc, #320]	; (2bf4 <calcur()+0x164>)
  x = 0;
    2ab4:	2300      	movs	r3, #0
    2ab6:	2122      	movs	r1, #34	; 0x22
    2ab8:	f8c9 3000 	str.w	r3, [r9]
    2abc:	f009 f9ea 	bl	be94 <usb_serial_write>
  while (x < 20) {
    2ac0:	f8d9 3000 	ldr.w	r3, [r9]
    2ac4:	2b13      	cmp	r3, #19
    2ac6:	dc21      	bgt.n	2b0c <calcur()+0x7c>
    2ac8:	4f4b      	ldr	r7, [pc, #300]	; (2bf8 <calcur()+0x168>)
    settings.offset1 = settings.offset1 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    2aca:	f640 48e4 	movw	r8, #3300	; 0xce4
    2ace:	6833      	ldr	r3, [r6, #0]
    2ad0:	f8b5 b0ac 	ldrh.w	fp, [r5, #172]	; 0xac
    2ad4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2ad8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2ada:	691c      	ldr	r4, [r3, #16]
    2adc:	f005 fe40 	bl	8760 <ADC_Module::getMaxValue()>
    2ae0:	b2a4      	uxth	r4, r4
    2ae2:	2101      	movs	r1, #1
    2ae4:	fb08 f404 	mul.w	r4, r8, r4
    2ae8:	fbb4 f4f0 	udiv	r4, r4, r0
    2aec:	4638      	mov	r0, r7
    2aee:	44a3      	add	fp, r4
    2af0:	f8a5 b0ac 	strh.w	fp, [r5, #172]	; 0xac
    2af4:	f009 f9ce 	bl	be94 <usb_serial_write>
    delay(100);
    2af8:	2064      	movs	r0, #100	; 0x64
    2afa:	f007 fbe9 	bl	a2d0 <delay>
    x++;
    2afe:	f8d9 3000 	ldr.w	r3, [r9]
    2b02:	3301      	adds	r3, #1
  while (x < 20) {
    2b04:	2b13      	cmp	r3, #19
    x++;
    2b06:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    2b0a:	dde0      	ble.n	2ace <calcur()+0x3e>
  settings.offset1 = settings.offset1 / 21;
    2b0c:	f8b5 30ac 	ldrh.w	r3, [r5, #172]	; 0xac
    2b10:	493a      	ldr	r1, [pc, #232]	; (2bfc <calcur()+0x16c>)
	size_t print(int n)				{ return print((long)n); }
    2b12:	483b      	ldr	r0, [pc, #236]	; (2c00 <calcur()+0x170>)
    2b14:	fba1 2103 	umull	r2, r1, r1, r3
    2b18:	1a5b      	subs	r3, r3, r1
    2b1a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    2b1e:	f3c1 110f 	ubfx	r1, r1, #4, #16
    2b22:	f8a5 10ac 	strh.w	r1, [r5, #172]	; 0xac
    2b26:	f006 fc69 	bl	93fc <Print::print(long)>
    2b2a:	211d      	movs	r1, #29
    2b2c:	4835      	ldr	r0, [pc, #212]	; (2c04 <calcur()+0x174>)
    2b2e:	f009 f9b1 	bl	be94 <usb_serial_write>
    2b32:	2102      	movs	r1, #2
    2b34:	4834      	ldr	r0, [pc, #208]	; (2c08 <calcur()+0x178>)
    2b36:	f009 f9ad 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2b3a:	4831      	ldr	r0, [pc, #196]	; (2c00 <calcur()+0x170>)
    2b3c:	f006 fc66 	bl	940c <Print::println()>
  x = 0;
    2b40:	2200      	movs	r2, #0
  adc->startContinuous(ACUR2, ADC_0);
    2b42:	210e      	movs	r1, #14
    2b44:	6830      	ldr	r0, [r6, #0]
  x = 0;
    2b46:	f8c9 2000 	str.w	r2, [r9]
  adc->startContinuous(ACUR2, ADC_0);
    2b4a:	f005 fdb3 	bl	86b4 <ADC::startContinuous(unsigned char, signed char)>
  sensor = 2;
    2b4e:	2302      	movs	r3, #2
    2b50:	4828      	ldr	r0, [pc, #160]	; (2bf4 <calcur()+0x164>)
    2b52:	f8ca 3000 	str.w	r3, [sl]
    2b56:	2122      	movs	r1, #34	; 0x22
    2b58:	f009 f99c 	bl	be94 <usb_serial_write>
  while (x < 20) {
    2b5c:	f8d9 3000 	ldr.w	r3, [r9]
    2b60:	2b13      	cmp	r3, #19
    2b62:	dc22      	bgt.n	2baa <calcur()+0x11a>
    2b64:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2bf8 <calcur()+0x168>
    settings.offset2 = settings.offset2 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    2b68:	f640 47e4 	movw	r7, #3300	; 0xce4
    2b6c:	6833      	ldr	r3, [r6, #0]
    2b6e:	f8b5 a0ae 	ldrh.w	sl, [r5, #174]	; 0xae
    2b72:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2b76:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2b78:	691c      	ldr	r4, [r3, #16]
    2b7a:	f005 fdf1 	bl	8760 <ADC_Module::getMaxValue()>
    2b7e:	b2a4      	uxth	r4, r4
    2b80:	2101      	movs	r1, #1
    2b82:	fb07 f404 	mul.w	r4, r7, r4
    2b86:	fbb4 f4f0 	udiv	r4, r4, r0
    2b8a:	4640      	mov	r0, r8
    2b8c:	44a2      	add	sl, r4
    2b8e:	f8a5 a0ae 	strh.w	sl, [r5, #174]	; 0xae
    2b92:	f009 f97f 	bl	be94 <usb_serial_write>
    delay(100);
    2b96:	2064      	movs	r0, #100	; 0x64
    2b98:	f007 fb9a 	bl	a2d0 <delay>
    x++;
    2b9c:	f8d9 3000 	ldr.w	r3, [r9]
    2ba0:	3301      	adds	r3, #1
  while (x < 20) {
    2ba2:	2b13      	cmp	r3, #19
    x++;
    2ba4:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    2ba8:	dde0      	ble.n	2b6c <calcur()+0xdc>
  settings.offset2 = settings.offset2 / 21;
    2baa:	f8b5 30ae 	ldrh.w	r3, [r5, #174]	; 0xae
    2bae:	4913      	ldr	r1, [pc, #76]	; (2bfc <calcur()+0x16c>)
	size_t print(int n)				{ return print((long)n); }
    2bb0:	4813      	ldr	r0, [pc, #76]	; (2c00 <calcur()+0x170>)
    2bb2:	fba1 2103 	umull	r2, r1, r1, r3
    2bb6:	1a5b      	subs	r3, r3, r1
    2bb8:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    2bbc:	f3c1 110f 	ubfx	r1, r1, #4, #16
    2bc0:	f8a5 10ae 	strh.w	r1, [r5, #174]	; 0xae
    2bc4:	f006 fc1a 	bl	93fc <Print::print(long)>
    2bc8:	211d      	movs	r1, #29
    2bca:	4810      	ldr	r0, [pc, #64]	; (2c0c <calcur()+0x17c>)
    2bcc:	f009 f962 	bl	be94 <usb_serial_write>
    2bd0:	480d      	ldr	r0, [pc, #52]	; (2c08 <calcur()+0x178>)
    2bd2:	2102      	movs	r1, #2
    2bd4:	f009 f95e 	bl	be94 <usb_serial_write>
}
    2bd8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    2bdc:	4808      	ldr	r0, [pc, #32]	; (2c00 <calcur()+0x170>)
    2bde:	f006 bc15 	b.w	940c <Print::println()>
    2be2:	bf00      	nop
    2be4:	1fff91cc 	.word	0x1fff91cc
    2be8:	1fff8874 	.word	0x1fff8874
    2bec:	1fffdabc 	.word	0x1fffdabc
    2bf0:	1fffd9bc 	.word	0x1fffd9bc
    2bf4:	00014128 	.word	0x00014128
    2bf8:	0001414c 	.word	0x0001414c
    2bfc:	86186187 	.word	0x86186187
    2c00:	1fff89fc 	.word	0x1fff89fc
    2c04:	00014150 	.word	0x00014150
    2c08:	00014200 	.word	0x00014200
    2c0c:	00014170 	.word	0x00014170

00002c10 <VEcan()>:
{
    2c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (settings.chargertype == 6) {
    2c14:	4da4      	ldr	r5, [pc, #656]	; (2ea8 <VEcan()+0x298>)
    2c16:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2c1a:	2b06      	cmp	r3, #6
    2c1c:	f000 816a 	beq.w	2ef4 <VEcan()+0x2e4>
    if (storagemode == 0) {
    2c20:	4ba2      	ldr	r3, [pc, #648]	; (2eac <VEcan()+0x29c>)
    msg.id = 0x351;
    2c22:	4ca3      	ldr	r4, [pc, #652]	; (2eb0 <VEcan()+0x2a0>)
    if (storagemode == 0) {
    2c24:	681b      	ldr	r3, [r3, #0]
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
    msg.id = 0x351;
    2c28:	f240 3151 	movw	r1, #849	; 0x351
    msg.len = 8;
    2c2c:	2208      	movs	r2, #8
    msg.id = 0x351;
    2c2e:	6021      	str	r1, [r4, #0]
    msg.len = 8;
    2c30:	71e2      	strb	r2, [r4, #7]
    if (storagemode == 0) {
    2c32:	2b00      	cmp	r3, #0
    2c34:	f000 8133 	beq.w	2e9e <VEcan()+0x28e>
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    2c38:	f009 ffb8 	bl	cbac <__aeabi_i2f>
    2c3c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2c3e:	4606      	mov	r6, r0
    2c40:	f00a f808 	bl	cc54 <__aeabi_fmul>
    2c44:	499b      	ldr	r1, [pc, #620]	; (2eb4 <VEcan()+0x2a4>)
    2c46:	f00a f805 	bl	cc54 <__aeabi_fmul>
    2c4a:	f00a f9ef 	bl	d02c <__aeabi_f2uiz>
    2c4e:	b2c2      	uxtb	r2, r0
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2c50:	7222      	strb	r2, [r4, #8]
    msg.buf[2] = lowByte(chargecurrent);
    2c52:	4a99      	ldr	r2, [pc, #612]	; (2eb8 <VEcan()+0x2a8>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2c54:	69e9      	ldr	r1, [r5, #28]
      msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    2c56:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2c5a:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(chargecurrent);
    2c5c:	8813      	ldrh	r3, [r2, #0]
    2c5e:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = lowByte(discurrent);
    2c60:	4b96      	ldr	r3, [pc, #600]	; (2ebc <VEcan()+0x2ac>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2c62:	4630      	mov	r0, r6
    msg.buf[4] = lowByte(discurrent);
    2c64:	881b      	ldrh	r3, [r3, #0]
    2c66:	81a3      	strh	r3, [r4, #12]
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2c68:	f009 fff4 	bl	cc54 <__aeabi_fmul>
    2c6c:	4991      	ldr	r1, [pc, #580]	; (2eb4 <VEcan()+0x2a4>)
    2c6e:	f009 fff1 	bl	cc54 <__aeabi_fmul>
    2c72:	f00a f9db 	bl	d02c <__aeabi_f2uiz>
    Can0.write(msg);
    2c76:	498e      	ldr	r1, [pc, #568]	; (2eb0 <VEcan()+0x2a0>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2c78:	4603      	mov	r3, r0
    Can0.write(msg);
    2c7a:	4891      	ldr	r0, [pc, #580]	; (2ec0 <VEcan()+0x2b0>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2c7c:	81e3      	strh	r3, [r4, #14]
    Can0.write(msg);
    2c7e:	f005 faf5 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    msg.buf[0] = lowByte(SOC);
    2c82:	4a90      	ldr	r2, [pc, #576]	; (2ec4 <VEcan()+0x2b4>)
    Can0.write(msg);
    2c84:	488e      	ldr	r0, [pc, #568]	; (2ec0 <VEcan()+0x2b0>)
    msg.buf[0] = lowByte(SOC);
    2c86:	6813      	ldr	r3, [r2, #0]
    2c88:	8812      	ldrh	r2, [r2, #0]
    2c8a:	8122      	strh	r2, [r4, #8]
    msg.buf[4] = lowByte(SOC * 10);
    2c8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    msg.buf[2] = lowByte(SOH);
    2c90:	4a8d      	ldr	r2, [pc, #564]	; (2ec8 <VEcan()+0x2b8>)
    msg.len = 8;
    2c92:	2608      	movs	r6, #8
    msg.buf[4] = lowByte(SOC * 10);
    2c94:	005b      	lsls	r3, r3, #1
    msg.id = 0x355;
    2c96:	f240 3155 	movw	r1, #853	; 0x355
    msg.buf[2] = lowByte(SOH);
    2c9a:	8812      	ldrh	r2, [r2, #0]
    msg.id = 0x355;
    2c9c:	6021      	str	r1, [r4, #0]
    msg.buf[4] = lowByte(SOC * 10);
    2c9e:	7323      	strb	r3, [r4, #12]
    Can0.write(msg);
    2ca0:	4983      	ldr	r1, [pc, #524]	; (2eb0 <VEcan()+0x2a0>)
    msg.buf[2] = lowByte(SOH);
    2ca2:	8162      	strh	r2, [r4, #10]
    msg.buf[5] = highByte(SOC * 10);
    2ca4:	4133      	asrs	r3, r6
    msg.buf[6] = 0;
    2ca6:	2700      	movs	r7, #0
    msg.buf[5] = highByte(SOC * 10);
    2ca8:	7363      	strb	r3, [r4, #13]
    msg.len = 8;
    2caa:	71e6      	strb	r6, [r4, #7]
    msg.buf[6] = 0;
    2cac:	81e7      	strh	r7, [r4, #14]
    Can0.write(msg);
    2cae:	f005 fadd 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x356;
    2cb2:	f240 3356 	movw	r3, #854	; 0x356
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    2cb6:	4885      	ldr	r0, [pc, #532]	; (2ecc <VEcan()+0x2bc>)
    msg.id = 0x356;
    2cb8:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    2cba:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    2cbc:	f7fe f8de 	bl	e7c <BMSModuleManager::getPackVoltage()>
    2cc0:	4983      	ldr	r1, [pc, #524]	; (2ed0 <VEcan()+0x2c0>)
    2cc2:	f009 ffc7 	bl	cc54 <__aeabi_fmul>
    2cc6:	f00a f9b1 	bl	d02c <__aeabi_f2uiz>
    2cca:	7220      	strb	r0, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    2ccc:	487f      	ldr	r0, [pc, #508]	; (2ecc <VEcan()+0x2bc>)
    2cce:	f7fe f8d5 	bl	e7c <BMSModuleManager::getPackVoltage()>
    2cd2:	497f      	ldr	r1, [pc, #508]	; (2ed0 <VEcan()+0x2c0>)
    2cd4:	f009 ffbe 	bl	cc54 <__aeabi_fmul>
    2cd8:	f00a f9a8 	bl	d02c <__aeabi_f2uiz>
    msg.buf[2] = lowByte(long(currentact / 100));
    2cdc:	4b7d      	ldr	r3, [pc, #500]	; (2ed4 <VEcan()+0x2c4>)
    2cde:	497c      	ldr	r1, [pc, #496]	; (2ed0 <VEcan()+0x2c0>)
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    2ce0:	f3c0 2007 	ubfx	r0, r0, #8, #8
    2ce4:	7260      	strb	r0, [r4, #9]
    msg.buf[2] = lowByte(long(currentact / 100));
    2ce6:	6818      	ldr	r0, [r3, #0]
    2ce8:	f00a f868 	bl	cdbc <__aeabi_fdiv>
    2cec:	f00a f978 	bl	cfe0 <__aeabi_f2iz>
    2cf0:	8160      	strh	r0, [r4, #10]
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    2cf2:	4876      	ldr	r0, [pc, #472]	; (2ecc <VEcan()+0x2bc>)
    2cf4:	f7fe f8ee 	bl	ed4 <BMSModuleManager::getAvgTemperature()>
    2cf8:	496e      	ldr	r1, [pc, #440]	; (2eb4 <VEcan()+0x2a4>)
    2cfa:	f009 ffab 	bl	cc54 <__aeabi_fmul>
    2cfe:	f00a f96f 	bl	cfe0 <__aeabi_f2iz>
    2d02:	7320      	strb	r0, [r4, #12]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    2d04:	4871      	ldr	r0, [pc, #452]	; (2ecc <VEcan()+0x2bc>)
    2d06:	f7fe f8e5 	bl	ed4 <BMSModuleManager::getAvgTemperature()>
    2d0a:	496a      	ldr	r1, [pc, #424]	; (2eb4 <VEcan()+0x2a4>)
    2d0c:	f009 ffa2 	bl	cc54 <__aeabi_fmul>
    2d10:	f00a f966 	bl	cfe0 <__aeabi_f2iz>
    2d14:	f340 2007 	sbfx	r0, r0, #8, #8
    Can0.write(msg);
    2d18:	4965      	ldr	r1, [pc, #404]	; (2eb0 <VEcan()+0x2a0>)
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    2d1a:	7360      	strb	r0, [r4, #13]
    Can0.write(msg);
    2d1c:	4868      	ldr	r0, [pc, #416]	; (2ec0 <VEcan()+0x2b0>)
    msg.buf[6] = 0;
    2d1e:	81e7      	strh	r7, [r4, #14]
    Can0.write(msg);
    2d20:	f005 faa4 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    2d24:	2002      	movs	r0, #2
    2d26:	f007 fad3 	bl	a2d0 <delay>
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    2d2a:	4a6b      	ldr	r2, [pc, #428]	; (2ed8 <VEcan()+0x2c8>)
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    2d2c:	4b6b      	ldr	r3, [pc, #428]	; (2edc <VEcan()+0x2cc>)
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    2d2e:	6812      	ldr	r2, [r2, #0]
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    2d30:	681b      	ldr	r3, [r3, #0]
    Can0.write(msg);
    2d32:	4863      	ldr	r0, [pc, #396]	; (2ec0 <VEcan()+0x2b0>)
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    2d34:	60a2      	str	r2, [r4, #8]
    msg.id = 0x35A;
    2d36:	f240 315a 	movw	r1, #858	; 0x35a
    2d3a:	6021      	str	r1, [r4, #0]
    Can0.write(msg);
    2d3c:	495c      	ldr	r1, [pc, #368]	; (2eb0 <VEcan()+0x2a0>)
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    2d3e:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    2d40:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    2d42:	f005 fa93 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    msg.buf[0] = bmsname[0];
    2d46:	4b66      	ldr	r3, [pc, #408]	; (2ee0 <VEcan()+0x2d0>)
    Can0.write(msg);
    2d48:	4959      	ldr	r1, [pc, #356]	; (2eb0 <VEcan()+0x2a0>)
    2d4a:	485d      	ldr	r0, [pc, #372]	; (2ec0 <VEcan()+0x2b0>)
    msg.len = 8;
    2d4c:	71e6      	strb	r6, [r4, #7]
    msg.id = 0x35E;
    2d4e:	f240 325e 	movw	r2, #862	; 0x35e
    2d52:	6022      	str	r2, [r4, #0]
    msg.buf[4] = bmsname[4];
    2d54:	e9d3 2300 	ldrd	r2, r3, [r3]
    msg.buf[0] = bmsname[0];
    2d58:	60a2      	str	r2, [r4, #8]
    msg.buf[4] = bmsname[4];
    2d5a:	60e3      	str	r3, [r4, #12]
    Can0.write(msg);
    2d5c:	f005 fa86 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    2d60:	2002      	movs	r0, #2
    2d62:	f007 fab5 	bl	a2d0 <delay>
    msg.buf[0] = bmsmanu[0];
    2d66:	4b5f      	ldr	r3, [pc, #380]	; (2ee4 <VEcan()+0x2d4>)
    Can0.write(msg);
    2d68:	4951      	ldr	r1, [pc, #324]	; (2eb0 <VEcan()+0x2a0>)
    2d6a:	4855      	ldr	r0, [pc, #340]	; (2ec0 <VEcan()+0x2b0>)
    msg.len = 8;
    2d6c:	71e6      	strb	r6, [r4, #7]
    msg.id = 0x370;
    2d6e:	f44f 725c 	mov.w	r2, #880	; 0x370
    2d72:	6022      	str	r2, [r4, #0]
    msg.buf[4] = bmsmanu[4];
    2d74:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d78:	60e3      	str	r3, [r4, #12]
    msg.buf[0] = bmsmanu[0];
    2d7a:	60a2      	str	r2, [r4, #8]
    Can0.write(msg);
    2d7c:	f005 fa76 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    if (balancecells == 1) {
    2d80:	4b59      	ldr	r3, [pc, #356]	; (2ee8 <VEcan()+0x2d8>)
    2d82:	681b      	ldr	r3, [r3, #0]
    2d84:	2b01      	cmp	r3, #1
    2d86:	f000 8203 	beq.w	3190 <VEcan()+0x580>
    delay(2);
    2d8a:	2002      	movs	r0, #2
    2d8c:	f007 faa0 	bl	a2d0 <delay>
    msg.len = 8;
    2d90:	2608      	movs	r6, #8
    msg.id = 0x373;
    2d92:	f240 3373 	movw	r3, #883	; 0x373
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    2d96:	484d      	ldr	r0, [pc, #308]	; (2ecc <VEcan()+0x2bc>)
    msg.id = 0x373;
    2d98:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    2d9a:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    2d9c:	f7fe f820 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    2da0:	4952      	ldr	r1, [pc, #328]	; (2eec <VEcan()+0x2dc>)
    2da2:	f009 ff57 	bl	cc54 <__aeabi_fmul>
    2da6:	f00a f941 	bl	d02c <__aeabi_f2uiz>
    2daa:	4603      	mov	r3, r0
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    2dac:	4847      	ldr	r0, [pc, #284]	; (2ecc <VEcan()+0x2bc>)
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    2dae:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    2db0:	f7fe f816 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    2db4:	494d      	ldr	r1, [pc, #308]	; (2eec <VEcan()+0x2dc>)
    2db6:	f009 ff4d 	bl	cc54 <__aeabi_fmul>
    2dba:	f00a f937 	bl	d02c <__aeabi_f2uiz>
    2dbe:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    2dc2:	4842      	ldr	r0, [pc, #264]	; (2ecc <VEcan()+0x2bc>)
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    2dc4:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    2dc6:	f7fe f833 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    2dca:	4948      	ldr	r1, [pc, #288]	; (2eec <VEcan()+0x2dc>)
    2dcc:	f009 ff42 	bl	cc54 <__aeabi_fmul>
    2dd0:	f00a f92c 	bl	d02c <__aeabi_f2uiz>
    2dd4:	4603      	mov	r3, r0
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    2dd6:	483d      	ldr	r0, [pc, #244]	; (2ecc <VEcan()+0x2bc>)
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    2dd8:	72a3      	strb	r3, [r4, #10]
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    2dda:	f7fe f829 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    2dde:	4943      	ldr	r1, [pc, #268]	; (2eec <VEcan()+0x2dc>)
    2de0:	f009 ff38 	bl	cc54 <__aeabi_fmul>
    2de4:	f00a f922 	bl	d02c <__aeabi_f2uiz>
    2de8:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    2dec:	4837      	ldr	r0, [pc, #220]	; (2ecc <VEcan()+0x2bc>)
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    2dee:	72e3      	strb	r3, [r4, #11]
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    2df0:	f7fe f8da 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    2df4:	493e      	ldr	r1, [pc, #248]	; (2ef0 <VEcan()+0x2e0>)
    2df6:	f009 fe25 	bl	ca44 <__addsf3>
    2dfa:	f00a f917 	bl	d02c <__aeabi_f2uiz>
    2dfe:	4603      	mov	r3, r0
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    2e00:	4832      	ldr	r0, [pc, #200]	; (2ecc <VEcan()+0x2bc>)
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    2e02:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    2e04:	f7fe f8d0 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    2e08:	4939      	ldr	r1, [pc, #228]	; (2ef0 <VEcan()+0x2e0>)
    2e0a:	f009 fe1b 	bl	ca44 <__addsf3>
    2e0e:	f00a f90d 	bl	d02c <__aeabi_f2uiz>
    2e12:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    2e16:	482d      	ldr	r0, [pc, #180]	; (2ecc <VEcan()+0x2bc>)
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    2e18:	7363      	strb	r3, [r4, #13]
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    2e1a:	f7fe f8c3 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    2e1e:	4934      	ldr	r1, [pc, #208]	; (2ef0 <VEcan()+0x2e0>)
    2e20:	f009 fe10 	bl	ca44 <__addsf3>
    2e24:	f00a f902 	bl	d02c <__aeabi_f2uiz>
    2e28:	4603      	mov	r3, r0
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    2e2a:	4828      	ldr	r0, [pc, #160]	; (2ecc <VEcan()+0x2bc>)
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    2e2c:	73a3      	strb	r3, [r4, #14]
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    2e2e:	f7fe f8b9 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    2e32:	492f      	ldr	r1, [pc, #188]	; (2ef0 <VEcan()+0x2e0>)
    2e34:	f009 fe06 	bl	ca44 <__addsf3>
    2e38:	f00a f8f8 	bl	d02c <__aeabi_f2uiz>
    2e3c:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    2e40:	491b      	ldr	r1, [pc, #108]	; (2eb0 <VEcan()+0x2a0>)
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    2e42:	73e0      	strb	r0, [r4, #15]
    Can0.write(msg);
    2e44:	481e      	ldr	r0, [pc, #120]	; (2ec0 <VEcan()+0x2b0>)
    2e46:	f005 fa11 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    2e4a:	2002      	movs	r0, #2
    2e4c:	f007 fa40 	bl	a2d0 <delay>
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    2e50:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    2e52:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    2e54:	fb13 f302 	smulbb	r3, r3, r2
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    2e58:	f3c3 2207 	ubfx	r2, r3, #8, #8
    msg.id = 0x379;  //Installed capacity
    2e5c:	f240 3179 	movw	r1, #889	; 0x379
    msg.len = 2;
    2e60:	2002      	movs	r0, #2
    msg.id = 0x379;  //Installed capacity
    2e62:	6021      	str	r1, [r4, #0]
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    2e64:	7262      	strb	r2, [r4, #9]
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    2e66:	7223      	strb	r3, [r4, #8]
    msg.len = 2;
    2e68:	71e0      	strb	r0, [r4, #7]
    delay(2);
    2e6a:	f007 fa31 	bl	a2d0 <delay>
    msg.id = 0x372;
    2e6e:	f240 3372 	movw	r3, #882	; 0x372
    msg.buf[0] = lowByte(bms.getNumModules());
    2e72:	4816      	ldr	r0, [pc, #88]	; (2ecc <VEcan()+0x2bc>)
    msg.id = 0x372;
    2e74:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    2e76:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(bms.getNumModules());
    2e78:	f7fd fe5c 	bl	b34 <BMSModuleManager::getNumModules()>
    2e7c:	4603      	mov	r3, r0
    msg.buf[1] = highByte(bms.getNumModules());
    2e7e:	4813      	ldr	r0, [pc, #76]	; (2ecc <VEcan()+0x2bc>)
    msg.buf[0] = lowByte(bms.getNumModules());
    2e80:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(bms.getNumModules());
    2e82:	f7fd fe57 	bl	b34 <BMSModuleManager::getNumModules()>
    msg.buf[2] = 0x00;
    2e86:	2200      	movs	r2, #0
    msg.buf[1] = highByte(bms.getNumModules());
    2e88:	fa40 f306 	asr.w	r3, r0, r6
    2e8c:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = 0x00;
    2e8e:	8162      	strh	r2, [r4, #10]
    msg.buf[4] = 0x00;
    2e90:	60e2      	str	r2, [r4, #12]
    Can0.write(msg);
    2e92:	4907      	ldr	r1, [pc, #28]	; (2eb0 <VEcan()+0x2a0>)
    2e94:	480a      	ldr	r0, [pc, #40]	; (2ec0 <VEcan()+0x2b0>)
}
    2e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Can0.write(msg);
    2e9a:	f005 b9e7 	b.w	826c <FlexCAN::write(CAN_message_t const&)>
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2e9e:	f009 fe85 	bl	cbac <__aeabi_i2f>
    2ea2:	69a9      	ldr	r1, [r5, #24]
    2ea4:	e6cb      	b.n	2c3e <VEcan()+0x2e>
    2ea6:	bf00      	nop
    2ea8:	1fffd9bc 	.word	0x1fffd9bc
    2eac:	1fffdaa0 	.word	0x1fffdaa0
    2eb0:	1fffd914 	.word	0x1fffd914
    2eb4:	41200000 	.word	0x41200000
    2eb8:	1fffd714 	.word	0x1fffd714
    2ebc:	1fffd8a8 	.word	0x1fffd8a8
    2ec0:	1fffdad0 	.word	0x1fffdad0
    2ec4:	1fff8824 	.word	0x1fff8824
    2ec8:	1fff8828 	.word	0x1fff8828
    2ecc:	1fff91e4 	.word	0x1fff91e4
    2ed0:	42c80000 	.word	0x42c80000
    2ed4:	1fffd8a0 	.word	0x1fffd8a0
    2ed8:	1fff91d0 	.word	0x1fff91d0
    2edc:	1fffdab8 	.word	0x1fffdab8
    2ee0:	1fff8834 	.word	0x1fff8834
    2ee4:	1fff882c 	.word	0x1fff882c
    2ee8:	1fff91d8 	.word	0x1fff91d8
    2eec:	447a0000 	.word	0x447a0000
    2ef0:	43889333 	.word	0x43889333
    msg.id = 0x618;
    2ef4:	4cc0      	ldr	r4, [pc, #768]	; (31f8 <VEcan()+0x5e8>)
    msg.buf[0] = 0x00;
    2ef6:	f8df 8304 	ldr.w	r8, [pc, #772]	; 31fc <VEcan()+0x5ec>
    Can0.write(msg);
    2efa:	48c1      	ldr	r0, [pc, #772]	; (3200 <VEcan()+0x5f0>)
    msg.buf[0] = 0x00;
    2efc:	f8c4 8008 	str.w	r8, [r4, #8]
    msg.len = 8;
    2f00:	2608      	movs	r6, #8
    msg.id = 0x618;
    2f02:	f44f 63c3 	mov.w	r3, #1560	; 0x618
    Can0.write(msg);
    2f06:	4621      	mov	r1, r4
    msg.buf[4] = 0x00;
    2f08:	2700      	movs	r7, #0
    msg.id = 0x618;
    2f0a:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    2f0c:	71e6      	strb	r6, [r4, #7]
    msg.buf[4] = 0x00;
    2f0e:	60e7      	str	r7, [r4, #12]
    Can0.write(msg);
    2f10:	f005 f9ac 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    2f14:	2002      	movs	r0, #2
    2f16:	f007 f9db 	bl	a2d0 <delay>
    msg.id = 0x5D8;
    2f1a:	f44f 63bb 	mov.w	r3, #1496	; 0x5d8
    Can0.write(msg);
    2f1e:	4621      	mov	r1, r4
    2f20:	48b7      	ldr	r0, [pc, #732]	; (3200 <VEcan()+0x5f0>)
    msg.id = 0x5D8;
    2f22:	6023      	str	r3, [r4, #0]
    msg.buf[0] = 0x00;
    2f24:	f8c4 8008 	str.w	r8, [r4, #8]
    msg.len = 8;
    2f28:	71e6      	strb	r6, [r4, #7]
    msg.buf[4] = 0x00;
    2f2a:	60e7      	str	r7, [r4, #12]
    Can0.write(msg);
    2f2c:	f005 f99e 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    2f30:	2002      	movs	r0, #2
    2f32:	f007 f9cd 	bl	a2d0 <delay>
    msg.buf[4] = highByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2f36:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    2f38:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    msg.buf[0] = 0x03;
    2f3a:	4ab2      	ldr	r2, [pc, #712]	; (3204 <VEcan()+0x5f4>)
    msg.buf[4] = highByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2f3c:	6da9      	ldr	r1, [r5, #88]	; 0x58
    msg.buf[0] = 0x03;
    2f3e:	60a2      	str	r2, [r4, #8]
    msg.id = 0x558;
    2f40:	f44f 62ab 	mov.w	r2, #1368	; 0x558
    2f44:	6022      	str	r2, [r4, #0]
    msg.buf[4] = highByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2f46:	fb00 f203 	mul.w	r2, r0, r3
    2f4a:	fb01 f202 	mul.w	r2, r1, r2
    msg.buf[5] = lowByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2f4e:	fb13 f300 	smulbb	r3, r3, r0
    2f52:	fb13 f301 	smulbb	r3, r3, r1
    msg.buf[4] = highByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2f56:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
    2f5a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2f5e:	4132      	asrs	r2, r6
    2f60:	7322      	strb	r2, [r4, #12]
    msg.buf[5] = lowByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2f62:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    2f66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    Can0.write(msg);
    2f6a:	4621      	mov	r1, r4
    msg.buf[6] = 0x05;
    2f6c:	f240 7205 	movw	r2, #1797	; 0x705
    Can0.write(msg);
    2f70:	48a3      	ldr	r0, [pc, #652]	; (3200 <VEcan()+0x5f0>)
    msg.buf[6] = 0x05;
    2f72:	81e2      	strh	r2, [r4, #14]
    msg.buf[5] = lowByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2f74:	7363      	strb	r3, [r4, #13]
    msg.len = 8;
    2f76:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    2f78:	f005 f978 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    2f7c:	2002      	movs	r0, #2
    2f7e:	f007 f9a7 	bl	a2d0 <delay>
    msg.buf[0] = 0x00;
    2f82:	4ba1      	ldr	r3, [pc, #644]	; (3208 <VEcan()+0x5f8>)
    2f84:	60a3      	str	r3, [r4, #8]
    msg.id = 0x598;
    2f86:	f44f 62b3 	mov.w	r2, #1432	; 0x598
    msg.buf[4] = 0x00;
    2f8a:	4ba0      	ldr	r3, [pc, #640]	; (320c <VEcan()+0x5fc>)
    Can0.write(msg);
    2f8c:	489c      	ldr	r0, [pc, #624]	; (3200 <VEcan()+0x5f0>)
    msg.id = 0x598;
    2f8e:	6022      	str	r2, [r4, #0]
    Can0.write(msg);
    2f90:	4621      	mov	r1, r4
    msg.buf[4] = 0x00;
    2f92:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    2f94:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    2f96:	f005 f969 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    2f9a:	2002      	movs	r0, #2
    2f9c:	f007 f998 	bl	a2d0 <delay>
    if (storagemode == 0) {
    2fa0:	4b9b      	ldr	r3, [pc, #620]	; (3210 <VEcan()+0x600>)
      msg.buf[0] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2fa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if (storagemode == 0) {
    2fa4:	681b      	ldr	r3, [r3, #0]
    msg.len = 8;
    2fa6:	71e6      	strb	r6, [r4, #7]
    msg.id = 0x358;
    2fa8:	f44f 7256 	mov.w	r2, #856	; 0x358
    2fac:	6022      	str	r2, [r4, #0]
    if (storagemode == 0) {
    2fae:	2b00      	cmp	r3, #0
    2fb0:	f000 80ea 	beq.w	3188 <VEcan()+0x578>
      msg.buf[0] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    2fb4:	f009 fdfa 	bl	cbac <__aeabi_i2f>
    2fb8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2fba:	4606      	mov	r6, r0
    2fbc:	f009 fe4a 	bl	cc54 <__aeabi_fmul>
    2fc0:	4994      	ldr	r1, [pc, #592]	; (3214 <VEcan()+0x604>)
    2fc2:	f009 fe47 	bl	cc54 <__aeabi_fmul>
    2fc6:	f00a f831 	bl	d02c <__aeabi_f2uiz>
    msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2fca:	69e9      	ldr	r1, [r5, #28]
      msg.buf[0] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    2fcc:	f3c0 2207 	ubfx	r2, r0, #8, #8
      msg.buf[1] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    2fd0:	b2c3      	uxtb	r3, r0
    msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2fd2:	4630      	mov	r0, r6
      msg.buf[0] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2fd4:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2fd6:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2fd8:	f009 fe3c 	bl	cc54 <__aeabi_fmul>
    2fdc:	498d      	ldr	r1, [pc, #564]	; (3214 <VEcan()+0x604>)
    2fde:	f009 fe39 	bl	cc54 <__aeabi_fmul>
    2fe2:	f00a f823 	bl	d02c <__aeabi_f2uiz>
    msg.buf[4] = highByte(discurrent);
    2fe6:	4a8c      	ldr	r2, [pc, #560]	; (3218 <VEcan()+0x608>)
    msg.buf[6] = highByte(chargecurrent);
    2fe8:	4b8c      	ldr	r3, [pc, #560]	; (321c <VEcan()+0x60c>)
    msg.buf[4] = highByte(discurrent);
    2fea:	8812      	ldrh	r2, [r2, #0]
    msg.buf[6] = highByte(chargecurrent);
    2fec:	881b      	ldrh	r3, [r3, #0]
    Can0.write(msg);
    2fee:	4982      	ldr	r1, [pc, #520]	; (31f8 <VEcan()+0x5e8>)
    msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2ff0:	ba40      	rev16	r0, r0
    msg.buf[4] = highByte(discurrent);
    2ff2:	ba52      	rev16	r2, r2
    msg.buf[6] = highByte(chargecurrent);
    2ff4:	ba5b      	rev16	r3, r3
    msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2ff6:	8160      	strh	r0, [r4, #10]
    Can0.write(msg);
    2ff8:	4881      	ldr	r0, [pc, #516]	; (3200 <VEcan()+0x5f0>)
    msg.buf[4] = highByte(discurrent);
    2ffa:	81a2      	strh	r2, [r4, #12]
    msg.buf[6] = highByte(chargecurrent);
    2ffc:	81e3      	strh	r3, [r4, #14]
    Can0.write(msg);
    2ffe:	f005 f935 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3002:	2002      	movs	r0, #2
    3004:	f007 f964 	bl	a2d0 <delay>
    msg.buf[0] = highByte(SOC * 100);
    3008:	4b85      	ldr	r3, [pc, #532]	; (3220 <VEcan()+0x610>)
    msg.buf[2] = highByte(SOH);
    300a:	4a86      	ldr	r2, [pc, #536]	; (3224 <VEcan()+0x614>)
    msg.buf[0] = highByte(SOC * 100);
    300c:	681b      	ldr	r3, [r3, #0]
    msg.buf[2] = highByte(SOH);
    300e:	8811      	ldrh	r1, [r2, #0]
    msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    3010:	4885      	ldr	r0, [pc, #532]	; (3228 <VEcan()+0x618>)
    msg.buf[1] = lowByte(SOC * 100);
    3012:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    msg.buf[0] = highByte(SOC * 100);
    3016:	2564      	movs	r5, #100	; 0x64
    3018:	fb05 f303 	mul.w	r3, r5, r3
    msg.buf[1] = lowByte(SOC * 100);
    301c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    msg.len = 8;
    3020:	2508      	movs	r5, #8
    msg.buf[0] = highByte(SOC * 100);
    3022:	412b      	asrs	r3, r5
    msg.buf[1] = lowByte(SOC * 100);
    3024:	0092      	lsls	r2, r2, #2
    msg.buf[0] = highByte(SOC * 100);
    3026:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = lowByte(SOC * 100);
    3028:	7262      	strb	r2, [r4, #9]
    msg.buf[2] = highByte(SOH);
    302a:	ba4b      	rev16	r3, r1
    msg.id = 0x3D8;
    302c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
    msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    3030:	497e      	ldr	r1, [pc, #504]	; (322c <VEcan()+0x61c>)
    3032:	6800      	ldr	r0, [r0, #0]
    msg.id = 0x3D8;
    3034:	6022      	str	r2, [r4, #0]
    msg.buf[2] = highByte(SOH);
    3036:	8163      	strh	r3, [r4, #10]
    msg.len = 8;
    3038:	71e5      	strb	r5, [r4, #7]
    msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    303a:	f009 fe0b 	bl	cc54 <__aeabi_fmul>
    303e:	f009 fff5 	bl	d02c <__aeabi_f2uiz>
    msg.buf[6] = 0xF9;
    3042:	22f9      	movs	r2, #249	; 0xf9
    msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    3044:	ba43      	rev16	r3, r0
    Can0.write(msg);
    3046:	496c      	ldr	r1, [pc, #432]	; (31f8 <VEcan()+0x5e8>)
    3048:	486d      	ldr	r0, [pc, #436]	; (3200 <VEcan()+0x5f0>)
    msg.buf[6] = 0xF9;
    304a:	81e2      	strh	r2, [r4, #14]
    msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    304c:	81a3      	strh	r3, [r4, #12]
    Can0.write(msg);
    304e:	f005 f90d 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3052:	2002      	movs	r0, #2
    3054:	f007 f93c 	bl	a2d0 <delay>
    msg.id = 0x458;
    3058:	f44f 608b 	mov.w	r0, #1112	; 0x458
    msg.buf[0] = 0x00;
    305c:	4a6a      	ldr	r2, [pc, #424]	; (3208 <VEcan()+0x5f8>)
    Can0.write(msg);
    305e:	4966      	ldr	r1, [pc, #408]	; (31f8 <VEcan()+0x5e8>)
    msg.buf[4] = 0x00;
    3060:	4b73      	ldr	r3, [pc, #460]	; (3230 <VEcan()+0x620>)
    msg.id = 0x458;
    3062:	6020      	str	r0, [r4, #0]
    Can0.write(msg);
    3064:	4866      	ldr	r0, [pc, #408]	; (3200 <VEcan()+0x5f0>)
    msg.buf[0] = 0x00;
    3066:	60a2      	str	r2, [r4, #8]
    msg.buf[4] = 0x00;
    3068:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    306a:	71e5      	strb	r5, [r4, #7]
    Can0.write(msg);
    306c:	f005 f8fe 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3070:	2002      	movs	r0, #2
    3072:	f007 f92d 	bl	a2d0 <delay>
    msg.id = 0x518;
    3076:	f44f 63a3 	mov.w	r3, #1304	; 0x518
    msg.buf[0] = highByte(uint16_t(bms.getHighTemperature() * 10));
    307a:	486e      	ldr	r0, [pc, #440]	; (3234 <VEcan()+0x624>)
    msg.id = 0x518;
    307c:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    307e:	71e5      	strb	r5, [r4, #7]
    msg.buf[0] = highByte(uint16_t(bms.getHighTemperature() * 10));
    3080:	f7fd ff90 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    3084:	4963      	ldr	r1, [pc, #396]	; (3214 <VEcan()+0x604>)
    3086:	f009 fde5 	bl	cc54 <__aeabi_fmul>
    308a:	f009 ffcf 	bl	d02c <__aeabi_f2uiz>
    308e:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[1] = lowByte(uint16_t(bms.getHighTemperature() * 10));
    3092:	4868      	ldr	r0, [pc, #416]	; (3234 <VEcan()+0x624>)
    msg.buf[0] = highByte(uint16_t(bms.getHighTemperature() * 10));
    3094:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = lowByte(uint16_t(bms.getHighTemperature() * 10));
    3096:	f7fd ff85 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    309a:	495e      	ldr	r1, [pc, #376]	; (3214 <VEcan()+0x604>)
    309c:	f009 fdda 	bl	cc54 <__aeabi_fmul>
    30a0:	f009 ffc4 	bl	d02c <__aeabi_f2uiz>
    30a4:	4603      	mov	r3, r0
    msg.buf[2] = highByte(uint16_t(bms.getLowTemperature() * 10));
    30a6:	4863      	ldr	r0, [pc, #396]	; (3234 <VEcan()+0x624>)
    msg.buf[1] = lowByte(uint16_t(bms.getHighTemperature() * 10));
    30a8:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = highByte(uint16_t(bms.getLowTemperature() * 10));
    30aa:	f7fd ff7d 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    30ae:	4959      	ldr	r1, [pc, #356]	; (3214 <VEcan()+0x604>)
    30b0:	f009 fdd0 	bl	cc54 <__aeabi_fmul>
    30b4:	f009 ffba 	bl	d02c <__aeabi_f2uiz>
    30b8:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    30bc:	485d      	ldr	r0, [pc, #372]	; (3234 <VEcan()+0x624>)
    msg.buf[2] = highByte(uint16_t(bms.getLowTemperature() * 10));
    30be:	72a3      	strb	r3, [r4, #10]
    msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    30c0:	f7fd ff72 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    30c4:	4953      	ldr	r1, [pc, #332]	; (3214 <VEcan()+0x604>)
    30c6:	f009 fdc5 	bl	cc54 <__aeabi_fmul>
    30ca:	f009 ffaf 	bl	d02c <__aeabi_f2uiz>
    msg.buf[4] = 0xFF;
    30ce:	f04f 32ff 	mov.w	r2, #4294967295
    msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    30d2:	4603      	mov	r3, r0
    Can0.write(msg);
    30d4:	4948      	ldr	r1, [pc, #288]	; (31f8 <VEcan()+0x5e8>)
    30d6:	484a      	ldr	r0, [pc, #296]	; (3200 <VEcan()+0x5f0>)
    msg.buf[4] = 0xFF;
    30d8:	60e2      	str	r2, [r4, #12]
    msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    30da:	72e3      	strb	r3, [r4, #11]
    Can0.write(msg);
    30dc:	f005 f8c6 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    30e0:	2002      	movs	r0, #2
    30e2:	f007 f8f5 	bl	a2d0 <delay>
    msg.id = 0x4D8;
    30e6:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
    msg.buf[0] = highByte(uint16_t(bms.getPackVoltage() * 10));
    30ea:	4852      	ldr	r0, [pc, #328]	; (3234 <VEcan()+0x624>)
    msg.id = 0x4D8;
    30ec:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    30ee:	71e5      	strb	r5, [r4, #7]
    msg.buf[0] = highByte(uint16_t(bms.getPackVoltage() * 10));
    30f0:	f7fd fec4 	bl	e7c <BMSModuleManager::getPackVoltage()>
    30f4:	4947      	ldr	r1, [pc, #284]	; (3214 <VEcan()+0x604>)
    30f6:	f009 fdad 	bl	cc54 <__aeabi_fmul>
    30fa:	f009 ff97 	bl	d02c <__aeabi_f2uiz>
    30fe:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    3102:	484c      	ldr	r0, [pc, #304]	; (3234 <VEcan()+0x624>)
    msg.buf[0] = highByte(uint16_t(bms.getPackVoltage() * 10));
    3104:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    3106:	f7fd feb9 	bl	e7c <BMSModuleManager::getPackVoltage()>
    310a:	4942      	ldr	r1, [pc, #264]	; (3214 <VEcan()+0x604>)
    310c:	f009 fda2 	bl	cc54 <__aeabi_fmul>
    3110:	f009 ff8c 	bl	d02c <__aeabi_f2uiz>
    msg.buf[2] = highByte(long(currentact / 100));
    3114:	4a48      	ldr	r2, [pc, #288]	; (3238 <VEcan()+0x628>)
    3116:	4949      	ldr	r1, [pc, #292]	; (323c <VEcan()+0x62c>)
    msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    3118:	4603      	mov	r3, r0
    msg.buf[2] = highByte(long(currentact / 100));
    311a:	6810      	ldr	r0, [r2, #0]
    msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    311c:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = highByte(long(currentact / 100));
    311e:	f009 fe4d 	bl	cdbc <__aeabi_fdiv>
    3122:	f009 ff5d 	bl	cfe0 <__aeabi_f2iz>
    3126:	ba43      	rev16	r3, r0
    msg.buf[4] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3128:	4842      	ldr	r0, [pc, #264]	; (3234 <VEcan()+0x624>)
    msg.buf[2] = highByte(long(currentact / 100));
    312a:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = highByte(int16_t(bms.getAvgTemperature() * 10));
    312c:	f7fd fed2 	bl	ed4 <BMSModuleManager::getAvgTemperature()>
    3130:	4938      	ldr	r1, [pc, #224]	; (3214 <VEcan()+0x604>)
    3132:	f009 fd8f 	bl	cc54 <__aeabi_fmul>
    3136:	f009 ff53 	bl	cfe0 <__aeabi_f2iz>
    313a:	f340 2307 	sbfx	r3, r0, #8, #8
    msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    313e:	483d      	ldr	r0, [pc, #244]	; (3234 <VEcan()+0x624>)
    msg.buf[4] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3140:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3142:	f7fd fec7 	bl	ed4 <BMSModuleManager::getAvgTemperature()>
    3146:	4933      	ldr	r1, [pc, #204]	; (3214 <VEcan()+0x604>)
    3148:	f009 fd84 	bl	cc54 <__aeabi_fmul>
    314c:	f009 ff48 	bl	cfe0 <__aeabi_f2iz>
    msg.buf[6] = 0x03;
    3150:	f640 0203 	movw	r2, #2051	; 0x803
    msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3154:	4603      	mov	r3, r0
    Can0.write(msg);
    3156:	4928      	ldr	r1, [pc, #160]	; (31f8 <VEcan()+0x5e8>)
    3158:	4829      	ldr	r0, [pc, #164]	; (3200 <VEcan()+0x5f0>)
    msg.buf[6] = 0x03;
    315a:	81e2      	strh	r2, [r4, #14]
    msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    315c:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    315e:	f005 f885 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3162:	2002      	movs	r0, #2
    3164:	f007 f8b4 	bl	a2d0 <delay>
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3168:	4a35      	ldr	r2, [pc, #212]	; (3240 <VEcan()+0x630>)
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    316a:	4b36      	ldr	r3, [pc, #216]	; (3244 <VEcan()+0x634>)
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    316c:	6812      	ldr	r2, [r2, #0]
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    316e:	681b      	ldr	r3, [r3, #0]
    msg.len = 8;
    3170:	71e5      	strb	r5, [r4, #7]
    msg.id = 0x158;
    3172:	f44f 71ac 	mov.w	r1, #344	; 0x158
    3176:	6021      	str	r1, [r4, #0]
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3178:	60a2      	str	r2, [r4, #8]
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    317a:	60e3      	str	r3, [r4, #12]
    Can0.write(msg);
    317c:	491e      	ldr	r1, [pc, #120]	; (31f8 <VEcan()+0x5e8>)
    317e:	4820      	ldr	r0, [pc, #128]	; (3200 <VEcan()+0x5f0>)
}
    3180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Can0.write(msg);
    3184:	f005 b872 	b.w	826c <FlexCAN::write(CAN_message_t const&)>
      msg.buf[0] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3188:	f009 fd10 	bl	cbac <__aeabi_i2f>
    318c:	69a9      	ldr	r1, [r5, #24]
    318e:	e714      	b.n	2fba <VEcan()+0x3aa>
      if (bms.getLowCellVolt() + settings.balanceHyst < bms.getHighCellVolt()) {
    3190:	4828      	ldr	r0, [pc, #160]	; (3234 <VEcan()+0x624>)
    3192:	f7fd fe25 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    3196:	6d69      	ldr	r1, [r5, #84]	; 0x54
    3198:	f009 fc54 	bl	ca44 <__addsf3>
    319c:	4607      	mov	r7, r0
    319e:	4825      	ldr	r0, [pc, #148]	; (3234 <VEcan()+0x624>)
    31a0:	f7fd fe46 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    31a4:	4601      	mov	r1, r0
    31a6:	4638      	mov	r0, r7
    31a8:	f009 fef2 	bl	cf90 <__aeabi_fcmplt>
    31ac:	2800      	cmp	r0, #0
    31ae:	f43f adec 	beq.w	2d8a <VEcan()+0x17a>
        msg.id = 0x3c3;
    31b2:	f240 33c3 	movw	r3, #963	; 0x3c3
        if (bms.getLowCellVolt() < settings.balanceVoltage) {
    31b6:	481f      	ldr	r0, [pc, #124]	; (3234 <VEcan()+0x624>)
        msg.len = 8;
    31b8:	71e6      	strb	r6, [r4, #7]
        msg.id = 0x3c3;
    31ba:	6023      	str	r3, [r4, #0]
        if (bms.getLowCellVolt() < settings.balanceVoltage) {
    31bc:	f7fd fe10 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    31c0:	6d2e      	ldr	r6, [r5, #80]	; 0x50
    31c2:	4631      	mov	r1, r6
    31c4:	f009 fee4 	bl	cf90 <__aeabi_fcmplt>
    31c8:	2800      	cmp	r0, #0
    31ca:	d03f      	beq.n	324c <VEcan()+0x63c>
          msg.buf[0] = highByte(uint16_t(settings.balanceVoltage * 1000));
    31cc:	491e      	ldr	r1, [pc, #120]	; (3248 <VEcan()+0x638>)
    31ce:	4630      	mov	r0, r6
    31d0:	f009 fd40 	bl	cc54 <__aeabi_fmul>
    31d4:	f009 ff2a 	bl	d02c <__aeabi_f2uiz>
    31d8:	f3c0 2307 	ubfx	r3, r0, #8, #8
    31dc:	7223      	strb	r3, [r4, #8]
          msg.buf[1] = lowByte(uint16_t(settings.balanceVoltage * 1000));
    31de:	b2c0      	uxtb	r0, r0
        msg.buf[2] = 0x01;
    31e0:	f240 4201 	movw	r2, #1025	; 0x401
        msg.buf[4] = 0x03;
    31e4:	2303      	movs	r3, #3
          msg.buf[1] = lowByte(uint16_t(settings.balanceVoltage * 1000));
    31e6:	7260      	strb	r0, [r4, #9]
        Can0.write(msg);
    31e8:	4903      	ldr	r1, [pc, #12]	; (31f8 <VEcan()+0x5e8>)
    31ea:	4805      	ldr	r0, [pc, #20]	; (3200 <VEcan()+0x5f0>)
        msg.buf[2] = 0x01;
    31ec:	8162      	strh	r2, [r4, #10]
        msg.buf[4] = 0x03;
    31ee:	60e3      	str	r3, [r4, #12]
        Can0.write(msg);
    31f0:	f005 f83c 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    31f4:	e5c9      	b.n	2d8a <VEcan()+0x17a>
    31f6:	bf00      	nop
    31f8:	1fffd914 	.word	0x1fffd914
    31fc:	44594200 	.word	0x44594200
    3200:	1fffdad0 	.word	0x1fffdad0
    3204:	04001203 	.word	0x04001203
    3208:	34120000 	.word	0x34120000
    320c:	4f040000 	.word	0x4f040000
    3210:	1fffdaa0 	.word	0x1fffdaa0
    3214:	41200000 	.word	0x41200000
    3218:	1fffd8a8 	.word	0x1fffd8a8
    321c:	1fffd714 	.word	0x1fffd714
    3220:	1fff8824 	.word	0x1fff8824
    3224:	1fff8828 	.word	0x1fff8828
    3228:	1fff91d4 	.word	0x1fff91d4
    322c:	3b360b62 	.word	0x3b360b62
    3230:	78560000 	.word	0x78560000
    3234:	1fff91e4 	.word	0x1fff91e4
    3238:	1fffd8a0 	.word	0x1fffd8a0
    323c:	42c80000 	.word	0x42c80000
    3240:	1fff91d0 	.word	0x1fff91d0
    3244:	1fffdab8 	.word	0x1fffdab8
    3248:	447a0000 	.word	0x447a0000
          msg.buf[0] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    324c:	480a      	ldr	r0, [pc, #40]	; (3278 <VEcan()+0x668>)
    324e:	f7fd fdc7 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    3252:	490a      	ldr	r1, [pc, #40]	; (327c <VEcan()+0x66c>)
    3254:	f009 fcfe 	bl	cc54 <__aeabi_fmul>
    3258:	f009 fee8 	bl	d02c <__aeabi_f2uiz>
    325c:	f3c0 2307 	ubfx	r3, r0, #8, #8
          msg.buf[1] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3260:	4805      	ldr	r0, [pc, #20]	; (3278 <VEcan()+0x668>)
          msg.buf[0] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    3262:	7223      	strb	r3, [r4, #8]
          msg.buf[1] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3264:	f7fd fdbc 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    3268:	4904      	ldr	r1, [pc, #16]	; (327c <VEcan()+0x66c>)
    326a:	f009 fcf3 	bl	cc54 <__aeabi_fmul>
    326e:	f009 fedd 	bl	d02c <__aeabi_f2uiz>
    3272:	b2c0      	uxtb	r0, r0
    3274:	e7b4      	b.n	31e0 <VEcan()+0x5d0>
    3276:	bf00      	nop
    3278:	1fff91e4 	.word	0x1fff91e4
    327c:	447a0000 	.word	0x447a0000

00003280 <CAB300()>:
void CAB300() {
    3280:	b538      	push	{r3, r4, r5, lr}
    3282:	4c18      	ldr	r4, [pc, #96]	; (32e4 <CAB300()+0x64>)
    3284:	4b18      	ldr	r3, [pc, #96]	; (32e8 <CAB300()+0x68>)
    3286:	6822      	ldr	r2, [r4, #0]
    3288:	1d18      	adds	r0, r3, #4
    inbox = (inbox << 8) | inMsg.buf[i];
    328a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for (int i = 0; i < 4; i++) {
    328e:	4298      	cmp	r0, r3
    inbox = (inbox << 8) | inMsg.buf[i];
    3290:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  for (int i = 0; i < 4; i++) {
    3294:	d1f9      	bne.n	328a <CAB300()+0xa>
  if (settings.cursens == Canbus) {
    3296:	4b15      	ldr	r3, [pc, #84]	; (32ec <CAB300()+0x6c>)
    3298:	4d15      	ldr	r5, [pc, #84]	; (32f0 <CAB300()+0x70>)
    329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    329e:	6022      	str	r2, [r4, #0]
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
    32a0:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
  if (settings.cursens == Canbus) {
    32a4:	2b02      	cmp	r3, #2
    32a6:	6028      	str	r0, [r5, #0]
    32a8:	d004      	beq.n	32b4 <CAB300()+0x34>
  if (candebug == 1) {
    32aa:	4b12      	ldr	r3, [pc, #72]	; (32f4 <CAB300()+0x74>)
    32ac:	681b      	ldr	r3, [r3, #0]
    32ae:	2b01      	cmp	r3, #1
    32b0:	d00a      	beq.n	32c8 <CAB300()+0x48>
}
    32b2:	bd38      	pop	{r3, r4, r5, pc}
    RawCur = CANmilliamps;
    32b4:	f009 fc7a 	bl	cbac <__aeabi_i2f>
    32b8:	4c0f      	ldr	r4, [pc, #60]	; (32f8 <CAB300()+0x78>)
    32ba:	6020      	str	r0, [r4, #0]
    getcurrent();
    32bc:	f7fe fe30 	bl	1f20 <getcurrent()>
  if (candebug == 1) {
    32c0:	4b0c      	ldr	r3, [pc, #48]	; (32f4 <CAB300()+0x74>)
    32c2:	681b      	ldr	r3, [r3, #0]
    32c4:	2b01      	cmp	r3, #1
    32c6:	d1f4      	bne.n	32b2 <CAB300()+0x32>
    Serial.println();
    32c8:	480c      	ldr	r0, [pc, #48]	; (32fc <CAB300()+0x7c>)
    32ca:	f006 f89f 	bl	940c <Print::println()>
    Serial.print(CANmilliamps);
    32ce:	6829      	ldr	r1, [r5, #0]
    32d0:	480a      	ldr	r0, [pc, #40]	; (32fc <CAB300()+0x7c>)
    32d2:	f006 f893 	bl	93fc <Print::print(long)>
}
    32d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    32da:	4809      	ldr	r0, [pc, #36]	; (3300 <CAB300()+0x80>)
    32dc:	2103      	movs	r1, #3
    32de:	f008 bdd9 	b.w	be94 <usb_serial_write>
    32e2:	bf00      	nop
    32e4:	1fffd8cc 	.word	0x1fffd8cc
    32e8:	1fffd8c3 	.word	0x1fffd8c3
    32ec:	1fffd9bc 	.word	0x1fffd9bc
    32f0:	1fff9180 	.word	0x1fff9180
    32f4:	1fffd70c 	.word	0x1fffd70c
    32f8:	1fff91b0 	.word	0x1fff91b0
    32fc:	1fff89fc 	.word	0x1fff89fc
    3300:	00014190 	.word	0x00014190

00003304 <CAB500()>:
void CAB500() {
    3304:	b570      	push	{r4, r5, r6, lr}
    inbox = (inbox << 8) | inMsg.buf[i];
    3306:	4b1e      	ldr	r3, [pc, #120]	; (3380 <CAB500()+0x7c>)
  if (candebug == 1) {
    3308:	4c1e      	ldr	r4, [pc, #120]	; (3384 <CAB500()+0x80>)
    inbox = (inbox << 8) | inMsg.buf[i];
    330a:	7a59      	ldrb	r1, [r3, #9]
    330c:	7a9a      	ldrb	r2, [r3, #10]
    330e:	7adb      	ldrb	r3, [r3, #11]
  CANmilliamps = inbox;
    3310:	4d1d      	ldr	r5, [pc, #116]	; (3388 <CAB500()+0x84>)
    inbox = (inbox << 8) | inMsg.buf[i];
    3312:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    3316:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (candebug == 1) {
    331a:	6822      	ldr	r2, [r4, #0]
    331c:	491b      	ldr	r1, [pc, #108]	; (338c <CAB500()+0x88>)
  CANmilliamps = inbox;
    331e:	602b      	str	r3, [r5, #0]
  if (candebug == 1) {
    3320:	2a01      	cmp	r2, #1
    3322:	600b      	str	r3, [r1, #0]
    3324:	d00c      	beq.n	3340 <CAB500()+0x3c>
    3326:	4618      	mov	r0, r3
  if (settings.cursens == Canbus) {
    3328:	4b19      	ldr	r3, [pc, #100]	; (3390 <CAB500()+0x8c>)
    332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    CANmilliamps = (0x800000 - CANmilliamps) * -1;
    332e:	f5a0 0000 	sub.w	r0, r0, #8388608	; 0x800000
  if (settings.cursens == Canbus) {
    3332:	2b02      	cmp	r3, #2
    3334:	6028      	str	r0, [r5, #0]
    3336:	d01b      	beq.n	3370 <CAB500()+0x6c>
  if (candebug == 1) {
    3338:	6823      	ldr	r3, [r4, #0]
    333a:	2b01      	cmp	r3, #1
    333c:	d00b      	beq.n	3356 <CAB500()+0x52>
}
    333e:	bd70      	pop	{r4, r5, r6, pc}
    Serial.println();
    3340:	4814      	ldr	r0, [pc, #80]	; (3394 <CAB500()+0x90>)
    3342:	f006 f863 	bl	940c <Print::println()>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    3346:	6829      	ldr	r1, [r5, #0]
    3348:	4812      	ldr	r0, [pc, #72]	; (3394 <CAB500()+0x90>)
    334a:	2300      	movs	r3, #0
    334c:	2210      	movs	r2, #16
    334e:	f006 f875 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  if (CANmilliamps > 0x800000) {
    3352:	6828      	ldr	r0, [r5, #0]
    3354:	e7e8      	b.n	3328 <CAB500()+0x24>
    Serial.println();
    3356:	480f      	ldr	r0, [pc, #60]	; (3394 <CAB500()+0x90>)
    3358:	f006 f858 	bl	940c <Print::println()>
    Serial.print(CANmilliamps);
    335c:	6829      	ldr	r1, [r5, #0]
    335e:	480d      	ldr	r0, [pc, #52]	; (3394 <CAB500()+0x90>)
    3360:	f006 f84c 	bl	93fc <Print::print(long)>
}
    3364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3368:	480b      	ldr	r0, [pc, #44]	; (3398 <CAB500()+0x94>)
    336a:	2103      	movs	r1, #3
    336c:	f008 bd92 	b.w	be94 <usb_serial_write>
    RawCur = CANmilliamps;
    3370:	f009 fc1c 	bl	cbac <__aeabi_i2f>
    3374:	4e09      	ldr	r6, [pc, #36]	; (339c <CAB500()+0x98>)
    3376:	6030      	str	r0, [r6, #0]
    getcurrent();
    3378:	f7fe fdd2 	bl	1f20 <getcurrent()>
    337c:	e7dc      	b.n	3338 <CAB500()+0x34>
    337e:	bf00      	nop
    3380:	1fffd8bc 	.word	0x1fffd8bc
    3384:	1fffd70c 	.word	0x1fffd70c
    3388:	1fff9180 	.word	0x1fff9180
    338c:	1fffd8cc 	.word	0x1fffd8cc
    3390:	1fffd9bc 	.word	0x1fffd9bc
    3394:	1fff89fc 	.word	0x1fff89fc
    3398:	00014190 	.word	0x00014190
    339c:	1fff91b0 	.word	0x1fff91b0

000033a0 <canread()>:
void canread() {
    33a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Can0.read(inMsg);
    33a4:	4cac      	ldr	r4, [pc, #688]	; (3658 <canread()+0x2b8>)
  if (settings.cursens == Canbus) {
    33a6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 365c <canread()+0x2bc>
  Can0.read(inMsg);
    33aa:	48ad      	ldr	r0, [pc, #692]	; (3660 <canread()+0x2c0>)
void canread() {
    33ac:	b083      	sub	sp, #12
  Can0.read(inMsg);
    33ae:	4621      	mov	r1, r4
    33b0:	f004 fea0 	bl	80f4 <FlexCAN::read(CAN_message_t&)>
  if (settings.cursens == Canbus) {
    33b4:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
    33b8:	2b02      	cmp	r3, #2
    33ba:	d079      	beq.n	34b0 <canread()+0x110>
      switch (inMsg.id) {
    33bc:	6823      	ldr	r3, [r4, #0]
  if (inMsg.id == 0xF0) {
    33be:	2bf0      	cmp	r3, #240	; 0xf0
    33c0:	f000 809f 	beq.w	3502 <canread()+0x162>
  if (inMsg.id > 0x99 && inMsg.id < 0x180)  //do BMS magic if ids are ones identified to be modules
    33c4:	f1a3 029a 	sub.w	r2, r3, #154	; 0x9a
    33c8:	2ae5      	cmp	r2, #229	; 0xe5
    33ca:	d819      	bhi.n	3400 <canread()+0x60>
    if (candebug == 1 && debug == 1) {
    33cc:	4ba5      	ldr	r3, [pc, #660]	; (3664 <canread()+0x2c4>)
    33ce:	4da6      	ldr	r5, [pc, #664]	; (3668 <canread()+0x2c8>)
    33d0:	681b      	ldr	r3, [r3, #0]
    33d2:	2b01      	cmp	r3, #1
    33d4:	d103      	bne.n	33de <canread()+0x3e>
    33d6:	682a      	ldr	r2, [r5, #0]
    33d8:	2a01      	cmp	r2, #1
    33da:	f000 811d 	beq.w	3618 <canread()+0x278>
      bms.decodecan(inMsg, 0);  //do BMS if ids are ones identified to be modules
    33de:	499e      	ldr	r1, [pc, #632]	; (3658 <canread()+0x2b8>)
    33e0:	48a2      	ldr	r0, [pc, #648]	; (366c <canread()+0x2cc>)
    33e2:	2200      	movs	r2, #0
    33e4:	f7fd fbd0 	bl	b88 <BMSModuleManager::decodecan(CAN_message_t&, int)>
  if ((inMsg.id & 0xFF0) == 0x180)  // Determine if ID is standard (11 bits) or extended (29 bits)
    33e8:	6823      	ldr	r3, [r4, #0]
    33ea:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
    33ee:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
    33f2:	d00b      	beq.n	340c <canread()+0x6c>
  if (debug == 1) {
    33f4:	682b      	ldr	r3, [r5, #0]
    33f6:	2b01      	cmp	r3, #1
    33f8:	d019      	beq.n	342e <canread()+0x8e>
}
    33fa:	b003      	add	sp, #12
    33fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((inMsg.id & 0xFF0) == 0x180)  // Determine if ID is standard (11 bits) or extended (29 bits)
    3400:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
    3404:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
    3408:	4d97      	ldr	r5, [pc, #604]	; (3668 <canread()+0x2c8>)
    340a:	d1f3      	bne.n	33f4 <canread()+0x54>
    if (candebug == 1 && debug == 1) {
    340c:	4b95      	ldr	r3, [pc, #596]	; (3664 <canread()+0x2c4>)
      bms.decodetemp(inMsg, 1, settings.CSCvariant);
    340e:	4992      	ldr	r1, [pc, #584]	; (3658 <canread()+0x2b8>)
    if (candebug == 1 && debug == 1) {
    3410:	681b      	ldr	r3, [r3, #0]
      bms.decodetemp(inMsg, 1, settings.CSCvariant);
    3412:	4896      	ldr	r0, [pc, #600]	; (366c <canread()+0x2cc>)
    if (candebug == 1 && debug == 1) {
    3414:	2b01      	cmp	r3, #1
      bms.decodetemp(inMsg, 1, settings.CSCvariant);
    3416:	f898 30d6 	ldrb.w	r3, [r8, #214]	; 0xd6
    if (candebug == 1 && debug == 1) {
    341a:	d102      	bne.n	3422 <canread()+0x82>
    341c:	682a      	ldr	r2, [r5, #0]
    341e:	2a01      	cmp	r2, #1
    3420:	d000      	beq.n	3424 <canread()+0x84>
      bms.decodetemp(inMsg, 0, settings.CSCvariant);
    3422:	2200      	movs	r2, #0
    3424:	f7fd fb8c 	bl	b40 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if (debug == 1) {
    3428:	682b      	ldr	r3, [r5, #0]
    342a:	2b01      	cmp	r3, #1
    342c:	d1e5      	bne.n	33fa <canread()+0x5a>
    if (candebug == 1) {
    342e:	4b8d      	ldr	r3, [pc, #564]	; (3664 <canread()+0x2c4>)
    3430:	681b      	ldr	r3, [r3, #0]
    3432:	2b01      	cmp	r3, #1
    3434:	d1e1      	bne.n	33fa <canread()+0x5a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3436:	4b8e      	ldr	r3, [pc, #568]	; (3670 <canread()+0x2d0>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3438:	488e      	ldr	r0, [pc, #568]	; (3674 <canread()+0x2d4>)
    343a:	681b      	ldr	r3, [r3, #0]
    343c:	9301      	str	r3, [sp, #4]
	return ret;
    343e:	9901      	ldr	r1, [sp, #4]
    3440:	2300      	movs	r3, #0
    3442:	220a      	movs	r2, #10
    3444:	f005 fffa 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
      if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    3448:	6822      	ldr	r2, [r4, #0]
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    344a:	79e3      	ldrb	r3, [r4, #7]
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    344c:	488a      	ldr	r0, [pc, #552]	; (3678 <canread()+0x2d8>)
      if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    344e:	2a00      	cmp	r2, #0
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    3450:	bfb6      	itet	lt
    3452:	498a      	ldrlt	r1, [pc, #552]	; (367c <canread()+0x2dc>)
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    3454:	498a      	ldrge	r1, [pc, #552]	; (3680 <canread()+0x2e0>)
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    3456:	f022 4260 	biclt.w	r2, r2, #3758096384	; 0xe0000000
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    345a:	f00a fb9b 	bl	db94 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    345e:	4886      	ldr	r0, [pc, #536]	; (3678 <canread()+0x2d8>)
    3460:	f00a fdae 	bl	dfc0 <strlen>
    3464:	4601      	mov	r1, r0
    3466:	4884      	ldr	r0, [pc, #528]	; (3678 <canread()+0x2d8>)
    3468:	f008 fd14 	bl	be94 <usb_serial_write>
      if ((inMsg.id & 0x40000000) == 0x40000000) {  // Determine if message is a remote request frame.
    346c:	6825      	ldr	r5, [r4, #0]
    346e:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    3472:	f040 80d7 	bne.w	3624 <canread()+0x284>
        for (byte i = 0; i < inMsg.len; i++) {
    3476:	79e3      	ldrb	r3, [r4, #7]
    3478:	b1a3      	cbz	r3, 34a4 <canread()+0x104>
          sprintf(msgString, ", 0x%.2X", inMsg.buf[i]);
    347a:	4f82      	ldr	r7, [pc, #520]	; (3684 <canread()+0x2e4>)
    347c:	4e7e      	ldr	r6, [pc, #504]	; (3678 <canread()+0x2d8>)
    347e:	462b      	mov	r3, r5
    3480:	4423      	add	r3, r4
    3482:	4639      	mov	r1, r7
    3484:	7a1a      	ldrb	r2, [r3, #8]
    3486:	4630      	mov	r0, r6
    3488:	f00a fb84 	bl	db94 <sprintf>
    348c:	4630      	mov	r0, r6
    348e:	f00a fd97 	bl	dfc0 <strlen>
    3492:	4601      	mov	r1, r0
    3494:	4630      	mov	r0, r6
    3496:	f008 fcfd 	bl	be94 <usb_serial_write>
        for (byte i = 0; i < inMsg.len; i++) {
    349a:	3501      	adds	r5, #1
    349c:	79e2      	ldrb	r2, [r4, #7]
    349e:	b2eb      	uxtb	r3, r5
    34a0:	429a      	cmp	r2, r3
    34a2:	d8ed      	bhi.n	3480 <canread()+0xe0>
      Serial.println();
    34a4:	4873      	ldr	r0, [pc, #460]	; (3674 <canread()+0x2d4>)
}
    34a6:	b003      	add	sp, #12
    34a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      Serial.println();
    34ac:	f005 bfae 	b.w	940c <Print::println()>
    if (settings.curcan == 1) {
    34b0:	f8d8 208c 	ldr.w	r2, [r8, #140]	; 0x8c
      switch (inMsg.id) {
    34b4:	6823      	ldr	r3, [r4, #0]
    if (settings.curcan == 1) {
    34b6:	2a01      	cmp	r2, #1
    34b8:	f000 809f 	beq.w	35fa <canread()+0x25a>
    if (settings.curcan == 2) {
    34bc:	2a02      	cmp	r2, #2
    34be:	d07d      	beq.n	35bc <canread()+0x21c>
    if (settings.curcan == 3) {
    34c0:	2a03      	cmp	r2, #3
    34c2:	f47f af7c 	bne.w	33be <canread()+0x1e>
      switch (inMsg.id) {
    34c6:	f240 5222 	movw	r2, #1314	; 0x522
    34ca:	4293      	cmp	r3, r2
    34cc:	f000 80f3 	beq.w	36b6 <canread()+0x316>
    34d0:	f240 5223 	movw	r2, #1315	; 0x523
    34d4:	4293      	cmp	r3, r2
    34d6:	f000 80e5 	beq.w	36a4 <canread()+0x304>
    34da:	f240 5221 	movw	r2, #1313	; 0x521
    34de:	4293      	cmp	r3, r2
    34e0:	f47f af6d 	bne.w	33be <canread()+0x1e>
          CANmilliamps = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    34e4:	89a2      	ldrh	r2, [r4, #12]
    34e6:	8960      	ldrh	r0, [r4, #10]
    34e8:	4b67      	ldr	r3, [pc, #412]	; (3688 <canread()+0x2e8>)
          RawCur = CANmilliamps;
    34ea:	4d68      	ldr	r5, [pc, #416]	; (368c <canread()+0x2ec>)
    34ec:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    34f0:	ba00      	rev	r0, r0
          CANmilliamps = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    34f2:	6018      	str	r0, [r3, #0]
          RawCur = CANmilliamps;
    34f4:	f009 fb5a 	bl	cbac <__aeabi_i2f>
    34f8:	6028      	str	r0, [r5, #0]
          getcurrent();
    34fa:	f7fe fd11 	bl	1f20 <getcurrent()>
  if (inMsg.id == 0xF0) {
    34fe:	6823      	ldr	r3, [r4, #0]
          break;
    3500:	e75d      	b.n	33be <canread()+0x1e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3502:	4b5b      	ldr	r3, [pc, #364]	; (3670 <canread()+0x2d0>)
    Unassigned++;
    3504:	4a62      	ldr	r2, [pc, #392]	; (3690 <canread()+0x2f0>)
    3506:	681b      	ldr	r3, [r3, #0]
    3508:	9300      	str	r3, [sp, #0]
    350a:	7813      	ldrb	r3, [r2, #0]
	return ret;
    350c:	9900      	ldr	r1, [sp, #0]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    350e:	4859      	ldr	r0, [pc, #356]	; (3674 <canread()+0x2d4>)
    3510:	3301      	adds	r3, #1
    3512:	7013      	strb	r3, [r2, #0]
    3514:	2300      	movs	r3, #0
    3516:	220a      	movs	r2, #10
    3518:	f005 ff90 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    351c:	6822      	ldr	r2, [r4, #0]
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    351e:	79e3      	ldrb	r3, [r4, #7]
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    3520:	4855      	ldr	r0, [pc, #340]	; (3678 <canread()+0x2d8>)
    if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    3522:	2a00      	cmp	r2, #0
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    3524:	bfb6      	itet	lt
    3526:	4955      	ldrlt	r1, [pc, #340]	; (367c <canread()+0x2dc>)
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    3528:	4955      	ldrge	r1, [pc, #340]	; (3680 <canread()+0x2e0>)
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    352a:	f022 4260 	biclt.w	r2, r2, #3758096384	; 0xe0000000
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    352e:	f00a fb31 	bl	db94 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    3532:	4851      	ldr	r0, [pc, #324]	; (3678 <canread()+0x2d8>)
    3534:	f00a fd44 	bl	dfc0 <strlen>
    3538:	4601      	mov	r1, r0
    353a:	484f      	ldr	r0, [pc, #316]	; (3678 <canread()+0x2d8>)
    353c:	f008 fcaa 	bl	be94 <usb_serial_write>
    if ((inMsg.id & 0x40000000) == 0x40000000) {  // Determine if message is a remote request frame.
    3540:	6826      	ldr	r6, [r4, #0]
    3542:	f016 4680 	ands.w	r6, r6, #1073741824	; 0x40000000
    3546:	d145      	bne.n	35d4 <canread()+0x234>
      for (byte i = 0; i < inMsg.len; i++) {
    3548:	79e3      	ldrb	r3, [r4, #7]
    354a:	b1eb      	cbz	r3, 3588 <canread()+0x1e8>
    354c:	f8df b144 	ldr.w	fp, [pc, #324]	; 3694 <canread()+0x2f4>
        sprintf(msgString, ", 0x%.2X", inMsg.buf[i]);
    3550:	f8df a130 	ldr.w	sl, [pc, #304]	; 3684 <canread()+0x2e4>
    3554:	4f48      	ldr	r7, [pc, #288]	; (3678 <canread()+0x2d8>)
    3556:	4635      	mov	r5, r6
    3558:	eb04 0905 	add.w	r9, r4, r5
    355c:	4651      	mov	r1, sl
    355e:	f899 2008 	ldrb.w	r2, [r9, #8]
    3562:	4638      	mov	r0, r7
    3564:	f00a fb16 	bl	db94 <sprintf>
        DMC[i] = inMsg.buf[i];
    3568:	f899 3008 	ldrb.w	r3, [r9, #8]
    356c:	f80b 3005 	strb.w	r3, [fp, r5]
    3570:	4638      	mov	r0, r7
    3572:	f00a fd25 	bl	dfc0 <strlen>
    3576:	4601      	mov	r1, r0
    3578:	4638      	mov	r0, r7
    357a:	f008 fc8b 	bl	be94 <usb_serial_write>
      for (byte i = 0; i < inMsg.len; i++) {
    357e:	3601      	adds	r6, #1
    3580:	79e3      	ldrb	r3, [r4, #7]
    3582:	b2f5      	uxtb	r5, r6
    3584:	42ab      	cmp	r3, r5
    3586:	d8e7      	bhi.n	3558 <canread()+0x1b8>
    Serial.println();
    3588:	483a      	ldr	r0, [pc, #232]	; (3674 <canread()+0x2d4>)
    358a:	4d43      	ldr	r5, [pc, #268]	; (3698 <canread()+0x2f8>)
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    358c:	4f39      	ldr	r7, [pc, #228]	; (3674 <canread()+0x2d4>)
    358e:	4e43      	ldr	r6, [pc, #268]	; (369c <canread()+0x2fc>)
    3590:	f005 ff3c 	bl	940c <Print::println()>
    for (byte i = 0; i < 8; i++) {
    3594:	f105 0908 	add.w	r9, r5, #8
    3598:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    359c:	2300      	movs	r3, #0
    359e:	2210      	movs	r2, #16
    35a0:	4638      	mov	r0, r7
    35a2:	f005 ff4b 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    35a6:	2101      	movs	r1, #1
    35a8:	4630      	mov	r0, r6
    35aa:	f008 fc73 	bl	be94 <usb_serial_write>
    35ae:	454d      	cmp	r5, r9
    35b0:	d1f2      	bne.n	3598 <canread()+0x1f8>
    Serial.println();
    35b2:	4830      	ldr	r0, [pc, #192]	; (3674 <canread()+0x2d4>)
    35b4:	f005 ff2a 	bl	940c <Print::println()>
  if (inMsg.id > 0x99 && inMsg.id < 0x180)  //do BMS magic if ids are ones identified to be modules
    35b8:	6823      	ldr	r3, [r4, #0]
    35ba:	e703      	b.n	33c4 <canread()+0x24>
      switch (inMsg.id) {
    35bc:	f46f 7270 	mvn.w	r2, #960	; 0x3c0
    35c0:	189a      	adds	r2, r3, r2
    35c2:	2a01      	cmp	r2, #1
    35c4:	f63f aefb 	bhi.w	33be <canread()+0x1e>
          CAB500();
    35c8:	f7ff fe9c 	bl	3304 <CAB500()>
    if (settings.curcan == 3) {
    35cc:	f8d8 208c 	ldr.w	r2, [r8, #140]	; 0x8c
      switch (inMsg.id) {
    35d0:	6823      	ldr	r3, [r4, #0]
          break;
    35d2:	e775      	b.n	34c0 <canread()+0x120>
      sprintf(msgString, " REMOTE REQUEST FRAME");
    35d4:	4e32      	ldr	r6, [pc, #200]	; (36a0 <canread()+0x300>)
    35d6:	4d28      	ldr	r5, [pc, #160]	; (3678 <canread()+0x2d8>)
    35d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    35da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    35dc:	e896 0003 	ldmia.w	r6, {r0, r1}
    35e0:	f845 0b04 	str.w	r0, [r5], #4
    35e4:	4628      	mov	r0, r5
    35e6:	f820 1914 	strh.w	r1, [r0], #-20
							  return write((const uint8_t *)str, strlen(str)); }
    35ea:	f00a fce9 	bl	dfc0 <strlen>
    35ee:	4601      	mov	r1, r0
    35f0:	f1a5 0014 	sub.w	r0, r5, #20
    35f4:	f008 fc4e 	bl	be94 <usb_serial_write>
    35f8:	e7c6      	b.n	3588 <canread()+0x1e8>
      switch (inMsg.id) {
    35fa:	f240 32c1 	movw	r2, #961	; 0x3c1
    35fe:	4293      	cmp	r3, r2
    3600:	d023      	beq.n	364a <canread()+0x2aa>
    3602:	f240 32c2 	movw	r2, #962	; 0x3c2
    3606:	4293      	cmp	r3, r2
    3608:	f47f aed9 	bne.w	33be <canread()+0x1e>
          CAB300();
    360c:	f7ff fe38 	bl	3280 <CAB300()>
    if (settings.curcan == 2) {
    3610:	f8d8 208c 	ldr.w	r2, [r8, #140]	; 0x8c
      switch (inMsg.id) {
    3614:	6823      	ldr	r3, [r4, #0]
          break;
    3616:	e751      	b.n	34bc <canread()+0x11c>
      bms.decodecan(inMsg, 1);  //do  BMS if ids are ones identified to be modules
    3618:	490f      	ldr	r1, [pc, #60]	; (3658 <canread()+0x2b8>)
    361a:	4814      	ldr	r0, [pc, #80]	; (366c <canread()+0x2cc>)
    361c:	f7fd fab4 	bl	b88 <BMSModuleManager::decodecan(CAN_message_t&, int)>
  if ((inMsg.id & 0xFF0) == 0x180)  // Determine if ID is standard (11 bits) or extended (29 bits)
    3620:	6823      	ldr	r3, [r4, #0]
      bms.decodecan(inMsg, 1);  //do  BMS if ids are ones identified to be modules
    3622:	e6e2      	b.n	33ea <canread()+0x4a>
        sprintf(msgString, " REMOTE REQUEST FRAME");
    3624:	4d1e      	ldr	r5, [pc, #120]	; (36a0 <canread()+0x300>)
    3626:	4c14      	ldr	r4, [pc, #80]	; (3678 <canread()+0x2d8>)
    3628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    362a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    362c:	e895 0003 	ldmia.w	r5, {r0, r1}
    3630:	f844 0b04 	str.w	r0, [r4], #4
    3634:	4620      	mov	r0, r4
    3636:	f820 1914 	strh.w	r1, [r0], #-20
    363a:	f00a fcc1 	bl	dfc0 <strlen>
    363e:	4601      	mov	r1, r0
    3640:	f1a4 0014 	sub.w	r0, r4, #20
    3644:	f008 fc26 	bl	be94 <usb_serial_write>
    3648:	e72c      	b.n	34a4 <canread()+0x104>
          CAB500();
    364a:	f7ff fe5b 	bl	3304 <CAB500()>
    if (settings.curcan == 2) {
    364e:	f8d8 208c 	ldr.w	r2, [r8, #140]	; 0x8c
      switch (inMsg.id) {
    3652:	6823      	ldr	r3, [r4, #0]
          break;
    3654:	e732      	b.n	34bc <canread()+0x11c>
    3656:	bf00      	nop
    3658:	1fffd8bc 	.word	0x1fffd8bc
    365c:	1fffd9bc 	.word	0x1fffd9bc
    3660:	1fffdad0 	.word	0x1fffdad0
    3664:	1fffd70c 	.word	0x1fffd70c
    3668:	1fff8848 	.word	0x1fff8848
    366c:	1fff91e4 	.word	0x1fff91e4
    3670:	1fffdcc4 	.word	0x1fffdcc4
    3674:	1fff89fc 	.word	0x1fff89fc
    3678:	1fffd924 	.word	0x1fffd924
    367c:	00014194 	.word	0x00014194
    3680:	000141bc 	.word	0x000141bc
    3684:	000141e8 	.word	0x000141e8
    3688:	1fff9180 	.word	0x1fff9180
    368c:	1fff91b0 	.word	0x1fff91b0
    3690:	1fff91c0 	.word	0x1fff91c0
    3694:	1fff9190 	.word	0x1fff9190
    3698:	1fff918f 	.word	0x1fff918f
    369c:	00013f48 	.word	0x00013f48
    36a0:	000141d0 	.word	0x000141d0
          voltage2 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    36a4:	89a1      	ldrh	r1, [r4, #12]
    36a6:	8962      	ldrh	r2, [r4, #10]
    36a8:	4d07      	ldr	r5, [pc, #28]	; (36c8 <canread()+0x328>)
    36aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    36ae:	4907      	ldr	r1, [pc, #28]	; (36cc <canread()+0x32c>)
    36b0:	ba12      	rev	r2, r2
    36b2:	600a      	str	r2, [r1, #0]
          break;
    36b4:	e699      	b.n	33ea <canread()+0x4a>
          voltage1 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    36b6:	89a1      	ldrh	r1, [r4, #12]
    36b8:	8962      	ldrh	r2, [r4, #10]
    36ba:	4d03      	ldr	r5, [pc, #12]	; (36c8 <canread()+0x328>)
    36bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    36c0:	4903      	ldr	r1, [pc, #12]	; (36d0 <canread()+0x330>)
    36c2:	ba12      	rev	r2, r2
    36c4:	600a      	str	r2, [r1, #0]
          break;
    36c6:	e690      	b.n	33ea <canread()+0x4a>
    36c8:	1fff8848 	.word	0x1fff8848
    36cc:	1fffdab4 	.word	0x1fffdab4
    36d0:	1fffdab0 	.word	0x1fffdab0

000036d4 <currentlimit()>:
void currentlimit() {
    36d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (bmsstatus == Error) {
    36d8:	4b98      	ldr	r3, [pc, #608]	; (393c <currentlimit()+0x268>)
    36da:	781b      	ldrb	r3, [r3, #0]
    36dc:	2b05      	cmp	r3, #5
    36de:	d06b      	beq.n	37b8 <currentlimit()+0xe4>
    if (chargecurrentlimit == false) {
    36e0:	4f97      	ldr	r7, [pc, #604]	; (3940 <currentlimit()+0x26c>)
    discurrent = settings.discurrentmax;
    36e2:	4c98      	ldr	r4, [pc, #608]	; (3944 <currentlimit()+0x270>)
    36e4:	4e98      	ldr	r6, [pc, #608]	; (3948 <currentlimit()+0x274>)
    if (chargecurrentlimit == false) {
    36e6:	783b      	ldrb	r3, [r7, #0]
    discurrent = settings.discurrentmax;
    36e8:	6f22      	ldr	r2, [r4, #112]	; 0x70
    36ea:	6032      	str	r2, [r6, #0]
    if (chargecurrentlimit == false) {
    36ec:	2b00      	cmp	r3, #0
    36ee:	d060      	beq.n	37b2 <currentlimit()+0xde>
      chargecurrent = settings.chargecurrent2max;
    36f0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    36f4:	4d95      	ldr	r5, [pc, #596]	; (394c <currentlimit()+0x278>)
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    36f6:	4896      	ldr	r0, [pc, #600]	; (3950 <currentlimit()+0x27c>)
    36f8:	802b      	strh	r3, [r5, #0]
    36fa:	f7fd fc55 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    36fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3700:	f009 fc46 	bl	cf90 <__aeabi_fcmplt>
    3704:	b108      	cbz	r0, 370a <currentlimit()+0x36>
      chargecurrent = 0;
    3706:	2300      	movs	r3, #0
    3708:	802b      	strh	r3, [r5, #0]
    if (bms.getHighTemperature() > settings.OverTSetpoint) {
    370a:	4891      	ldr	r0, [pc, #580]	; (3950 <currentlimit()+0x27c>)
    370c:	f7fd fc4a 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    3710:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    3712:	f009 fc5b 	bl	cfcc <__aeabi_fcmpgt>
    3716:	b110      	cbz	r0, 371e <currentlimit()+0x4a>
      discurrent = 0;
    3718:	2300      	movs	r3, #0
    371a:	6033      	str	r3, [r6, #0]
      chargecurrent = 0;
    371c:	802b      	strh	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    371e:	488c      	ldr	r0, [pc, #560]	; (3950 <currentlimit()+0x27c>)
    3720:	f7fd fb86 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    3724:	68e1      	ldr	r1, [r4, #12]
    3726:	f009 fc51 	bl	cfcc <__aeabi_fcmpgt>
    372a:	b108      	cbz	r0, 3730 <currentlimit()+0x5c>
      chargecurrent = 0;
    372c:	2300      	movs	r3, #0
    372e:	802b      	strh	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    3730:	4887      	ldr	r0, [pc, #540]	; (3950 <currentlimit()+0x27c>)
    3732:	f7fd fb7d 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    3736:	68e1      	ldr	r1, [r4, #12]
    3738:	f009 fc48 	bl	cfcc <__aeabi_fcmpgt>
    373c:	b108      	cbz	r0, 3742 <currentlimit()+0x6e>
      chargecurrent = 0;
    373e:	2300      	movs	r3, #0
    3740:	802b      	strh	r3, [r5, #0]
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    3742:	4883      	ldr	r0, [pc, #524]	; (3950 <currentlimit()+0x27c>)
    3744:	f7fd fb4c 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    3748:	6921      	ldr	r1, [r4, #16]
    374a:	f009 fc21 	bl	cf90 <__aeabi_fcmplt>
    374e:	2800      	cmp	r0, #0
    3750:	d070      	beq.n	3834 <currentlimit()+0x160>
      discurrent = 0;
    3752:	2300      	movs	r3, #0
    3754:	6033      	str	r3, [r6, #0]
    if (chargecurrent > 0) {
    3756:	882b      	ldrh	r3, [r5, #0]
    3758:	b303      	cbz	r3, 379c <currentlimit()+0xc8>
      if (chargecurrentlimit == false) {
    375a:	783b      	ldrb	r3, [r7, #0]
        if (bms.getLowTemperature() < settings.ChargeTSetpoint) {
    375c:	487c      	ldr	r0, [pc, #496]	; (3950 <currentlimit()+0x27c>)
      if (chargecurrentlimit == false) {
    375e:	2b00      	cmp	r3, #0
    3760:	f040 80bf 	bne.w	38e2 <currentlimit()+0x20e>
        if (bms.getLowTemperature() < settings.ChargeTSetpoint) {
    3764:	f7fd fc20 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    3768:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    376a:	f009 fc11 	bl	cf90 <__aeabi_fcmplt>
    376e:	2800      	cmp	r0, #0
    3770:	f040 81be 	bne.w	3af0 <currentlimit()+0x41c>
        if (storagemode == 1) {
    3774:	4b77      	ldr	r3, [pc, #476]	; (3954 <currentlimit()+0x280>)
          if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    3776:	4876      	ldr	r0, [pc, #472]	; (3950 <currentlimit()+0x27c>)
        if (storagemode == 1) {
    3778:	681b      	ldr	r3, [r3, #0]
    377a:	2b01      	cmp	r3, #1
    377c:	f000 8144 	beq.w	3a08 <currentlimit()+0x334>
          if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    3780:	f7fd fb56 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    3784:	6a21      	ldr	r1, [r4, #32]
    3786:	4607      	mov	r7, r0
    3788:	69a0      	ldr	r0, [r4, #24]
    378a:	f009 f959 	bl	ca40 <__aeabi_fsub>
    378e:	4601      	mov	r1, r0
    3790:	4638      	mov	r0, r7
    3792:	f009 fc1b 	bl	cfcc <__aeabi_fcmpgt>
    3796:	2800      	cmp	r0, #0
    3798:	f040 81d9 	bne.w	3b4e <currentlimit()+0x47a>
  if (discurrent < 0) {
    379c:	6833      	ldr	r3, [r6, #0]
  if (accurlim > 0) {
    379e:	4a6e      	ldr	r2, [pc, #440]	; (3958 <currentlimit()+0x284>)
  if (discurrent < 0) {
    37a0:	2b00      	cmp	r3, #0
    discurrent = 0;
    37a2:	bfbc      	itt	lt
    37a4:	2300      	movlt	r3, #0
    37a6:	6033      	strlt	r3, [r6, #0]
  if (accurlim > 0) {
    37a8:	8813      	ldrh	r3, [r2, #0]
    37aa:	b29b      	uxth	r3, r3
    37ac:	b973      	cbnz	r3, 37cc <currentlimit()+0xf8>
}
    37ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      chargecurrent = settings.chargecurrentmax;
    37b2:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    37b6:	e79d      	b.n	36f4 <currentlimit()+0x20>
    discurrent = 0;
    37b8:	4a63      	ldr	r2, [pc, #396]	; (3948 <currentlimit()+0x274>)
    chargecurrent = 0;
    37ba:	4d64      	ldr	r5, [pc, #400]	; (394c <currentlimit()+0x278>)
    discurrent = 0;
    37bc:	2300      	movs	r3, #0
    37be:	6013      	str	r3, [r2, #0]
  if (accurlim > 0) {
    37c0:	4a65      	ldr	r2, [pc, #404]	; (3958 <currentlimit()+0x284>)
    chargecurrent = 0;
    37c2:	802b      	strh	r3, [r5, #0]
  if (accurlim > 0) {
    37c4:	8813      	ldrh	r3, [r2, #0]
    37c6:	b29b      	uxth	r3, r3
    37c8:	2b00      	cmp	r3, #0
    37ca:	d0f0      	beq.n	37ae <currentlimit()+0xda>
    chargerpower = accurlim * settings.chargerACv * settings.chargereff * 0.01;
    37cc:	4e5d      	ldr	r6, [pc, #372]	; (3944 <currentlimit()+0x270>)
    37ce:	8813      	ldrh	r3, [r2, #0]
    37d0:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
    37d4:	f8d6 00dc 	ldr.w	r0, [r6, #220]	; 0xdc
    37d8:	b29b      	uxth	r3, r3
    37da:	fb02 f303 	mul.w	r3, r2, r3
    37de:	fb03 f000 	mul.w	r0, r3, r0
    37e2:	f009 f9e3 	bl	cbac <__aeabi_i2f>
    37e6:	495d      	ldr	r1, [pc, #372]	; (395c <currentlimit()+0x288>)
    37e8:	f009 fa34 	bl	cc54 <__aeabi_fmul>
    37ec:	f009 fc1e 	bl	d02c <__aeabi_f2uiz>
    37f0:	4b5b      	ldr	r3, [pc, #364]	; (3960 <currentlimit()+0x28c>)
    37f2:	b284      	uxth	r4, r0
    tempchargecurrent = (chargerpower * 10) / (bms.getAvgCellVolt() * settings.Scells);
    37f4:	4856      	ldr	r0, [pc, #344]	; (3950 <currentlimit()+0x27c>)
    chargerpower = accurlim * settings.chargerACv * settings.chargereff * 0.01;
    37f6:	801c      	strh	r4, [r3, #0]
    tempchargecurrent = (chargerpower * 10) / (bms.getAvgCellVolt() * settings.Scells);
    37f8:	f7fd fbd8 	bl	fac <BMSModuleManager::getAvgCellVolt()>
    37fc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3800:	4607      	mov	r7, r0
    3802:	0060      	lsls	r0, r4, #1
    3804:	f009 f9d2 	bl	cbac <__aeabi_i2f>
    3808:	4604      	mov	r4, r0
    380a:	6db0      	ldr	r0, [r6, #88]	; 0x58
    380c:	f009 f9ce 	bl	cbac <__aeabi_i2f>
    3810:	4639      	mov	r1, r7
    3812:	f009 fa1f 	bl	cc54 <__aeabi_fmul>
    3816:	4601      	mov	r1, r0
    3818:	4620      	mov	r0, r4
    381a:	f009 facf 	bl	cdbc <__aeabi_fdiv>
    381e:	f009 fc05 	bl	d02c <__aeabi_f2uiz>
    if (chargecurrent > tempchargecurrent) {
    3822:	882b      	ldrh	r3, [r5, #0]
    tempchargecurrent = (chargerpower * 10) / (bms.getAvgCellVolt() * settings.Scells);
    3824:	4a4f      	ldr	r2, [pc, #316]	; (3964 <currentlimit()+0x290>)
    3826:	b280      	uxth	r0, r0
    if (chargecurrent > tempchargecurrent) {
    3828:	4283      	cmp	r3, r0
    tempchargecurrent = (chargerpower * 10) / (bms.getAvgCellVolt() * settings.Scells);
    382a:	8010      	strh	r0, [r2, #0]
      chargecurrent = tempchargecurrent;
    382c:	bf88      	it	hi
    382e:	8028      	strhhi	r0, [r5, #0]
}
    3830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    3834:	4846      	ldr	r0, [pc, #280]	; (3950 <currentlimit()+0x27c>)
    3836:	f7fd fad3 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    383a:	69e1      	ldr	r1, [r4, #28]
    383c:	f009 fba8 	bl	cf90 <__aeabi_fcmplt>
    3840:	2800      	cmp	r0, #0
    3842:	d186      	bne.n	3752 <currentlimit()+0x7e>
    if (discurrent > 0) {
    3844:	6833      	ldr	r3, [r6, #0]
    3846:	2b00      	cmp	r3, #0
    3848:	dd85      	ble.n	3756 <currentlimit()+0x82>
      if (bms.getHighTemperature() > settings.DisTSetpoint) {
    384a:	4841      	ldr	r0, [pc, #260]	; (3950 <currentlimit()+0x27c>)
    384c:	f7fd fbaa 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    3850:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    3852:	f009 fbbb 	bl	cfcc <__aeabi_fcmpgt>
    3856:	2800      	cmp	r0, #0
    3858:	f040 8086 	bne.w	3968 <currentlimit()+0x294>
      if (bms.getLowCellVolt() < (settings.DischVsetpoint + settings.DisTaper)) {
    385c:	483c      	ldr	r0, [pc, #240]	; (3950 <currentlimit()+0x27c>)
    385e:	f7fd fabf 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    3862:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
    3866:	4680      	mov	r8, r0
    3868:	69e0      	ldr	r0, [r4, #28]
    386a:	f009 f8eb 	bl	ca44 <__addsf3>
    386e:	4601      	mov	r1, r0
    3870:	4640      	mov	r0, r8
    3872:	f009 fb8d 	bl	cf90 <__aeabi_fcmplt>
    3876:	2800      	cmp	r0, #0
    3878:	f43f af6d 	beq.w	3756 <currentlimit()+0x82>
        discurrent = discurrent - map(bms.getLowCellVolt(), settings.DischVsetpoint, (settings.DischVsetpoint + settings.DisTaper), settings.discurrentmax, 0);
    387c:	6830      	ldr	r0, [r6, #0]
    387e:	f009 f995 	bl	cbac <__aeabi_i2f>
    3882:	4681      	mov	r9, r0
    3884:	4832      	ldr	r0, [pc, #200]	; (3950 <currentlimit()+0x27c>)
    3886:	f7fd faab 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    388a:	4682      	mov	sl, r0
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    388c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    388e:	f8d4 b01c 	ldr.w	fp, [r4, #28]
    3892:	f009 f98b 	bl	cbac <__aeabi_i2f>
    3896:	4659      	mov	r1, fp
    3898:	4680      	mov	r8, r0
    389a:	4650      	mov	r0, sl
    389c:	f009 f8d0 	bl	ca40 <__aeabi_fsub>
    38a0:	4641      	mov	r1, r8
    38a2:	4682      	mov	sl, r0
    38a4:	2000      	movs	r0, #0
    38a6:	f009 f8cb 	bl	ca40 <__aeabi_fsub>
    38aa:	4601      	mov	r1, r0
    38ac:	4650      	mov	r0, sl
    38ae:	f009 f9d1 	bl	cc54 <__aeabi_fmul>
    38b2:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
    38b6:	4682      	mov	sl, r0
    38b8:	4658      	mov	r0, fp
    38ba:	f009 f8c3 	bl	ca44 <__addsf3>
    38be:	4659      	mov	r1, fp
    38c0:	f009 f8be 	bl	ca40 <__aeabi_fsub>
    38c4:	4601      	mov	r1, r0
    38c6:	4650      	mov	r0, sl
    38c8:	f009 fa78 	bl	cdbc <__aeabi_fdiv>
    38cc:	4641      	mov	r1, r8
    38ce:	f009 f8b9 	bl	ca44 <__addsf3>
    38d2:	4601      	mov	r1, r0
    38d4:	4648      	mov	r0, r9
    38d6:	f009 f8b3 	bl	ca40 <__aeabi_fsub>
    38da:	f009 fb81 	bl	cfe0 <__aeabi_f2iz>
    38de:	6030      	str	r0, [r6, #0]
    38e0:	e739      	b.n	3756 <currentlimit()+0x82>
        if (bms.getLowTemperature() < settings.ChargeTSetpoint) {
    38e2:	f7fd fb61 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    38e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    38e8:	f009 fb52 	bl	cf90 <__aeabi_fcmplt>
    38ec:	2800      	cmp	r0, #0
    38ee:	f040 80cf 	bne.w	3a90 <currentlimit()+0x3bc>
        if (storagemode == 1) {
    38f2:	4b18      	ldr	r3, [pc, #96]	; (3954 <currentlimit()+0x280>)
          if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    38f4:	4816      	ldr	r0, [pc, #88]	; (3950 <currentlimit()+0x27c>)
        if (storagemode == 1) {
    38f6:	681b      	ldr	r3, [r3, #0]
    38f8:	2b01      	cmp	r3, #1
    38fa:	d05f      	beq.n	39bc <currentlimit()+0x2e8>
          if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    38fc:	f7fd fa98 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    3900:	6a21      	ldr	r1, [r4, #32]
    3902:	4607      	mov	r7, r0
    3904:	69a0      	ldr	r0, [r4, #24]
    3906:	f009 f89b 	bl	ca40 <__aeabi_fsub>
    390a:	4601      	mov	r1, r0
    390c:	4638      	mov	r0, r7
    390e:	f009 fb5d 	bl	cfcc <__aeabi_fcmpgt>
    3912:	2800      	cmp	r0, #0
    3914:	f43f af42 	beq.w	379c <currentlimit()+0xc8>
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrent2max - settings.chargecurrentend));
    3918:	8828      	ldrh	r0, [r5, #0]
    391a:	f009 f947 	bl	cbac <__aeabi_i2f>
    391e:	4680      	mov	r8, r0
    3920:	480b      	ldr	r0, [pc, #44]	; (3950 <currentlimit()+0x27c>)
    3922:	f7fd fa85 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    3926:	f8d4 9018 	ldr.w	r9, [r4, #24]
    392a:	6a21      	ldr	r1, [r4, #32]
    392c:	4682      	mov	sl, r0
    392e:	4648      	mov	r0, r9
    3930:	f009 f886 	bl	ca40 <__aeabi_fsub>
    3934:	4607      	mov	r7, r0
    3936:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    393a:	e118      	b.n	3b6e <currentlimit()+0x49a>
    393c:	1fffd708 	.word	0x1fffd708
    3940:	1fffd716 	.word	0x1fffd716
    3944:	1fffd9bc 	.word	0x1fffd9bc
    3948:	1fffd8a8 	.word	0x1fffd8a8
    394c:	1fffd714 	.word	0x1fffd714
    3950:	1fff91e4 	.word	0x1fff91e4
    3954:	1fffdaa0 	.word	0x1fffdaa0
    3958:	1fff91c8 	.word	0x1fff91c8
    395c:	3c23d70a 	.word	0x3c23d70a
    3960:	1fffd720 	.word	0x1fffd720
    3964:	1fffdaa4 	.word	0x1fffdaa4
        discurrent = discurrent - map(bms.getHighTemperature(), settings.DisTSetpoint, settings.OverTSetpoint, 0, settings.discurrentmax);
    3968:	6830      	ldr	r0, [r6, #0]
    396a:	f009 f91f 	bl	cbac <__aeabi_i2f>
    396e:	4680      	mov	r8, r0
    3970:	488f      	ldr	r0, [pc, #572]	; (3bb0 <currentlimit()+0x4dc>)
    3972:	f7fd fb17 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    3976:	4683      	mov	fp, r0
    3978:	6f20      	ldr	r0, [r4, #112]	; 0x70
    397a:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
    397e:	f009 f915 	bl	cbac <__aeabi_i2f>
    3982:	4651      	mov	r1, sl
    3984:	4681      	mov	r9, r0
    3986:	4658      	mov	r0, fp
    3988:	f009 f85a 	bl	ca40 <__aeabi_fsub>
    398c:	4601      	mov	r1, r0
    398e:	4648      	mov	r0, r9
    3990:	f009 f960 	bl	cc54 <__aeabi_fmul>
    3994:	4651      	mov	r1, sl
    3996:	4681      	mov	r9, r0
    3998:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    399a:	f009 f851 	bl	ca40 <__aeabi_fsub>
    399e:	4601      	mov	r1, r0
    39a0:	4648      	mov	r0, r9
    39a2:	f009 fa0b 	bl	cdbc <__aeabi_fdiv>
    39a6:	2100      	movs	r1, #0
    39a8:	f009 f84c 	bl	ca44 <__addsf3>
    39ac:	4601      	mov	r1, r0
    39ae:	4640      	mov	r0, r8
    39b0:	f009 f846 	bl	ca40 <__aeabi_fsub>
    39b4:	f009 fb14 	bl	cfe0 <__aeabi_f2iz>
    39b8:	6030      	str	r0, [r6, #0]
    39ba:	e74f      	b.n	385c <currentlimit()+0x188>
          if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    39bc:	f7fd fa38 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    39c0:	6a21      	ldr	r1, [r4, #32]
    39c2:	4607      	mov	r7, r0
    39c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    39c6:	f009 f83b 	bl	ca40 <__aeabi_fsub>
    39ca:	4601      	mov	r1, r0
    39cc:	4638      	mov	r0, r7
    39ce:	f009 fafd 	bl	cfcc <__aeabi_fcmpgt>
    39d2:	2800      	cmp	r0, #0
    39d4:	f43f aee2 	beq.w	379c <currentlimit()+0xc8>
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrent2max);
    39d8:	8828      	ldrh	r0, [r5, #0]
    39da:	f009 f8e7 	bl	cbac <__aeabi_i2f>
    39de:	4681      	mov	r9, r0
    39e0:	4873      	ldr	r0, [pc, #460]	; (3bb0 <currentlimit()+0x4dc>)
    39e2:	f7fd fa25 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    39e6:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    39ea:	6a21      	ldr	r1, [r4, #32]
    39ec:	4683      	mov	fp, r0
    39ee:	4650      	mov	r0, sl
    39f0:	f009 f826 	bl	ca40 <__aeabi_fsub>
    39f4:	4680      	mov	r8, r0
    39f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    39f8:	f009 f8d8 	bl	cbac <__aeabi_i2f>
    39fc:	4607      	mov	r7, r0
    39fe:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    3a02:	f009 f8cf 	bl	cba4 <__aeabi_ui2f>
    3a06:	e023      	b.n	3a50 <currentlimit()+0x37c>
          if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    3a08:	f7fd fa12 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    3a0c:	6a21      	ldr	r1, [r4, #32]
    3a0e:	4607      	mov	r7, r0
    3a10:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3a12:	f009 f815 	bl	ca40 <__aeabi_fsub>
    3a16:	4601      	mov	r1, r0
    3a18:	4638      	mov	r0, r7
    3a1a:	f009 fad7 	bl	cfcc <__aeabi_fcmpgt>
    3a1e:	2800      	cmp	r0, #0
    3a20:	f43f aebc 	beq.w	379c <currentlimit()+0xc8>
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    3a24:	8828      	ldrh	r0, [r5, #0]
    3a26:	f009 f8c1 	bl	cbac <__aeabi_i2f>
    3a2a:	4681      	mov	r9, r0
    3a2c:	4860      	ldr	r0, [pc, #384]	; (3bb0 <currentlimit()+0x4dc>)
    3a2e:	f7fd f9ff 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    3a32:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    3a36:	6a21      	ldr	r1, [r4, #32]
    3a38:	4683      	mov	fp, r0
    3a3a:	4650      	mov	r0, sl
    3a3c:	f009 f800 	bl	ca40 <__aeabi_fsub>
    3a40:	4680      	mov	r8, r0
    3a42:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    3a44:	f009 f8b2 	bl	cbac <__aeabi_i2f>
    3a48:	4607      	mov	r7, r0
    3a4a:	6e60      	ldr	r0, [r4, #100]	; 0x64
    3a4c:	f009 f8ae 	bl	cbac <__aeabi_i2f>
    3a50:	4639      	mov	r1, r7
    3a52:	f008 fff5 	bl	ca40 <__aeabi_fsub>
    3a56:	4641      	mov	r1, r8
    3a58:	4604      	mov	r4, r0
    3a5a:	4658      	mov	r0, fp
    3a5c:	f008 fff0 	bl	ca40 <__aeabi_fsub>
    3a60:	4601      	mov	r1, r0
    3a62:	4620      	mov	r0, r4
    3a64:	f009 f8f6 	bl	cc54 <__aeabi_fmul>
    3a68:	4641      	mov	r1, r8
    3a6a:	4604      	mov	r4, r0
    3a6c:	4650      	mov	r0, sl
    3a6e:	f008 ffe7 	bl	ca40 <__aeabi_fsub>
    3a72:	4601      	mov	r1, r0
    3a74:	4620      	mov	r0, r4
    3a76:	f009 f9a1 	bl	cdbc <__aeabi_fdiv>
    3a7a:	4639      	mov	r1, r7
    3a7c:	f008 ffe2 	bl	ca44 <__addsf3>
    3a80:	4601      	mov	r1, r0
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrent2max);
    3a82:	4648      	mov	r0, r9
    3a84:	f008 ffdc 	bl	ca40 <__aeabi_fsub>
    3a88:	f009 fad0 	bl	d02c <__aeabi_f2uiz>
    3a8c:	8028      	strh	r0, [r5, #0]
    3a8e:	e685      	b.n	379c <currentlimit()+0xc8>
          chargecurrent = chargecurrent - map(bms.getLowTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, settings.chargecurrent2max, 0);
    3a90:	8828      	ldrh	r0, [r5, #0]
    3a92:	f009 f88b 	bl	cbac <__aeabi_i2f>
    3a96:	4680      	mov	r8, r0
    3a98:	4845      	ldr	r0, [pc, #276]	; (3bb0 <currentlimit()+0x4dc>)
    3a9a:	f7fd fa85 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    3a9e:	4681      	mov	r9, r0
    3aa0:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
    3aa4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
    3aa8:	f009 f87c 	bl	cba4 <__aeabi_ui2f>
    3aac:	4651      	mov	r1, sl
    3aae:	4607      	mov	r7, r0
    3ab0:	4648      	mov	r0, r9
    3ab2:	f008 ffc5 	bl	ca40 <__aeabi_fsub>
    3ab6:	4639      	mov	r1, r7
    3ab8:	4681      	mov	r9, r0
    3aba:	2000      	movs	r0, #0
    3abc:	f008 ffc0 	bl	ca40 <__aeabi_fsub>
    3ac0:	4601      	mov	r1, r0
    3ac2:	4648      	mov	r0, r9
    3ac4:	f009 f8c6 	bl	cc54 <__aeabi_fmul>
    3ac8:	4651      	mov	r1, sl
    3aca:	4681      	mov	r9, r0
    3acc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    3ace:	f008 ffb7 	bl	ca40 <__aeabi_fsub>
    3ad2:	4601      	mov	r1, r0
    3ad4:	4648      	mov	r0, r9
    3ad6:	f009 f971 	bl	cdbc <__aeabi_fdiv>
    3ada:	4639      	mov	r1, r7
    3adc:	f008 ffb2 	bl	ca44 <__addsf3>
    3ae0:	4601      	mov	r1, r0
    3ae2:	4640      	mov	r0, r8
    3ae4:	f008 ffac 	bl	ca40 <__aeabi_fsub>
    3ae8:	f009 faa0 	bl	d02c <__aeabi_f2uiz>
    3aec:	8028      	strh	r0, [r5, #0]
    3aee:	e700      	b.n	38f2 <currentlimit()+0x21e>
          chargecurrent = chargecurrent - map(bms.getLowTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, settings.chargecurrentmax, 0);
    3af0:	8828      	ldrh	r0, [r5, #0]
    3af2:	f009 f85b 	bl	cbac <__aeabi_i2f>
    3af6:	4680      	mov	r8, r0
    3af8:	482d      	ldr	r0, [pc, #180]	; (3bb0 <currentlimit()+0x4dc>)
    3afa:	f7fd fa55 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    3afe:	4681      	mov	r9, r0
    3b00:	6e60      	ldr	r0, [r4, #100]	; 0x64
    3b02:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
    3b06:	f009 f851 	bl	cbac <__aeabi_i2f>
    3b0a:	4651      	mov	r1, sl
    3b0c:	4607      	mov	r7, r0
    3b0e:	4648      	mov	r0, r9
    3b10:	f008 ff96 	bl	ca40 <__aeabi_fsub>
    3b14:	4639      	mov	r1, r7
    3b16:	4681      	mov	r9, r0
    3b18:	2000      	movs	r0, #0
    3b1a:	f008 ff91 	bl	ca40 <__aeabi_fsub>
    3b1e:	4601      	mov	r1, r0
    3b20:	4648      	mov	r0, r9
    3b22:	f009 f897 	bl	cc54 <__aeabi_fmul>
    3b26:	4651      	mov	r1, sl
    3b28:	4681      	mov	r9, r0
    3b2a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    3b2c:	f008 ff88 	bl	ca40 <__aeabi_fsub>
    3b30:	4601      	mov	r1, r0
    3b32:	4648      	mov	r0, r9
    3b34:	f009 f942 	bl	cdbc <__aeabi_fdiv>
    3b38:	4639      	mov	r1, r7
    3b3a:	f008 ff83 	bl	ca44 <__addsf3>
    3b3e:	4601      	mov	r1, r0
    3b40:	4640      	mov	r0, r8
    3b42:	f008 ff7d 	bl	ca40 <__aeabi_fsub>
    3b46:	f009 fa71 	bl	d02c <__aeabi_f2uiz>
    3b4a:	8028      	strh	r0, [r5, #0]
    3b4c:	e612      	b.n	3774 <currentlimit()+0xa0>
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrentmax - settings.chargecurrentend));
    3b4e:	8828      	ldrh	r0, [r5, #0]
    3b50:	f009 f82c 	bl	cbac <__aeabi_i2f>
    3b54:	4680      	mov	r8, r0
    3b56:	4816      	ldr	r0, [pc, #88]	; (3bb0 <currentlimit()+0x4dc>)
    3b58:	f7fd f96a 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    3b5c:	f8d4 9018 	ldr.w	r9, [r4, #24]
    3b60:	6a21      	ldr	r1, [r4, #32]
    3b62:	4682      	mov	sl, r0
    3b64:	4648      	mov	r0, r9
    3b66:	f008 ff6b 	bl	ca40 <__aeabi_fsub>
    3b6a:	4607      	mov	r7, r0
    3b6c:	6e60      	ldr	r0, [r4, #100]	; 0x64
            chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrent2max - settings.chargecurrentend));
    3b6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    3b70:	1ac0      	subs	r0, r0, r3
    3b72:	f009 f81b 	bl	cbac <__aeabi_i2f>
    3b76:	4639      	mov	r1, r7
    3b78:	4604      	mov	r4, r0
    3b7a:	4650      	mov	r0, sl
    3b7c:	f008 ff60 	bl	ca40 <__aeabi_fsub>
    3b80:	4601      	mov	r1, r0
    3b82:	4620      	mov	r0, r4
    3b84:	f009 f866 	bl	cc54 <__aeabi_fmul>
    3b88:	4639      	mov	r1, r7
    3b8a:	4604      	mov	r4, r0
    3b8c:	4648      	mov	r0, r9
    3b8e:	f008 ff57 	bl	ca40 <__aeabi_fsub>
    3b92:	4601      	mov	r1, r0
    3b94:	4620      	mov	r0, r4
    3b96:	f009 f911 	bl	cdbc <__aeabi_fdiv>
    3b9a:	2100      	movs	r1, #0
    3b9c:	f008 ff52 	bl	ca44 <__addsf3>
    3ba0:	4601      	mov	r1, r0
    3ba2:	4640      	mov	r0, r8
    3ba4:	f008 ff4c 	bl	ca40 <__aeabi_fsub>
    3ba8:	f009 fa40 	bl	d02c <__aeabi_f2uiz>
    3bac:	8028      	strh	r0, [r5, #0]
    3bae:	e5f5      	b.n	379c <currentlimit()+0xc8>
    3bb0:	1fff91e4 	.word	0x1fff91e4

00003bb4 <inputdebug()>:
void inputdebug() {
    3bb4:	b508      	push	{r3, lr}
  Serial.println();
    3bb6:	4828      	ldr	r0, [pc, #160]	; (3c58 <inputdebug()+0xa4>)
    3bb8:	f005 fc28 	bl	940c <Print::println()>
    3bbc:	4827      	ldr	r0, [pc, #156]	; (3c5c <inputdebug()+0xa8>)
    3bbe:	2107      	movs	r1, #7
    3bc0:	f008 f968 	bl	be94 <usb_serial_write>
  if (digitalRead(IN1)) {
    3bc4:	2011      	movs	r0, #17
    3bc6:	f006 fb19 	bl	a1fc <digitalRead>
    3bca:	b300      	cbz	r0, 3c0e <inputdebug()+0x5a>
    3bcc:	4824      	ldr	r0, [pc, #144]	; (3c60 <inputdebug()+0xac>)
    3bce:	2106      	movs	r1, #6
    3bd0:	f008 f960 	bl	be94 <usb_serial_write>
  if (digitalRead(IN2)) {
    3bd4:	2010      	movs	r0, #16
    3bd6:	f006 fb11 	bl	a1fc <digitalRead>
    3bda:	b308      	cbz	r0, 3c20 <inputdebug()+0x6c>
    3bdc:	4821      	ldr	r0, [pc, #132]	; (3c64 <inputdebug()+0xb0>)
    3bde:	2106      	movs	r1, #6
    3be0:	f008 f958 	bl	be94 <usb_serial_write>
  if (digitalRead(IN3)) {
    3be4:	2012      	movs	r0, #18
    3be6:	f006 fb09 	bl	a1fc <digitalRead>
    3bea:	b310      	cbz	r0, 3c32 <inputdebug()+0x7e>
    3bec:	481e      	ldr	r0, [pc, #120]	; (3c68 <inputdebug()+0xb4>)
    3bee:	2106      	movs	r1, #6
    3bf0:	f008 f950 	bl	be94 <usb_serial_write>
  if (digitalRead(IN4)) {
    3bf4:	2013      	movs	r0, #19
    3bf6:	f006 fb01 	bl	a1fc <digitalRead>
    3bfa:	b318      	cbz	r0, 3c44 <inputdebug()+0x90>
    3bfc:	481b      	ldr	r0, [pc, #108]	; (3c6c <inputdebug()+0xb8>)
    3bfe:	2106      	movs	r1, #6
    3c00:	f008 f948 	bl	be94 <usb_serial_write>
}
    3c04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    3c08:	4813      	ldr	r0, [pc, #76]	; (3c58 <inputdebug()+0xa4>)
    3c0a:	f005 bbff 	b.w	940c <Print::println()>
    3c0e:	4818      	ldr	r0, [pc, #96]	; (3c70 <inputdebug()+0xbc>)
    3c10:	2106      	movs	r1, #6
    3c12:	f008 f93f 	bl	be94 <usb_serial_write>
  if (digitalRead(IN2)) {
    3c16:	2010      	movs	r0, #16
    3c18:	f006 faf0 	bl	a1fc <digitalRead>
    3c1c:	2800      	cmp	r0, #0
    3c1e:	d1dd      	bne.n	3bdc <inputdebug()+0x28>
    3c20:	4814      	ldr	r0, [pc, #80]	; (3c74 <inputdebug()+0xc0>)
    3c22:	2106      	movs	r1, #6
    3c24:	f008 f936 	bl	be94 <usb_serial_write>
  if (digitalRead(IN3)) {
    3c28:	2012      	movs	r0, #18
    3c2a:	f006 fae7 	bl	a1fc <digitalRead>
    3c2e:	2800      	cmp	r0, #0
    3c30:	d1dc      	bne.n	3bec <inputdebug()+0x38>
    3c32:	4811      	ldr	r0, [pc, #68]	; (3c78 <inputdebug()+0xc4>)
    3c34:	2106      	movs	r1, #6
    3c36:	f008 f92d 	bl	be94 <usb_serial_write>
  if (digitalRead(IN4)) {
    3c3a:	2013      	movs	r0, #19
    3c3c:	f006 fade 	bl	a1fc <digitalRead>
    3c40:	2800      	cmp	r0, #0
    3c42:	d1db      	bne.n	3bfc <inputdebug()+0x48>
    3c44:	480d      	ldr	r0, [pc, #52]	; (3c7c <inputdebug()+0xc8>)
    3c46:	2106      	movs	r1, #6
    3c48:	f008 f924 	bl	be94 <usb_serial_write>
}
    3c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    3c50:	4801      	ldr	r0, [pc, #4]	; (3c58 <inputdebug()+0xa4>)
    3c52:	f005 bbdb 	b.w	940c <Print::println()>
    3c56:	bf00      	nop
    3c58:	1fff89fc 	.word	0x1fff89fc
    3c5c:	000141f4 	.word	0x000141f4
    3c60:	000141fc 	.word	0x000141fc
    3c64:	0001420c 	.word	0x0001420c
    3c68:	0001421c 	.word	0x0001421c
    3c6c:	0001422c 	.word	0x0001422c
    3c70:	00014204 	.word	0x00014204
    3c74:	00014214 	.word	0x00014214
    3c78:	00014224 	.word	0x00014224
    3c7c:	00014234 	.word	0x00014234

00003c80 <outputdebug()>:
void outputdebug() {
    3c80:	b510      	push	{r4, lr}
  if (outputstate < 5) {
    3c82:	4c29      	ldr	r4, [pc, #164]	; (3d28 <outputdebug()+0xa8>)
    3c84:	6823      	ldr	r3, [r4, #0]
    3c86:	2b04      	cmp	r3, #4
    3c88:	dc26      	bgt.n	3cd8 <outputdebug()+0x58>
    digitalWrite(OUT1, HIGH);
    3c8a:	2101      	movs	r1, #1
    3c8c:	200b      	movs	r0, #11
    3c8e:	f006 fa8f 	bl	a1b0 <digitalWrite>
    digitalWrite(OUT2, HIGH);
    3c92:	2101      	movs	r1, #1
    3c94:	200c      	movs	r0, #12
    3c96:	f006 fa8b 	bl	a1b0 <digitalWrite>
    digitalWrite(OUT3, HIGH);
    3c9a:	2101      	movs	r1, #1
    3c9c:	2014      	movs	r0, #20
    3c9e:	f006 fa87 	bl	a1b0 <digitalWrite>
    digitalWrite(OUT4, HIGH);
    3ca2:	2101      	movs	r1, #1
    3ca4:	2015      	movs	r0, #21
    3ca6:	f006 fa83 	bl	a1b0 <digitalWrite>
    analogWrite(OUT5, 255);
    3caa:	21ff      	movs	r1, #255	; 0xff
    3cac:	2016      	movs	r0, #22
    3cae:	f006 f903 	bl	9eb8 <analogWrite>
    analogWrite(OUT6, 255);
    3cb2:	21ff      	movs	r1, #255	; 0xff
    3cb4:	2017      	movs	r0, #23
    3cb6:	f006 f8ff 	bl	9eb8 <analogWrite>
    analogWrite(OUT7, 255);
    3cba:	21ff      	movs	r1, #255	; 0xff
    3cbc:	2005      	movs	r0, #5
    3cbe:	f006 f8fb 	bl	9eb8 <analogWrite>
    analogWrite(OUT8, 255);
    3cc2:	21ff      	movs	r1, #255	; 0xff
    3cc4:	2006      	movs	r0, #6
    3cc6:	f006 f8f7 	bl	9eb8 <analogWrite>
    outputstate++;
    3cca:	6823      	ldr	r3, [r4, #0]
    3ccc:	3301      	adds	r3, #1
  if (outputstate > 10) {
    3cce:	2b0a      	cmp	r3, #10
    outputstate = 0;
    3cd0:	bfc8      	it	gt
    3cd2:	2300      	movgt	r3, #0
    3cd4:	6023      	str	r3, [r4, #0]
}
    3cd6:	bd10      	pop	{r4, pc}
    digitalWrite(OUT1, LOW);
    3cd8:	2100      	movs	r1, #0
    3cda:	200b      	movs	r0, #11
    3cdc:	f006 fa68 	bl	a1b0 <digitalWrite>
    digitalWrite(OUT2, LOW);
    3ce0:	2100      	movs	r1, #0
    3ce2:	200c      	movs	r0, #12
    3ce4:	f006 fa64 	bl	a1b0 <digitalWrite>
    digitalWrite(OUT3, LOW);
    3ce8:	2100      	movs	r1, #0
    3cea:	2014      	movs	r0, #20
    3cec:	f006 fa60 	bl	a1b0 <digitalWrite>
    digitalWrite(OUT4, LOW);
    3cf0:	2100      	movs	r1, #0
    3cf2:	2015      	movs	r0, #21
    3cf4:	f006 fa5c 	bl	a1b0 <digitalWrite>
    analogWrite(OUT5, 0);
    3cf8:	2100      	movs	r1, #0
    3cfa:	2016      	movs	r0, #22
    3cfc:	f006 f8dc 	bl	9eb8 <analogWrite>
    analogWrite(OUT6, 0);
    3d00:	2100      	movs	r1, #0
    3d02:	2017      	movs	r0, #23
    3d04:	f006 f8d8 	bl	9eb8 <analogWrite>
    analogWrite(OUT7, 0);
    3d08:	2100      	movs	r1, #0
    3d0a:	2005      	movs	r0, #5
    3d0c:	f006 f8d4 	bl	9eb8 <analogWrite>
    analogWrite(OUT8, 0);
    3d10:	2100      	movs	r1, #0
    3d12:	2006      	movs	r0, #6
    3d14:	f006 f8d0 	bl	9eb8 <analogWrite>
    outputstate++;
    3d18:	6823      	ldr	r3, [r4, #0]
    3d1a:	3301      	adds	r3, #1
  if (outputstate > 10) {
    3d1c:	2b0a      	cmp	r3, #10
    outputstate = 0;
    3d1e:	bfc8      	it	gt
    3d20:	2300      	movgt	r3, #0
    3d22:	6023      	str	r3, [r4, #0]
}
    3d24:	bd10      	pop	{r4, pc}
    3d26:	bf00      	nop
    3d28:	1fffd9ac 	.word	0x1fffd9ac

00003d2c <dashupdate()>:
void dashupdate() {
    3d2c:	b530      	push	{r4, r5, lr}
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
    3d2e:	48af      	ldr	r0, [pc, #700]	; (3fec <dashupdate()+0x2c0>)
    3d30:	b083      	sub	sp, #12
    3d32:	2109      	movs	r1, #9
    3d34:	f006 fd82 	bl	a83c <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3d38:	2022      	movs	r0, #34	; 0x22
    3d3a:	f006 fd03 	bl	a744 <serial2_putchar>
  if (settings.ESSmode == 1) {
    3d3e:	4bac      	ldr	r3, [pc, #688]	; (3ff0 <dashupdate()+0x2c4>)
    3d40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    3d44:	2b01      	cmp	r3, #1
    switch (bmsstatus) {
    3d46:	4bab      	ldr	r3, [pc, #684]	; (3ff4 <dashupdate()+0x2c8>)
    3d48:	781b      	ldrb	r3, [r3, #0]
  if (settings.ESSmode == 1) {
    3d4a:	d009      	beq.n	3d60 <dashupdate()+0x34>
    switch (bmsstatus) {
    3d4c:	2b05      	cmp	r3, #5
    3d4e:	d810      	bhi.n	3d72 <dashupdate()+0x46>
    3d50:	e8df f013 	tbh	[pc, r3, lsl #1]
    3d54:	01370132 	.word	0x01370132
    3d58:	0141013c 	.word	0x0141013c
    3d5c:	000b012d 	.word	0x000b012d
    switch (bmsstatus) {
    3d60:	2b00      	cmp	r3, #0
    3d62:	f000 813d 	beq.w	3fe0 <dashupdate()+0x2b4>
    3d66:	2b05      	cmp	r3, #5
    3d68:	d103      	bne.n	3d72 <dashupdate()+0x46>
					{ serial2_write(buffer, size); return size; }
    3d6a:	48a3      	ldr	r0, [pc, #652]	; (3ff8 <dashupdate()+0x2cc>)
    3d6c:	2107      	movs	r1, #7
    3d6e:	f006 fd65 	bl	a83c <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3d72:	2022      	movs	r0, #34	; 0x22
    3d74:	f006 fce6 	bl	a744 <serial2_putchar>
    3d78:	20ff      	movs	r0, #255	; 0xff
    3d7a:	f006 fce3 	bl	a744 <serial2_putchar>
    3d7e:	20ff      	movs	r0, #255	; 0xff
    3d80:	f006 fce0 	bl	a744 <serial2_putchar>
  Serial2.print(SOC);
    3d84:	4c9d      	ldr	r4, [pc, #628]	; (3ffc <dashupdate()+0x2d0>)
    3d86:	20ff      	movs	r0, #255	; 0xff
    3d88:	f006 fcdc 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3d8c:	489c      	ldr	r0, [pc, #624]	; (4000 <dashupdate()+0x2d4>)
    3d8e:	2108      	movs	r1, #8
    3d90:	f006 fd54 	bl	a83c <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    3d94:	6821      	ldr	r1, [r4, #0]
    3d96:	489b      	ldr	r0, [pc, #620]	; (4004 <dashupdate()+0x2d8>)
    3d98:	f005 fb30 	bl	93fc <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3d9c:	20ff      	movs	r0, #255	; 0xff
    3d9e:	f006 fcd1 	bl	a744 <serial2_putchar>
    3da2:	20ff      	movs	r0, #255	; 0xff
    3da4:	f006 fcce 	bl	a744 <serial2_putchar>
    3da8:	20ff      	movs	r0, #255	; 0xff
    3daa:	f006 fccb 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3dae:	4896      	ldr	r0, [pc, #600]	; (4008 <dashupdate()+0x2dc>)
    3db0:	2109      	movs	r1, #9
    3db2:	f006 fd43 	bl	a83c <serial2_write>
    3db6:	6821      	ldr	r1, [r4, #0]
    3db8:	4892      	ldr	r0, [pc, #584]	; (4004 <dashupdate()+0x2d8>)
    3dba:	f005 fb1f 	bl	93fc <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3dbe:	20ff      	movs	r0, #255	; 0xff
    3dc0:	f006 fcc0 	bl	a744 <serial2_putchar>
    3dc4:	20ff      	movs	r0, #255	; 0xff
    3dc6:	f006 fcbd 	bl	a744 <serial2_putchar>
    3dca:	20ff      	movs	r0, #255	; 0xff
    3dcc:	f006 fcba 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3dd0:	488e      	ldr	r0, [pc, #568]	; (400c <dashupdate()+0x2e0>)
    3dd2:	210c      	movs	r1, #12
    3dd4:	f006 fd32 	bl	a83c <serial2_write>
  Serial2.print(currentact / 100, 0);
    3dd8:	4b8d      	ldr	r3, [pc, #564]	; (4010 <dashupdate()+0x2e4>)
    3dda:	498e      	ldr	r1, [pc, #568]	; (4014 <dashupdate()+0x2e8>)
    3ddc:	6818      	ldr	r0, [r3, #0]
    3dde:	f008 ffed 	bl	cdbc <__aeabi_fdiv>
    3de2:	f008 fd13 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3de6:	2400      	movs	r4, #0
    3de8:	4602      	mov	r2, r0
    3dea:	460b      	mov	r3, r1
    3dec:	9400      	str	r4, [sp, #0]
    3dee:	4885      	ldr	r0, [pc, #532]	; (4004 <dashupdate()+0x2d8>)
    3df0:	f005 fb2e 	bl	9450 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3df4:	20ff      	movs	r0, #255	; 0xff
    3df6:	f006 fca5 	bl	a744 <serial2_putchar>
    3dfa:	20ff      	movs	r0, #255	; 0xff
    3dfc:	f006 fca2 	bl	a744 <serial2_putchar>
    3e00:	20ff      	movs	r0, #255	; 0xff
    3e02:	f006 fc9f 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3e06:	2109      	movs	r1, #9
    3e08:	4883      	ldr	r0, [pc, #524]	; (4018 <dashupdate()+0x2ec>)
    3e0a:	f006 fd17 	bl	a83c <serial2_write>
  Serial2.print(bms.getAvgTemperature(), 0);
    3e0e:	4883      	ldr	r0, [pc, #524]	; (401c <dashupdate()+0x2f0>)
    3e10:	f7fd f860 	bl	ed4 <BMSModuleManager::getAvgTemperature()>
    3e14:	f008 fcfa 	bl	c80c <__aeabi_f2d>
    3e18:	9400      	str	r4, [sp, #0]
    3e1a:	4602      	mov	r2, r0
    3e1c:	460b      	mov	r3, r1
    3e1e:	4879      	ldr	r0, [pc, #484]	; (4004 <dashupdate()+0x2d8>)
    3e20:	f005 fb16 	bl	9450 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3e24:	20ff      	movs	r0, #255	; 0xff
    3e26:	f006 fc8d 	bl	a744 <serial2_putchar>
    3e2a:	20ff      	movs	r0, #255	; 0xff
    3e2c:	f006 fc8a 	bl	a744 <serial2_putchar>
    3e30:	20ff      	movs	r0, #255	; 0xff
    3e32:	f006 fc87 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3e36:	210c      	movs	r1, #12
    3e38:	4879      	ldr	r0, [pc, #484]	; (4020 <dashupdate()+0x2f4>)
    3e3a:	f006 fcff 	bl	a83c <serial2_write>
  Serial2.print(bms.getLowTemperature(), 0);
    3e3e:	4877      	ldr	r0, [pc, #476]	; (401c <dashupdate()+0x2f0>)
    3e40:	f7fd f8b2 	bl	fa8 <BMSModuleManager::getLowTemperature()>
    3e44:	f008 fce2 	bl	c80c <__aeabi_f2d>
    3e48:	9400      	str	r4, [sp, #0]
    3e4a:	4602      	mov	r2, r0
    3e4c:	460b      	mov	r3, r1
    3e4e:	486d      	ldr	r0, [pc, #436]	; (4004 <dashupdate()+0x2d8>)
    3e50:	f005 fafe 	bl	9450 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3e54:	20ff      	movs	r0, #255	; 0xff
    3e56:	f006 fc75 	bl	a744 <serial2_putchar>
    3e5a:	20ff      	movs	r0, #255	; 0xff
    3e5c:	f006 fc72 	bl	a744 <serial2_putchar>
    3e60:	20ff      	movs	r0, #255	; 0xff
    3e62:	f006 fc6f 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3e66:	210d      	movs	r1, #13
    3e68:	486e      	ldr	r0, [pc, #440]	; (4024 <dashupdate()+0x2f8>)
    3e6a:	f006 fce7 	bl	a83c <serial2_write>
  Serial2.print(bms.getHighTemperature(), 0);
    3e6e:	486b      	ldr	r0, [pc, #428]	; (401c <dashupdate()+0x2f0>)
    3e70:	f7fd f898 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    3e74:	f008 fcca 	bl	c80c <__aeabi_f2d>
    3e78:	9400      	str	r4, [sp, #0]
    3e7a:	4602      	mov	r2, r0
    3e7c:	460b      	mov	r3, r1
    3e7e:	4861      	ldr	r0, [pc, #388]	; (4004 <dashupdate()+0x2d8>)
    3e80:	f005 fae6 	bl	9450 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3e84:	20ff      	movs	r0, #255	; 0xff
    3e86:	f006 fc5d 	bl	a744 <serial2_putchar>
    3e8a:	20ff      	movs	r0, #255	; 0xff
    3e8c:	f006 fc5a 	bl	a744 <serial2_putchar>
    3e90:	20ff      	movs	r0, #255	; 0xff
    3e92:	f006 fc57 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3e96:	2109      	movs	r1, #9
    3e98:	4863      	ldr	r0, [pc, #396]	; (4028 <dashupdate()+0x2fc>)
    3e9a:	f006 fccf 	bl	a83c <serial2_write>
  Serial2.print(bms.getPackVoltage() * 10, 0);
    3e9e:	485f      	ldr	r0, [pc, #380]	; (401c <dashupdate()+0x2f0>)
    3ea0:	f7fc ffec 	bl	e7c <BMSModuleManager::getPackVoltage()>
    3ea4:	4961      	ldr	r1, [pc, #388]	; (402c <dashupdate()+0x300>)
    3ea6:	f008 fed5 	bl	cc54 <__aeabi_fmul>
    3eaa:	f008 fcaf 	bl	c80c <__aeabi_f2d>
    3eae:	9400      	str	r4, [sp, #0]
    3eb0:	4602      	mov	r2, r0
    3eb2:	460b      	mov	r3, r1
    3eb4:	4853      	ldr	r0, [pc, #332]	; (4004 <dashupdate()+0x2d8>)
    3eb6:	f005 facb 	bl	9450 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3eba:	20ff      	movs	r0, #255	; 0xff
    3ebc:	f006 fc42 	bl	a744 <serial2_putchar>
    3ec0:	20ff      	movs	r0, #255	; 0xff
    3ec2:	f006 fc3f 	bl	a744 <serial2_putchar>
    3ec6:	20ff      	movs	r0, #255	; 0xff
    3ec8:	f006 fc3c 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3ecc:	210c      	movs	r1, #12
    3ece:	4858      	ldr	r0, [pc, #352]	; (4030 <dashupdate()+0x304>)
    3ed0:	f006 fcb4 	bl	a83c <serial2_write>
  Serial2.print(bms.getLowCellVolt() * 1000, 0);
    3ed4:	4851      	ldr	r0, [pc, #324]	; (401c <dashupdate()+0x2f0>)
    3ed6:	f7fc ff83 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    3eda:	4956      	ldr	r1, [pc, #344]	; (4034 <dashupdate()+0x308>)
    3edc:	f008 feba 	bl	cc54 <__aeabi_fmul>
    3ee0:	f008 fc94 	bl	c80c <__aeabi_f2d>
    3ee4:	9400      	str	r4, [sp, #0]
    3ee6:	4602      	mov	r2, r0
    3ee8:	460b      	mov	r3, r1
    3eea:	4846      	ldr	r0, [pc, #280]	; (4004 <dashupdate()+0x2d8>)
    3eec:	f005 fab0 	bl	9450 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3ef0:	20ff      	movs	r0, #255	; 0xff
    3ef2:	f006 fc27 	bl	a744 <serial2_putchar>
    3ef6:	20ff      	movs	r0, #255	; 0xff
    3ef8:	f006 fc24 	bl	a744 <serial2_putchar>
    3efc:	20ff      	movs	r0, #255	; 0xff
    3efe:	f006 fc21 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3f02:	210d      	movs	r1, #13
    3f04:	484c      	ldr	r0, [pc, #304]	; (4038 <dashupdate()+0x30c>)
    3f06:	f006 fc99 	bl	a83c <serial2_write>
  Serial2.print(bms.getHighCellVolt() * 1000, 0);
    3f0a:	4844      	ldr	r0, [pc, #272]	; (401c <dashupdate()+0x2f0>)
    3f0c:	f7fc ff90 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    3f10:	4948      	ldr	r1, [pc, #288]	; (4034 <dashupdate()+0x308>)
    3f12:	f008 fe9f 	bl	cc54 <__aeabi_fmul>
    3f16:	f008 fc79 	bl	c80c <__aeabi_f2d>
    3f1a:	9400      	str	r4, [sp, #0]
    3f1c:	4602      	mov	r2, r0
    3f1e:	460b      	mov	r3, r1
    3f20:	4838      	ldr	r0, [pc, #224]	; (4004 <dashupdate()+0x2d8>)
    3f22:	f005 fa95 	bl	9450 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3f26:	20ff      	movs	r0, #255	; 0xff
    3f28:	f006 fc0c 	bl	a744 <serial2_putchar>
    3f2c:	20ff      	movs	r0, #255	; 0xff
    3f2e:	f006 fc09 	bl	a744 <serial2_putchar>
    3f32:	20ff      	movs	r0, #255	; 0xff
    3f34:	f006 fc06 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3f38:	4840      	ldr	r0, [pc, #256]	; (403c <dashupdate()+0x310>)
    3f3a:	2109      	movs	r1, #9
    3f3c:	f006 fc7e 	bl	a83c <serial2_write>
  Serial2.print(firmver);
    3f40:	4b3f      	ldr	r3, [pc, #252]	; (4040 <dashupdate()+0x314>)
	size_t print(int n)				{ return print((long)n); }
    3f42:	4830      	ldr	r0, [pc, #192]	; (4004 <dashupdate()+0x2d8>)
    3f44:	6819      	ldr	r1, [r3, #0]
    3f46:	f005 fa59 	bl	93fc <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3f4a:	20ff      	movs	r0, #255	; 0xff
    3f4c:	f006 fbfa 	bl	a744 <serial2_putchar>
    3f50:	20ff      	movs	r0, #255	; 0xff
    3f52:	f006 fbf7 	bl	a744 <serial2_putchar>
    3f56:	20ff      	movs	r0, #255	; 0xff
    3f58:	f006 fbf4 	bl	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3f5c:	210e      	movs	r1, #14
    3f5e:	4839      	ldr	r0, [pc, #228]	; (4044 <dashupdate()+0x318>)
    3f60:	f006 fc6c 	bl	a83c <serial2_write>
  Serial2.print((bms.getHighCellVolt() - bms.getLowCellVolt()) * 1000, 0);
    3f64:	482d      	ldr	r0, [pc, #180]	; (401c <dashupdate()+0x2f0>)
    3f66:	f7fc ff63 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    3f6a:	4605      	mov	r5, r0
    3f6c:	482b      	ldr	r0, [pc, #172]	; (401c <dashupdate()+0x2f0>)
    3f6e:	f7fc ff37 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    3f72:	4601      	mov	r1, r0
    3f74:	4628      	mov	r0, r5
    3f76:	f008 fd63 	bl	ca40 <__aeabi_fsub>
    3f7a:	492e      	ldr	r1, [pc, #184]	; (4034 <dashupdate()+0x308>)
    3f7c:	f008 fe6a 	bl	cc54 <__aeabi_fmul>
    3f80:	f008 fc44 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3f84:	9400      	str	r4, [sp, #0]
    3f86:	4602      	mov	r2, r0
    3f88:	460b      	mov	r3, r1
    3f8a:	481e      	ldr	r0, [pc, #120]	; (4004 <dashupdate()+0x2d8>)
    3f8c:	f005 fa60 	bl	9450 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3f90:	20ff      	movs	r0, #255	; 0xff
    3f92:	f006 fbd7 	bl	a744 <serial2_putchar>
    3f96:	20ff      	movs	r0, #255	; 0xff
    3f98:	f006 fbd4 	bl	a744 <serial2_putchar>
    3f9c:	20ff      	movs	r0, #255	; 0xff
    3f9e:	f006 fbd1 	bl	a744 <serial2_putchar>
    3fa2:	20ff      	movs	r0, #255	; 0xff
}
    3fa4:	b003      	add	sp, #12
    3fa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    3faa:	f006 bbcb 	b.w	a744 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3fae:	4826      	ldr	r0, [pc, #152]	; (4048 <dashupdate()+0x31c>)
    3fb0:	210b      	movs	r1, #11
    3fb2:	f006 fc43 	bl	a83c <serial2_write>
    3fb6:	e6dc      	b.n	3d72 <dashupdate()+0x46>
    3fb8:	4824      	ldr	r0, [pc, #144]	; (404c <dashupdate()+0x320>)
    3fba:	2106      	movs	r1, #6
    3fbc:	f006 fc3e 	bl	a83c <serial2_write>
    3fc0:	e6d7      	b.n	3d72 <dashupdate()+0x46>
    3fc2:	4823      	ldr	r0, [pc, #140]	; (4050 <dashupdate()+0x324>)
    3fc4:	2107      	movs	r1, #7
    3fc6:	f006 fc39 	bl	a83c <serial2_write>
    3fca:	e6d2      	b.n	3d72 <dashupdate()+0x46>
    3fcc:	4821      	ldr	r0, [pc, #132]	; (4054 <dashupdate()+0x328>)
    3fce:	2107      	movs	r1, #7
    3fd0:	f006 fc34 	bl	a83c <serial2_write>
    3fd4:	e6cd      	b.n	3d72 <dashupdate()+0x46>
    3fd6:	4820      	ldr	r0, [pc, #128]	; (4058 <dashupdate()+0x32c>)
    3fd8:	2108      	movs	r1, #8
    3fda:	f006 fc2f 	bl	a83c <serial2_write>
    3fde:	e6c8      	b.n	3d72 <dashupdate()+0x46>
    3fe0:	481e      	ldr	r0, [pc, #120]	; (405c <dashupdate()+0x330>)
    3fe2:	2108      	movs	r1, #8
    3fe4:	f006 fc2a 	bl	a83c <serial2_write>
    3fe8:	e6c3      	b.n	3d72 <dashupdate()+0x46>
    3fea:	bf00      	nop
    3fec:	0001423c 	.word	0x0001423c
    3ff0:	1fffd9bc 	.word	0x1fffd9bc
    3ff4:	1fffd708 	.word	0x1fffd708
    3ff8:	00013f10 	.word	0x00013f10
    3ffc:	1fff8824 	.word	0x1fff8824
    4000:	00014254 	.word	0x00014254
    4004:	1fff88bc 	.word	0x1fff88bc
    4008:	00014260 	.word	0x00014260
    400c:	0001426c 	.word	0x0001426c
    4010:	1fffd8a0 	.word	0x1fffd8a0
    4014:	42c80000 	.word	0x42c80000
    4018:	0001427c 	.word	0x0001427c
    401c:	1fff91e4 	.word	0x1fff91e4
    4020:	00014288 	.word	0x00014288
    4024:	00014298 	.word	0x00014298
    4028:	000142a8 	.word	0x000142a8
    402c:	41200000 	.word	0x41200000
    4030:	000142b4 	.word	0x000142b4
    4034:	447a0000 	.word	0x447a0000
    4038:	000142c4 	.word	0x000142c4
    403c:	000142d4 	.word	0x000142d4
    4040:	1fff8854 	.word	0x1fff8854
    4044:	000142e0 	.word	0x000142e0
    4048:	00013ef0 	.word	0x00013ef0
    404c:	00013ee0 	.word	0x00013ee0
    4050:	00013ee8 	.word	0x00013ee8
    4054:	00013efc 	.word	0x00013efc
    4058:	00013f04 	.word	0x00013f04
    405c:	00014248 	.word	0x00014248

00004060 <chargercomms()>:
void chargercomms() {
    4060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Elcon) {
    4062:	4d8b      	ldr	r5, [pc, #556]	; (4290 <chargercomms()+0x230>)
    4064:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    4068:	2b04      	cmp	r3, #4
    406a:	d007      	beq.n	407c <chargercomms()+0x1c>
  if (settings.chargertype == Eltek) {
    406c:	2b03      	cmp	r3, #3
    406e:	d033      	beq.n	40d8 <chargercomms()+0x78>
  if (settings.chargertype == BrusaNLG5) {
    4070:	2b01      	cmp	r3, #1
    4072:	d05b      	beq.n	412c <chargercomms()+0xcc>
  if (settings.chargertype == ChevyVolt) {
    4074:	2b02      	cmp	r3, #2
    4076:	f000 80cd 	beq.w	4214 <chargercomms()+0x1b4>
}
    407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    407c:	4c85      	ldr	r4, [pc, #532]	; (4294 <chargercomms()+0x234>)
    407e:	4a86      	ldr	r2, [pc, #536]	; (4298 <chargercomms()+0x238>)
    msg.ext = 1;
    4080:	88e3      	ldrh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4082:	6da8      	ldr	r0, [r5, #88]	; 0x58
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    4084:	6022      	str	r2, [r4, #0]
    msg.ext = 1;
    4086:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    408a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    408e:	f043 0301 	orr.w	r3, r3, #1
    4092:	80e3      	strh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4094:	f008 fd8a 	bl	cbac <__aeabi_i2f>
    4098:	69a9      	ldr	r1, [r5, #24]
    409a:	f008 fddb 	bl	cc54 <__aeabi_fmul>
    409e:	497f      	ldr	r1, [pc, #508]	; (429c <chargercomms()+0x23c>)
    40a0:	f008 fdd8 	bl	cc54 <__aeabi_fmul>
    40a4:	f008 ffc2 	bl	d02c <__aeabi_f2uiz>
    msg.buf[2] = highByte(chargecurrent / ncharger);
    40a8:	4b7d      	ldr	r3, [pc, #500]	; (42a0 <chargercomms()+0x240>)
    40aa:	4a7e      	ldr	r2, [pc, #504]	; (42a4 <chargercomms()+0x244>)
    40ac:	881b      	ldrh	r3, [r3, #0]
    40ae:	6812      	ldr	r2, [r2, #0]
    40b0:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    40b4:	ba40      	rev16	r0, r0
    msg.buf[2] = highByte(chargecurrent / ncharger);
    40b6:	ba5b      	rev16	r3, r3
    msg.buf[4] = 0x00;
    40b8:	2600      	movs	r6, #0
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    40ba:	8120      	strh	r0, [r4, #8]
    Can0.write(msg);
    40bc:	4621      	mov	r1, r4
    40be:	487a      	ldr	r0, [pc, #488]	; (42a8 <chargercomms()+0x248>)
    msg.buf[2] = highByte(chargecurrent / ncharger);
    40c0:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = 0x00;
    40c2:	60e6      	str	r6, [r4, #12]
    Can0.write(msg);
    40c4:	f004 f8d2 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    msg.ext = 0;
    40c8:	79a2      	ldrb	r2, [r4, #6]
  if (settings.chargertype == Eltek) {
    40ca:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    msg.ext = 0;
    40ce:	f366 0200 	bfi	r2, r6, #0, #1
  if (settings.chargertype == Eltek) {
    40d2:	2b03      	cmp	r3, #3
    msg.ext = 0;
    40d4:	71a2      	strb	r2, [r4, #6]
  if (settings.chargertype == Eltek) {
    40d6:	d1cb      	bne.n	4070 <chargercomms()+0x10>
    msg.id = 0x2FF;  //broadcast to all Elteks
    40d8:	4c6e      	ldr	r4, [pc, #440]	; (4294 <chargercomms()+0x234>)
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    40da:	6da8      	ldr	r0, [r5, #88]	; 0x58
    msg.buf[2] = highByte(1000);
    40dc:	72a3      	strb	r3, [r4, #10]
    msg.id = 0x2FF;  //broadcast to all Elteks
    40de:	f240 22ff 	movw	r2, #767	; 0x2ff
    msg.buf[0] = 0x01;
    40e2:	f64e 0301 	movw	r3, #59393	; 0xe801
    msg.id = 0x2FF;  //broadcast to all Elteks
    40e6:	6022      	str	r2, [r4, #0]
    msg.len = 7;
    40e8:	2207      	movs	r2, #7
    40ea:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x01;
    40ec:	8123      	strh	r3, [r4, #8]
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    40ee:	f008 fd5d 	bl	cbac <__aeabi_i2f>
    40f2:	69a9      	ldr	r1, [r5, #24]
    40f4:	f008 fdae 	bl	cc54 <__aeabi_fmul>
    40f8:	4968      	ldr	r1, [pc, #416]	; (429c <chargercomms()+0x23c>)
    40fa:	f008 fdab 	bl	cc54 <__aeabi_fmul>
    40fe:	f008 ff95 	bl	d02c <__aeabi_f2uiz>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    4102:	4a68      	ldr	r2, [pc, #416]	; (42a4 <chargercomms()+0x244>)
    4104:	4b66      	ldr	r3, [pc, #408]	; (42a0 <chargercomms()+0x240>)
    4106:	6811      	ldr	r1, [r2, #0]
    4108:	881b      	ldrh	r3, [r3, #0]
    410a:	fb93 f3f1 	sdiv	r3, r3, r1
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    410e:	b280      	uxth	r0, r0
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4110:	0a02      	lsrs	r2, r0, #8
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4112:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    4114:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    4116:	4864      	ldr	r0, [pc, #400]	; (42a8 <chargercomms()+0x248>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4118:	7322      	strb	r2, [r4, #12]
    msg.buf[6] = highByte(chargecurrent / ncharger);
    411a:	121b      	asrs	r3, r3, #8
    Can0.write(msg);
    411c:	4621      	mov	r1, r4
    msg.buf[6] = highByte(chargecurrent / ncharger);
    411e:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    4120:	f004 f8a4 	bl	826c <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == BrusaNLG5) {
    4124:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    4128:	2b01      	cmp	r3, #1
    412a:	d1a3      	bne.n	4074 <chargercomms()+0x14>
    msg.id = chargerid1;
    412c:	4b5f      	ldr	r3, [pc, #380]	; (42ac <chargercomms()+0x24c>)
    412e:	4c59      	ldr	r4, [pc, #356]	; (4294 <chargercomms()+0x234>)
    4130:	6819      	ldr	r1, [r3, #0]
    4132:	6021      	str	r1, [r4, #0]
    msg.len = 7;
    4134:	2207      	movs	r2, #7
    msg.buf[0] = 0x80;
    4136:	2380      	movs	r3, #128	; 0x80
    if (digitalRead(IN2) == LOW)  //Gen OFF
    4138:	2010      	movs	r0, #16
    msg.len = 7;
    413a:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x80;
    413c:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    413e:	f006 f85d 	bl	a1fc <digitalRead>
    4142:	2800      	cmp	r0, #0
    4144:	f000 8096 	beq.w	4274 <chargercomms()+0x214>
      msg.buf[1] = highByte(maxac2 * 10);
    4148:	4b59      	ldr	r3, [pc, #356]	; (42b0 <chargercomms()+0x250>)
    414a:	681b      	ldr	r3, [r3, #0]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    414c:	4e54      	ldr	r6, [pc, #336]	; (42a0 <chargercomms()+0x240>)
    414e:	4f55      	ldr	r7, [pc, #340]	; (42a4 <chargercomms()+0x244>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    4150:	6da8      	ldr	r0, [r5, #88]	; 0x58
      msg.buf[1] = highByte(maxac2 * 10);
    4152:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4156:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    4158:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    415a:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[1] = highByte(maxac1 * 10);
    415e:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = lowByte(maxac1 * 10);
    4160:	72a2      	strb	r2, [r4, #10]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    4162:	8833      	ldrh	r3, [r6, #0]
    4164:	683a      	ldr	r2, [r7, #0]
    4166:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    416a:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    416c:	121b      	asrs	r3, r3, #8
    416e:	7363      	strb	r3, [r4, #13]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    4170:	f008 fd1c 	bl	cbac <__aeabi_i2f>
    4174:	69a9      	ldr	r1, [r5, #24]
    4176:	f008 fd6d 	bl	cc54 <__aeabi_fmul>
    417a:	4b4e      	ldr	r3, [pc, #312]	; (42b4 <chargercomms()+0x254>)
    417c:	6819      	ldr	r1, [r3, #0]
    417e:	f008 fc5f 	bl	ca40 <__aeabi_fsub>
    4182:	4946      	ldr	r1, [pc, #280]	; (429c <chargercomms()+0x23c>)
    4184:	f008 fd66 	bl	cc54 <__aeabi_fmul>
    4188:	f008 ff50 	bl	d02c <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    418c:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    418e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    4192:	4940      	ldr	r1, [pc, #256]	; (4294 <chargercomms()+0x234>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    4194:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    4196:	4844      	ldr	r0, [pc, #272]	; (42a8 <chargercomms()+0x248>)
    4198:	f004 f868 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    419c:	2002      	movs	r0, #2
    419e:	f006 f897 	bl	a2d0 <delay>
    msg.id = chargerid2;
    41a2:	4b45      	ldr	r3, [pc, #276]	; (42b8 <chargercomms()+0x258>)
    41a4:	681b      	ldr	r3, [r3, #0]
    41a6:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    41a8:	2307      	movs	r3, #7
    41aa:	71e3      	strb	r3, [r4, #7]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    41ac:	2010      	movs	r0, #16
    msg.buf[0] = 0x80;
    41ae:	2380      	movs	r3, #128	; 0x80
    41b0:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    41b2:	f006 f823 	bl	a1fc <digitalRead>
    41b6:	2800      	cmp	r0, #0
    41b8:	d168      	bne.n	428c <chargercomms()+0x22c>
      msg.buf[1] = highByte(maxac1 * 10);
    41ba:	4b40      	ldr	r3, [pc, #256]	; (42bc <chargercomms()+0x25c>)
      msg.buf[1] = highByte(maxac2 * 10);
    41bc:	681b      	ldr	r3, [r3, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    41be:	6da8      	ldr	r0, [r5, #88]	; 0x58
      msg.buf[1] = highByte(maxac2 * 10);
    41c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    41c4:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    41c6:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    41c8:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[2] = lowByte(maxac1 * 10);
    41cc:	72a2      	strb	r2, [r4, #10]
      msg.buf[1] = highByte(maxac1 * 10);
    41ce:	7263      	strb	r3, [r4, #9]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    41d0:	f008 fcec 	bl	cbac <__aeabi_i2f>
    41d4:	69a9      	ldr	r1, [r5, #24]
    41d6:	f008 fd3d 	bl	cc54 <__aeabi_fmul>
    41da:	4b39      	ldr	r3, [pc, #228]	; (42c0 <chargercomms()+0x260>)
    41dc:	6819      	ldr	r1, [r3, #0]
    41de:	f008 fc2f 	bl	ca40 <__aeabi_fsub>
    41e2:	492e      	ldr	r1, [pc, #184]	; (429c <chargercomms()+0x23c>)
    41e4:	f008 fd36 	bl	cc54 <__aeabi_fmul>
    41e8:	f008 ff20 	bl	d02c <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    41ec:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    41ee:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[5] = highByte(chargecurrent / ncharger);
    41f2:	683a      	ldr	r2, [r7, #0]
    41f4:	8833      	ldrh	r3, [r6, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    41f6:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    41f8:	fb93 f3f2 	sdiv	r3, r3, r2
    Can0.write(msg);
    41fc:	4925      	ldr	r1, [pc, #148]	; (4294 <chargercomms()+0x234>)
    41fe:	482a      	ldr	r0, [pc, #168]	; (42a8 <chargercomms()+0x248>)
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    4200:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    4202:	121a      	asrs	r2, r3, #8
    4204:	7362      	strb	r2, [r4, #13]
    Can0.write(msg);
    4206:	f004 f831 	bl	826c <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == ChevyVolt) {
    420a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    420e:	2b02      	cmp	r3, #2
    4210:	f47f af33 	bne.w	407a <chargercomms()+0x1a>
    msg.id = 0x30E;
    4214:	4c1f      	ldr	r4, [pc, #124]	; (4294 <chargercomms()+0x234>)
    Can0.write(msg);
    4216:	4824      	ldr	r0, [pc, #144]	; (42a8 <chargercomms()+0x248>)
    msg.buf[0] = 0x02;  //only HV charging , 0x03 hv and 12V charging
    4218:	7223      	strb	r3, [r4, #8]
    msg.id = 0x30E;
    421a:	f240 320e 	movw	r2, #782	; 0x30e
    421e:	6022      	str	r2, [r4, #0]
    Can0.write(msg);
    4220:	4621      	mov	r1, r4
    msg.len = 1;
    4222:	2201      	movs	r2, #1
    4224:	71e2      	strb	r2, [r4, #7]
    Can0.write(msg);
    4226:	f004 f821 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    if ((chargecurrent * 2) > 255) {
    422a:	4b1d      	ldr	r3, [pc, #116]	; (42a0 <chargercomms()+0x240>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    422c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if ((chargecurrent * 2) > 255) {
    422e:	881b      	ldrh	r3, [r3, #0]
    4230:	005b      	lsls	r3, r3, #1
    4232:	2bff      	cmp	r3, #255	; 0xff
    msg.len = 4;
    4234:	f04f 0204 	mov.w	r2, #4
      msg.buf[1] = (chargecurrent * 2);
    4238:	bfd4      	ite	le
    423a:	b2db      	uxtble	r3, r3
      msg.buf[1] = 255;
    423c:	23ff      	movgt	r3, #255	; 0xff
    msg.id = 0x304;
    423e:	f44f 7141 	mov.w	r1, #772	; 0x304
    msg.len = 4;
    4242:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x40;  //fixed
    4244:	2240      	movs	r2, #64	; 0x40
    msg.id = 0x304;
    4246:	6021      	str	r1, [r4, #0]
    msg.buf[0] = 0x40;  //fixed
    4248:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = (chargecurrent * 2);
    424a:	7263      	strb	r3, [r4, #9]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    424c:	f008 fcae 	bl	cbac <__aeabi_i2f>
    4250:	69a9      	ldr	r1, [r5, #24]
    4252:	f008 fcff 	bl	cc54 <__aeabi_fmul>
    4256:	491b      	ldr	r1, [pc, #108]	; (42c4 <chargercomms()+0x264>)
    4258:	4605      	mov	r5, r0
    425a:	f008 feb7 	bl	cfcc <__aeabi_fcmpgt>
    425e:	b958      	cbnz	r0, 4278 <chargercomms()+0x218>
    4260:	2201      	movs	r2, #1
    4262:	2390      	movs	r3, #144	; 0x90
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    4264:	72a2      	strb	r2, [r4, #10]
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    4266:	72e3      	strb	r3, [r4, #11]
    Can0.write(msg);
    4268:	490a      	ldr	r1, [pc, #40]	; (4294 <chargercomms()+0x234>)
    426a:	480f      	ldr	r0, [pc, #60]	; (42a8 <chargercomms()+0x248>)
}
    426c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    4270:	f003 bffc 	b.w	826c <FlexCAN::write(CAN_message_t const&)>
      msg.buf[1] = highByte(maxac1 * 10);
    4274:	4b11      	ldr	r3, [pc, #68]	; (42bc <chargercomms()+0x25c>)
    4276:	e768      	b.n	414a <chargercomms()+0xea>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    4278:	4629      	mov	r1, r5
    427a:	4628      	mov	r0, r5
    427c:	f008 fbe2 	bl	ca44 <__addsf3>
    4280:	f008 fed4 	bl	d02c <__aeabi_f2uiz>
    4284:	f3c0 2207 	ubfx	r2, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    4288:	b2c3      	uxtb	r3, r0
    428a:	e7eb      	b.n	4264 <chargercomms()+0x204>
      msg.buf[1] = highByte(maxac2 * 10);
    428c:	4b08      	ldr	r3, [pc, #32]	; (42b0 <chargercomms()+0x250>)
    428e:	e795      	b.n	41bc <chargercomms()+0x15c>
    4290:	1fffd9bc 	.word	0x1fffd9bc
    4294:	1fffd914 	.word	0x1fffd914
    4298:	1806e5f4 	.word	0x1806e5f4
    429c:	41200000 	.word	0x41200000
    42a0:	1fffd714 	.word	0x1fffd714
    42a4:	1fff8860 	.word	0x1fff8860
    42a8:	1fffdad0 	.word	0x1fffdad0
    42ac:	1fff883c 	.word	0x1fff883c
    42b0:	1fff885c 	.word	0x1fff885c
    42b4:	1fffd71c 	.word	0x1fffd71c
    42b8:	1fff8840 	.word	0x1fff8840
    42bc:	1fff8858 	.word	0x1fff8858
    42c0:	1fffd718 	.word	0x1fffd718
    42c4:	43480000 	.word	0x43480000

000042c8 <getcheck(CAN_message_t&, int)>:
uint8_t getcheck(CAN_message_t &msg, int id) {
    42c8:	b530      	push	{r4, r5, lr}
  canmes[0] = msg.id >> 8;
    42ca:	8803      	ldrh	r3, [r0, #0]
  int meslen = msg.len + 1;  //remove one for crc and add two for id bytes
    42cc:	79c2      	ldrb	r2, [r0, #7]
uint8_t getcheck(CAN_message_t &msg, int id) {
    42ce:	b085      	sub	sp, #20
  canmes[0] = msg.id >> 8;
    42d0:	ba5b      	rev16	r3, r3
  for (int i = 0; i < (msg.len - 1); i++) {
    42d2:	2a01      	cmp	r2, #1
  canmes[0] = msg.id >> 8;
    42d4:	f8ad 3004 	strh.w	r3, [sp, #4]
uint8_t getcheck(CAN_message_t &msg, int id) {
    42d8:	460c      	mov	r4, r1
  int meslen = msg.len + 1;  //remove one for crc and add two for id bytes
    42da:	f102 0501 	add.w	r5, r2, #1
  for (int i = 0; i < (msg.len - 1); i++) {
    42de:	dd06      	ble.n	42ee <getcheck(CAN_message_t&, int)+0x26>
    canmes[i + 2] = msg.buf[i];
    42e0:	f100 0108 	add.w	r1, r0, #8
    42e4:	3a01      	subs	r2, #1
    42e6:	f10d 0006 	add.w	r0, sp, #6
    42ea:	f005 fb6f 	bl	99cc <memcpy>
  return (crc8.get_crc8(canmes, meslen, finalxor[id]));
    42ee:	4b04      	ldr	r3, [pc, #16]	; (4300 <getcheck(CAN_message_t&, int)+0x38>)
    42f0:	4804      	ldr	r0, [pc, #16]	; (4304 <getcheck(CAN_message_t&, int)+0x3c>)
    42f2:	5d1b      	ldrb	r3, [r3, r4]
    42f4:	462a      	mov	r2, r5
    42f6:	a901      	add	r1, sp, #4
    42f8:	f003 fae6 	bl	78c8 <CRC8::get_crc8(unsigned char const*, int, unsigned char)>
}
    42fc:	b005      	add	sp, #20
    42fe:	bd30      	pop	{r4, r5, pc}
    4300:	00015060 	.word	0x00015060
    4304:	1fffd7a0 	.word	0x1fffd7a0

00004308 <sendcommand()>:
{
    4308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (nextmes == 6) {
    430c:	4d68      	ldr	r5, [pc, #416]	; (44b0 <sendcommand()+0x1a8>)
    430e:	782b      	ldrb	r3, [r5, #0]
    4310:	2b06      	cmp	r3, #6
{
    4312:	b082      	sub	sp, #8
  if (nextmes == 6) {
    4314:	d06d      	beq.n	43f2 <sendcommand()+0xea>
  if (balancepauze == 1) {
    4316:	4b67      	ldr	r3, [pc, #412]	; (44b4 <sendcommand()+0x1ac>)
    4318:	4e67      	ldr	r6, [pc, #412]	; (44b8 <sendcommand()+0x1b0>)
    431a:	781b      	ldrb	r3, [r3, #0]
    431c:	4f67      	ldr	r7, [pc, #412]	; (44bc <sendcommand()+0x1b4>)
    431e:	2b00      	cmp	r3, #0
    4320:	d041      	beq.n	43a6 <sendcommand()+0x9e>
    balancecells = 0;
    4322:	f8df 819c 	ldr.w	r8, [pc, #412]	; 44c0 <sendcommand()+0x1b8>
  msg.id = 0x080 | (nextmes);
    4326:	7829      	ldrb	r1, [r5, #0]
    4328:	4c66      	ldr	r4, [pc, #408]	; (44c4 <sendcommand()+0x1bc>)
    balancecells = 0;
    432a:	2300      	movs	r3, #0
    432c:	f8c8 3000 	str.w	r3, [r8]
  msg.id = 0x080 | (nextmes);
    4330:	f041 0380 	orr.w	r3, r1, #128	; 0x80
    4334:	6023      	str	r3, [r4, #0]
  msg.len = 8;
    4336:	2308      	movs	r3, #8
    4338:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = 0xC7;
    433a:	f241 03c7 	movw	r3, #4295	; 0x10c7
    433e:	8123      	strh	r3, [r4, #8]
  if (testcycle < 3) {
    4340:	783b      	ldrb	r3, [r7, #0]
  msg.buf[2] = 0x00;  //balancing bits
    4342:	2200      	movs	r2, #0
  if (testcycle < 3) {
    4344:	2b02      	cmp	r3, #2
  msg.buf[2] = 0x00;  //balancing bits
    4346:	8162      	strh	r2, [r4, #10]
  if (testcycle < 3) {
    4348:	d820      	bhi.n	438c <sendcommand()+0x84>
  msg.buf[6] = mescycle << 4;
    434a:	7833      	ldrb	r3, [r6, #0]
    msg.buf[4] = 0x20;
    434c:	f04f 0220 	mov.w	r2, #32
  msg.buf[6] = mescycle << 4;
    4350:	ea4f 1303 	mov.w	r3, r3, lsl #4
    msg.buf[4] = 0x20;
    4354:	81a2      	strh	r2, [r4, #12]
  msg.buf[6] = mescycle << 4;
    4356:	b2db      	uxtb	r3, r3
  if (testcycle == 2) {
    4358:	d100      	bne.n	435c <sendcommand()+0x54>
    msg.buf[6] = msg.buf[6] + 0x04;
    435a:	3304      	adds	r3, #4
    435c:	73a3      	strb	r3, [r4, #14]
  msg.buf[7] = getcheck(msg, nextmes);
    435e:	4859      	ldr	r0, [pc, #356]	; (44c4 <sendcommand()+0x1bc>)
    4360:	f7ff ffb2 	bl	42c8 <getcheck(CAN_message_t&, int)>
    4364:	4603      	mov	r3, r0
    4366:	73e3      	strb	r3, [r4, #15]
  delay(2);
    4368:	2002      	movs	r0, #2
    436a:	f005 ffb1 	bl	a2d0 <delay>
  Can0.write(msg);
    436e:	4955      	ldr	r1, [pc, #340]	; (44c4 <sendcommand()+0x1bc>)
    4370:	4855      	ldr	r0, [pc, #340]	; (44c8 <sendcommand()+0x1c0>)
    4372:	f003 ff7b 	bl	826c <FlexCAN::write(CAN_message_t const&)>
  nextmes++;
    4376:	782b      	ldrb	r3, [r5, #0]
  if (bms.checkstatus() == true) {
    4378:	4854      	ldr	r0, [pc, #336]	; (44cc <sendcommand()+0x1c4>)
  nextmes++;
    437a:	3301      	adds	r3, #1
    437c:	702b      	strb	r3, [r5, #0]
  if (bms.checkstatus() == true) {
    437e:	f7fc fb99 	bl	ab4 <BMSModuleManager::checkstatus()>
    4382:	2800      	cmp	r0, #0
    4384:	d147      	bne.n	4416 <sendcommand()+0x10e>
}
    4386:	b002      	add	sp, #8
    4388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (balancecells == 1) {
    438c:	f8d8 2000 	ldr.w	r2, [r8]
  msg.buf[6] = mescycle << 4;
    4390:	7833      	ldrb	r3, [r6, #0]
      msg.buf[4] = 0x40;
    4392:	2a01      	cmp	r2, #1
    4394:	bf0c      	ite	eq
    4396:	2248      	moveq	r2, #72	; 0x48
    4398:	2240      	movne	r2, #64	; 0x40
  msg.buf[6] = mescycle << 4;
    439a:	011b      	lsls	r3, r3, #4
    439c:	7322      	strb	r2, [r4, #12]
    msg.buf[5] = 0x01;
    439e:	2201      	movs	r2, #1
    43a0:	7362      	strb	r2, [r4, #13]
  msg.buf[6] = mescycle << 4;
    43a2:	73a3      	strb	r3, [r4, #14]
  if (testcycle == 2) {
    43a4:	e7db      	b.n	435e <sendcommand()+0x56>
  if (balancecells == 1) {
    43a6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 44c0 <sendcommand()+0x1b8>
  msg.id = 0x080 | (nextmes);
    43aa:	7829      	ldrb	r1, [r5, #0]
  if (balancecells == 1) {
    43ac:	f8d8 2000 	ldr.w	r2, [r8]
  msg.id = 0x080 | (nextmes);
    43b0:	f041 0380 	orr.w	r3, r1, #128	; 0x80
    43b4:	4c43      	ldr	r4, [pc, #268]	; (44c4 <sendcommand()+0x1bc>)
  if (balancecells == 1) {
    43b6:	2a01      	cmp	r2, #1
  msg.id = 0x080 | (nextmes);
    43b8:	6023      	str	r3, [r4, #0]
  msg.len = 8;
    43ba:	f04f 0308 	mov.w	r3, #8
    43be:	71e3      	strb	r3, [r4, #7]
  if (balancecells == 1) {
    43c0:	d1bb      	bne.n	433a <sendcommand()+0x32>
    msg.buf[0] = lowByte((uint16_t((bms.getLowCellVolt()) * 1000) + 5));
    43c2:	4842      	ldr	r0, [pc, #264]	; (44cc <sendcommand()+0x1c4>)
    43c4:	f7fc fd0c 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    43c8:	4941      	ldr	r1, [pc, #260]	; (44d0 <sendcommand()+0x1c8>)
    43ca:	f008 fc43 	bl	cc54 <__aeabi_fmul>
    43ce:	f008 fe2d 	bl	d02c <__aeabi_f2uiz>
    43d2:	3005      	adds	r0, #5
    43d4:	7220      	strb	r0, [r4, #8]
    msg.buf[1] = highByte((uint16_t((bms.getLowCellVolt()) * 1000) + 5));
    43d6:	483d      	ldr	r0, [pc, #244]	; (44cc <sendcommand()+0x1c4>)
    43d8:	f7fc fd02 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    43dc:	493c      	ldr	r1, [pc, #240]	; (44d0 <sendcommand()+0x1c8>)
    43de:	f008 fc39 	bl	cc54 <__aeabi_fmul>
    43e2:	f008 fe23 	bl	d02c <__aeabi_f2uiz>
    43e6:	b283      	uxth	r3, r0
    43e8:	3305      	adds	r3, #5
    43ea:	121b      	asrs	r3, r3, #8
  msg.buf[7] = getcheck(msg, nextmes);
    43ec:	7829      	ldrb	r1, [r5, #0]
    msg.buf[1] = highByte((uint16_t((bms.getLowCellVolt()) * 1000) + 5));
    43ee:	7263      	strb	r3, [r4, #9]
    43f0:	e7a6      	b.n	4340 <sendcommand()+0x38>
    mescycle++;
    43f2:	4e31      	ldr	r6, [pc, #196]	; (44b8 <sendcommand()+0x1b0>)
    if (testcycle < 4) {
    43f4:	4f31      	ldr	r7, [pc, #196]	; (44bc <sendcommand()+0x1b4>)
    mescycle++;
    43f6:	7833      	ldrb	r3, [r6, #0]
    nextmes = 0;
    43f8:	2200      	movs	r2, #0
    43fa:	702a      	strb	r2, [r5, #0]
    if (testcycle < 4) {
    43fc:	783a      	ldrb	r2, [r7, #0]
    mescycle++;
    43fe:	3301      	adds	r3, #1
    if (testcycle < 4) {
    4400:	2a03      	cmp	r2, #3
    mescycle++;
    4402:	b2db      	uxtb	r3, r3
      testcycle++;
    4404:	bf9c      	itt	ls
    4406:	3201      	addls	r2, #1
    4408:	703a      	strbls	r2, [r7, #0]
    if (mescycle == 0xF) {
    440a:	2b0f      	cmp	r3, #15
    mescycle++;
    440c:	7033      	strb	r3, [r6, #0]
    if (mescycle == 0xF) {
    440e:	d015      	beq.n	443c <sendcommand()+0x134>
  if (balancepauze == 1) {
    4410:	4b28      	ldr	r3, [pc, #160]	; (44b4 <sendcommand()+0x1ac>)
    4412:	781b      	ldrb	r3, [r3, #0]
    4414:	e783      	b.n	431e <sendcommand()+0x16>
  msg.ext = 0;
    4416:	88e3      	ldrh	r3, [r4, #6]
  msg.buf[0] = 0xFF;
    4418:	4d2e      	ldr	r5, [pc, #184]	; (44d4 <sendcommand()+0x1cc>)
  Can0.write(msg);
    441a:	482b      	ldr	r0, [pc, #172]	; (44c8 <sendcommand()+0x1c0>)
  msg.buf[0] = 0xFF;
    441c:	60a5      	str	r5, [r4, #8]
  msg.id = 0x0B0;  //broadcast to all Elteks
    441e:	21b0      	movs	r1, #176	; 0xb0
    4420:	6021      	str	r1, [r4, #0]
  msg.ext = 0;
    4422:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  Can0.write(msg);
    4426:	4927      	ldr	r1, [pc, #156]	; (44c4 <sendcommand()+0x1bc>)
  msg.ext = 0;
    4428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  msg.buf[4] = 0x00;
    442c:	2200      	movs	r2, #0
  msg.ext = 0;
    442e:	80e3      	strh	r3, [r4, #6]
  msg.buf[4] = 0x00;
    4430:	60e2      	str	r2, [r4, #12]
}
    4432:	b002      	add	sp, #8
    4434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Can0.write(msg);
    4438:	f003 bf18 	b.w	826c <FlexCAN::write(CAN_message_t const&)>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    443c:	4a26      	ldr	r2, [pc, #152]	; (44d8 <sendcommand()+0x1d0>)
      if (balancetimer < millis()) {
    443e:	4c27      	ldr	r4, [pc, #156]	; (44dc <sendcommand()+0x1d4>)
    4440:	6813      	ldr	r3, [r2, #0]
    4442:	9300      	str	r3, [sp, #0]
	return ret;
    4444:	9b00      	ldr	r3, [sp, #0]
    4446:	6820      	ldr	r0, [r4, #0]
      mescycle = 0;
    4448:	2100      	movs	r1, #0
      if (balancetimer < millis()) {
    444a:	4298      	cmp	r0, r3
      mescycle = 0;
    444c:	7031      	strb	r1, [r6, #0]
      if (balancetimer < millis()) {
    444e:	d215      	bcs.n	447c <sendcommand()+0x174>
        if (debug == 1) {
    4450:	4b23      	ldr	r3, [pc, #140]	; (44e0 <sendcommand()+0x1d8>)
        balancepauze = 1;
    4452:	f8df 8060 	ldr.w	r8, [pc, #96]	; 44b4 <sendcommand()+0x1ac>
        if (debug == 1) {
    4456:	6819      	ldr	r1, [r3, #0]
        balancepauze = 1;
    4458:	2301      	movs	r3, #1
        if (debug == 1) {
    445a:	4299      	cmp	r1, r3
        balancepauze = 1;
    445c:	f888 3000 	strb.w	r3, [r8]
        if (debug == 1) {
    4460:	d014      	beq.n	448c <sendcommand()+0x184>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4462:	6812      	ldr	r2, [r2, #0]
    4464:	9201      	str	r2, [sp, #4]
        balancetimer = millis() + ((settings.balanceDuty + 60) * 1000);
    4466:	4a1f      	ldr	r2, [pc, #124]	; (44e4 <sendcommand()+0x1dc>)
    4468:	f8b2 10b0 	ldrh.w	r1, [r2, #176]	; 0xb0
	return ret;
    446c:	9a01      	ldr	r2, [sp, #4]
    446e:	313c      	adds	r1, #60	; 0x3c
    4470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4474:	fb00 2201 	mla	r2, r0, r1, r2
    4478:	6022      	str	r2, [r4, #0]
    447a:	e750      	b.n	431e <sendcommand()+0x16>
        balancepauze = 0;
    447c:	4b0d      	ldr	r3, [pc, #52]	; (44b4 <sendcommand()+0x1ac>)
  if (balancecells == 1) {
    447e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 44c0 <sendcommand()+0x1b8>
        balancepauze = 0;
    4482:	7019      	strb	r1, [r3, #0]
  if (balancecells == 1) {
    4484:	f8d8 2000 	ldr.w	r2, [r8]
    4488:	2380      	movs	r3, #128	; 0x80
    448a:	e793      	b.n	43b4 <sendcommand()+0xac>
          Serial.println();
    448c:	4816      	ldr	r0, [pc, #88]	; (44e8 <sendcommand()+0x1e0>)
    448e:	f004 ffbd 	bl	940c <Print::println()>
    4492:	2113      	movs	r1, #19
    4494:	4815      	ldr	r0, [pc, #84]	; (44ec <sendcommand()+0x1e4>)
    4496:	f007 fcfd 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    449a:	4813      	ldr	r0, [pc, #76]	; (44e8 <sendcommand()+0x1e0>)
    449c:	f004 ffb6 	bl	940c <Print::println()>
          Serial.println();
    44a0:	4811      	ldr	r0, [pc, #68]	; (44e8 <sendcommand()+0x1e0>)
    44a2:	f004 ffb3 	bl	940c <Print::println()>
  if (balancepauze == 1) {
    44a6:	f898 3000 	ldrb.w	r3, [r8]
    44aa:	4a0b      	ldr	r2, [pc, #44]	; (44d8 <sendcommand()+0x1d0>)
    44ac:	e7d9      	b.n	4462 <sendcommand()+0x15a>
    44ae:	bf00      	nop
    44b0:	1fffd9a4 	.word	0x1fffd9a4
    44b4:	1fff91dc 	.word	0x1fff91dc
    44b8:	1fffd910 	.word	0x1fffd910
    44bc:	1fffdaa6 	.word	0x1fffdaa6
    44c0:	1fff91d8 	.word	0x1fff91d8
    44c4:	1fffd914 	.word	0x1fffd914
    44c8:	1fffdad0 	.word	0x1fffdad0
    44cc:	1fff91e4 	.word	0x1fff91e4
    44d0:	447a0000 	.word	0x447a0000
    44d4:	a2cd00ff 	.word	0xa2cd00ff
    44d8:	1fffdcc4 	.word	0x1fffdcc4
    44dc:	1fff91e0 	.word	0x1fff91e0
    44e0:	1fff8848 	.word	0x1fff8848
    44e4:	1fffd9bc 	.word	0x1fffd9bc
    44e8:	1fff89fc 	.word	0x1fff89fc
    44ec:	000142f0 	.word	0x000142f0

000044f0 <resetIDdebug()>:
void resetIDdebug() {
    44f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44f4:	4c1a      	ldr	r4, [pc, #104]	; (4560 <resetIDdebug()+0x70>)
    Can0.write(msg);
    44f6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 4564 <resetIDdebug()+0x74>
  for (int ID = 0; ID < 15; ID++) {
    44fa:	2500      	movs	r5, #0
    msg.id = 0x0A0;  //broadcast to all CSC
    44fc:	27a0      	movs	r7, #160	; 0xa0
    msg.ext = 0;
    44fe:	88e3      	ldrh	r3, [r4, #6]
    msg.buf[1] = ID;
    4500:	7265      	strb	r5, [r4, #9]
    msg.ext = 0;
    4502:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    4506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    msg.buf[0] = 0xA1;
    450a:	f04f 0ca1 	mov.w	ip, #161	; 0xa1
    msg.buf[2] = 0xFF;
    450e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Can0.write(msg);
    4512:	4621      	mov	r1, r4
    msg.buf[4] = 0xFF;
    4514:	f04f 36ff 	mov.w	r6, #4294967295
    Can0.write(msg);
    4518:	4640      	mov	r0, r8
    msg.ext = 0;
    451a:	80e3      	strh	r3, [r4, #6]
    msg.buf[0] = 0xA1;
    451c:	f884 c008 	strb.w	ip, [r4, #8]
    msg.buf[2] = 0xFF;
    4520:	8162      	strh	r2, [r4, #10]
    msg.id = 0x0A0;  //broadcast to all CSC
    4522:	6027      	str	r7, [r4, #0]
    msg.buf[4] = 0xFF;
    4524:	60e6      	str	r6, [r4, #12]
  for (int ID = 0; ID < 15; ID++) {
    4526:	3501      	adds	r5, #1
    Can0.write(msg);
    4528:	f003 fea0 	bl	826c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    452c:	2002      	movs	r0, #2
    452e:	f005 fecf 	bl	a2d0 <delay>
  for (int ID = 0; ID < 15; ID++) {
    4532:	2d0f      	cmp	r5, #15
    4534:	d1e3      	bne.n	44fe <resetIDdebug()+0xe>
  Unassigned = 0;
    4536:	4b0c      	ldr	r3, [pc, #48]	; (4568 <resetIDdebug()+0x78>)
  msg.id = 0x0A0;  //broadcast to all CSC
    4538:	6027      	str	r7, [r4, #0]
  Unassigned = 0;
    453a:	2200      	movs	r2, #0
    453c:	701a      	strb	r2, [r3, #0]
  msg.ext = 0;
    453e:	88e3      	ldrh	r3, [r4, #6]
  msg.buf[4] = 0xFF;
    4540:	60e6      	str	r6, [r4, #12]
  msg.ext = 0;
    4542:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  msg.buf[0] = 0x37;
    4546:	f06f 02c8 	mvn.w	r2, #200	; 0xc8
  msg.ext = 0;
    454a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    454e:	80e3      	strh	r3, [r4, #6]
  msg.buf[0] = 0x37;
    4550:	60a2      	str	r2, [r4, #8]
  Can0.write(msg);
    4552:	4903      	ldr	r1, [pc, #12]	; (4560 <resetIDdebug()+0x70>)
    4554:	4803      	ldr	r0, [pc, #12]	; (4564 <resetIDdebug()+0x74>)
}
    4556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Can0.write(msg);
    455a:	f003 be87 	b.w	826c <FlexCAN::write(CAN_message_t const&)>
    455e:	bf00      	nop
    4560:	1fffd914 	.word	0x1fffd914
    4564:	1fffdad0 	.word	0x1fffdad0
    4568:	1fff91c0 	.word	0x1fff91c0

0000456c <menu()>:
void menu() {
    456c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (menuload == 4) {
    456e:	4cab      	ldr	r4, [pc, #684]	; (481c <menu()+0x2b0>)
  incomingByte = Serial.read();  // read the incoming byte:
    4570:	4dab      	ldr	r5, [pc, #684]	; (4820 <menu()+0x2b4>)
void menu() {
    4572:	b083      	sub	sp, #12
        virtual int read() { return usb_serial_getchar(); }
    4574:	f007 fc20 	bl	bdb8 <usb_serial_getchar>
  if (menuload == 4) {
    4578:	6823      	ldr	r3, [r4, #0]
  incomingByte = Serial.read();  // read the incoming byte:
    457a:	6028      	str	r0, [r5, #0]
  if (menuload == 4) {
    457c:	2b04      	cmp	r3, #4
    457e:	d059      	beq.n	4634 <menu()+0xc8>
  if (menuload == 2) {
    4580:	2b02      	cmp	r3, #2
    4582:	f040 8129 	bne.w	47d8 <menu()+0x26c>
    switch (incomingByte) {
    4586:	f1a0 0331 	sub.w	r3, r0, #49	; 0x31
    458a:	2b42      	cmp	r3, #66	; 0x42
    458c:	f200 811b 	bhi.w	47c6 <menu()+0x25a>
    4590:	e8df f013 	tbh	[pc, r3, lsl #1]
    4594:	0701066a 	.word	0x0701066a
    4598:	071b070e 	.word	0x071b070e
    459c:	0775073d 	.word	0x0775073d
    45a0:	075a074c 	.word	0x075a074c
    45a4:	01190119 	.word	0x01190119
    45a8:	01190119 	.word	0x01190119
    45ac:	01190119 	.word	0x01190119
    45b0:	01190119 	.word	0x01190119
    45b4:	01190119 	.word	0x01190119
    45b8:	01190119 	.word	0x01190119
    45bc:	01190119 	.word	0x01190119
    45c0:	01190119 	.word	0x01190119
    45c4:	01190119 	.word	0x01190119
    45c8:	01190119 	.word	0x01190119
    45cc:	01190119 	.word	0x01190119
    45d0:	01190119 	.word	0x01190119
    45d4:	01190119 	.word	0x01190119
    45d8:	01190119 	.word	0x01190119
    45dc:	01190119 	.word	0x01190119
    45e0:	01190119 	.word	0x01190119
    45e4:	01190119 	.word	0x01190119
    45e8:	01190119 	.word	0x01190119
    45ec:	01190119 	.word	0x01190119
    45f0:	01190119 	.word	0x01190119
    45f4:	01190119 	.word	0x01190119
    45f8:	0119011e 	.word	0x0119011e
    45fc:	01190119 	.word	0x01190119
    4600:	01190119 	.word	0x01190119
    4604:	01190119 	.word	0x01190119
    4608:	01190119 	.word	0x01190119
    460c:	01190119 	.word	0x01190119
    4610:	01190119 	.word	0x01190119
    4614:	01190046 	.word	0x01190046
    4618:	0767      	.short	0x0767
    switch (incomingByte) {
    461a:	2871      	cmp	r0, #113	; 0x71
    461c:	f040 80d3 	bne.w	47c6 <menu()+0x25a>
          menuload = 1;
    4620:	2200      	movs	r2, #0
          incomingByte = 'i';
    4622:	2373      	movs	r3, #115	; 0x73
          menuload = 1;
    4624:	6022      	str	r2, [r4, #0]
          incomingByte = 'i';
    4626:	602b      	str	r3, [r5, #0]
  if (incomingByte == 115 && menuload == 0) {
    4628:	6823      	ldr	r3, [r4, #0]
    462a:	2b00      	cmp	r3, #0
    462c:	f000 82a7 	beq.w	4b7e <menu()+0x612>
}
    4630:	b003      	add	sp, #12
    4632:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (incomingByte) {
    4634:	f1a0 0331 	sub.w	r3, r0, #49	; 0x31
    4638:	2b48      	cmp	r3, #72	; 0x48
    463a:	f200 80c4 	bhi.w	47c6 <menu()+0x25a>
    463e:	a201      	add	r2, pc, #4	; (adr r2, 4644 <menu()+0xd8>)
    4640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4644:	00005783 	.word	0x00005783
    4648:	00005787 	.word	0x00005787
    464c:	0000578b 	.word	0x0000578b
    4650:	000054e3 	.word	0x000054e3
    4654:	0000574f 	.word	0x0000574f
    4658:	00005769 	.word	0x00005769
    465c:	0000577f 	.word	0x0000577f
    4660:	000057a7 	.word	0x000057a7
    4664:	000057f3 	.word	0x000057f3
    4668:	000047c7 	.word	0x000047c7
    466c:	000047c7 	.word	0x000047c7
    4670:	000047c7 	.word	0x000047c7
    4674:	000047c7 	.word	0x000047c7
    4678:	000047c7 	.word	0x000047c7
    467c:	000047c7 	.word	0x000047c7
    4680:	000047c7 	.word	0x000047c7
    4684:	000047c7 	.word	0x000047c7
    4688:	000047c7 	.word	0x000047c7
    468c:	000047c7 	.word	0x000047c7
    4690:	000047c7 	.word	0x000047c7
    4694:	000047c7 	.word	0x000047c7
    4698:	000047c7 	.word	0x000047c7
    469c:	000047c7 	.word	0x000047c7
    46a0:	000047c7 	.word	0x000047c7
    46a4:	000047c7 	.word	0x000047c7
    46a8:	000047c7 	.word	0x000047c7
    46ac:	000047c7 	.word	0x000047c7
    46b0:	000047c7 	.word	0x000047c7
    46b4:	000047c7 	.word	0x000047c7
    46b8:	000047c7 	.word	0x000047c7
    46bc:	000047c7 	.word	0x000047c7
    46c0:	000047c7 	.word	0x000047c7
    46c4:	000047c7 	.word	0x000047c7
    46c8:	000047c7 	.word	0x000047c7
    46cc:	000047c7 	.word	0x000047c7
    46d0:	000047c7 	.word	0x000047c7
    46d4:	000047c7 	.word	0x000047c7
    46d8:	000047c7 	.word	0x000047c7
    46dc:	000047c7 	.word	0x000047c7
    46e0:	000047c7 	.word	0x000047c7
    46e4:	000047c7 	.word	0x000047c7
    46e8:	000047c7 	.word	0x000047c7
    46ec:	000047c7 	.word	0x000047c7
    46f0:	000047c7 	.word	0x000047c7
    46f4:	000047c7 	.word	0x000047c7
    46f8:	000047c7 	.word	0x000047c7
    46fc:	000047c7 	.word	0x000047c7
    4700:	000047c7 	.word	0x000047c7
    4704:	000047c7 	.word	0x000047c7
    4708:	000057ab 	.word	0x000057ab
    470c:	000047c7 	.word	0x000047c7
    4710:	000047c7 	.word	0x000047c7
    4714:	000047c7 	.word	0x000047c7
    4718:	000047c7 	.word	0x000047c7
    471c:	000047c7 	.word	0x000047c7
    4720:	000047c7 	.word	0x000047c7
    4724:	000047c7 	.word	0x000047c7
    4728:	000047c7 	.word	0x000047c7
    472c:	000047c7 	.word	0x000047c7
    4730:	000047c7 	.word	0x000047c7
    4734:	000047c7 	.word	0x000047c7
    4738:	000047c7 	.word	0x000047c7
    473c:	000047c7 	.word	0x000047c7
    4740:	000047c7 	.word	0x000047c7
    4744:	00004621 	.word	0x00004621
    4748:	000057c7 	.word	0x000057c7
    474c:	000047c7 	.word	0x000047c7
    4750:	000047c7 	.word	0x000047c7
    4754:	000047c7 	.word	0x000047c7
    4758:	000047c7 	.word	0x000047c7
    475c:	000047c7 	.word	0x000047c7
    4760:	00005499 	.word	0x00005499
    4764:	000054c5 	.word	0x000054c5
        virtual int available() { return usb_serial_available(); }
    4768:	f007 fb62 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    476c:	2800      	cmp	r0, #0
    476e:	dd0d      	ble.n	478c <menu()+0x220>
          settings.StoreVsetpoint = Serial.parseInt();
    4770:	482c      	ldr	r0, [pc, #176]	; (4824 <menu()+0x2b8>)
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    4772:	4e2d      	ldr	r6, [pc, #180]	; (4828 <menu()+0x2bc>)
          settings.StoreVsetpoint = Serial.parseInt();
    4774:	f004 ffa8 	bl	96c8 <Stream::parseInt()>
    4778:	f008 fa18 	bl	cbac <__aeabi_i2f>
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    477c:	492b      	ldr	r1, [pc, #172]	; (482c <menu()+0x2c0>)
    477e:	f008 fb1d 	bl	cdbc <__aeabi_fdiv>
          menuload = 1;
    4782:	2201      	movs	r2, #1
          incomingByte = 'b';
    4784:	2362      	movs	r3, #98	; 0x62
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    4786:	6270      	str	r0, [r6, #36]	; 0x24
          menuload = 1;
    4788:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    478a:	602b      	str	r3, [r5, #0]
    478c:	f007 fb50 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    4790:	2800      	cmp	r0, #0
    4792:	dd0e      	ble.n	47b2 <menu()+0x246>
          settings.DisTaper = Serial.parseInt();
    4794:	4823      	ldr	r0, [pc, #140]	; (4824 <menu()+0x2b8>)
          settings.DisTaper = settings.DisTaper / 1000;
    4796:	4e24      	ldr	r6, [pc, #144]	; (4828 <menu()+0x2bc>)
          settings.DisTaper = Serial.parseInt();
    4798:	f004 ff96 	bl	96c8 <Stream::parseInt()>
    479c:	f008 fa06 	bl	cbac <__aeabi_i2f>
          settings.DisTaper = settings.DisTaper / 1000;
    47a0:	4922      	ldr	r1, [pc, #136]	; (482c <menu()+0x2c0>)
    47a2:	f008 fb0b 	bl	cdbc <__aeabi_fdiv>
          menuload = 1;
    47a6:	2201      	movs	r2, #1
          incomingByte = 'b';
    47a8:	2362      	movs	r3, #98	; 0x62
          settings.DisTaper = settings.DisTaper / 1000;
    47aa:	f8c6 00d0 	str.w	r0, [r6, #208]	; 0xd0
          menuload = 1;
    47ae:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    47b0:	602b      	str	r3, [r5, #0]
    47b2:	f007 fb3d 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    47b6:	2800      	cmp	r0, #0
    47b8:	f301 8146 	bgt.w	5a48 <menu()+0x14dc>
  if (menuload == 1) {
    47bc:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    47be:	6828      	ldr	r0, [r5, #0]
  if (menuload == 1) {
    47c0:	2b01      	cmp	r3, #1
    47c2:	f000 8698 	beq.w	54f6 <menu()+0xf8a>
  if (incomingByte == 115 && menuload == 0) {
    47c6:	2873      	cmp	r0, #115	; 0x73
    47c8:	f43f af2e 	beq.w	4628 <menu()+0xbc>
}
    47cc:	b003      	add	sp, #12
    47ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        calcur();
    47d0:	f7fe f95e 	bl	2a90 <calcur()>
  if (menuload == 8) {
    47d4:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    47d6:	6828      	ldr	r0, [r5, #0]
  if (menuload == 8) {
    47d8:	2b08      	cmp	r3, #8
    47da:	d110      	bne.n	47fe <menu()+0x292>
    switch (incomingByte) {
    47dc:	2834      	cmp	r0, #52	; 0x34
    47de:	f000 814f 	beq.w	4a80 <menu()+0x514>
    47e2:	f73f af1a 	bgt.w	461a <menu()+0xae>
    47e6:	2831      	cmp	r0, #49	; 0x31
    47e8:	f000 8158 	beq.w	4a9c <menu()+0x530>
    47ec:	2832      	cmp	r0, #50	; 0x32
    47ee:	d1ea      	bne.n	47c6 <menu()+0x25a>
    47f0:	f007 fb1e 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    47f4:	2800      	cmp	r0, #0
    47f6:	f300 8265 	bgt.w	4cc4 <menu()+0x758>
  if (menuload == 7) {
    47fa:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    47fc:	6828      	ldr	r0, [r5, #0]
  if (menuload == 7) {
    47fe:	2b07      	cmp	r3, #7
    4800:	d11d      	bne.n	483e <menu()+0x2d2>
    switch (incomingByte) {
    4802:	2834      	cmp	r0, #52	; 0x34
    4804:	f73f af09 	bgt.w	461a <menu()+0xae>
    4808:	2830      	cmp	r0, #48	; 0x30
    480a:	dddc      	ble.n	47c6 <menu()+0x25a>
    480c:	3832      	subs	r0, #50	; 0x32
    480e:	2802      	cmp	r0, #2
    4810:	f201 8647 	bhi.w	64a2 <menu()+0x1f36>
    4814:	e8df f000 	tbb	[pc, r0]
    4818:	0ca0      	.short	0x0ca0
    481a:	b4          	.byte	0xb4
    481b:	00          	.byte	0x00
    481c:	1fffd90c 	.word	0x1fffd90c
    4820:	1fffd8d0 	.word	0x1fffd8d0
    4824:	1fff89fc 	.word	0x1fff89fc
    4828:	1fffd9bc 	.word	0x1fffd9bc
    482c:	447a0000 	.word	0x447a0000
    4830:	f007 fafe 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    4834:	2800      	cmp	r0, #0
    4836:	f300 825d 	bgt.w	4cf4 <menu()+0x788>
  if (menuload == 6)  //Charging settings
    483a:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    483c:	6828      	ldr	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    483e:	2b06      	cmp	r3, #6
    4840:	f040 826b 	bne.w	4d1a <menu()+0x7ae>
    switch (incomingByte) {
    4844:	f1a0 0331 	sub.w	r3, r0, #49	; 0x31
    4848:	2b40      	cmp	r3, #64	; 0x40
    484a:	d8bc      	bhi.n	47c6 <menu()+0x25a>
    484c:	a201      	add	r2, pc, #4	; (adr r2, 4854 <menu()+0x2e8>)
    484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4852:	bf00      	nop
    4854:	0000500d 	.word	0x0000500d
    4858:	0000515d 	.word	0x0000515d
    485c:	00004d0d 	.word	0x00004d0d
    4860:	00005245 	.word	0x00005245
    4864:	00005229 	.word	0x00005229
    4868:	00005209 	.word	0x00005209
    486c:	000047c7 	.word	0x000047c7
    4870:	000051ed 	.word	0x000051ed
    4874:	000051cb 	.word	0x000051cb
    4878:	000047c7 	.word	0x000047c7
    487c:	000047c7 	.word	0x000047c7
    4880:	000047c7 	.word	0x000047c7
    4884:	000047c7 	.word	0x000047c7
    4888:	000047c7 	.word	0x000047c7
    488c:	000047c7 	.word	0x000047c7
    4890:	000047c7 	.word	0x000047c7
    4894:	000047c7 	.word	0x000047c7
    4898:	000047c7 	.word	0x000047c7
    489c:	000047c7 	.word	0x000047c7
    48a0:	000047c7 	.word	0x000047c7
    48a4:	000047c7 	.word	0x000047c7
    48a8:	000047c7 	.word	0x000047c7
    48ac:	000047c7 	.word	0x000047c7
    48b0:	000047c7 	.word	0x000047c7
    48b4:	000047c7 	.word	0x000047c7
    48b8:	000047c7 	.word	0x000047c7
    48bc:	000047c7 	.word	0x000047c7
    48c0:	000047c7 	.word	0x000047c7
    48c4:	000047c7 	.word	0x000047c7
    48c8:	000047c7 	.word	0x000047c7
    48cc:	000047c7 	.word	0x000047c7
    48d0:	000047c7 	.word	0x000047c7
    48d4:	000047c7 	.word	0x000047c7
    48d8:	000047c7 	.word	0x000047c7
    48dc:	000047c7 	.word	0x000047c7
    48e0:	000047c7 	.word	0x000047c7
    48e4:	000047c7 	.word	0x000047c7
    48e8:	000047c7 	.word	0x000047c7
    48ec:	000047c7 	.word	0x000047c7
    48f0:	000047c7 	.word	0x000047c7
    48f4:	000047c7 	.word	0x000047c7
    48f8:	000047c7 	.word	0x000047c7
    48fc:	000047c7 	.word	0x000047c7
    4900:	000047c7 	.word	0x000047c7
    4904:	000047c7 	.word	0x000047c7
    4908:	000047c7 	.word	0x000047c7
    490c:	000047c7 	.word	0x000047c7
    4910:	000047c7 	.word	0x000047c7
    4914:	000051a5 	.word	0x000051a5
    4918:	00005185 	.word	0x00005185
    491c:	000059e1 	.word	0x000059e1
    4920:	000047c7 	.word	0x000047c7
    4924:	000047c7 	.word	0x000047c7
    4928:	000047c7 	.word	0x000047c7
    492c:	000047c7 	.word	0x000047c7
    4930:	000047c7 	.word	0x000047c7
    4934:	000047c7 	.word	0x000047c7
    4938:	000047c7 	.word	0x000047c7
    493c:	000047c7 	.word	0x000047c7
    4940:	000047c7 	.word	0x000047c7
    4944:	000047c7 	.word	0x000047c7
    4948:	000047c7 	.word	0x000047c7
    494c:	000047c7 	.word	0x000047c7
    4950:	000047c7 	.word	0x000047c7
    4954:	00004621 	.word	0x00004621
    4958:	f007 fa6a 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    495c:	2800      	cmp	r0, #0
    495e:	f77f af6c 	ble.w	483a <menu()+0x2ce>
          settings.CellGap = Serial.parseInt();
    4962:	48b8      	ldr	r0, [pc, #736]	; (4c44 <menu()+0x6d8>)
          settings.CellGap = settings.CellGap * 0.001;
    4964:	4eb8      	ldr	r6, [pc, #736]	; (4c48 <menu()+0x6dc>)
          settings.CellGap = Serial.parseInt();
    4966:	f004 feaf 	bl	96c8 <Stream::parseInt()>
    496a:	f008 f91f 	bl	cbac <__aeabi_i2f>
          settings.CellGap = settings.CellGap * 0.001;
    496e:	49b7      	ldr	r1, [pc, #732]	; (4c4c <menu()+0x6e0>)
    4970:	f008 f970 	bl	cc54 <__aeabi_fmul>
          menuload = 1;
    4974:	2301      	movs	r3, #1
    4976:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4978:	2361      	movs	r3, #97	; 0x61
          settings.CellGap = settings.CellGap * 0.001;
    497a:	6470      	str	r0, [r6, #68]	; 0x44
          incomingByte = 'a';
    497c:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    497e:	e010      	b.n	49a2 <menu()+0x436>
    4980:	f007 fa56 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    4984:	2800      	cmp	r0, #0
    4986:	f77f af58 	ble.w	483a <menu()+0x2ce>
          settings.triptime = Serial.parseInt();
    498a:	48ae      	ldr	r0, [pc, #696]	; (4c44 <menu()+0x6d8>)
    498c:	4eae      	ldr	r6, [pc, #696]	; (4c48 <menu()+0x6dc>)
    498e:	f004 fe9b 	bl	96c8 <Stream::parseInt()>
          menuload = 1;
    4992:	2301      	movs	r3, #1
    4994:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4996:	2361      	movs	r3, #97	; 0x61
          settings.triptime = Serial.parseInt();
    4998:	86b0      	strh	r0, [r6, #52]	; 0x34
          incomingByte = 'a';
    499a:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    499c:	e001      	b.n	49a2 <menu()+0x436>
        virtual int read() { return usb_serial_getchar(); }
    499e:	f007 fa0b 	bl	bdb8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    49a2:	f007 fa45 	bl	be30 <usb_serial_available>
        while (Serial.available()) {
    49a6:	4605      	mov	r5, r0
    49a8:	2800      	cmp	r0, #0
    49aa:	d1f8      	bne.n	499e <menu()+0x432>
        SERIALCONSOLE.println();
    49ac:	48a5      	ldr	r0, [pc, #660]	; (4c44 <menu()+0x6d8>)
    49ae:	f004 fd2d 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    49b2:	48a4      	ldr	r0, [pc, #656]	; (4c44 <menu()+0x6d8>)
    49b4:	f004 fd2a 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    49b8:	48a2      	ldr	r0, [pc, #648]	; (4c44 <menu()+0x6d8>)
    49ba:	f004 fd27 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    49be:	48a1      	ldr	r0, [pc, #644]	; (4c44 <menu()+0x6d8>)
    49c0:	f004 fd24 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    49c4:	489f      	ldr	r0, [pc, #636]	; (4c44 <menu()+0x6d8>)
    49c6:	f004 fd21 	bl	940c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    49ca:	211f      	movs	r1, #31
    49cc:	48a0      	ldr	r0, [pc, #640]	; (4c50 <menu()+0x6e4>)
    49ce:	f007 fa61 	bl	be94 <usb_serial_write>
    49d2:	489c      	ldr	r0, [pc, #624]	; (4c44 <menu()+0x6d8>)
    49d4:	f004 fd1a 	bl	940c <Print::println()>
    49d8:	211c      	movs	r1, #28
    49da:	489e      	ldr	r0, [pc, #632]	; (4c54 <menu()+0x6e8>)
    49dc:	f007 fa5a 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnOff * 1000, 0);
    49e0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    49e2:	499d      	ldr	r1, [pc, #628]	; (4c58 <menu()+0x6ec>)
    49e4:	f008 f936 	bl	cc54 <__aeabi_fmul>
    49e8:	f007 ff10 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    49ec:	9500      	str	r5, [sp, #0]
    49ee:	4602      	mov	r2, r0
    49f0:	460b      	mov	r3, r1
    49f2:	4894      	ldr	r0, [pc, #592]	; (4c44 <menu()+0x6d8>)
    49f4:	f004 fd2c 	bl	9450 <Print::printFloat(double, unsigned char)>
    49f8:	2102      	movs	r1, #2
    49fa:	4898      	ldr	r0, [pc, #608]	; (4c5c <menu()+0x6f0>)
    49fc:	f007 fa4a 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a00:	4890      	ldr	r0, [pc, #576]	; (4c44 <menu()+0x6d8>)
    4a02:	f004 fd03 	bl	940c <Print::println()>
    4a06:	2123      	movs	r1, #35	; 0x23
    4a08:	4895      	ldr	r0, [pc, #596]	; (4c60 <menu()+0x6f4>)
    4a0a:	f007 fa43 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.CellGap * 1000, 0);
    4a0e:	6c70      	ldr	r0, [r6, #68]	; 0x44
    4a10:	4991      	ldr	r1, [pc, #580]	; (4c58 <menu()+0x6ec>)
    4a12:	f008 f91f 	bl	cc54 <__aeabi_fmul>
    4a16:	f007 fef9 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4a1a:	9500      	str	r5, [sp, #0]
    4a1c:	4602      	mov	r2, r0
    4a1e:	460b      	mov	r3, r1
    4a20:	4888      	ldr	r0, [pc, #544]	; (4c44 <menu()+0x6d8>)
    4a22:	f004 fd15 	bl	9450 <Print::printFloat(double, unsigned char)>
    4a26:	2102      	movs	r1, #2
    4a28:	488c      	ldr	r0, [pc, #560]	; (4c5c <menu()+0x6f0>)
    4a2a:	f007 fa33 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a2e:	4885      	ldr	r0, [pc, #532]	; (4c44 <menu()+0x6d8>)
    4a30:	f004 fcec 	bl	940c <Print::println()>
    4a34:	2119      	movs	r1, #25
    4a36:	488b      	ldr	r0, [pc, #556]	; (4c64 <menu()+0x6f8>)
    4a38:	f007 fa2c 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnToff);
    4a3c:	6c30      	ldr	r0, [r6, #64]	; 0x40
    4a3e:	f007 fee5 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4a42:	2502      	movs	r5, #2
    4a44:	460b      	mov	r3, r1
    4a46:	4602      	mov	r2, r0
    4a48:	9500      	str	r5, [sp, #0]
    4a4a:	487e      	ldr	r0, [pc, #504]	; (4c44 <menu()+0x6d8>)
    4a4c:	f004 fd00 	bl	9450 <Print::printFloat(double, unsigned char)>
    4a50:	4629      	mov	r1, r5
    4a52:	4885      	ldr	r0, [pc, #532]	; (4c68 <menu()+0x6fc>)
    4a54:	f007 fa1e 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a58:	487a      	ldr	r0, [pc, #488]	; (4c44 <menu()+0x6d8>)
    4a5a:	f004 fcd7 	bl	940c <Print::println()>
    4a5e:	2122      	movs	r1, #34	; 0x22
    4a60:	4882      	ldr	r0, [pc, #520]	; (4c6c <menu()+0x700>)
    4a62:	f007 fa17 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4a66:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
    4a68:	4876      	ldr	r0, [pc, #472]	; (4c44 <menu()+0x6d8>)
    4a6a:	f004 fcc7 	bl	93fc <Print::print(long)>
    4a6e:	2103      	movs	r1, #3
    4a70:	487f      	ldr	r0, [pc, #508]	; (4c70 <menu()+0x704>)
    4a72:	f007 fa0f 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a76:	4873      	ldr	r0, [pc, #460]	; (4c44 <menu()+0x6d8>)
    4a78:	f004 fcc8 	bl	940c <Print::println()>
        break;
    4a7c:	2307      	movs	r3, #7
    4a7e:	e07b      	b.n	4b78 <menu()+0x60c>
        virtual int available() { return usb_serial_available(); }
    4a80:	f007 f9d6 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    4a84:	2800      	cmp	r0, #0
    4a86:	f77f aeb8 	ble.w	47fa <menu()+0x28e>
          settings.TempOff = Serial.parseInt();
    4a8a:	486e      	ldr	r0, [pc, #440]	; (4c44 <menu()+0x6d8>)
    4a8c:	4e6e      	ldr	r6, [pc, #440]	; (4c48 <menu()+0x6dc>)
    4a8e:	f004 fe1b 	bl	96c8 <Stream::parseInt()>
    4a92:	b203      	sxth	r3, r0
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    4a94:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
          settings.TempOff = Serial.parseInt();
    4a96:	f8a6 30d8 	strh.w	r3, [r6, #216]	; 0xd8
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    4a9a:	e120      	b.n	4cde <menu()+0x772>
    4a9c:	f007 f9c8 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    4aa0:	2800      	cmp	r0, #0
    4aa2:	f300 811f 	bgt.w	4ce4 <menu()+0x778>
        if (settings.IgnoreTemp > 2) {
    4aa6:	4e68      	ldr	r6, [pc, #416]	; (4c48 <menu()+0x6dc>)
    4aa8:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    4aac:	f9b6 30d8 	ldrsh.w	r3, [r6, #216]	; 0xd8
    4ab0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
        if (settings.IgnoreTemp > 2) {
    4ab2:	2902      	cmp	r1, #2
          settings.IgnoreTemp = 0;
    4ab4:	bf84      	itt	hi
    4ab6:	2100      	movhi	r1, #0
    4ab8:	f886 1048 	strbhi.w	r1, [r6, #72]	; 0x48
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    4abc:	486d      	ldr	r0, [pc, #436]	; (4c74 <menu()+0x708>)
    4abe:	f7fc f9e3 	bl	e88 <BMSModuleManager::setSensors(int, float, int)>
          menuload = 1;
    4ac2:	2201      	movs	r2, #1
          incomingByte = 'i';
    4ac4:	2369      	movs	r3, #105	; 0x69
          menuload = 1;
    4ac6:	6022      	str	r2, [r4, #0]
          incomingByte = 'i';
    4ac8:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4aca:	e001      	b.n	4ad0 <menu()+0x564>
        virtual int read() { return usb_serial_getchar(); }
    4acc:	f007 f974 	bl	bdb8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4ad0:	f007 f9ae 	bl	be30 <usb_serial_available>
        while (Serial.available()) {
    4ad4:	4605      	mov	r5, r0
    4ad6:	2800      	cmp	r0, #0
    4ad8:	d1f8      	bne.n	4acc <menu()+0x560>
        SERIALCONSOLE.println();
    4ada:	485a      	ldr	r0, [pc, #360]	; (4c44 <menu()+0x6d8>)
    4adc:	f004 fc96 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    4ae0:	4858      	ldr	r0, [pc, #352]	; (4c44 <menu()+0x6d8>)
    4ae2:	f004 fc93 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    4ae6:	4857      	ldr	r0, [pc, #348]	; (4c44 <menu()+0x6d8>)
    4ae8:	f004 fc90 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    4aec:	4855      	ldr	r0, [pc, #340]	; (4c44 <menu()+0x6d8>)
    4aee:	f004 fc8d 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    4af2:	4854      	ldr	r0, [pc, #336]	; (4c44 <menu()+0x6d8>)
    4af4:	f004 fc8a 	bl	940c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4af8:	2115      	movs	r1, #21
    4afa:	485f      	ldr	r0, [pc, #380]	; (4c78 <menu()+0x70c>)
    4afc:	f007 f9ca 	bl	be94 <usb_serial_write>
    4b00:	4850      	ldr	r0, [pc, #320]	; (4c44 <menu()+0x6d8>)
    4b02:	f004 fc83 	bl	940c <Print::println()>
    4b06:	2118      	movs	r1, #24
    4b08:	485c      	ldr	r0, [pc, #368]	; (4c7c <menu()+0x710>)
    4b0a:	f007 f9c3 	bl	be94 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4b0e:	462b      	mov	r3, r5
    4b10:	220a      	movs	r2, #10
    4b12:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
    4b16:	484b      	ldr	r0, [pc, #300]	; (4c44 <menu()+0x6d8>)
    4b18:	f004 fc90 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    4b1c:	4849      	ldr	r0, [pc, #292]	; (4c44 <menu()+0x6d8>)
    4b1e:	f004 fc75 	bl	940c <Print::println()>
    4b22:	2128      	movs	r1, #40	; 0x28
    4b24:	4856      	ldr	r0, [pc, #344]	; (4c80 <menu()+0x714>)
    4b26:	f007 f9b5 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.IgnoreVolt * 1000, 0);
    4b2a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    4b2c:	494a      	ldr	r1, [pc, #296]	; (4c58 <menu()+0x6ec>)
    4b2e:	f008 f891 	bl	cc54 <__aeabi_fmul>
    4b32:	f007 fe6b 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4b36:	9500      	str	r5, [sp, #0]
    4b38:	460b      	mov	r3, r1
    4b3a:	4602      	mov	r2, r0
    4b3c:	4841      	ldr	r0, [pc, #260]	; (4c44 <menu()+0x6d8>)
    4b3e:	f004 fc87 	bl	9450 <Print::printFloat(double, unsigned char)>
    4b42:	2102      	movs	r1, #2
    4b44:	4845      	ldr	r0, [pc, #276]	; (4c5c <menu()+0x6f0>)
    4b46:	f007 f9a5 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4b4a:	483e      	ldr	r0, [pc, #248]	; (4c44 <menu()+0x6d8>)
    4b4c:	f004 fc5e 	bl	940c <Print::println()>
    4b50:	2118      	movs	r1, #24
    4b52:	484c      	ldr	r0, [pc, #304]	; (4c84 <menu()+0x718>)
    4b54:	f007 f99e 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4b58:	f9b6 10d8 	ldrsh.w	r1, [r6, #216]	; 0xd8
    4b5c:	4839      	ldr	r0, [pc, #228]	; (4c44 <menu()+0x6d8>)
    4b5e:	f004 fc4d 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4b62:	4838      	ldr	r0, [pc, #224]	; (4c44 <menu()+0x6d8>)
    4b64:	f004 fc52 	bl	940c <Print::println()>
    4b68:	2113      	movs	r1, #19
    4b6a:	4847      	ldr	r0, [pc, #284]	; (4c88 <menu()+0x71c>)
    4b6c:	f007 f992 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4b70:	4834      	ldr	r0, [pc, #208]	; (4c44 <menu()+0x6d8>)
    4b72:	f004 fc4b 	bl	940c <Print::println()>
        break;
    4b76:	2308      	movs	r3, #8
        menuload = 7;
    4b78:	6023      	str	r3, [r4, #0]
}
    4b7a:	b003      	add	sp, #12
    4b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b7e:	4e43      	ldr	r6, [pc, #268]	; (4c8c <menu()+0x720>)
    SERIALCONSOLE.println();
    4b80:	4830      	ldr	r0, [pc, #192]	; (4c44 <menu()+0x6d8>)
    4b82:	f004 fc43 	bl	940c <Print::println()>
    4b86:	2104      	movs	r1, #4
    4b88:	4841      	ldr	r0, [pc, #260]	; (4c90 <menu()+0x724>)
    4b8a:	f007 f983 	bl	be94 <usb_serial_write>
    4b8e:	482d      	ldr	r0, [pc, #180]	; (4c44 <menu()+0x6d8>)
    4b90:	f004 fc3c 	bl	940c <Print::println()>
    4b94:	2110      	movs	r1, #16
    4b96:	483f      	ldr	r0, [pc, #252]	; (4c94 <menu()+0x728>)
    4b98:	f007 f97c 	bl	be94 <usb_serial_write>
    4b9c:	4829      	ldr	r0, [pc, #164]	; (4c44 <menu()+0x6d8>)
    4b9e:	f004 fc35 	bl	940c <Print::println()>
    4ba2:	2113      	movs	r1, #19
    4ba4:	483c      	ldr	r0, [pc, #240]	; (4c98 <menu()+0x72c>)
    4ba6:	f007 f975 	bl	be94 <usb_serial_write>
    SERIALCONSOLE.println(firmver);
    4baa:	4b3c      	ldr	r3, [pc, #240]	; (4c9c <menu()+0x730>)
	size_t print(int n)				{ return print((long)n); }
    4bac:	4825      	ldr	r0, [pc, #148]	; (4c44 <menu()+0x6d8>)
    4bae:	6819      	ldr	r1, [r3, #0]
    4bb0:	f004 fc24 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4bb4:	4823      	ldr	r0, [pc, #140]	; (4c44 <menu()+0x6d8>)
    4bb6:	f004 fc29 	bl	940c <Print::println()>
    4bba:	2114      	movs	r1, #20
    4bbc:	4838      	ldr	r0, [pc, #224]	; (4ca0 <menu()+0x734>)
    4bbe:	f007 f969 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4bc2:	4820      	ldr	r0, [pc, #128]	; (4c44 <menu()+0x6d8>)
    4bc4:	f004 fc22 	bl	940c <Print::println()>
    4bc8:	211e      	movs	r1, #30
    4bca:	4836      	ldr	r0, [pc, #216]	; (4ca4 <menu()+0x738>)
    4bcc:	f007 f962 	bl	be94 <usb_serial_write>
    4bd0:	481c      	ldr	r0, [pc, #112]	; (4c44 <menu()+0x6d8>)
    4bd2:	f004 fc1b 	bl	940c <Print::println()>
    4bd6:	2115      	movs	r1, #21
    4bd8:	4833      	ldr	r0, [pc, #204]	; (4ca8 <menu()+0x73c>)
    4bda:	f007 f95b 	bl	be94 <usb_serial_write>
    4bde:	4819      	ldr	r0, [pc, #100]	; (4c44 <menu()+0x6d8>)
    4be0:	f004 fc14 	bl	940c <Print::println()>
    4be4:	211e      	movs	r1, #30
    4be6:	4831      	ldr	r0, [pc, #196]	; (4cac <menu()+0x740>)
    4be8:	f007 f954 	bl	be94 <usb_serial_write>
    4bec:	4815      	ldr	r0, [pc, #84]	; (4c44 <menu()+0x6d8>)
    4bee:	f004 fc0d 	bl	940c <Print::println()>
    4bf2:	2120      	movs	r1, #32
    4bf4:	482e      	ldr	r0, [pc, #184]	; (4cb0 <menu()+0x744>)
    4bf6:	f007 f94d 	bl	be94 <usb_serial_write>
    4bfa:	4812      	ldr	r0, [pc, #72]	; (4c44 <menu()+0x6d8>)
    4bfc:	f004 fc06 	bl	940c <Print::println()>
    4c00:	2119      	movs	r1, #25
    4c02:	482c      	ldr	r0, [pc, #176]	; (4cb4 <menu()+0x748>)
    4c04:	f007 f946 	bl	be94 <usb_serial_write>
    4c08:	480e      	ldr	r0, [pc, #56]	; (4c44 <menu()+0x6d8>)
    4c0a:	f004 fbff 	bl	940c <Print::println()>
    4c0e:	2112      	movs	r1, #18
    4c10:	4829      	ldr	r0, [pc, #164]	; (4cb8 <menu()+0x74c>)
    4c12:	f007 f93f 	bl	be94 <usb_serial_write>
    4c16:	480b      	ldr	r0, [pc, #44]	; (4c44 <menu()+0x6d8>)
    4c18:	f004 fbf8 	bl	940c <Print::println()>
    4c1c:	210f      	movs	r1, #15
    4c1e:	4827      	ldr	r0, [pc, #156]	; (4cbc <menu()+0x750>)
    4c20:	f007 f938 	bl	be94 <usb_serial_write>
    4c24:	4807      	ldr	r0, [pc, #28]	; (4c44 <menu()+0x6d8>)
    4c26:	f004 fbf1 	bl	940c <Print::println()>
    4c2a:	210d      	movs	r1, #13
    4c2c:	4824      	ldr	r0, [pc, #144]	; (4cc0 <menu()+0x754>)
    4c2e:	f007 f931 	bl	be94 <usb_serial_write>
    4c32:	4804      	ldr	r0, [pc, #16]	; (4c44 <menu()+0x6d8>)
    4c34:	f004 fbea 	bl	940c <Print::println()>
    debug = 0;
    4c38:	2200      	movs	r2, #0
    menuload = 1;
    4c3a:	2301      	movs	r3, #1
    debug = 0;
    4c3c:	6032      	str	r2, [r6, #0]
    menuload = 1;
    4c3e:	6023      	str	r3, [r4, #0]
}
    4c40:	b003      	add	sp, #12
    4c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c44:	1fff89fc 	.word	0x1fff89fc
    4c48:	1fffd9bc 	.word	0x1fffd9bc
    4c4c:	3a83126f 	.word	0x3a83126f
    4c50:	0001459c 	.word	0x0001459c
    4c54:	000145bc 	.word	0x000145bc
    4c58:	447a0000 	.word	0x447a0000
    4c5c:	00014370 	.word	0x00014370
    4c60:	000145dc 	.word	0x000145dc
    4c64:	00014600 	.word	0x00014600
    4c68:	00014528 	.word	0x00014528
    4c6c:	0001461c 	.word	0x0001461c
    4c70:	00014640 	.word	0x00014640
    4c74:	1fff91e4 	.word	0x1fff91e4
    4c78:	00014818 	.word	0x00014818
    4c7c:	00014328 	.word	0x00014328
    4c80:	00014344 	.word	0x00014344
    4c84:	00014374 	.word	0x00014374
    4c88:	00014390 	.word	0x00014390
    4c8c:	1fff8848 	.word	0x1fff8848
    4c90:	00014750 	.word	0x00014750
    4c94:	00014758 	.word	0x00014758
    4c98:	0001476c 	.word	0x0001476c
    4c9c:	1fff8854 	.word	0x1fff8854
    4ca0:	00014780 	.word	0x00014780
    4ca4:	00014798 	.word	0x00014798
    4ca8:	000147b8 	.word	0x000147b8
    4cac:	000147d0 	.word	0x000147d0
    4cb0:	000147f0 	.word	0x000147f0
    4cb4:	00014814 	.word	0x00014814
    4cb8:	00014830 	.word	0x00014830
    4cbc:	00014844 	.word	0x00014844
    4cc0:	00014854 	.word	0x00014854
          settings.IgnoreVolt = Serial.parseInt();
    4cc4:	48c5      	ldr	r0, [pc, #788]	; (4fdc <menu()+0xa70>)
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4cc6:	4ec6      	ldr	r6, [pc, #792]	; (4fe0 <menu()+0xa74>)
          settings.IgnoreVolt = Serial.parseInt();
    4cc8:	f004 fcfe 	bl	96c8 <Stream::parseInt()>
    4ccc:	f007 ff6e 	bl	cbac <__aeabi_i2f>
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4cd0:	49c4      	ldr	r1, [pc, #784]	; (4fe4 <menu()+0xa78>)
    4cd2:	f007 ffbf 	bl	cc54 <__aeabi_fmul>
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    4cd6:	f9b6 30d8 	ldrsh.w	r3, [r6, #216]	; 0xd8
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4cda:	64f0      	str	r0, [r6, #76]	; 0x4c
    4cdc:	4602      	mov	r2, r0
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    4cde:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
    4ce2:	e6eb      	b.n	4abc <menu()+0x550>
          settings.IgnoreTemp = Serial.parseInt();
    4ce4:	48bd      	ldr	r0, [pc, #756]	; (4fdc <menu()+0xa70>)
    4ce6:	4ebe      	ldr	r6, [pc, #760]	; (4fe0 <menu()+0xa74>)
    4ce8:	f004 fcee 	bl	96c8 <Stream::parseInt()>
    4cec:	b2c1      	uxtb	r1, r0
    4cee:	f886 1048 	strb.w	r1, [r6, #72]	; 0x48
    4cf2:	e6db      	b.n	4aac <menu()+0x540>
          settings.WarnToff = Serial.parseInt();
    4cf4:	48b9      	ldr	r0, [pc, #740]	; (4fdc <menu()+0xa70>)
    4cf6:	4eba      	ldr	r6, [pc, #744]	; (4fe0 <menu()+0xa74>)
    4cf8:	f004 fce6 	bl	96c8 <Stream::parseInt()>
    4cfc:	f007 ff56 	bl	cbac <__aeabi_i2f>
          menuload = 1;
    4d00:	2301      	movs	r3, #1
    4d02:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4d04:	2361      	movs	r3, #97	; 0x61
          settings.WarnToff = Serial.parseInt();
    4d06:	6430      	str	r0, [r6, #64]	; 0x40
          incomingByte = 'a';
    4d08:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4d0a:	e64a      	b.n	49a2 <menu()+0x436>
        virtual int available() { return usb_serial_available(); }
    4d0c:	f007 f890 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    4d10:	2800      	cmp	r0, #0
    4d12:	f301 831b 	bgt.w	634c <menu()+0x1de0>
  if (menuload == 5) {
    4d16:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4d18:	6828      	ldr	r0, [r5, #0]
  if (menuload == 5) {
    4d1a:	2b05      	cmp	r3, #5
    4d1c:	d117      	bne.n	4d4e <menu()+0x7e2>
    switch (incomingByte) {
    4d1e:	2836      	cmp	r0, #54	; 0x36
    4d20:	f300 8686 	bgt.w	5a30 <menu()+0x14c4>
    4d24:	2830      	cmp	r0, #48	; 0x30
    4d26:	f77f ac83 	ble.w	4630 <menu()+0xc4>
    4d2a:	3832      	subs	r0, #50	; 0x32
    4d2c:	2804      	cmp	r0, #4
    4d2e:	f201 83a7 	bhi.w	6480 <menu()+0x1f14>
    4d32:	e8df f010 	tbh	[pc, r0, lsl #1]
    4d36:	0135      	.short	0x0135
    4d38:	00a90125 	.word	0x00a90125
    4d3c:	01450005 	.word	0x01450005
    4d40:	f007 f876 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    4d44:	2800      	cmp	r0, #0
    4d46:	f301 8107 	bgt.w	5f58 <menu()+0x19ec>
  if (menuload == 3) {
    4d4a:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4d4c:	6828      	ldr	r0, [r5, #0]
  if (menuload == 3) {
    4d4e:	2b03      	cmp	r3, #3
    4d50:	f47f ad36 	bne.w	47c0 <menu()+0x254>
    switch (incomingByte) {
    4d54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4d58:	2b48      	cmp	r3, #72	; 0x48
    4d5a:	f63f ad34 	bhi.w	47c6 <menu()+0x25a>
    4d5e:	a201      	add	r2, pc, #4	; (adr r2, 4d64 <menu()+0x7f8>)
    4d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4d64:	000062d1 	.word	0x000062d1
    4d68:	000062fd 	.word	0x000062fd
    4d6c:	000062af 	.word	0x000062af
    4d70:	00006293 	.word	0x00006293
    4d74:	00006277 	.word	0x00006277
    4d78:	00006255 	.word	0x00006255
    4d7c:	00006235 	.word	0x00006235
    4d80:	0000621f 	.word	0x0000621f
    4d84:	00006203 	.word	0x00006203
    4d88:	000061e3 	.word	0x000061e3
    4d8c:	000047c7 	.word	0x000047c7
    4d90:	000047c7 	.word	0x000047c7
    4d94:	000047c7 	.word	0x000047c7
    4d98:	000047c7 	.word	0x000047c7
    4d9c:	000047c7 	.word	0x000047c7
    4da0:	000047c7 	.word	0x000047c7
    4da4:	000047c7 	.word	0x000047c7
    4da8:	000047c7 	.word	0x000047c7
    4dac:	000047c7 	.word	0x000047c7
    4db0:	000047c7 	.word	0x000047c7
    4db4:	000047c7 	.word	0x000047c7
    4db8:	000047c7 	.word	0x000047c7
    4dbc:	000047c7 	.word	0x000047c7
    4dc0:	000047c7 	.word	0x000047c7
    4dc4:	000047c7 	.word	0x000047c7
    4dc8:	000047c7 	.word	0x000047c7
    4dcc:	000047c7 	.word	0x000047c7
    4dd0:	000047c7 	.word	0x000047c7
    4dd4:	000047c7 	.word	0x000047c7
    4dd8:	000047c7 	.word	0x000047c7
    4ddc:	000047c7 	.word	0x000047c7
    4de0:	000047c7 	.word	0x000047c7
    4de4:	000047c7 	.word	0x000047c7
    4de8:	000047c7 	.word	0x000047c7
    4dec:	000047c7 	.word	0x000047c7
    4df0:	000047c7 	.word	0x000047c7
    4df4:	000047c7 	.word	0x000047c7
    4df8:	000047c7 	.word	0x000047c7
    4dfc:	000047c7 	.word	0x000047c7
    4e00:	000047c7 	.word	0x000047c7
    4e04:	000047c7 	.word	0x000047c7
    4e08:	000047c7 	.word	0x000047c7
    4e0c:	000047c7 	.word	0x000047c7
    4e10:	000047c7 	.word	0x000047c7
    4e14:	000047c7 	.word	0x000047c7
    4e18:	000047c7 	.word	0x000047c7
    4e1c:	000047c7 	.word	0x000047c7
    4e20:	000047c7 	.word	0x000047c7
    4e24:	000047c7 	.word	0x000047c7
    4e28:	000061cd 	.word	0x000061cd
    4e2c:	0000614b 	.word	0x0000614b
    4e30:	00006135 	.word	0x00006135
    4e34:	0000611f 	.word	0x0000611f
    4e38:	00006107 	.word	0x00006107
    4e3c:	00006057 	.word	0x00006057
    4e40:	00004769 	.word	0x00004769
    4e44:	0000478d 	.word	0x0000478d
    4e48:	000047c7 	.word	0x000047c7
    4e4c:	000047b3 	.word	0x000047b3
    4e50:	000060e7 	.word	0x000060e7
    4e54:	000047c7 	.word	0x000047c7
    4e58:	000047c7 	.word	0x000047c7
    4e5c:	000047c7 	.word	0x000047c7
    4e60:	000047c7 	.word	0x000047c7
    4e64:	000047c7 	.word	0x000047c7
    4e68:	000060d9 	.word	0x000060d9
    4e6c:	000060bb 	.word	0x000060bb
    4e70:	000047c7 	.word	0x000047c7
    4e74:	000047c7 	.word	0x000047c7
    4e78:	000047c7 	.word	0x000047c7
    4e7c:	000047c7 	.word	0x000047c7
    4e80:	000047c7 	.word	0x000047c7
    4e84:	000060a5 	.word	0x000060a5
    4e88:	f006 ffd2 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    4e8c:	2800      	cmp	r0, #0
    4e8e:	f77f af5c 	ble.w	4d4a <menu()+0x7de>
          settings.gaugelow = Serial.parseInt();
    4e92:	4852      	ldr	r0, [pc, #328]	; (4fdc <menu()+0xa70>)
    4e94:	4e52      	ldr	r6, [pc, #328]	; (4fe0 <menu()+0xa74>)
    4e96:	f004 fc17 	bl	96c8 <Stream::parseInt()>
          gaugedebug = 2;
    4e9a:	4b53      	ldr	r3, [pc, #332]	; (4fe8 <menu()+0xa7c>)
          settings.gaugelow = Serial.parseInt();
    4e9c:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
          gaugedebug = 2;
    4ea0:	2202      	movs	r2, #2
          gaugedebug = 3;
    4ea2:	601a      	str	r2, [r3, #0]
          gaugeupdate();
    4ea4:	f7fc fd06 	bl	18b4 <gaugeupdate()>
          menuload = 1;
    4ea8:	2201      	movs	r2, #1
          incomingByte = 'k';
    4eaa:	236b      	movs	r3, #107	; 0x6b
          menuload = 1;
    4eac:	6022      	str	r2, [r4, #0]
          incomingByte = 'k';
    4eae:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4eb0:	e001      	b.n	4eb6 <menu()+0x94a>
        virtual int read() { return usb_serial_getchar(); }
    4eb2:	f006 ff81 	bl	bdb8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4eb6:	f006 ffbb 	bl	be30 <usb_serial_available>
        while (Serial.available()) {
    4eba:	2800      	cmp	r0, #0
    4ebc:	d1f9      	bne.n	4eb2 <menu()+0x946>
        SERIALCONSOLE.println();
    4ebe:	4847      	ldr	r0, [pc, #284]	; (4fdc <menu()+0xa70>)
    4ec0:	f004 faa4 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    4ec4:	4845      	ldr	r0, [pc, #276]	; (4fdc <menu()+0xa70>)
    4ec6:	f004 faa1 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    4eca:	4844      	ldr	r0, [pc, #272]	; (4fdc <menu()+0xa70>)
    4ecc:	f004 fa9e 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    4ed0:	4842      	ldr	r0, [pc, #264]	; (4fdc <menu()+0xa70>)
    4ed2:	f004 fa9b 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    4ed6:	4841      	ldr	r0, [pc, #260]	; (4fdc <menu()+0xa70>)
    4ed8:	f004 fa98 	bl	940c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4edc:	2121      	movs	r1, #33	; 0x21
    4ede:	4843      	ldr	r0, [pc, #268]	; (4fec <menu()+0xa80>)
    4ee0:	f006 ffd8 	bl	be94 <usb_serial_write>
    4ee4:	483d      	ldr	r0, [pc, #244]	; (4fdc <menu()+0xa70>)
    4ee6:	f004 fa91 	bl	940c <Print::println()>
    4eea:	2115      	movs	r1, #21
    4eec:	4840      	ldr	r0, [pc, #256]	; (4ff0 <menu()+0xa84>)
    4eee:	f006 ffd1 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4ef2:	f8d6 1094 	ldr.w	r1, [r6, #148]	; 0x94
    4ef6:	4839      	ldr	r0, [pc, #228]	; (4fdc <menu()+0xa70>)
    4ef8:	f004 fa80 	bl	93fc <Print::print(long)>
    4efc:	2102      	movs	r1, #2
    4efe:	483d      	ldr	r0, [pc, #244]	; (4ff4 <menu()+0xa88>)
    4f00:	f006 ffc8 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4f04:	4835      	ldr	r0, [pc, #212]	; (4fdc <menu()+0xa70>)
    4f06:	f004 fa81 	bl	940c <Print::println()>
    4f0a:	211e      	movs	r1, #30
    4f0c:	483a      	ldr	r0, [pc, #232]	; (4ff8 <menu()+0xa8c>)
    4f0e:	f006 ffc1 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4f12:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    4f16:	4831      	ldr	r0, [pc, #196]	; (4fdc <menu()+0xa70>)
    4f18:	f004 fa70 	bl	93fc <Print::print(long)>
    4f1c:	2103      	movs	r1, #3
    4f1e:	4837      	ldr	r0, [pc, #220]	; (4ffc <menu()+0xa90>)
    4f20:	f006 ffb8 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4f24:	482d      	ldr	r0, [pc, #180]	; (4fdc <menu()+0xa70>)
    4f26:	f004 fa71 	bl	940c <Print::println()>
    4f2a:	211e      	movs	r1, #30
    4f2c:	4834      	ldr	r0, [pc, #208]	; (5000 <menu()+0xa94>)
    4f2e:	f006 ffb1 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4f32:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
    4f36:	4829      	ldr	r0, [pc, #164]	; (4fdc <menu()+0xa70>)
    4f38:	f004 fa60 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4f3c:	4827      	ldr	r0, [pc, #156]	; (4fdc <menu()+0xa70>)
    4f3e:	f004 fa65 	bl	940c <Print::println()>
    4f42:	211d      	movs	r1, #29
    4f44:	482f      	ldr	r0, [pc, #188]	; (5004 <menu()+0xa98>)
    4f46:	f006 ffa5 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4f4a:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
    4f4e:	4823      	ldr	r0, [pc, #140]	; (4fdc <menu()+0xa70>)
    4f50:	f004 fa54 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4f54:	4821      	ldr	r0, [pc, #132]	; (4fdc <menu()+0xa70>)
    4f56:	f004 fa59 	bl	940c <Print::println()>
    4f5a:	211e      	movs	r1, #30
    4f5c:	482a      	ldr	r0, [pc, #168]	; (5008 <menu()+0xa9c>)
    4f5e:	f006 ff99 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4f62:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
    4f66:	481d      	ldr	r0, [pc, #116]	; (4fdc <menu()+0xa70>)
    4f68:	f004 fa48 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4f6c:	481b      	ldr	r0, [pc, #108]	; (4fdc <menu()+0xa70>)
    4f6e:	f004 fa4d 	bl	940c <Print::println()>
        if (settings.ESSmode == 1) {
    4f72:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    4f76:	2b01      	cmp	r3, #1
    4f78:	f001 8248 	beq.w	640c <menu()+0x1ea0>
        break;
    4f7c:	2305      	movs	r3, #5
    4f7e:	e5fb      	b.n	4b78 <menu()+0x60c>
        virtual int available() { return usb_serial_available(); }
    4f80:	f006 ff56 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    4f84:	2800      	cmp	r0, #0
    4f86:	f77f aee0 	ble.w	4d4a <menu()+0x7de>
          settings.conthold = Serial.parseInt();
    4f8a:	4814      	ldr	r0, [pc, #80]	; (4fdc <menu()+0xa70>)
    4f8c:	4e14      	ldr	r6, [pc, #80]	; (4fe0 <menu()+0xa74>)
    4f8e:	f004 fb9b 	bl	96c8 <Stream::parseInt()>
          menuload = 1;
    4f92:	2301      	movs	r3, #1
    4f94:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4f96:	236b      	movs	r3, #107	; 0x6b
          settings.conthold = Serial.parseInt();
    4f98:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
          incomingByte = 'k';
    4f9c:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4f9e:	e78a      	b.n	4eb6 <menu()+0x94a>
    4fa0:	f006 ff46 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    4fa4:	2800      	cmp	r0, #0
    4fa6:	f77f aed0 	ble.w	4d4a <menu()+0x7de>
          settings.Precurrent = Serial.parseInt();
    4faa:	480c      	ldr	r0, [pc, #48]	; (4fdc <menu()+0xa70>)
    4fac:	4e0c      	ldr	r6, [pc, #48]	; (4fe0 <menu()+0xa74>)
    4fae:	f004 fb8b 	bl	96c8 <Stream::parseInt()>
          menuload = 1;
    4fb2:	2301      	movs	r3, #1
    4fb4:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4fb6:	236b      	movs	r3, #107	; 0x6b
          settings.Precurrent = Serial.parseInt();
    4fb8:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
          incomingByte = 'k';
    4fbc:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4fbe:	e77a      	b.n	4eb6 <menu()+0x94a>
        settings.tripcont = !settings.tripcont;
    4fc0:	4e07      	ldr	r6, [pc, #28]	; (4fe0 <menu()+0xa74>)
    4fc2:	f896 30d5 	ldrb.w	r3, [r6, #213]	; 0xd5
          menuload = 1;
    4fc6:	2201      	movs	r2, #1
        settings.tripcont = !settings.tripcont;
    4fc8:	fab3 f383 	clz	r3, r3
          menuload = 1;
    4fcc:	6022      	str	r2, [r4, #0]
        settings.tripcont = !settings.tripcont;
    4fce:	095b      	lsrs	r3, r3, #5
          incomingByte = 'k';
    4fd0:	226b      	movs	r2, #107	; 0x6b
        settings.tripcont = !settings.tripcont;
    4fd2:	f886 30d5 	strb.w	r3, [r6, #213]	; 0xd5
          incomingByte = 'k';
    4fd6:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4fd8:	e76d      	b.n	4eb6 <menu()+0x94a>
    4fda:	bf00      	nop
    4fdc:	1fff89fc 	.word	0x1fff89fc
    4fe0:	1fffd9bc 	.word	0x1fffd9bc
    4fe4:	3a83126f 	.word	0x3a83126f
    4fe8:	1fffd8b8 	.word	0x1fffd8b8
    4fec:	00014644 	.word	0x00014644
    4ff0:	00014668 	.word	0x00014668
    4ff4:	000144bc 	.word	0x000144bc
    4ff8:	00014680 	.word	0x00014680
    4ffc:	00014048 	.word	0x00014048
    5000:	000146a0 	.word	0x000146a0
    5004:	000146c0 	.word	0x000146c0
    5008:	000146e0 	.word	0x000146e0
    500c:	f006 ff10 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    5010:	2800      	cmp	r0, #0
    5012:	f77f ae80 	ble.w	4d16 <menu()+0x7aa>
          settings.ChargeVsetpoint = Serial.parseInt();
    5016:	489b      	ldr	r0, [pc, #620]	; (5284 <menu()+0xd18>)
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    5018:	4e9b      	ldr	r6, [pc, #620]	; (5288 <menu()+0xd1c>)
          settings.ChargeVsetpoint = Serial.parseInt();
    501a:	f004 fb55 	bl	96c8 <Stream::parseInt()>
    501e:	f007 fdc5 	bl	cbac <__aeabi_i2f>
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    5022:	499a      	ldr	r1, [pc, #616]	; (528c <menu()+0xd20>)
    5024:	f007 feca 	bl	cdbc <__aeabi_fdiv>
          menuload = 1;
    5028:	2301      	movs	r3, #1
    502a:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    502c:	2365      	movs	r3, #101	; 0x65
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    502e:	61b0      	str	r0, [r6, #24]
          incomingByte = 'e';
    5030:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5032:	e001      	b.n	5038 <menu()+0xacc>
        virtual int read() { return usb_serial_getchar(); }
    5034:	f006 fec0 	bl	bdb8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    5038:	f006 fefa 	bl	be30 <usb_serial_available>
        while (Serial.available()) {
    503c:	4605      	mov	r5, r0
    503e:	2800      	cmp	r0, #0
    5040:	d1f8      	bne.n	5034 <menu()+0xac8>
        SERIALCONSOLE.println();
    5042:	4890      	ldr	r0, [pc, #576]	; (5284 <menu()+0xd18>)
    5044:	f004 f9e2 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    5048:	488e      	ldr	r0, [pc, #568]	; (5284 <menu()+0xd18>)
    504a:	f004 f9df 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    504e:	488d      	ldr	r0, [pc, #564]	; (5284 <menu()+0xd18>)
    5050:	f004 f9dc 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    5054:	488b      	ldr	r0, [pc, #556]	; (5284 <menu()+0xd18>)
    5056:	f004 f9d9 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    505a:	488a      	ldr	r0, [pc, #552]	; (5284 <menu()+0xd18>)
    505c:	f004 f9d6 	bl	940c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5060:	2111      	movs	r1, #17
    5062:	488b      	ldr	r0, [pc, #556]	; (5290 <menu()+0xd24>)
    5064:	f006 ff16 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5068:	4886      	ldr	r0, [pc, #536]	; (5284 <menu()+0xd18>)
    506a:	f004 f9cf 	bl	940c <Print::println()>
    506e:	2128      	movs	r1, #40	; 0x28
    5070:	4888      	ldr	r0, [pc, #544]	; (5294 <menu()+0xd28>)
    5072:	f006 ff0f 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeVsetpoint * 1000, 0);
    5076:	69b0      	ldr	r0, [r6, #24]
    5078:	4984      	ldr	r1, [pc, #528]	; (528c <menu()+0xd20>)
    507a:	f007 fdeb 	bl	cc54 <__aeabi_fmul>
    507e:	f007 fbc5 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5082:	9500      	str	r5, [sp, #0]
    5084:	4602      	mov	r2, r0
    5086:	460b      	mov	r3, r1
    5088:	487e      	ldr	r0, [pc, #504]	; (5284 <menu()+0xd18>)
    508a:	f004 f9e1 	bl	9450 <Print::printFloat(double, unsigned char)>
    508e:	2102      	movs	r1, #2
    5090:	4881      	ldr	r0, [pc, #516]	; (5298 <menu()+0xd2c>)
    5092:	f006 feff 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5096:	487b      	ldr	r0, [pc, #492]	; (5284 <menu()+0xd18>)
    5098:	f004 f9b8 	bl	940c <Print::println()>
    509c:	2116      	movs	r1, #22
    509e:	487f      	ldr	r0, [pc, #508]	; (529c <menu()+0xd30>)
    50a0:	f006 fef8 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeHys * 1000, 0);
    50a4:	6a30      	ldr	r0, [r6, #32]
    50a6:	4979      	ldr	r1, [pc, #484]	; (528c <menu()+0xd20>)
    50a8:	f007 fdd4 	bl	cc54 <__aeabi_fmul>
    50ac:	f007 fbae 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    50b0:	9500      	str	r5, [sp, #0]
    50b2:	460b      	mov	r3, r1
    50b4:	4602      	mov	r2, r0
    50b6:	4873      	ldr	r0, [pc, #460]	; (5284 <menu()+0xd18>)
    50b8:	f004 f9ca 	bl	9450 <Print::printFloat(double, unsigned char)>
    50bc:	2102      	movs	r1, #2
    50be:	4876      	ldr	r0, [pc, #472]	; (5298 <menu()+0xd2c>)
    50c0:	f006 fee8 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    50c4:	486f      	ldr	r0, [pc, #444]	; (5284 <menu()+0xd18>)
    50c6:	f004 f9a1 	bl	940c <Print::println()>
        if (settings.chargertype > 0) {
    50ca:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
    50ce:	2b00      	cmp	r3, #0
    50d0:	dd32      	ble.n	5138 <menu()+0xbcc>
    50d2:	211d      	movs	r1, #29
    50d4:	4872      	ldr	r0, [pc, #456]	; (52a0 <menu()+0xd34>)
    50d6:	f006 fedd 	bl	be94 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentmax * 0.1);
    50da:	6e70      	ldr	r0, [r6, #100]	; 0x64
    50dc:	f007 fd66 	bl	cbac <__aeabi_i2f>
    50e0:	4970      	ldr	r1, [pc, #448]	; (52a4 <menu()+0xd38>)
    50e2:	f007 fdb7 	bl	cc54 <__aeabi_fmul>
    50e6:	f007 fb91 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    50ea:	2502      	movs	r5, #2
    50ec:	4602      	mov	r2, r0
    50ee:	460b      	mov	r3, r1
    50f0:	4864      	ldr	r0, [pc, #400]	; (5284 <menu()+0xd18>)
    50f2:	9500      	str	r5, [sp, #0]
    50f4:	f004 f9ac 	bl	9450 <Print::printFloat(double, unsigned char)>
    50f8:	2101      	movs	r1, #1
    50fa:	486b      	ldr	r0, [pc, #428]	; (52a8 <menu()+0xd3c>)
    50fc:	f006 feca 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5100:	4860      	ldr	r0, [pc, #384]	; (5284 <menu()+0xd18>)
    5102:	f004 f983 	bl	940c <Print::println()>
    5106:	211f      	movs	r1, #31
    5108:	4868      	ldr	r0, [pc, #416]	; (52ac <menu()+0xd40>)
    510a:	f006 fec3 	bl	be94 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentend * 0.1);
    510e:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
    5110:	f007 fd4c 	bl	cbac <__aeabi_i2f>
    5114:	4963      	ldr	r1, [pc, #396]	; (52a4 <menu()+0xd38>)
    5116:	f007 fd9d 	bl	cc54 <__aeabi_fmul>
    511a:	f007 fb77 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    511e:	9500      	str	r5, [sp, #0]
    5120:	4602      	mov	r2, r0
    5122:	460b      	mov	r3, r1
    5124:	4857      	ldr	r0, [pc, #348]	; (5284 <menu()+0xd18>)
    5126:	f004 f993 	bl	9450 <Print::printFloat(double, unsigned char)>
    512a:	485f      	ldr	r0, [pc, #380]	; (52a8 <menu()+0xd3c>)
    512c:	2101      	movs	r1, #1
    512e:	f006 feb1 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5132:	4854      	ldr	r0, [pc, #336]	; (5284 <menu()+0xd18>)
    5134:	f004 f96a 	bl	940c <Print::println()>
    5138:	485d      	ldr	r0, [pc, #372]	; (52b0 <menu()+0xd44>)
    513a:	2111      	movs	r1, #17
    513c:	f006 feaa 	bl	be94 <usb_serial_write>
        switch (settings.chargertype) {
    5140:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
    5144:	2b06      	cmp	r3, #6
    5146:	f200 83a9 	bhi.w	589c <menu()+0x1330>
    514a:	e8df f013 	tbh	[pc, r3, lsl #1]
    514e:	0430      	.short	0x0430
    5150:	042b0435 	.word	0x042b0435
    5154:	043a043f 	.word	0x043a043f
    5158:	03a30444 	.word	0x03a30444
        virtual int available() { return usb_serial_available(); }
    515c:	f006 fe68 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    5160:	2800      	cmp	r0, #0
    5162:	f77f add8 	ble.w	4d16 <menu()+0x7aa>
          settings.ChargeHys = Serial.parseInt();
    5166:	4847      	ldr	r0, [pc, #284]	; (5284 <menu()+0xd18>)
          settings.ChargeHys = settings.ChargeHys / 1000;
    5168:	4e47      	ldr	r6, [pc, #284]	; (5288 <menu()+0xd1c>)
          settings.ChargeHys = Serial.parseInt();
    516a:	f004 faad 	bl	96c8 <Stream::parseInt()>
    516e:	f007 fd1d 	bl	cbac <__aeabi_i2f>
          settings.ChargeHys = settings.ChargeHys / 1000;
    5172:	4946      	ldr	r1, [pc, #280]	; (528c <menu()+0xd20>)
    5174:	f007 fe22 	bl	cdbc <__aeabi_fdiv>
          menuload = 1;
    5178:	2301      	movs	r3, #1
    517a:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    517c:	2365      	movs	r3, #101	; 0x65
          settings.ChargeHys = settings.ChargeHys / 1000;
    517e:	6230      	str	r0, [r6, #32]
          incomingByte = 'e';
    5180:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5182:	e759      	b.n	5038 <menu()+0xacc>
    5184:	f006 fe54 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    5188:	2800      	cmp	r0, #0
    518a:	f77f adc4 	ble.w	4d16 <menu()+0x7aa>
          settings.chargereff = Serial.parseInt();
    518e:	483d      	ldr	r0, [pc, #244]	; (5284 <menu()+0xd18>)
    5190:	4e3d      	ldr	r6, [pc, #244]	; (5288 <menu()+0xd1c>)
    5192:	f004 fa99 	bl	96c8 <Stream::parseInt()>
          menuload = 1;
    5196:	2301      	movs	r3, #1
    5198:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    519a:	2365      	movs	r3, #101	; 0x65
          settings.chargereff = Serial.parseInt();
    519c:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
          incomingByte = 'e';
    51a0:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    51a2:	e749      	b.n	5038 <menu()+0xacc>
    51a4:	f006 fe44 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    51a8:	2800      	cmp	r0, #0
    51aa:	f77f adb4 	ble.w	4d16 <menu()+0x7aa>
          settings.chargecurrent2max = Serial.parseInt() * 10;
    51ae:	4835      	ldr	r0, [pc, #212]	; (5284 <menu()+0xd18>)
    51b0:	4e35      	ldr	r6, [pc, #212]	; (5288 <menu()+0xd1c>)
    51b2:	f004 fa89 	bl	96c8 <Stream::parseInt()>
    51b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    51ba:	0043      	lsls	r3, r0, #1
          menuload = 1;
    51bc:	2201      	movs	r2, #1
          settings.chargecurrent2max = Serial.parseInt() * 10;
    51be:	f8a6 3068 	strh.w	r3, [r6, #104]	; 0x68
          incomingByte = 'e';
    51c2:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    51c4:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    51c6:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    51c8:	e736      	b.n	5038 <menu()+0xacc>
    51ca:	f006 fe31 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    51ce:	2800      	cmp	r0, #0
    51d0:	f77f ada1 	ble.w	4d16 <menu()+0x7aa>
          settings.ChargeTSetpoint = Serial.parseInt();
    51d4:	482b      	ldr	r0, [pc, #172]	; (5284 <menu()+0xd18>)
    51d6:	4e2c      	ldr	r6, [pc, #176]	; (5288 <menu()+0xd1c>)
    51d8:	f004 fa76 	bl	96c8 <Stream::parseInt()>
    51dc:	f007 fce6 	bl	cbac <__aeabi_i2f>
          menuload = 1;
    51e0:	2301      	movs	r3, #1
    51e2:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    51e4:	2365      	movs	r3, #101	; 0x65
          settings.ChargeTSetpoint = Serial.parseInt();
    51e6:	63b0      	str	r0, [r6, #56]	; 0x38
          incomingByte = 'e';
    51e8:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    51ea:	e725      	b.n	5038 <menu()+0xacc>
        if (settings.ChargerDirect == 1) {
    51ec:	4e26      	ldr	r6, [pc, #152]	; (5288 <menu()+0xd1c>)
    51ee:	f896 30d4 	ldrb.w	r3, [r6, #212]	; 0xd4
    51f2:	2b00      	cmp	r3, #0
    51f4:	f001 8093 	beq.w	631e <menu()+0x1db2>
          menuload = 1;
    51f8:	2301      	movs	r3, #1
          settings.ChargerDirect = 0;
    51fa:	2200      	movs	r2, #0
          menuload = 1;
    51fc:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    51fe:	2365      	movs	r3, #101	; 0x65
          settings.ChargerDirect = 0;
    5200:	f886 20d4 	strb.w	r2, [r6, #212]	; 0xd4
          incomingByte = 'e';
    5204:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5206:	e717      	b.n	5038 <menu()+0xacc>
    5208:	f006 fe12 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    520c:	2800      	cmp	r0, #0
    520e:	f77f ad82 	ble.w	4d16 <menu()+0x7aa>
          settings.chargerspd = Serial.parseInt();
    5212:	481c      	ldr	r0, [pc, #112]	; (5284 <menu()+0xd18>)
    5214:	4e1c      	ldr	r6, [pc, #112]	; (5288 <menu()+0xd1c>)
    5216:	f004 fa57 	bl	96c8 <Stream::parseInt()>
          menuload = 1;
    521a:	2301      	movs	r3, #1
    521c:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    521e:	2365      	movs	r3, #101	; 0x65
          settings.chargerspd = Serial.parseInt();
    5220:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
          incomingByte = 'e';
    5224:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5226:	e707      	b.n	5038 <menu()+0xacc>
        settings.chargertype = settings.chargertype + 1;
    5228:	4e17      	ldr	r6, [pc, #92]	; (5288 <menu()+0xd1c>)
    522a:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
          menuload = 1;
    522e:	2201      	movs	r2, #1
        settings.chargertype = settings.chargertype + 1;
    5230:	4413      	add	r3, r2
          settings.chargertype = 0;
    5232:	2b07      	cmp	r3, #7
          menuload = 1;
    5234:	6022      	str	r2, [r4, #0]
          settings.chargertype = 0;
    5236:	bfa8      	it	ge
    5238:	2300      	movge	r3, #0
          incomingByte = 'e';
    523a:	2265      	movs	r2, #101	; 0x65
    523c:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
    5240:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    5242:	e6f9      	b.n	5038 <menu()+0xacc>
    5244:	f006 fdf4 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    5248:	2800      	cmp	r0, #0
    524a:	f77f ad64 	ble.w	4d16 <menu()+0x7aa>
          settings.chargecurrentend = Serial.parseInt() * 10;
    524e:	480d      	ldr	r0, [pc, #52]	; (5284 <menu()+0xd18>)
    5250:	4e0d      	ldr	r6, [pc, #52]	; (5288 <menu()+0xd1c>)
    5252:	f004 fa39 	bl	96c8 <Stream::parseInt()>
    5256:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    525a:	0040      	lsls	r0, r0, #1
          menuload = 1;
    525c:	2201      	movs	r2, #1
          incomingByte = 'e';
    525e:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentend = Serial.parseInt() * 10;
    5260:	66f0      	str	r0, [r6, #108]	; 0x6c
          menuload = 1;
    5262:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    5264:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5266:	e6e7      	b.n	5038 <menu()+0xacc>
        settings.invertcur = !settings.invertcur;
    5268:	4e07      	ldr	r6, [pc, #28]	; (5288 <menu()+0xd1c>)
    526a:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    526e:	fab3 f383 	clz	r3, r3
    5272:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    5274:	2201      	movs	r2, #1
        settings.invertcur = !settings.invertcur;
    5276:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        incomingByte = 'c';
    527a:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    527c:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    527e:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    5280:	e01a      	b.n	52b8 <menu()+0xd4c>
    5282:	bf00      	nop
    5284:	1fff89fc 	.word	0x1fff89fc
    5288:	1fffd9bc 	.word	0x1fffd9bc
    528c:	447a0000 	.word	0x447a0000
    5290:	000147bc 	.word	0x000147bc
    5294:	000143a4 	.word	0x000143a4
    5298:	00014370 	.word	0x00014370
    529c:	000143d0 	.word	0x000143d0
    52a0:	000143e8 	.word	0x000143e8
    52a4:	3dcccccd 	.word	0x3dcccccd
    52a8:	00014afc 	.word	0x00014afc
    52ac:	00014408 	.word	0x00014408
    52b0:	00014428 	.word	0x00014428
        virtual int read() { return usb_serial_getchar(); }
    52b4:	f006 fd80 	bl	bdb8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    52b8:	f006 fdba 	bl	be30 <usb_serial_available>
        while (Serial.available()) {
    52bc:	2800      	cmp	r0, #0
    52be:	d1f9      	bne.n	52b4 <menu()+0xd48>
        SERIALCONSOLE.println();
    52c0:	48b1      	ldr	r0, [pc, #708]	; (5588 <menu()+0x101c>)
    52c2:	f004 f8a3 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    52c6:	48b0      	ldr	r0, [pc, #704]	; (5588 <menu()+0x101c>)
    52c8:	f004 f8a0 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    52cc:	48ae      	ldr	r0, [pc, #696]	; (5588 <menu()+0x101c>)
    52ce:	f004 f89d 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    52d2:	48ad      	ldr	r0, [pc, #692]	; (5588 <menu()+0x101c>)
    52d4:	f004 f89a 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    52d8:	48ab      	ldr	r0, [pc, #684]	; (5588 <menu()+0x101c>)
    52da:	f004 f897 	bl	940c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    52de:	211f      	movs	r1, #31
    52e0:	48aa      	ldr	r0, [pc, #680]	; (558c <menu()+0x1020>)
    52e2:	f006 fdd7 	bl	be94 <usb_serial_write>
    52e6:	48a8      	ldr	r0, [pc, #672]	; (5588 <menu()+0x101c>)
    52e8:	f004 f890 	bl	940c <Print::println()>
    52ec:	211e      	movs	r1, #30
    52ee:	48a8      	ldr	r0, [pc, #672]	; (5590 <menu()+0x1024>)
    52f0:	f006 fdd0 	bl	be94 <usb_serial_write>
    52f4:	48a4      	ldr	r0, [pc, #656]	; (5588 <menu()+0x101c>)
    52f6:	f004 f889 	bl	940c <Print::println()>
    52fa:	48a6      	ldr	r0, [pc, #664]	; (5594 <menu()+0x1028>)
    52fc:	211a      	movs	r1, #26
    52fe:	f006 fdc9 	bl	be94 <usb_serial_write>
        switch (settings.cursens) {
    5302:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
    5306:	2b02      	cmp	r3, #2
    5308:	f001 8047 	beq.w	639a <menu()+0x1e2e>
    530c:	2b03      	cmp	r3, #3
    530e:	f001 803b 	beq.w	6388 <menu()+0x1e1c>
    5312:	2b01      	cmp	r3, #1
    5314:	f001 802f 	beq.w	6376 <menu()+0x1e0a>
    5318:	489f      	ldr	r0, [pc, #636]	; (5598 <menu()+0x102c>)
    531a:	2109      	movs	r1, #9
    531c:	f006 fdba 	bl	be94 <usb_serial_write>
    5320:	4899      	ldr	r0, [pc, #612]	; (5588 <menu()+0x101c>)
    5322:	f004 f873 	bl	940c <Print::println()>
    5326:	2114      	movs	r1, #20
    5328:	489c      	ldr	r0, [pc, #624]	; (559c <menu()+0x1030>)
    532a:	f006 fdb3 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    532e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
    5332:	4895      	ldr	r0, [pc, #596]	; (5588 <menu()+0x101c>)
    5334:	f004 f862 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5338:	4893      	ldr	r0, [pc, #588]	; (5588 <menu()+0x101c>)
    533a:	f004 f867 	bl	940c <Print::println()>
    533e:	211c      	movs	r1, #28
    5340:	4897      	ldr	r0, [pc, #604]	; (55a0 <menu()+0x1034>)
    5342:	f006 fda7 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5346:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
    534a:	488f      	ldr	r0, [pc, #572]	; (5588 <menu()+0x101c>)
    534c:	f004 f856 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5350:	488d      	ldr	r0, [pc, #564]	; (5588 <menu()+0x101c>)
    5352:	f004 f85b 	bl	940c <Print::println()>
    5356:	211c      	movs	r1, #28
    5358:	4892      	ldr	r0, [pc, #584]	; (55a4 <menu()+0x1038>)
    535a:	f006 fd9b 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    535e:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
    5362:	4889      	ldr	r0, [pc, #548]	; (5588 <menu()+0x101c>)
    5364:	f004 f84a 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5368:	4887      	ldr	r0, [pc, #540]	; (5588 <menu()+0x101c>)
    536a:	f004 f84f 	bl	940c <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    536e:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
    5372:	f023 0202 	bic.w	r2, r3, #2
    5376:	2a01      	cmp	r2, #1
    5378:	f000 85fd 	beq.w	5f76 <menu()+0x1a0a>
        if (settings.cursens == Canbus) {
    537c:	2b02      	cmp	r3, #2
    537e:	f001 8032 	beq.w	63e6 <menu()+0x1e7a>
    5382:	2113      	movs	r1, #19
    5384:	4888      	ldr	r0, [pc, #544]	; (55a8 <menu()+0x103c>)
    5386:	f006 fd85 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    538a:	487f      	ldr	r0, [pc, #508]	; (5588 <menu()+0x101c>)
    538c:	f004 f83e 	bl	940c <Print::println()>
        break;
    5390:	2302      	movs	r3, #2
    5392:	f7ff bbf1 	b.w	4b78 <menu()+0x60c>
        settings.voltsoc = !settings.voltsoc;
    5396:	4e85      	ldr	r6, [pc, #532]	; (55ac <menu()+0x1040>)
    5398:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
    539c:	fab3 f383 	clz	r3, r3
    53a0:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    53a2:	2201      	movs	r2, #1
        settings.voltsoc = !settings.voltsoc;
    53a4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        incomingByte = 'c';
    53a8:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    53aa:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    53ac:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    53ae:	e783      	b.n	52b8 <menu()+0xd4c>
        menuload = 1;
    53b0:	2301      	movs	r3, #1
    53b2:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    53b4:	f006 fd3c 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    53b8:	2800      	cmp	r0, #0
    53ba:	f300 87b8 	bgt.w	632e <menu()+0x1dc2>
    53be:	4e7b      	ldr	r6, [pc, #492]	; (55ac <menu()+0x1040>)
        menuload = 1;
    53c0:	2201      	movs	r2, #1
        incomingByte = 'c';
    53c2:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    53c4:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    53c6:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    53c8:	e776      	b.n	52b8 <menu()+0xd4c>
        menuload = 1;
    53ca:	2301      	movs	r3, #1
    53cc:	6023      	str	r3, [r4, #0]
    53ce:	f006 fd2f 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    53d2:	2800      	cmp	r0, #0
    53d4:	dd07      	ble.n	53e6 <menu()+0xe7a>
          settings.convlow = Serial.parseInt();
    53d6:	486c      	ldr	r0, [pc, #432]	; (5588 <menu()+0x101c>)
    53d8:	4e74      	ldr	r6, [pc, #464]	; (55ac <menu()+0x1040>)
    53da:	f004 f975 	bl	96c8 <Stream::parseInt()>
    53de:	f007 fbe5 	bl	cbac <__aeabi_i2f>
    53e2:	f8c6 00a4 	str.w	r0, [r6, #164]	; 0xa4
  if (menuload == 8) {
    53e6:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'c';
    53e8:	2263      	movs	r2, #99	; 0x63
  if (menuload == 7) {
    53ea:	2b07      	cmp	r3, #7
        incomingByte = 'c';
    53ec:	602a      	str	r2, [r5, #0]
  if (menuload == 7) {
    53ee:	f43f a91f 	beq.w	4630 <menu()+0xc4>
  if (menuload == 6)  //Charging settings
    53f2:	2b06      	cmp	r3, #6
    53f4:	f000 82f4 	beq.w	59e0 <menu()+0x1474>
  if (menuload == 5) {
    53f8:	2b05      	cmp	r3, #5
    53fa:	f43f a919 	beq.w	4630 <menu()+0xc4>
  if (menuload == 3) {
    53fe:	2b03      	cmp	r3, #3
    5400:	f000 8698 	beq.w	6134 <menu()+0x1bc8>
  if (menuload == 1) {
    5404:	2b01      	cmp	r3, #1
    5406:	f47f a913 	bne.w	4630 <menu()+0xc4>
    540a:	4e68      	ldr	r6, [pc, #416]	; (55ac <menu()+0x1040>)
    540c:	e754      	b.n	52b8 <menu()+0xd4c>
        menuload = 1;
    540e:	2301      	movs	r3, #1
    5410:	6023      	str	r3, [r4, #0]
    5412:	f006 fd0d 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    5416:	2800      	cmp	r0, #0
    5418:	dde5      	ble.n	53e6 <menu()+0xe7a>
          settings.convhigh = Serial.parseInt();
    541a:	485b      	ldr	r0, [pc, #364]	; (5588 <menu()+0x101c>)
    541c:	4e63      	ldr	r6, [pc, #396]	; (55ac <menu()+0x1040>)
    541e:	f004 f953 	bl	96c8 <Stream::parseInt()>
    5422:	f007 fbc3 	bl	cbac <__aeabi_i2f>
    5426:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    542a:	e7dc      	b.n	53e6 <menu()+0xe7a>
        settings.curcan++;
    542c:	4e5f      	ldr	r6, [pc, #380]	; (55ac <menu()+0x1040>)
    542e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
        menuload = 1;
    5432:	2201      	movs	r2, #1
        settings.curcan++;
    5434:	4413      	add	r3, r2
          settings.curcan = 1;
    5436:	2b05      	cmp	r3, #5
    5438:	bfa8      	it	ge
    543a:	4613      	movge	r3, r2
        menuload = 1;
    543c:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    543e:	2263      	movs	r2, #99	; 0x63
    5440:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    5444:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    5446:	e737      	b.n	52b8 <menu()+0xd4c>
        menuload = 1;
    5448:	2301      	movs	r3, #1
    544a:	6023      	str	r3, [r4, #0]
    544c:	f006 fcf0 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    5450:	2800      	cmp	r0, #0
    5452:	ddb4      	ble.n	53be <menu()+0xe52>
          settings.changecur = Serial.parseInt();
    5454:	484c      	ldr	r0, [pc, #304]	; (5588 <menu()+0x101c>)
    5456:	4e55      	ldr	r6, [pc, #340]	; (55ac <menu()+0x1040>)
    5458:	f004 f936 	bl	96c8 <Stream::parseInt()>
    545c:	f8c6 00a8 	str.w	r0, [r6, #168]	; 0xa8
    5460:	e7ae      	b.n	53c0 <menu()+0xe54>
        settings.cursens++;
    5462:	4e52      	ldr	r6, [pc, #328]	; (55ac <menu()+0x1040>)
    5464:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
        menuload = 1;
    5468:	2201      	movs	r2, #1
        settings.cursens++;
    546a:	4413      	add	r3, r2
          settings.cursens = 0;
    546c:	2b04      	cmp	r3, #4
        menuload = 1;
    546e:	6022      	str	r2, [r4, #0]
          settings.cursens = 0;
    5470:	bfa8      	it	ge
    5472:	2300      	movge	r3, #0
        incomingByte = 'c';
    5474:	2263      	movs	r2, #99	; 0x63
    5476:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
    547a:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    547c:	e71c      	b.n	52b8 <menu()+0xd4c>
        menuload = 1;
    547e:	2301      	movs	r3, #1
    5480:	6023      	str	r3, [r4, #0]
    5482:	f006 fcd5 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    5486:	2800      	cmp	r0, #0
    5488:	ddad      	ble.n	53e6 <menu()+0xe7a>
          settings.CurDead = Serial.parseInt();
    548a:	483f      	ldr	r0, [pc, #252]	; (5588 <menu()+0x101c>)
    548c:	4e47      	ldr	r6, [pc, #284]	; (55ac <menu()+0x1040>)
    548e:	f004 f91b 	bl	96c8 <Stream::parseInt()>
    5492:	f8a6 00ce 	strh.w	r0, [r6, #206]	; 0xce
    5496:	e7a6      	b.n	53e6 <menu()+0xe7a>
        menuload = 1;
    5498:	2301      	movs	r3, #1
    549a:	6023      	str	r3, [r4, #0]
        resetIDdebug();
    549c:	f7ff f828 	bl	44f0 <resetIDdebug()>
        incomingByte = 'd';
    54a0:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    54a2:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    54a4:	602a      	str	r2, [r5, #0]
  if (menuload == 8) {
    54a6:	2b08      	cmp	r3, #8
    54a8:	f43f a8c2 	beq.w	4630 <menu()+0xc4>
  if (menuload == 7) {
    54ac:	2b07      	cmp	r3, #7
    54ae:	f43f a8bf 	beq.w	4630 <menu()+0xc4>
  if (menuload == 6)  //Charging settings
    54b2:	2b06      	cmp	r3, #6
    54b4:	f43f a8bc 	beq.w	4630 <menu()+0xc4>
  if (menuload == 5) {
    54b8:	2b05      	cmp	r3, #5
    54ba:	bf18      	it	ne
    54bc:	2064      	movne	r0, #100	; 0x64
    54be:	f43f a8b7 	beq.w	4630 <menu()+0xc4>
    54c2:	e444      	b.n	4d4e <menu()+0x7e2>
        menuload = 1;
    54c4:	2301      	movs	r3, #1
    54c6:	6023      	str	r3, [r4, #0]
    54c8:	f006 fcb2 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    54cc:	2800      	cmp	r0, #0
    54ce:	dd04      	ble.n	54da <menu()+0xf6e>
          NextID = Serial.parseInt();
    54d0:	482d      	ldr	r0, [pc, #180]	; (5588 <menu()+0x101c>)
    54d2:	f004 f8f9 	bl	96c8 <Stream::parseInt()>
    54d6:	4b36      	ldr	r3, [pc, #216]	; (55b0 <menu()+0x1044>)
    54d8:	7018      	strb	r0, [r3, #0]
        incomingByte = 'd';
    54da:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    54dc:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    54de:	602a      	str	r2, [r5, #0]
        break;
    54e0:	e7e1      	b.n	54a6 <menu()+0xf3a>
        inputcheck = !inputcheck;
    54e2:	4a34      	ldr	r2, [pc, #208]	; (55b4 <menu()+0x1048>)
    54e4:	6813      	ldr	r3, [r2, #0]
    54e6:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    54ea:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    54ec:	2101      	movs	r1, #1
        inputcheck = !inputcheck;
    54ee:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    54f0:	6021      	str	r1, [r4, #0]
        inputcheck = !inputcheck;
    54f2:	6013      	str	r3, [r2, #0]
        incomingByte = 'd';
    54f4:	6028      	str	r0, [r5, #0]
    switch (incomingByte) {
    54f6:	f1a0 0352 	sub.w	r3, r0, #82	; 0x52
    54fa:	2b1f      	cmp	r3, #31
    54fc:	f63f a963 	bhi.w	47c6 <menu()+0x25a>
    5500:	a201      	add	r2, pc, #4	; (adr r2, 5508 <menu()+0xf9c>)
    5502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5506:	bf00      	nop
    5508:	00005a03 	.word	0x00005a03
    550c:	000047c7 	.word	0x000047c7
    5510:	000047c7 	.word	0x000047c7
    5514:	000047c7 	.word	0x000047c7
    5518:	000047c7 	.word	0x000047c7
    551c:	000047c7 	.word	0x000047c7
    5520:	000047c7 	.word	0x000047c7
    5524:	000047c7 	.word	0x000047c7
    5528:	000047c7 	.word	0x000047c7
    552c:	000047c7 	.word	0x000047c7
    5530:	000047c7 	.word	0x000047c7
    5534:	000047c7 	.word	0x000047c7
    5538:	000047c7 	.word	0x000047c7
    553c:	000047c7 	.word	0x000047c7
    5540:	000047c7 	.word	0x000047c7
    5544:	0000646f 	.word	0x0000646f
    5548:	00006469 	.word	0x00006469
    554c:	0000540b 	.word	0x0000540b
    5550:	000055bd 	.word	0x000055bd
    5554:	0000647b 	.word	0x0000647b
    5558:	000047c7 	.word	0x000047c7
    555c:	000047c7 	.word	0x000047c7
    5560:	000047c7 	.word	0x000047c7
    5564:	00006475 	.word	0x00006475
    5568:	000047c7 	.word	0x000047c7
    556c:	00006463 	.word	0x00006463
    5570:	000047c7 	.word	0x000047c7
    5574:	000047c7 	.word	0x000047c7
    5578:	000047c7 	.word	0x000047c7
    557c:	000047c7 	.word	0x000047c7
    5580:	000047c7 	.word	0x000047c7
    5584:	00005a11 	.word	0x00005a11
    5588:	1fff89fc 	.word	0x1fff89fc
    558c:	000149bc 	.word	0x000149bc
    5590:	000149dc 	.word	0x000149dc
    5594:	000149fc 	.word	0x000149fc
    5598:	00014a74 	.word	0x00014a74
    559c:	00014a80 	.word	0x00014a80
    55a0:	00014a98 	.word	0x00014a98
    55a4:	00014ab8 	.word	0x00014ab8
    55a8:	00014390 	.word	0x00014390
    55ac:	1fffd9bc 	.word	0x1fffd9bc
    55b0:	1fff91a0 	.word	0x1fff91a0
    55b4:	1fffd8d4 	.word	0x1fffd8d4
        virtual int read() { return usb_serial_getchar(); }
    55b8:	f006 fbfe 	bl	bdb8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    55bc:	f006 fc38 	bl	be30 <usb_serial_available>
        while (Serial.available()) {
    55c0:	4605      	mov	r5, r0
    55c2:	2800      	cmp	r0, #0
    55c4:	d1f8      	bne.n	55b8 <menu()+0x104c>
        SERIALCONSOLE.println();
    55c6:	4892      	ldr	r0, [pc, #584]	; (5810 <menu()+0x12a4>)
        SERIALCONSOLE.println(settings.ESSmode);
    55c8:	4e92      	ldr	r6, [pc, #584]	; (5814 <menu()+0x12a8>)
        SERIALCONSOLE.println();
    55ca:	f003 ff1f 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    55ce:	4890      	ldr	r0, [pc, #576]	; (5810 <menu()+0x12a4>)
    55d0:	f003 ff1c 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    55d4:	488e      	ldr	r0, [pc, #568]	; (5810 <menu()+0x12a4>)
    55d6:	f003 ff19 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    55da:	488d      	ldr	r0, [pc, #564]	; (5810 <menu()+0x12a4>)
    55dc:	f003 ff16 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    55e0:	488b      	ldr	r0, [pc, #556]	; (5810 <menu()+0x12a4>)
    55e2:	f003 ff13 	bl	940c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    55e6:	2113      	movs	r1, #19
    55e8:	488b      	ldr	r0, [pc, #556]	; (5818 <menu()+0x12ac>)
    55ea:	f006 fc53 	bl	be94 <usb_serial_write>
    55ee:	4888      	ldr	r0, [pc, #544]	; (5810 <menu()+0x12a4>)
    55f0:	f003 ff0c 	bl	940c <Print::println()>
    55f4:	210d      	movs	r1, #13
    55f6:	4889      	ldr	r0, [pc, #548]	; (581c <menu()+0x12b0>)
    55f8:	f006 fc4c 	bl	be94 <usb_serial_write>
    55fc:	4884      	ldr	r0, [pc, #528]	; (5810 <menu()+0x12a4>)
    55fe:	f003 ff05 	bl	940c <Print::println()>
    5602:	210f      	movs	r1, #15
    5604:	4886      	ldr	r0, [pc, #536]	; (5820 <menu()+0x12b4>)
    5606:	f006 fc45 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.println(candebug);
    560a:	4b86      	ldr	r3, [pc, #536]	; (5824 <menu()+0x12b8>)
	size_t print(int n)				{ return print((long)n); }
    560c:	4880      	ldr	r0, [pc, #512]	; (5810 <menu()+0x12a4>)
    560e:	6819      	ldr	r1, [r3, #0]
    5610:	f003 fef4 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5614:	487e      	ldr	r0, [pc, #504]	; (5810 <menu()+0x12a4>)
    5616:	f003 fef9 	bl	940c <Print::println()>
    561a:	2113      	movs	r1, #19
    561c:	4882      	ldr	r0, [pc, #520]	; (5828 <menu()+0x12bc>)
    561e:	f006 fc39 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.println(debugCur);
    5622:	4b82      	ldr	r3, [pc, #520]	; (582c <menu()+0x12c0>)
	size_t print(int n)				{ return print((long)n); }
    5624:	487a      	ldr	r0, [pc, #488]	; (5810 <menu()+0x12a4>)
    5626:	6819      	ldr	r1, [r3, #0]
    5628:	f003 fee8 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    562c:	4878      	ldr	r0, [pc, #480]	; (5810 <menu()+0x12a4>)
    562e:	f003 feed 	bl	940c <Print::println()>
    5632:	2112      	movs	r1, #18
    5634:	487e      	ldr	r0, [pc, #504]	; (5830 <menu()+0x12c4>)
    5636:	f006 fc2d 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.println(outputcheck);
    563a:	4b7e      	ldr	r3, [pc, #504]	; (5834 <menu()+0x12c8>)
	size_t print(int n)				{ return print((long)n); }
    563c:	4874      	ldr	r0, [pc, #464]	; (5810 <menu()+0x12a4>)
    563e:	6819      	ldr	r1, [r3, #0]
    5640:	f003 fedc 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5644:	4872      	ldr	r0, [pc, #456]	; (5810 <menu()+0x12a4>)
    5646:	f003 fee1 	bl	940c <Print::println()>
    564a:	2111      	movs	r1, #17
    564c:	487a      	ldr	r0, [pc, #488]	; (5838 <menu()+0x12cc>)
    564e:	f006 fc21 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.println(inputcheck);
    5652:	4b7a      	ldr	r3, [pc, #488]	; (583c <menu()+0x12d0>)
	size_t print(int n)				{ return print((long)n); }
    5654:	486e      	ldr	r0, [pc, #440]	; (5810 <menu()+0x12a4>)
    5656:	6819      	ldr	r1, [r3, #0]
    5658:	f003 fed0 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    565c:	486c      	ldr	r0, [pc, #432]	; (5810 <menu()+0x12a4>)
    565e:	f003 fed5 	bl	940c <Print::println()>
    5662:	210e      	movs	r1, #14
    5664:	4876      	ldr	r0, [pc, #472]	; (5840 <menu()+0x12d4>)
    5666:	f006 fc15 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    566a:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
    566e:	4868      	ldr	r0, [pc, #416]	; (5810 <menu()+0x12a4>)
    5670:	f003 fec4 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5674:	4866      	ldr	r0, [pc, #408]	; (5810 <menu()+0x12a4>)
    5676:	f003 fec9 	bl	940c <Print::println()>
    567a:	2119      	movs	r1, #25
    567c:	4871      	ldr	r0, [pc, #452]	; (5844 <menu()+0x12d8>)
    567e:	f006 fc09 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.println(cellspresent);
    5682:	4b71      	ldr	r3, [pc, #452]	; (5848 <menu()+0x12dc>)
	size_t print(int n)				{ return print((long)n); }
    5684:	4862      	ldr	r0, [pc, #392]	; (5810 <menu()+0x12a4>)
    5686:	6819      	ldr	r1, [r3, #0]
    5688:	f003 feb8 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    568c:	4860      	ldr	r0, [pc, #384]	; (5810 <menu()+0x12a4>)
    568e:	f003 febd 	bl	940c <Print::println()>
    5692:	2111      	movs	r1, #17
    5694:	486d      	ldr	r0, [pc, #436]	; (584c <menu()+0x12e0>)
    5696:	f006 fbfd 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.println(gaugedebug);
    569a:	4b6d      	ldr	r3, [pc, #436]	; (5850 <menu()+0x12e4>)
	size_t print(int n)				{ return print((long)n); }
    569c:	485c      	ldr	r0, [pc, #368]	; (5810 <menu()+0x12a4>)
    569e:	6819      	ldr	r1, [r3, #0]
    56a0:	f003 feac 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    56a4:	485a      	ldr	r0, [pc, #360]	; (5810 <menu()+0x12a4>)
    56a6:	f003 feb1 	bl	940c <Print::println()>
    56aa:	2110      	movs	r1, #16
    56ac:	4869      	ldr	r0, [pc, #420]	; (5854 <menu()+0x12e8>)
    56ae:	f006 fbf1 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.println(CSVdebug);
    56b2:	4b69      	ldr	r3, [pc, #420]	; (5858 <menu()+0x12ec>)
	size_t print(int n)				{ return print((long)n); }
    56b4:	4856      	ldr	r0, [pc, #344]	; (5810 <menu()+0x12a4>)
    56b6:	6819      	ldr	r1, [r3, #0]
    56b8:	f003 fea0 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    56bc:	4854      	ldr	r0, [pc, #336]	; (5810 <menu()+0x12a4>)
    56be:	f003 fea5 	bl	940c <Print::println()>
    56c2:	211c      	movs	r1, #28
    56c4:	4865      	ldr	r0, [pc, #404]	; (585c <menu()+0x12f0>)
    56c6:	f006 fbe5 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.println(debugdigits);
    56ca:	4b65      	ldr	r3, [pc, #404]	; (5860 <menu()+0x12f4>)
	size_t print(int n)				{ return print((long)n); }
    56cc:	4850      	ldr	r0, [pc, #320]	; (5810 <menu()+0x12a4>)
    56ce:	6819      	ldr	r1, [r3, #0]
    56d0:	f003 fe94 	bl	93fc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    56d4:	484e      	ldr	r0, [pc, #312]	; (5810 <menu()+0x12a4>)
    56d6:	f003 fe99 	bl	940c <Print::println()>
    56da:	2116      	movs	r1, #22
    56dc:	4861      	ldr	r0, [pc, #388]	; (5864 <menu()+0x12f8>)
    56de:	f006 fbd9 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    56e2:	f8b6 10b0 	ldrh.w	r1, [r6, #176]	; 0xb0
    56e6:	484a      	ldr	r0, [pc, #296]	; (5810 <menu()+0x12a4>)
    56e8:	f003 fe88 	bl	93fc <Print::print(long)>
    56ec:	211e      	movs	r1, #30
    56ee:	485e      	ldr	r0, [pc, #376]	; (5868 <menu()+0x12fc>)
    56f0:	f006 fbd0 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    56f4:	4846      	ldr	r0, [pc, #280]	; (5810 <menu()+0x12a4>)
    56f6:	f003 fe89 	bl	940c <Print::println()>
    56fa:	210c      	movs	r1, #12
    56fc:	485b      	ldr	r0, [pc, #364]	; (586c <menu()+0x1300>)
    56fe:	f006 fbc9 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(NextID);
    5702:	495b      	ldr	r1, [pc, #364]	; (5870 <menu()+0x1304>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    5704:	4842      	ldr	r0, [pc, #264]	; (5810 <menu()+0x12a4>)
    5706:	7809      	ldrb	r1, [r1, #0]
    5708:	462b      	mov	r3, r5
    570a:	220a      	movs	r2, #10
    570c:	f003 fe96 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        SERIALCONSOLE.println();
    5710:	483f      	ldr	r0, [pc, #252]	; (5810 <menu()+0x12a4>)
    5712:	f003 fe7b 	bl	940c <Print::println()>
    5716:	2110      	movs	r1, #16
    5718:	4856      	ldr	r0, [pc, #344]	; (5874 <menu()+0x1308>)
    571a:	f006 fbbb 	bl	be94 <usb_serial_write>
    571e:	4629      	mov	r1, r5
    5720:	4855      	ldr	r0, [pc, #340]	; (5878 <menu()+0x130c>)
    5722:	f006 fbb7 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5726:	483a      	ldr	r0, [pc, #232]	; (5810 <menu()+0x12a4>)
    5728:	f003 fe70 	bl	940c <Print::println()>
    572c:	2117      	movs	r1, #23
    572e:	4853      	ldr	r0, [pc, #332]	; (587c <menu()+0x1310>)
    5730:	f006 fbb0 	bl	be94 <usb_serial_write>
    5734:	4836      	ldr	r0, [pc, #216]	; (5810 <menu()+0x12a4>)
    5736:	f003 fe69 	bl	940c <Print::println()>
    573a:	2113      	movs	r1, #19
    573c:	4850      	ldr	r0, [pc, #320]	; (5880 <menu()+0x1314>)
    573e:	f006 fba9 	bl	be94 <usb_serial_write>
    5742:	4833      	ldr	r0, [pc, #204]	; (5810 <menu()+0x12a4>)
    5744:	f003 fe62 	bl	940c <Print::println()>
        break;
    5748:	2304      	movs	r3, #4
    574a:	f7ff ba15 	b.w	4b78 <menu()+0x60c>
        settings.ESSmode = !settings.ESSmode;
    574e:	4e31      	ldr	r6, [pc, #196]	; (5814 <menu()+0x12a8>)
    5750:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    5754:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    5758:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    575a:	2201      	movs	r2, #1
        settings.ESSmode = !settings.ESSmode;
    575c:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    575e:	6022      	str	r2, [r4, #0]
        settings.ESSmode = !settings.ESSmode;
    5760:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
        incomingByte = 'd';
    5764:	6028      	str	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    5766:	e6c6      	b.n	54f6 <menu()+0xf8a>
        menuload = 1;
    5768:	2301      	movs	r3, #1
        cellspresent = bms.seriescells();
    576a:	4846      	ldr	r0, [pc, #280]	; (5884 <menu()+0x1318>)
        menuload = 1;
    576c:	6023      	str	r3, [r4, #0]
        cellspresent = bms.seriescells();
    576e:	f7fb f9bd 	bl	aec <BMSModuleManager::seriescells()>
    5772:	4b35      	ldr	r3, [pc, #212]	; (5848 <menu()+0x12dc>)
        incomingByte = 'd';
    5774:	2264      	movs	r2, #100	; 0x64
        cellspresent = bms.seriescells();
    5776:	6018      	str	r0, [r3, #0]
        incomingByte = 'd';
    5778:	602a      	str	r2, [r5, #0]
  if (menuload == 2) {
    577a:	6823      	ldr	r3, [r4, #0]
        break;
    577c:	e693      	b.n	54a6 <menu()+0xf3a>
        gaugedebug = !gaugedebug;
    577e:	4a34      	ldr	r2, [pc, #208]	; (5850 <menu()+0x12e4>)
    5780:	e6b0      	b.n	54e4 <menu()+0xf78>
        candebug = !candebug;
    5782:	4a28      	ldr	r2, [pc, #160]	; (5824 <menu()+0x12b8>)
    5784:	e6ae      	b.n	54e4 <menu()+0xf78>
        debugCur = !debugCur;
    5786:	4a29      	ldr	r2, [pc, #164]	; (582c <menu()+0x12c0>)
    5788:	e6ac      	b.n	54e4 <menu()+0xf78>
        outputcheck = !outputcheck;
    578a:	4b2a      	ldr	r3, [pc, #168]	; (5834 <menu()+0x12c8>)
    578c:	681a      	ldr	r2, [r3, #0]
        menuload = 1;
    578e:	2101      	movs	r1, #1
        outputcheck = !outputcheck;
    5790:	2a00      	cmp	r2, #0
    5792:	bf0c      	ite	eq
    5794:	460a      	moveq	r2, r1
    5796:	2200      	movne	r2, #0
        menuload = 1;
    5798:	6021      	str	r1, [r4, #0]
        outputcheck = !outputcheck;
    579a:	601a      	str	r2, [r3, #0]
        if (outputcheck == 0) {
    579c:	f040 8606 	bne.w	63ac <menu()+0x1e40>
        incomingByte = 'd';
    57a0:	2064      	movs	r0, #100	; 0x64
    57a2:	6028      	str	r0, [r5, #0]
  if (menuload == 5) {
    57a4:	e6a7      	b.n	54f6 <menu()+0xf8a>
        CSVdebug = !CSVdebug;
    57a6:	4a2c      	ldr	r2, [pc, #176]	; (5858 <menu()+0x12ec>)
    57a8:	e69c      	b.n	54e4 <menu()+0xf78>
        menuload = 1;
    57aa:	2301      	movs	r3, #1
    57ac:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    57ae:	f006 fb3f 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    57b2:	2800      	cmp	r0, #0
    57b4:	f77f ae91 	ble.w	54da <menu()+0xf6e>
          settings.balanceDuty = Serial.parseInt();
    57b8:	4815      	ldr	r0, [pc, #84]	; (5810 <menu()+0x12a4>)
    57ba:	4e16      	ldr	r6, [pc, #88]	; (5814 <menu()+0x12a8>)
    57bc:	f003 ff84 	bl	96c8 <Stream::parseInt()>
    57c0:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
        incomingByte = 'd';
    57c4:	e689      	b.n	54da <menu()+0xf6e>
  msg.id = 0x0B0;  //broadcast to all Elteks
    57c6:	4930      	ldr	r1, [pc, #192]	; (5888 <menu()+0x131c>)
  msg.buf[0] = 0xFF;
    57c8:	4a30      	ldr	r2, [pc, #192]	; (588c <menu()+0x1320>)
  msg.ext = 0;
    57ca:	88cb      	ldrh	r3, [r1, #6]
  msg.buf[0] = 0xFF;
    57cc:	608a      	str	r2, [r1, #8]
  msg.ext = 0;
    57ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    57d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
        menuload = 1;
    57d6:	2001      	movs	r0, #1
  msg.ext = 0;
    57d8:	80cb      	strh	r3, [r1, #6]
  msg.buf[4] = 0x00;
    57da:	2300      	movs	r3, #0
        menuload = 1;
    57dc:	6020      	str	r0, [r4, #0]
  msg.buf[4] = 0x00;
    57de:	60cb      	str	r3, [r1, #12]
  Can0.write(msg);
    57e0:	482b      	ldr	r0, [pc, #172]	; (5890 <menu()+0x1324>)
  msg.id = 0x0B0;  //broadcast to all Elteks
    57e2:	23b0      	movs	r3, #176	; 0xb0
    57e4:	600b      	str	r3, [r1, #0]
  Can0.write(msg);
    57e6:	f002 fd41 	bl	826c <FlexCAN::write(CAN_message_t const&)>
        incomingByte = 'd';
    57ea:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    57ec:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    57ee:	602a      	str	r2, [r5, #0]
        break;
    57f0:	e659      	b.n	54a6 <menu()+0xf3a>
        menuload = 1;
    57f2:	2301      	movs	r3, #1
    57f4:	6023      	str	r3, [r4, #0]
    57f6:	f006 fb1b 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    57fa:	2800      	cmp	r0, #0
    57fc:	f300 85b4 	bgt.w	6368 <menu()+0x1dfc>
        if (debugdigits > 4) {
    5800:	4b17      	ldr	r3, [pc, #92]	; (5860 <menu()+0x12f4>)
    5802:	6818      	ldr	r0, [r3, #0]
    5804:	2804      	cmp	r0, #4
    5806:	f77f ae68 	ble.w	54da <menu()+0xf6e>
          debugdigits = 2;
    580a:	2202      	movs	r2, #2
    580c:	601a      	str	r2, [r3, #0]
        incomingByte = 'd';
    580e:	e664      	b.n	54da <menu()+0xf6e>
    5810:	1fff89fc 	.word	0x1fff89fc
    5814:	1fffd9bc 	.word	0x1fffd9bc
    5818:	00014864 	.word	0x00014864
    581c:	00014878 	.word	0x00014878
    5820:	00014888 	.word	0x00014888
    5824:	1fffd70c 	.word	0x1fffd70c
    5828:	00014898 	.word	0x00014898
    582c:	1fffd8a4 	.word	0x1fffd8a4
    5830:	000148ac 	.word	0x000148ac
    5834:	1fffd9a8 	.word	0x1fffd9a8
    5838:	000148c0 	.word	0x000148c0
    583c:	1fffd8d4 	.word	0x1fffd8d4
    5840:	000148d4 	.word	0x000148d4
    5844:	000148e4 	.word	0x000148e4
    5848:	1fffd710 	.word	0x1fffd710
    584c:	00014900 	.word	0x00014900
    5850:	1fffd8b8 	.word	0x1fffd8b8
    5854:	00014914 	.word	0x00014914
    5858:	1fff9188 	.word	0x1fff9188
    585c:	00014928 	.word	0x00014928
    5860:	1fff884c 	.word	0x1fff884c
    5864:	00014948 	.word	0x00014948
    5868:	00014960 	.word	0x00014960
    586c:	00014980 	.word	0x00014980
    5870:	1fff91a0 	.word	0x1fff91a0
    5874:	00014990 	.word	0x00014990
    5878:	00014068 	.word	0x00014068
    587c:	000149a4 	.word	0x000149a4
    5880:	00014390 	.word	0x00014390
    5884:	1fff91e4 	.word	0x1fff91e4
    5888:	1fffd914 	.word	0x1fffd914
    588c:	a2cd00ff 	.word	0xa2cd00ff
    5890:	1fffdad0 	.word	0x1fffdad0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5894:	4872      	ldr	r0, [pc, #456]	; (5a60 <menu()+0x14f4>)
    5896:	2104      	movs	r1, #4
    5898:	f006 fafc 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.println();
    589c:	4871      	ldr	r0, [pc, #452]	; (5a64 <menu()+0x14f8>)
    589e:	f003 fdb5 	bl	940c <Print::println()>
        if (settings.chargertype > 0) {
    58a2:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
    58a6:	2b00      	cmp	r3, #0
    58a8:	dd0f      	ble.n	58ca <menu()+0x135e>
    58aa:	2118      	movs	r1, #24
    58ac:	486e      	ldr	r0, [pc, #440]	; (5a68 <menu()+0x14fc>)
    58ae:	f006 faf1 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    58b2:	f8d6 10c8 	ldr.w	r1, [r6, #200]	; 0xc8
    58b6:	486b      	ldr	r0, [pc, #428]	; (5a64 <menu()+0x14f8>)
    58b8:	f003 fda0 	bl	93fc <Print::print(long)>
    58bc:	486b      	ldr	r0, [pc, #428]	; (5a6c <menu()+0x1500>)
    58be:	2102      	movs	r1, #2
    58c0:	f006 fae8 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    58c4:	4867      	ldr	r0, [pc, #412]	; (5a64 <menu()+0x14f8>)
    58c6:	f003 fda1 	bl	940c <Print::println()>
    58ca:	4869      	ldr	r0, [pc, #420]	; (5a70 <menu()+0x1504>)
    58cc:	211b      	movs	r1, #27
    58ce:	f006 fae1 	bl	be94 <usb_serial_write>
        switch (settings.ChargerDirect) {
    58d2:	f896 30d4 	ldrb.w	r3, [r6, #212]	; 0xd4
    58d6:	2b00      	cmp	r3, #0
    58d8:	f040 8348 	bne.w	5f6c <menu()+0x1a00>
    58dc:	4865      	ldr	r0, [pc, #404]	; (5a74 <menu()+0x1508>)
    58de:	2112      	movs	r1, #18
    58e0:	f006 fad8 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.println();
    58e4:	485f      	ldr	r0, [pc, #380]	; (5a64 <menu()+0x14f8>)
    58e6:	f003 fd91 	bl	940c <Print::println()>
    58ea:	211f      	movs	r1, #31
    58ec:	4862      	ldr	r0, [pc, #392]	; (5a78 <menu()+0x150c>)
    58ee:	f006 fad1 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeTSetpoint);
    58f2:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    58f4:	f006 ff8a 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    58f8:	2502      	movs	r5, #2
    58fa:	460b      	mov	r3, r1
    58fc:	4602      	mov	r2, r0
    58fe:	9500      	str	r5, [sp, #0]
    5900:	4858      	ldr	r0, [pc, #352]	; (5a64 <menu()+0x14f8>)
    5902:	f003 fda5 	bl	9450 <Print::printFloat(double, unsigned char)>
    5906:	4629      	mov	r1, r5
    5908:	485c      	ldr	r0, [pc, #368]	; (5a7c <menu()+0x1510>)
    590a:	f006 fac3 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    590e:	4855      	ldr	r0, [pc, #340]	; (5a64 <menu()+0x14f8>)
    5910:	f003 fd7c 	bl	940c <Print::println()>
        if (settings.chargertype > 0) {
    5914:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
    5918:	2b00      	cmp	r3, #0
    591a:	dd39      	ble.n	5990 <menu()+0x1424>
    591c:	2127      	movs	r1, #39	; 0x27
    591e:	4858      	ldr	r0, [pc, #352]	; (5a80 <menu()+0x1514>)
    5920:	f006 fab8 	bl	be94 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrent2max * 0.1);
    5924:	f8b6 0068 	ldrh.w	r0, [r6, #104]	; 0x68
    5928:	f007 f940 	bl	cbac <__aeabi_i2f>
    592c:	4955      	ldr	r1, [pc, #340]	; (5a84 <menu()+0x1518>)
    592e:	f007 f991 	bl	cc54 <__aeabi_fmul>
    5932:	f006 ff6b 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5936:	9500      	str	r5, [sp, #0]
    5938:	4602      	mov	r2, r0
    593a:	460b      	mov	r3, r1
    593c:	4849      	ldr	r0, [pc, #292]	; (5a64 <menu()+0x14f8>)
    593e:	f003 fd87 	bl	9450 <Print::printFloat(double, unsigned char)>
    5942:	2101      	movs	r1, #1
    5944:	4850      	ldr	r0, [pc, #320]	; (5a88 <menu()+0x151c>)
    5946:	f006 faa5 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    594a:	4846      	ldr	r0, [pc, #280]	; (5a64 <menu()+0x14f8>)
    594c:	f003 fd5e 	bl	940c <Print::println()>
    5950:	2121      	movs	r1, #33	; 0x21
    5952:	484e      	ldr	r0, [pc, #312]	; (5a8c <menu()+0x1520>)
    5954:	f006 fa9e 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5958:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
    595c:	4841      	ldr	r0, [pc, #260]	; (5a64 <menu()+0x14f8>)
    595e:	f003 fd4d 	bl	93fc <Print::print(long)>
    5962:	2101      	movs	r1, #1
    5964:	484a      	ldr	r0, [pc, #296]	; (5a90 <menu()+0x1524>)
    5966:	f006 fa95 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    596a:	483e      	ldr	r0, [pc, #248]	; (5a64 <menu()+0x14f8>)
    596c:	f003 fd4e 	bl	940c <Print::println()>
    5970:	2118      	movs	r1, #24
    5972:	4848      	ldr	r0, [pc, #288]	; (5a94 <menu()+0x1528>)
    5974:	f006 fa8e 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5978:	f8d6 10e0 	ldr.w	r1, [r6, #224]	; 0xe0
    597c:	4839      	ldr	r0, [pc, #228]	; (5a64 <menu()+0x14f8>)
    597e:	f003 fd3d 	bl	93fc <Print::print(long)>
    5982:	4845      	ldr	r0, [pc, #276]	; (5a98 <menu()+0x152c>)
    5984:	2103      	movs	r1, #3
    5986:	f006 fa85 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    598a:	4836      	ldr	r0, [pc, #216]	; (5a64 <menu()+0x14f8>)
    598c:	f003 fd3e 	bl	940c <Print::println()>
    5990:	2113      	movs	r1, #19
    5992:	4842      	ldr	r0, [pc, #264]	; (5a9c <menu()+0x1530>)
    5994:	f006 fa7e 	bl	be94 <usb_serial_write>
    5998:	4832      	ldr	r0, [pc, #200]	; (5a64 <menu()+0x14f8>)
    599a:	f003 fd37 	bl	940c <Print::println()>
        break;
    599e:	2306      	movs	r3, #6
    59a0:	f7ff b8ea 	b.w	4b78 <menu()+0x60c>
    59a4:	210c      	movs	r1, #12
    59a6:	483e      	ldr	r0, [pc, #248]	; (5aa0 <menu()+0x1534>)
    59a8:	f006 fa74 	bl	be94 <usb_serial_write>
    59ac:	e776      	b.n	589c <menu()+0x1330>
    59ae:	210d      	movs	r1, #13
    59b0:	483c      	ldr	r0, [pc, #240]	; (5aa4 <menu()+0x1538>)
    59b2:	f006 fa6f 	bl	be94 <usb_serial_write>
    59b6:	e771      	b.n	589c <menu()+0x1330>
    59b8:	210c      	movs	r1, #12
    59ba:	483b      	ldr	r0, [pc, #236]	; (5aa8 <menu()+0x153c>)
    59bc:	f006 fa6a 	bl	be94 <usb_serial_write>
    59c0:	e76c      	b.n	589c <menu()+0x1330>
    59c2:	210d      	movs	r1, #13
    59c4:	4839      	ldr	r0, [pc, #228]	; (5aac <menu()+0x1540>)
    59c6:	f006 fa65 	bl	be94 <usb_serial_write>
    59ca:	e767      	b.n	589c <menu()+0x1330>
    59cc:	210d      	movs	r1, #13
    59ce:	4838      	ldr	r0, [pc, #224]	; (5ab0 <menu()+0x1544>)
    59d0:	f006 fa60 	bl	be94 <usb_serial_write>
    59d4:	e762      	b.n	589c <menu()+0x1330>
    59d6:	210b      	movs	r1, #11
    59d8:	4836      	ldr	r0, [pc, #216]	; (5ab4 <menu()+0x1548>)
    59da:	f006 fa5b 	bl	be94 <usb_serial_write>
    59de:	e75d      	b.n	589c <menu()+0x1330>
        virtual int available() { return usb_serial_available(); }
    59e0:	f006 fa26 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    59e4:	2800      	cmp	r0, #0
    59e6:	f77f a996 	ble.w	4d16 <menu()+0x7aa>
          settings.chargerACv = Serial.parseInt();
    59ea:	481e      	ldr	r0, [pc, #120]	; (5a64 <menu()+0x14f8>)
    59ec:	4e32      	ldr	r6, [pc, #200]	; (5ab8 <menu()+0x154c>)
    59ee:	f003 fe6b 	bl	96c8 <Stream::parseInt()>
          menuload = 1;
    59f2:	2301      	movs	r3, #1
    59f4:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    59f6:	2365      	movs	r3, #101	; 0x65
          settings.chargerACv = Serial.parseInt();
    59f8:	f8c6 00e0 	str.w	r0, [r6, #224]	; 0xe0
          incomingByte = 'e';
    59fc:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    59fe:	f7ff bb1b 	b.w	5038 <menu()+0xacc>
        CPU_REBOOT;
    5a02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    5a06:	4a2d      	ldr	r2, [pc, #180]	; (5abc <menu()+0x1550>)
    5a08:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
  if (incomingByte == 115 && menuload == 0) {
    5a0c:	f7fe be10 	b.w	4630 <menu()+0xc4>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    5a10:	22e4      	movs	r2, #228	; 0xe4
    5a12:	2100      	movs	r1, #0
    5a14:	4828      	ldr	r0, [pc, #160]	; (5ab8 <menu()+0x154c>)
        debug = 1;
    5a16:	4e2a      	ldr	r6, [pc, #168]	; (5ac0 <menu()+0x1554>)
    5a18:	f003 ff52 	bl	98c0 <eeprom_write_block>
  if (incomingByte == 115 && menuload == 0) {
    5a1c:	682b      	ldr	r3, [r5, #0]
        menuload = 0;
    5a1e:	2100      	movs	r1, #0
        debug = 1;
    5a20:	2201      	movs	r2, #1
  if (incomingByte == 115 && menuload == 0) {
    5a22:	2b73      	cmp	r3, #115	; 0x73
        menuload = 0;
    5a24:	6021      	str	r1, [r4, #0]
        debug = 1;
    5a26:	6032      	str	r2, [r6, #0]
  if (incomingByte == 115 && menuload == 0) {
    5a28:	f47e ae02 	bne.w	4630 <menu()+0xc4>
    5a2c:	f7ff b8a8 	b.w	4b80 <menu()+0x614>
    switch (incomingByte) {
    5a30:	2871      	cmp	r0, #113	; 0x71
    5a32:	f47e aec8 	bne.w	47c6 <menu()+0x25a>
        gaugedebug = 0;
    5a36:	4923      	ldr	r1, [pc, #140]	; (5ac4 <menu()+0x1558>)
    5a38:	4e21      	ldr	r6, [pc, #132]	; (5ac0 <menu()+0x1554>)
    5a3a:	2300      	movs	r3, #0
          incomingByte = 'k';
    5a3c:	2273      	movs	r2, #115	; 0x73
        gaugedebug = 0;
    5a3e:	600b      	str	r3, [r1, #0]
          menuload = 1;
    5a40:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5a42:	602a      	str	r2, [r5, #0]
  if (incomingByte == 115 && menuload == 0) {
    5a44:	f7ff b89c 	b.w	4b80 <menu()+0x614>
          settings.DisTSetpoint = Serial.parseInt();
    5a48:	4806      	ldr	r0, [pc, #24]	; (5a64 <menu()+0x14f8>)
    5a4a:	4e1b      	ldr	r6, [pc, #108]	; (5ab8 <menu()+0x154c>)
    5a4c:	f003 fe3c 	bl	96c8 <Stream::parseInt()>
    5a50:	f007 f8ac 	bl	cbac <__aeabi_i2f>
    5a54:	63f0      	str	r0, [r6, #60]	; 0x3c
        menuload = 1;
    5a56:	2201      	movs	r2, #1
        incomingByte = 'b';
    5a58:	2362      	movs	r3, #98	; 0x62
        menuload = 1;
    5a5a:	6022      	str	r2, [r4, #0]
        incomingByte = 'b';
    5a5c:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5a5e:	e035      	b.n	5acc <menu()+0x1560>
    5a60:	00014498 	.word	0x00014498
    5a64:	1fff89fc 	.word	0x1fff89fc
    5a68:	000144a0 	.word	0x000144a0
    5a6c:	000144bc 	.word	0x000144bc
    5a70:	000144c0 	.word	0x000144c0
    5a74:	000144dc 	.word	0x000144dc
    5a78:	00014508 	.word	0x00014508
    5a7c:	00014528 	.word	0x00014528
    5a80:	0001452c 	.word	0x0001452c
    5a84:	3dcccccd 	.word	0x3dcccccd
    5a88:	00014afc 	.word	0x00014afc
    5a8c:	00014554 	.word	0x00014554
    5a90:	00014578 	.word	0x00014578
    5a94:	0001457c 	.word	0x0001457c
    5a98:	00014598 	.word	0x00014598
    5a9c:	00014390 	.word	0x00014390
    5aa0:	0001445c 	.word	0x0001445c
    5aa4:	0001443c 	.word	0x0001443c
    5aa8:	0001444c 	.word	0x0001444c
    5aac:	0001447c 	.word	0x0001447c
    5ab0:	0001446c 	.word	0x0001446c
    5ab4:	0001448c 	.word	0x0001448c
    5ab8:	1fffd9bc 	.word	0x1fffd9bc
    5abc:	05fa0004 	.word	0x05fa0004
    5ac0:	1fff8848 	.word	0x1fff8848
    5ac4:	1fffd8b8 	.word	0x1fffd8b8
        virtual int read() { return usb_serial_getchar(); }
    5ac8:	f006 f976 	bl	bdb8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    5acc:	f006 f9b0 	bl	be30 <usb_serial_available>
        while (Serial.available()) {
    5ad0:	4605      	mov	r5, r0
    5ad2:	2800      	cmp	r0, #0
    5ad4:	d1f8      	bne.n	5ac8 <menu()+0x155c>
        SERIALCONSOLE.println();
    5ad6:	48c3      	ldr	r0, [pc, #780]	; (5de4 <menu()+0x1878>)
    5ad8:	f003 fc98 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    5adc:	48c1      	ldr	r0, [pc, #772]	; (5de4 <menu()+0x1878>)
    5ade:	f003 fc95 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    5ae2:	48c0      	ldr	r0, [pc, #768]	; (5de4 <menu()+0x1878>)
    5ae4:	f003 fc92 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    5ae8:	48be      	ldr	r0, [pc, #760]	; (5de4 <menu()+0x1878>)
    5aea:	f003 fc8f 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    5aee:	48bd      	ldr	r0, [pc, #756]	; (5de4 <menu()+0x1878>)
    5af0:	f003 fc8c 	bl	940c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5af4:	2115      	movs	r1, #21
    5af6:	48bc      	ldr	r0, [pc, #752]	; (5de8 <menu()+0x187c>)
    5af8:	f006 f9cc 	bl	be94 <usb_serial_write>
    5afc:	48b9      	ldr	r0, [pc, #740]	; (5de4 <menu()+0x1878>)
    5afe:	f003 fc85 	bl	940c <Print::println()>
    5b02:	2114      	movs	r1, #20
    5b04:	48b9      	ldr	r0, [pc, #740]	; (5dec <menu()+0x1880>)
    5b06:	f006 f9c5 	bl	be94 <usb_serial_write>
    5b0a:	48b6      	ldr	r0, [pc, #728]	; (5de4 <menu()+0x1878>)
    5b0c:	f003 fc7e 	bl	940c <Print::println()>
    5b10:	211b      	movs	r1, #27
    5b12:	48b7      	ldr	r0, [pc, #732]	; (5df0 <menu()+0x1884>)
    5b14:	f006 f9be 	bl	be94 <usb_serial_write>
    5b18:	48b2      	ldr	r0, [pc, #712]	; (5de4 <menu()+0x1878>)
    5b1a:	f003 fc77 	bl	940c <Print::println()>
    5b1e:	2113      	movs	r1, #19
    5b20:	48b4      	ldr	r0, [pc, #720]	; (5df4 <menu()+0x1888>)
    5b22:	f006 f9b7 	bl	be94 <usb_serial_write>
    5b26:	48af      	ldr	r0, [pc, #700]	; (5de4 <menu()+0x1878>)
    5b28:	f003 fc70 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    5b2c:	48ad      	ldr	r0, [pc, #692]	; (5de4 <menu()+0x1878>)
    5b2e:	f003 fc6d 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    5b32:	48ac      	ldr	r0, [pc, #688]	; (5de4 <menu()+0x1878>)
    5b34:	f003 fc6a 	bl	940c <Print::println()>
    5b38:	2120      	movs	r1, #32
    5b3a:	48af      	ldr	r0, [pc, #700]	; (5df8 <menu()+0x188c>)
    5b3c:	f006 f9aa 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverVSetpoint * 1000, 0);
    5b40:	68f0      	ldr	r0, [r6, #12]
    5b42:	49ae      	ldr	r1, [pc, #696]	; (5dfc <menu()+0x1890>)
    5b44:	f007 f886 	bl	cc54 <__aeabi_fmul>
    5b48:	f006 fe60 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5b4c:	9500      	str	r5, [sp, #0]
    5b4e:	4602      	mov	r2, r0
    5b50:	460b      	mov	r3, r1
    5b52:	48a4      	ldr	r0, [pc, #656]	; (5de4 <menu()+0x1878>)
    5b54:	f003 fc7c 	bl	9450 <Print::printFloat(double, unsigned char)>
    5b58:	2102      	movs	r1, #2
    5b5a:	48a9      	ldr	r0, [pc, #676]	; (5e00 <menu()+0x1894>)
    5b5c:	f006 f99a 	bl	be94 <usb_serial_write>
    5b60:	2102      	movs	r1, #2
    5b62:	48a8      	ldr	r0, [pc, #672]	; (5e04 <menu()+0x1898>)
    5b64:	f006 f996 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5b68:	489e      	ldr	r0, [pc, #632]	; (5de4 <menu()+0x1878>)
    5b6a:	f003 fc4f 	bl	940c <Print::println()>
    5b6e:	2121      	movs	r1, #33	; 0x21
    5b70:	48a5      	ldr	r0, [pc, #660]	; (5e08 <menu()+0x189c>)
    5b72:	f006 f98f 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderVSetpoint * 1000, 0);
    5b76:	6930      	ldr	r0, [r6, #16]
    5b78:	49a0      	ldr	r1, [pc, #640]	; (5dfc <menu()+0x1890>)
    5b7a:	f007 f86b 	bl	cc54 <__aeabi_fmul>
    5b7e:	f006 fe45 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5b82:	9500      	str	r5, [sp, #0]
    5b84:	4602      	mov	r2, r0
    5b86:	460b      	mov	r3, r1
    5b88:	4896      	ldr	r0, [pc, #600]	; (5de4 <menu()+0x1878>)
    5b8a:	f003 fc61 	bl	9450 <Print::printFloat(double, unsigned char)>
    5b8e:	2102      	movs	r1, #2
    5b90:	489b      	ldr	r0, [pc, #620]	; (5e00 <menu()+0x1894>)
    5b92:	f006 f97f 	bl	be94 <usb_serial_write>
    5b96:	2102      	movs	r1, #2
    5b98:	489a      	ldr	r0, [pc, #616]	; (5e04 <menu()+0x1898>)
    5b9a:	f006 f97b 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5b9e:	4891      	ldr	r0, [pc, #580]	; (5de4 <menu()+0x1878>)
    5ba0:	f003 fc34 	bl	940c <Print::println()>
    5ba4:	211f      	movs	r1, #31
    5ba6:	4899      	ldr	r0, [pc, #612]	; (5e0c <menu()+0x18a0>)
    5ba8:	f006 f974 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverTSetpoint);
    5bac:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    5bae:	f006 fe2d 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5bb2:	2702      	movs	r7, #2
    5bb4:	4602      	mov	r2, r0
    5bb6:	460b      	mov	r3, r1
    5bb8:	488a      	ldr	r0, [pc, #552]	; (5de4 <menu()+0x1878>)
    5bba:	9700      	str	r7, [sp, #0]
    5bbc:	f003 fc48 	bl	9450 <Print::printFloat(double, unsigned char)>
    5bc0:	2101      	movs	r1, #1
    5bc2:	4893      	ldr	r0, [pc, #588]	; (5e10 <menu()+0x18a4>)
    5bc4:	f006 f966 	bl	be94 <usb_serial_write>
    5bc8:	4639      	mov	r1, r7
    5bca:	488e      	ldr	r0, [pc, #568]	; (5e04 <menu()+0x1898>)
    5bcc:	f006 f962 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5bd0:	4884      	ldr	r0, [pc, #528]	; (5de4 <menu()+0x1878>)
    5bd2:	f003 fc1b 	bl	940c <Print::println()>
    5bd6:	2120      	movs	r1, #32
    5bd8:	488e      	ldr	r0, [pc, #568]	; (5e14 <menu()+0x18a8>)
    5bda:	f006 f95b 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderTSetpoint);
    5bde:	6b30      	ldr	r0, [r6, #48]	; 0x30
    5be0:	f006 fe14 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5be4:	9700      	str	r7, [sp, #0]
    5be6:	4602      	mov	r2, r0
    5be8:	460b      	mov	r3, r1
    5bea:	487e      	ldr	r0, [pc, #504]	; (5de4 <menu()+0x1878>)
    5bec:	f003 fc30 	bl	9450 <Print::printFloat(double, unsigned char)>
    5bf0:	2101      	movs	r1, #1
    5bf2:	4887      	ldr	r0, [pc, #540]	; (5e10 <menu()+0x18a4>)
    5bf4:	f006 f94e 	bl	be94 <usb_serial_write>
    5bf8:	4639      	mov	r1, r7
    5bfa:	4882      	ldr	r0, [pc, #520]	; (5e04 <menu()+0x1898>)
    5bfc:	f006 f94a 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5c00:	4878      	ldr	r0, [pc, #480]	; (5de4 <menu()+0x1878>)
    5c02:	f003 fc03 	bl	940c <Print::println()>
    5c06:	2123      	movs	r1, #35	; 0x23
    5c08:	4883      	ldr	r0, [pc, #524]	; (5e18 <menu()+0x18ac>)
    5c0a:	f006 f943 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceVoltage * 1000, 0);
    5c0e:	6d30      	ldr	r0, [r6, #80]	; 0x50
    5c10:	497a      	ldr	r1, [pc, #488]	; (5dfc <menu()+0x1890>)
    5c12:	f007 f81f 	bl	cc54 <__aeabi_fmul>
    5c16:	f006 fdf9 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5c1a:	9500      	str	r5, [sp, #0]
    5c1c:	4602      	mov	r2, r0
    5c1e:	460b      	mov	r3, r1
    5c20:	4870      	ldr	r0, [pc, #448]	; (5de4 <menu()+0x1878>)
    5c22:	f003 fc15 	bl	9450 <Print::printFloat(double, unsigned char)>
    5c26:	4639      	mov	r1, r7
    5c28:	4875      	ldr	r0, [pc, #468]	; (5e00 <menu()+0x1894>)
    5c2a:	f006 f933 	bl	be94 <usb_serial_write>
    5c2e:	4639      	mov	r1, r7
    5c30:	4874      	ldr	r0, [pc, #464]	; (5e04 <menu()+0x1898>)
    5c32:	f006 f92f 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5c36:	486b      	ldr	r0, [pc, #428]	; (5de4 <menu()+0x1878>)
    5c38:	f003 fbe8 	bl	940c <Print::println()>
    5c3c:	211f      	movs	r1, #31
    5c3e:	4877      	ldr	r0, [pc, #476]	; (5e1c <menu()+0x18b0>)
    5c40:	f006 f928 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceHyst * 1000, 0);
    5c44:	6d70      	ldr	r0, [r6, #84]	; 0x54
    5c46:	496d      	ldr	r1, [pc, #436]	; (5dfc <menu()+0x1890>)
    5c48:	f007 f804 	bl	cc54 <__aeabi_fmul>
    5c4c:	f006 fdde 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5c50:	9500      	str	r5, [sp, #0]
    5c52:	4602      	mov	r2, r0
    5c54:	460b      	mov	r3, r1
    5c56:	4863      	ldr	r0, [pc, #396]	; (5de4 <menu()+0x1878>)
    5c58:	f003 fbfa 	bl	9450 <Print::printFloat(double, unsigned char)>
    5c5c:	4639      	mov	r1, r7
    5c5e:	4868      	ldr	r0, [pc, #416]	; (5e00 <menu()+0x1894>)
    5c60:	f006 f918 	bl	be94 <usb_serial_write>
    5c64:	4639      	mov	r1, r7
    5c66:	4867      	ldr	r0, [pc, #412]	; (5e04 <menu()+0x1898>)
    5c68:	f006 f914 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5c6c:	485d      	ldr	r0, [pc, #372]	; (5de4 <menu()+0x1878>)
    5c6e:	f003 fbcd 	bl	940c <Print::println()>
    5c72:	2119      	movs	r1, #25
    5c74:	486a      	ldr	r0, [pc, #424]	; (5e20 <menu()+0x18b4>)
    5c76:	f006 f90d 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5c7a:	6e31      	ldr	r1, [r6, #96]	; 0x60
    5c7c:	4859      	ldr	r0, [pc, #356]	; (5de4 <menu()+0x1878>)
    5c7e:	f003 fbbd 	bl	93fc <Print::print(long)>
    5c82:	4639      	mov	r1, r7
    5c84:	4867      	ldr	r0, [pc, #412]	; (5e24 <menu()+0x18b8>)
    5c86:	f006 f905 	bl	be94 <usb_serial_write>
    5c8a:	4639      	mov	r1, r7
    5c8c:	485d      	ldr	r0, [pc, #372]	; (5e04 <menu()+0x1898>)
    5c8e:	f006 f901 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5c92:	4854      	ldr	r0, [pc, #336]	; (5de4 <menu()+0x1878>)
    5c94:	f003 fbba 	bl	940c <Print::println()>
    5c98:	2118      	movs	r1, #24
    5c9a:	4863      	ldr	r0, [pc, #396]	; (5e28 <menu()+0x18bc>)
    5c9c:	f006 f8fa 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.discurrentmax * 0.1);
    5ca0:	6f30      	ldr	r0, [r6, #112]	; 0x70
    5ca2:	f006 ff83 	bl	cbac <__aeabi_i2f>
    5ca6:	4961      	ldr	r1, [pc, #388]	; (5e2c <menu()+0x18c0>)
    5ca8:	f006 ffd4 	bl	cc54 <__aeabi_fmul>
    5cac:	f006 fdae 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5cb0:	9700      	str	r7, [sp, #0]
    5cb2:	4602      	mov	r2, r0
    5cb4:	460b      	mov	r3, r1
    5cb6:	484b      	ldr	r0, [pc, #300]	; (5de4 <menu()+0x1878>)
    5cb8:	f003 fbca 	bl	9450 <Print::printFloat(double, unsigned char)>
    5cbc:	2101      	movs	r1, #1
    5cbe:	485c      	ldr	r0, [pc, #368]	; (5e30 <menu()+0x18c4>)
    5cc0:	f006 f8e8 	bl	be94 <usb_serial_write>
    5cc4:	4639      	mov	r1, r7
    5cc6:	484f      	ldr	r0, [pc, #316]	; (5e04 <menu()+0x1898>)
    5cc8:	f006 f8e4 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5ccc:	4845      	ldr	r0, [pc, #276]	; (5de4 <menu()+0x1878>)
    5cce:	f003 fb9d 	bl	940c <Print::println()>
    5cd2:	212b      	movs	r1, #43	; 0x2b
    5cd4:	4857      	ldr	r0, [pc, #348]	; (5e34 <menu()+0x18c8>)
    5cd6:	f006 f8dd 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischVsetpoint * 1000, 0);
    5cda:	69f0      	ldr	r0, [r6, #28]
    5cdc:	4947      	ldr	r1, [pc, #284]	; (5dfc <menu()+0x1890>)
    5cde:	f006 ffb9 	bl	cc54 <__aeabi_fmul>
    5ce2:	f006 fd93 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5ce6:	9500      	str	r5, [sp, #0]
    5ce8:	4602      	mov	r2, r0
    5cea:	460b      	mov	r3, r1
    5cec:	483d      	ldr	r0, [pc, #244]	; (5de4 <menu()+0x1878>)
    5cee:	f003 fbaf 	bl	9450 <Print::printFloat(double, unsigned char)>
    5cf2:	4639      	mov	r1, r7
    5cf4:	4842      	ldr	r0, [pc, #264]	; (5e00 <menu()+0x1894>)
    5cf6:	f006 f8cd 	bl	be94 <usb_serial_write>
    5cfa:	4639      	mov	r1, r7
    5cfc:	4841      	ldr	r0, [pc, #260]	; (5e04 <menu()+0x1898>)
    5cfe:	f006 f8c9 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5d02:	4838      	ldr	r0, [pc, #224]	; (5de4 <menu()+0x1878>)
    5d04:	f003 fb82 	bl	940c <Print::println()>
    5d08:	211f      	movs	r1, #31
    5d0a:	484b      	ldr	r0, [pc, #300]	; (5e38 <menu()+0x18cc>)
    5d0c:	f006 f8c2 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5d10:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    5d12:	4834      	ldr	r0, [pc, #208]	; (5de4 <menu()+0x1878>)
    5d14:	f003 fb72 	bl	93fc <Print::print(long)>
    5d18:	4639      	mov	r1, r7
    5d1a:	483a      	ldr	r0, [pc, #232]	; (5e04 <menu()+0x1898>)
    5d1c:	f006 f8ba 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5d20:	4830      	ldr	r0, [pc, #192]	; (5de4 <menu()+0x1878>)
    5d22:	f003 fb73 	bl	940c <Print::println()>
    5d26:	2120      	movs	r1, #32
    5d28:	4844      	ldr	r0, [pc, #272]	; (5e3c <menu()+0x18d0>)
    5d2a:	f006 f8b3 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5d2e:	6db1      	ldr	r1, [r6, #88]	; 0x58
    5d30:	482c      	ldr	r0, [pc, #176]	; (5de4 <menu()+0x1878>)
    5d32:	f003 fb63 	bl	93fc <Print::print(long)>
    5d36:	4639      	mov	r1, r7
    5d38:	4832      	ldr	r0, [pc, #200]	; (5e04 <menu()+0x1898>)
    5d3a:	f006 f8ab 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5d3e:	4829      	ldr	r0, [pc, #164]	; (5de4 <menu()+0x1878>)
    5d40:	f003 fb64 	bl	940c <Print::println()>
    5d44:	2110      	movs	r1, #16
    5d46:	483e      	ldr	r0, [pc, #248]	; (5e40 <menu()+0x18d4>)
    5d48:	f006 f8a4 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5d4c:	6f71      	ldr	r1, [r6, #116]	; 0x74
    5d4e:	4825      	ldr	r0, [pc, #148]	; (5de4 <menu()+0x1878>)
    5d50:	f003 fb54 	bl	93fc <Print::print(long)>
    5d54:	4639      	mov	r1, r7
    5d56:	482a      	ldr	r0, [pc, #168]	; (5e00 <menu()+0x1894>)
    5d58:	f006 f89c 	bl	be94 <usb_serial_write>
    5d5c:	4639      	mov	r1, r7
    5d5e:	4829      	ldr	r0, [pc, #164]	; (5e04 <menu()+0x1898>)
    5d60:	f006 f898 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5d64:	481f      	ldr	r0, [pc, #124]	; (5de4 <menu()+0x1878>)
    5d66:	f003 fb51 	bl	940c <Print::println()>
    5d6a:	2113      	movs	r1, #19
    5d6c:	4835      	ldr	r0, [pc, #212]	; (5e44 <menu()+0x18d8>)
    5d6e:	f006 f891 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5d72:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    5d74:	481b      	ldr	r0, [pc, #108]	; (5de4 <menu()+0x1878>)
    5d76:	f003 fb41 	bl	93fc <Print::print(long)>
    5d7a:	2101      	movs	r1, #1
    5d7c:	4832      	ldr	r0, [pc, #200]	; (5e48 <menu()+0x18dc>)
    5d7e:	f006 f889 	bl	be94 <usb_serial_write>
    5d82:	4639      	mov	r1, r7
    5d84:	481f      	ldr	r0, [pc, #124]	; (5e04 <menu()+0x1898>)
    5d86:	f006 f885 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5d8a:	4816      	ldr	r0, [pc, #88]	; (5de4 <menu()+0x1878>)
    5d8c:	f003 fb3e 	bl	940c <Print::println()>
    5d90:	2110      	movs	r1, #16
    5d92:	482e      	ldr	r0, [pc, #184]	; (5e4c <menu()+0x18e0>)
    5d94:	f006 f87e 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5d98:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    5d9a:	4812      	ldr	r0, [pc, #72]	; (5de4 <menu()+0x1878>)
    5d9c:	f003 fb2e 	bl	93fc <Print::print(long)>
    5da0:	4639      	mov	r1, r7
    5da2:	4817      	ldr	r0, [pc, #92]	; (5e00 <menu()+0x1894>)
    5da4:	f006 f876 	bl	be94 <usb_serial_write>
    5da8:	4639      	mov	r1, r7
    5daa:	4816      	ldr	r0, [pc, #88]	; (5e04 <menu()+0x1898>)
    5dac:	f006 f872 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5db0:	480c      	ldr	r0, [pc, #48]	; (5de4 <menu()+0x1878>)
    5db2:	f003 fb2b 	bl	940c <Print::println()>
    5db6:	2114      	movs	r1, #20
    5db8:	4825      	ldr	r0, [pc, #148]	; (5e50 <menu()+0x18e4>)
    5dba:	f006 f86b 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5dbe:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
    5dc2:	4808      	ldr	r0, [pc, #32]	; (5de4 <menu()+0x1878>)
    5dc4:	f003 fb1a 	bl	93fc <Print::print(long)>
    5dc8:	2101      	movs	r1, #1
    5dca:	481f      	ldr	r0, [pc, #124]	; (5e48 <menu()+0x18dc>)
    5dcc:	f006 f862 	bl	be94 <usb_serial_write>
    5dd0:	4639      	mov	r1, r7
    5dd2:	480c      	ldr	r0, [pc, #48]	; (5e04 <menu()+0x1898>)
    5dd4:	f006 f85e 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5dd8:	4802      	ldr	r0, [pc, #8]	; (5de4 <menu()+0x1878>)
    5dda:	f003 fb17 	bl	940c <Print::println()>
    5dde:	2116      	movs	r1, #22
    5de0:	e038      	b.n	5e54 <menu()+0x18e8>
    5de2:	bf00      	nop
    5de4:	1fff89fc 	.word	0x1fff89fc
    5de8:	00014bc0 	.word	0x00014bc0
    5dec:	00014bd8 	.word	0x00014bd8
    5df0:	00014bf0 	.word	0x00014bf0
    5df4:	00014390 	.word	0x00014390
    5df8:	00014c0c 	.word	0x00014c0c
    5dfc:	447a0000 	.word	0x447a0000
    5e00:	00014370 	.word	0x00014370
    5e04:	00014200 	.word	0x00014200
    5e08:	00014c30 	.word	0x00014c30
    5e0c:	00014c54 	.word	0x00014c54
    5e10:	00014c74 	.word	0x00014c74
    5e14:	00014c78 	.word	0x00014c78
    5e18:	00014c9c 	.word	0x00014c9c
    5e1c:	00014cc0 	.word	0x00014cc0
    5e20:	00014ce0 	.word	0x00014ce0
    5e24:	00014cfc 	.word	0x00014cfc
    5e28:	00014d00 	.word	0x00014d00
    5e2c:	3dcccccd 	.word	0x3dcccccd
    5e30:	00014afc 	.word	0x00014afc
    5e34:	00014d1c 	.word	0x00014d1c
    5e38:	00014d48 	.word	0x00014d48
    5e3c:	00014d68 	.word	0x00014d68
    5e40:	00014d8c 	.word	0x00014d8c
    5e44:	00014da0 	.word	0x00014da0
    5e48:	00014578 	.word	0x00014578
    5e4c:	00014db4 	.word	0x00014db4
    5e50:	00014dc8 	.word	0x00014dc8
    5e54:	48c2      	ldr	r0, [pc, #776]	; (6160 <menu()+0x1bf4>)
    5e56:	f006 f81d 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.StoreVsetpoint * 1000, 0);
    5e5a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5e5c:	49c1      	ldr	r1, [pc, #772]	; (6164 <menu()+0x1bf8>)
    5e5e:	f006 fef9 	bl	cc54 <__aeabi_fmul>
    5e62:	f006 fcd3 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5e66:	9500      	str	r5, [sp, #0]
    5e68:	4602      	mov	r2, r0
    5e6a:	460b      	mov	r3, r1
    5e6c:	48be      	ldr	r0, [pc, #760]	; (6168 <menu()+0x1bfc>)
    5e6e:	f003 faef 	bl	9450 <Print::printFloat(double, unsigned char)>
    5e72:	4639      	mov	r1, r7
    5e74:	48bd      	ldr	r0, [pc, #756]	; (616c <menu()+0x1c00>)
    5e76:	f006 f80d 	bl	be94 <usb_serial_write>
    5e7a:	4639      	mov	r1, r7
    5e7c:	48bc      	ldr	r0, [pc, #752]	; (6170 <menu()+0x1c04>)
    5e7e:	f006 f809 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5e82:	48b9      	ldr	r0, [pc, #740]	; (6168 <menu()+0x1bfc>)
    5e84:	f003 fac2 	bl	940c <Print::println()>
    5e88:	2124      	movs	r1, #36	; 0x24
    5e8a:	48ba      	ldr	r0, [pc, #744]	; (6174 <menu()+0x1c08>)
    5e8c:	f006 f802 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTaper * 1000, 0);
    5e90:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
    5e94:	49b3      	ldr	r1, [pc, #716]	; (6164 <menu()+0x1bf8>)
    5e96:	f006 fedd 	bl	cc54 <__aeabi_fmul>
    5e9a:	f006 fcb7 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5e9e:	9500      	str	r5, [sp, #0]
    5ea0:	4602      	mov	r2, r0
    5ea2:	460b      	mov	r3, r1
    5ea4:	48b0      	ldr	r0, [pc, #704]	; (6168 <menu()+0x1bfc>)
    5ea6:	f003 fad3 	bl	9450 <Print::printFloat(double, unsigned char)>
    5eaa:	4639      	mov	r1, r7
    5eac:	48af      	ldr	r0, [pc, #700]	; (616c <menu()+0x1c00>)
    5eae:	f005 fff1 	bl	be94 <usb_serial_write>
    5eb2:	4639      	mov	r1, r7
    5eb4:	48ae      	ldr	r0, [pc, #696]	; (6170 <menu()+0x1c04>)
    5eb6:	f005 ffed 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5eba:	48ab      	ldr	r0, [pc, #684]	; (6168 <menu()+0x1bfc>)
    5ebc:	f003 faa6 	bl	940c <Print::println()>
    5ec0:	212b      	movs	r1, #43	; 0x2b
    5ec2:	48ad      	ldr	r0, [pc, #692]	; (6178 <menu()+0x1c0c>)
    5ec4:	f005 ffe6 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTSetpoint);
    5ec8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    5eca:	f006 fc9f 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5ece:	9700      	str	r7, [sp, #0]
    5ed0:	4602      	mov	r2, r0
    5ed2:	460b      	mov	r3, r1
    5ed4:	48a4      	ldr	r0, [pc, #656]	; (6168 <menu()+0x1bfc>)
    5ed6:	f003 fabb 	bl	9450 <Print::printFloat(double, unsigned char)>
    5eda:	2101      	movs	r1, #1
    5edc:	48a7      	ldr	r0, [pc, #668]	; (617c <menu()+0x1c10>)
    5ede:	f005 ffd9 	bl	be94 <usb_serial_write>
    5ee2:	4629      	mov	r1, r5
    5ee4:	48a6      	ldr	r0, [pc, #664]	; (6180 <menu()+0x1c14>)
    5ee6:	f005 ffd5 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5eea:	489f      	ldr	r0, [pc, #636]	; (6168 <menu()+0x1bfc>)
    5eec:	f003 fa8e 	bl	940c <Print::println()>
    5ef0:	2127      	movs	r1, #39	; 0x27
    5ef2:	48a4      	ldr	r0, [pc, #656]	; (6184 <menu()+0x1c18>)
    5ef4:	f005 ffce 	bl	be94 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischHys * 1000, 0);
    5ef8:	6970      	ldr	r0, [r6, #20]
    5efa:	499a      	ldr	r1, [pc, #616]	; (6164 <menu()+0x1bf8>)
    5efc:	f006 feaa 	bl	cc54 <__aeabi_fmul>
    5f00:	f006 fc84 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5f04:	9500      	str	r5, [sp, #0]
    5f06:	460b      	mov	r3, r1
    5f08:	4602      	mov	r2, r0
    5f0a:	4897      	ldr	r0, [pc, #604]	; (6168 <menu()+0x1bfc>)
    5f0c:	f003 faa0 	bl	9450 <Print::printFloat(double, unsigned char)>
    5f10:	4639      	mov	r1, r7
    5f12:	4896      	ldr	r0, [pc, #600]	; (616c <menu()+0x1c00>)
    5f14:	f005 ffbe 	bl	be94 <usb_serial_write>
    5f18:	4639      	mov	r1, r7
    5f1a:	4895      	ldr	r0, [pc, #596]	; (6170 <menu()+0x1c04>)
    5f1c:	f005 ffba 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5f20:	4891      	ldr	r0, [pc, #580]	; (6168 <menu()+0x1bfc>)
    5f22:	f003 fa73 	bl	940c <Print::println()>
    5f26:	4898      	ldr	r0, [pc, #608]	; (6188 <menu()+0x1c1c>)
    5f28:	2116      	movs	r1, #22
    5f2a:	f005 ffb3 	bl	be94 <usb_serial_write>
        if (settings.CSCvariant == BmwI3) {
    5f2e:	f896 30d6 	ldrb.w	r3, [r6, #214]	; 0xd6
    5f32:	2b00      	cmp	r3, #0
    5f34:	f000 8203 	beq.w	633e <menu()+0x1dd2>
        if (settings.CSCvariant == MiniE) {
    5f38:	2b01      	cmp	r3, #1
    5f3a:	f000 824f 	beq.w	63dc <menu()+0x1e70>
    5f3e:	2102      	movs	r1, #2
    5f40:	488b      	ldr	r0, [pc, #556]	; (6170 <menu()+0x1c04>)
    5f42:	f005 ffa7 	bl	be94 <usb_serial_write>
    5f46:	4888      	ldr	r0, [pc, #544]	; (6168 <menu()+0x1bfc>)
    5f48:	f003 fa60 	bl	940c <Print::println()>
        SERIALCONSOLE.println();
    5f4c:	4886      	ldr	r0, [pc, #536]	; (6168 <menu()+0x1bfc>)
    5f4e:	f003 fa5d 	bl	940c <Print::println()>
        break;
    5f52:	2303      	movs	r3, #3
    5f54:	f7fe be10 	b.w	4b78 <menu()+0x60c>
          settings.gaugehigh = Serial.parseInt();
    5f58:	4883      	ldr	r0, [pc, #524]	; (6168 <menu()+0x1bfc>)
    5f5a:	4e8c      	ldr	r6, [pc, #560]	; (618c <menu()+0x1c20>)
    5f5c:	f003 fbb4 	bl	96c8 <Stream::parseInt()>
          gaugedebug = 3;
    5f60:	4b8b      	ldr	r3, [pc, #556]	; (6190 <menu()+0x1c24>)
          settings.gaugehigh = Serial.parseInt();
    5f62:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
          gaugedebug = 3;
    5f66:	2203      	movs	r2, #3
    5f68:	f7fe bf9b 	b.w	4ea2 <menu()+0x936>
    5f6c:	2114      	movs	r1, #20
    5f6e:	4889      	ldr	r0, [pc, #548]	; (6194 <menu()+0x1c28>)
    5f70:	f005 ff90 	bl	be94 <usb_serial_write>
    5f74:	e4b6      	b.n	58e4 <menu()+0x1378>
    5f76:	211c      	movs	r1, #28
    5f78:	4887      	ldr	r0, [pc, #540]	; (6198 <menu()+0x1c2c>)
    5f7a:	f005 ff8b 	bl	be94 <usb_serial_write>
          SERIALCONSOLE.print(settings.convlow * 0.01, 2);
    5f7e:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    5f82:	4986      	ldr	r1, [pc, #536]	; (619c <menu()+0x1c30>)
    5f84:	f006 fe66 	bl	cc54 <__aeabi_fmul>
    5f88:	f006 fc40 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5f8c:	2502      	movs	r5, #2
    5f8e:	460b      	mov	r3, r1
    5f90:	4602      	mov	r2, r0
    5f92:	9500      	str	r5, [sp, #0]
    5f94:	4874      	ldr	r0, [pc, #464]	; (6168 <menu()+0x1bfc>)
    5f96:	f003 fa5b 	bl	9450 <Print::printFloat(double, unsigned char)>
    5f9a:	2105      	movs	r1, #5
    5f9c:	4880      	ldr	r0, [pc, #512]	; (61a0 <menu()+0x1c34>)
    5f9e:	f005 ff79 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5fa2:	4871      	ldr	r0, [pc, #452]	; (6168 <menu()+0x1bfc>)
    5fa4:	f003 fa32 	bl	940c <Print::println()>
        if (settings.cursens == Analoguedual) {
    5fa8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
    5fac:	2b01      	cmp	r3, #1
    5fae:	d119      	bne.n	5fe4 <menu()+0x1a78>
    5fb0:	211d      	movs	r1, #29
    5fb2:	487c      	ldr	r0, [pc, #496]	; (61a4 <menu()+0x1c38>)
    5fb4:	f005 ff6e 	bl	be94 <usb_serial_write>
          SERIALCONSOLE.print(settings.convhigh * 0.01, 2);
    5fb8:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    5fbc:	4977      	ldr	r1, [pc, #476]	; (619c <menu()+0x1c30>)
    5fbe:	f006 fe49 	bl	cc54 <__aeabi_fmul>
    5fc2:	f006 fc23 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5fc6:	9500      	str	r5, [sp, #0]
    5fc8:	460b      	mov	r3, r1
    5fca:	4602      	mov	r2, r0
    5fcc:	4866      	ldr	r0, [pc, #408]	; (6168 <menu()+0x1bfc>)
    5fce:	f003 fa3f 	bl	9450 <Print::printFloat(double, unsigned char)>
    5fd2:	2105      	movs	r1, #5
    5fd4:	4872      	ldr	r0, [pc, #456]	; (61a0 <menu()+0x1c34>)
    5fd6:	f005 ff5d 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5fda:	4863      	ldr	r0, [pc, #396]	; (6168 <menu()+0x1bfc>)
    5fdc:	f003 fa16 	bl	940c <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    5fe0:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
    5fe4:	f023 0202 	bic.w	r2, r3, #2
    5fe8:	2a01      	cmp	r2, #1
    5fea:	f47f a9c7 	bne.w	537c <menu()+0xe10>
    5fee:	211c      	movs	r1, #28
    5ff0:	486d      	ldr	r0, [pc, #436]	; (61a8 <menu()+0x1c3c>)
    5ff2:	f005 ff4f 	bl	be94 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5ff6:	f8b6 10ce 	ldrh.w	r1, [r6, #206]	; 0xce
    5ffa:	485b      	ldr	r0, [pc, #364]	; (6168 <menu()+0x1bfc>)
    5ffc:	f003 f9fe 	bl	93fc <Print::print(long)>
    6000:	2103      	movs	r1, #3
    6002:	486a      	ldr	r0, [pc, #424]	; (61ac <menu()+0x1c40>)
    6004:	f005 ff46 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6008:	4857      	ldr	r0, [pc, #348]	; (6168 <menu()+0x1bfc>)
    600a:	f003 f9ff 	bl	940c <Print::println()>
        if (settings.cursens == Analoguedual) {
    600e:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
    6012:	2b01      	cmp	r3, #1
    6014:	f47f a9b2 	bne.w	537c <menu()+0xe10>
    6018:	211f      	movs	r1, #31
    601a:	4865      	ldr	r0, [pc, #404]	; (61b0 <menu()+0x1c44>)
    601c:	f005 ff3a 	bl	be94 <usb_serial_write>
          SERIALCONSOLE.print(settings.changecur * 0.001);
    6020:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    6024:	f006 fdc2 	bl	cbac <__aeabi_i2f>
    6028:	4962      	ldr	r1, [pc, #392]	; (61b4 <menu()+0x1c48>)
    602a:	f006 fe13 	bl	cc54 <__aeabi_fmul>
    602e:	f006 fbed 	bl	c80c <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    6032:	2502      	movs	r5, #2
    6034:	460b      	mov	r3, r1
    6036:	4602      	mov	r2, r0
    6038:	9500      	str	r5, [sp, #0]
    603a:	484b      	ldr	r0, [pc, #300]	; (6168 <menu()+0x1bfc>)
    603c:	f003 fa08 	bl	9450 <Print::printFloat(double, unsigned char)>
    6040:	4629      	mov	r1, r5
    6042:	485d      	ldr	r0, [pc, #372]	; (61b8 <menu()+0x1c4c>)
    6044:	f005 ff26 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6048:	4847      	ldr	r0, [pc, #284]	; (6168 <menu()+0x1bfc>)
    604a:	f003 f9df 	bl	940c <Print::println()>
        if (settings.cursens == Canbus) {
    604e:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
    6052:	f7ff b993 	b.w	537c <menu()+0xe10>
        loadSettings();
    6056:	f7fb fad5 	bl	1604 <loadSettings()>
    605a:	2102      	movs	r1, #2
    605c:	4844      	ldr	r0, [pc, #272]	; (6170 <menu()+0x1c04>)
    605e:	f005 ff19 	bl	be94 <usb_serial_write>
    6062:	4841      	ldr	r0, [pc, #260]	; (6168 <menu()+0x1bfc>)
    6064:	f003 f9d2 	bl	940c <Print::println()>
    6068:	2102      	movs	r1, #2
    606a:	4841      	ldr	r0, [pc, #260]	; (6170 <menu()+0x1c04>)
    606c:	f005 ff12 	bl	be94 <usb_serial_write>
    6070:	483d      	ldr	r0, [pc, #244]	; (6168 <menu()+0x1bfc>)
    6072:	f003 f9cb 	bl	940c <Print::println()>
    6076:	2102      	movs	r1, #2
    6078:	483d      	ldr	r0, [pc, #244]	; (6170 <menu()+0x1c04>)
    607a:	f005 ff0b 	bl	be94 <usb_serial_write>
    607e:	483a      	ldr	r0, [pc, #232]	; (6168 <menu()+0x1bfc>)
    6080:	f003 f9c4 	bl	940c <Print::println()>
    6084:	484d      	ldr	r0, [pc, #308]	; (61bc <menu()+0x1c50>)
    6086:	2117      	movs	r1, #23
    6088:	f005 ff04 	bl	be94 <usb_serial_write>
    608c:	4836      	ldr	r0, [pc, #216]	; (6168 <menu()+0x1bfc>)
    608e:	f003 f9bd 	bl	940c <Print::println()>
    6092:	2102      	movs	r1, #2
    6094:	4836      	ldr	r0, [pc, #216]	; (6170 <menu()+0x1c04>)
    6096:	4e3d      	ldr	r6, [pc, #244]	; (618c <menu()+0x1c20>)
    6098:	f005 fefc 	bl	be94 <usb_serial_write>
    609c:	4832      	ldr	r0, [pc, #200]	; (6168 <menu()+0x1bfc>)
    609e:	f003 f9b5 	bl	940c <Print::println()>
        break;
    60a2:	e4d8      	b.n	5a56 <menu()+0x14ea>
        settings.CSCvariant++;
    60a4:	4e39      	ldr	r6, [pc, #228]	; (618c <menu()+0x1c20>)
    60a6:	f896 30d6 	ldrb.w	r3, [r6, #214]	; 0xd6
    60aa:	3301      	adds	r3, #1
    60ac:	b2db      	uxtb	r3, r3
          settings.CSCvariant = 0;
    60ae:	2b02      	cmp	r3, #2
    60b0:	bf28      	it	cs
    60b2:	2300      	movcs	r3, #0
    60b4:	f886 30d6 	strb.w	r3, [r6, #214]	; 0xd6
        break;
    60b8:	e4cd      	b.n	5a56 <menu()+0x14ea>
        SOCset = 0;
    60ba:	4b41      	ldr	r3, [pc, #260]	; (61c0 <menu()+0x1c54>)
    60bc:	482c      	ldr	r0, [pc, #176]	; (6170 <menu()+0x1c04>)
    60be:	2200      	movs	r2, #0
    60c0:	2102      	movs	r1, #2
    60c2:	601a      	str	r2, [r3, #0]
    60c4:	f005 fee6 	bl	be94 <usb_serial_write>
    60c8:	4827      	ldr	r0, [pc, #156]	; (6168 <menu()+0x1bfc>)
    60ca:	f003 f99f 	bl	940c <Print::println()>
    60ce:	210b      	movs	r1, #11
    60d0:	483c      	ldr	r0, [pc, #240]	; (61c4 <menu()+0x1c58>)
    60d2:	f005 fedf 	bl	be94 <usb_serial_write>
    60d6:	e7dc      	b.n	6092 <menu()+0x1b26>
        menuload = 0;
    60d8:	2200      	movs	r2, #0
        incomingByte = 115;
    60da:	2373      	movs	r3, #115	; 0x73
    60dc:	4e3a      	ldr	r6, [pc, #232]	; (61c8 <menu()+0x1c5c>)
        menuload = 0;
    60de:	6022      	str	r2, [r4, #0]
        incomingByte = 115;
    60e0:	602b      	str	r3, [r5, #0]
  if (incomingByte == 115 && menuload == 0) {
    60e2:	f7fe bd4d 	b.w	4b80 <menu()+0x614>
        virtual int available() { return usb_serial_available(); }
    60e6:	f005 fea3 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    60ea:	2800      	cmp	r0, #0
    60ec:	f77e ab66 	ble.w	47bc <menu()+0x250>
          settings.DischHys = Serial.parseInt();
    60f0:	481d      	ldr	r0, [pc, #116]	; (6168 <menu()+0x1bfc>)
          settings.DischHys = settings.DischHys / 1000;
    60f2:	4e26      	ldr	r6, [pc, #152]	; (618c <menu()+0x1c20>)
          settings.DischHys = Serial.parseInt();
    60f4:	f003 fae8 	bl	96c8 <Stream::parseInt()>
    60f8:	f006 fd58 	bl	cbac <__aeabi_i2f>
          settings.DischHys = settings.DischHys / 1000;
    60fc:	4919      	ldr	r1, [pc, #100]	; (6164 <menu()+0x1bf8>)
    60fe:	f006 fe5d 	bl	cdbc <__aeabi_fdiv>
    6102:	6170      	str	r0, [r6, #20]
          incomingByte = 'b';
    6104:	e4a7      	b.n	5a56 <menu()+0x14ea>
    6106:	f005 fe93 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    610a:	2800      	cmp	r0, #0
    610c:	f77e ab56 	ble.w	47bc <menu()+0x250>
          settings.socvolt[3] = Serial.parseInt();
    6110:	4815      	ldr	r0, [pc, #84]	; (6168 <menu()+0x1bfc>)
    6112:	4e1e      	ldr	r6, [pc, #120]	; (618c <menu()+0x1c20>)
    6114:	f003 fad8 	bl	96c8 <Stream::parseInt()>
    6118:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
          incomingByte = 'b';
    611c:	e49b      	b.n	5a56 <menu()+0x14ea>
    611e:	f005 fe87 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    6122:	2800      	cmp	r0, #0
    6124:	f77e ab4a 	ble.w	47bc <menu()+0x250>
          settings.socvolt[2] = Serial.parseInt();
    6128:	480f      	ldr	r0, [pc, #60]	; (6168 <menu()+0x1bfc>)
    612a:	4e18      	ldr	r6, [pc, #96]	; (618c <menu()+0x1c20>)
    612c:	f003 facc 	bl	96c8 <Stream::parseInt()>
    6130:	67f0      	str	r0, [r6, #124]	; 0x7c
          incomingByte = 'b';
    6132:	e490      	b.n	5a56 <menu()+0x14ea>
    6134:	f005 fe7c 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    6138:	2800      	cmp	r0, #0
    613a:	f77e ab3f 	ble.w	47bc <menu()+0x250>
          settings.socvolt[1] = Serial.parseInt();
    613e:	480a      	ldr	r0, [pc, #40]	; (6168 <menu()+0x1bfc>)
    6140:	4e12      	ldr	r6, [pc, #72]	; (618c <menu()+0x1c20>)
    6142:	f003 fac1 	bl	96c8 <Stream::parseInt()>
    6146:	67b0      	str	r0, [r6, #120]	; 0x78
          incomingByte = 'b';
    6148:	e485      	b.n	5a56 <menu()+0x14ea>
    614a:	f005 fe71 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    614e:	2800      	cmp	r0, #0
    6150:	f77e ab34 	ble.w	47bc <menu()+0x250>
          settings.socvolt[0] = Serial.parseInt();
    6154:	4804      	ldr	r0, [pc, #16]	; (6168 <menu()+0x1bfc>)
    6156:	4e0d      	ldr	r6, [pc, #52]	; (618c <menu()+0x1c20>)
    6158:	f003 fab6 	bl	96c8 <Stream::parseInt()>
    615c:	6770      	str	r0, [r6, #116]	; 0x74
          incomingByte = 'b';
    615e:	e47a      	b.n	5a56 <menu()+0x14ea>
    6160:	00014de0 	.word	0x00014de0
    6164:	447a0000 	.word	0x447a0000
    6168:	1fff89fc 	.word	0x1fff89fc
    616c:	00014370 	.word	0x00014370
    6170:	00014200 	.word	0x00014200
    6174:	00014df8 	.word	0x00014df8
    6178:	00014e20 	.word	0x00014e20
    617c:	00014c74 	.word	0x00014c74
    6180:	00014068 	.word	0x00014068
    6184:	00014e4c 	.word	0x00014e4c
    6188:	00014e74 	.word	0x00014e74
    618c:	1fffd9bc 	.word	0x1fffd9bc
    6190:	1fffd8b8 	.word	0x1fffd8b8
    6194:	000144f0 	.word	0x000144f0
    6198:	00014ad8 	.word	0x00014ad8
    619c:	3c23d70a 	.word	0x3c23d70a
    61a0:	00014af8 	.word	0x00014af8
    61a4:	00014b00 	.word	0x00014b00
    61a8:	00014b20 	.word	0x00014b20
    61ac:	00014b40 	.word	0x00014b40
    61b0:	00014b44 	.word	0x00014b44
    61b4:	3a83126f 	.word	0x3a83126f
    61b8:	00013fa8 	.word	0x00013fa8
    61bc:	00014304 	.word	0x00014304
    61c0:	1fff91b8 	.word	0x1fff91b8
    61c4:	0001431c 	.word	0x0001431c
    61c8:	1fff8848 	.word	0x1fff8848
    61cc:	f005 fe30 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    61d0:	2800      	cmp	r0, #0
    61d2:	f77e aaf3 	ble.w	47bc <menu()+0x250>
          settings.Scells = Serial.parseInt();
    61d6:	48bd      	ldr	r0, [pc, #756]	; (64cc <menu()+0x1f60>)
    61d8:	4ebd      	ldr	r6, [pc, #756]	; (64d0 <menu()+0x1f64>)
    61da:	f003 fa75 	bl	96c8 <Stream::parseInt()>
    61de:	65b0      	str	r0, [r6, #88]	; 0x58
          incomingByte = 'b';
    61e0:	e439      	b.n	5a56 <menu()+0x14ea>
    61e2:	f005 fe25 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    61e6:	2800      	cmp	r0, #0
    61e8:	f77e aae8 	ble.w	47bc <menu()+0x250>
          settings.DischVsetpoint = Serial.parseInt();
    61ec:	48b7      	ldr	r0, [pc, #732]	; (64cc <menu()+0x1f60>)
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    61ee:	4eb8      	ldr	r6, [pc, #736]	; (64d0 <menu()+0x1f64>)
          settings.DischVsetpoint = Serial.parseInt();
    61f0:	f003 fa6a 	bl	96c8 <Stream::parseInt()>
    61f4:	f006 fcda 	bl	cbac <__aeabi_i2f>
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    61f8:	49b6      	ldr	r1, [pc, #728]	; (64d4 <menu()+0x1f68>)
    61fa:	f006 fddf 	bl	cdbc <__aeabi_fdiv>
    61fe:	61f0      	str	r0, [r6, #28]
          incomingByte = 'b';
    6200:	e429      	b.n	5a56 <menu()+0x14ea>
    6202:	f005 fe15 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    6206:	2800      	cmp	r0, #0
    6208:	f77e aad8 	ble.w	47bc <menu()+0x250>
          settings.discurrentmax = Serial.parseInt() * 10;
    620c:	48af      	ldr	r0, [pc, #700]	; (64cc <menu()+0x1f60>)
    620e:	4eb0      	ldr	r6, [pc, #704]	; (64d0 <menu()+0x1f64>)
    6210:	f003 fa5a 	bl	96c8 <Stream::parseInt()>
    6214:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6218:	0040      	lsls	r0, r0, #1
    621a:	6730      	str	r0, [r6, #112]	; 0x70
          incomingByte = 'b';
    621c:	e41b      	b.n	5a56 <menu()+0x14ea>
    621e:	f005 fe07 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    6222:	2800      	cmp	r0, #0
    6224:	f77e aaca 	ble.w	47bc <menu()+0x250>
          settings.CAP = Serial.parseInt();
    6228:	48a8      	ldr	r0, [pc, #672]	; (64cc <menu()+0x1f60>)
    622a:	4ea9      	ldr	r6, [pc, #676]	; (64d0 <menu()+0x1f64>)
    622c:	f003 fa4c 	bl	96c8 <Stream::parseInt()>
    6230:	6630      	str	r0, [r6, #96]	; 0x60
          incomingByte = 'b';
    6232:	e410      	b.n	5a56 <menu()+0x14ea>
    6234:	f005 fdfc 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    6238:	2800      	cmp	r0, #0
    623a:	f77e aabf 	ble.w	47bc <menu()+0x250>
          settings.balanceHyst = Serial.parseInt();
    623e:	48a3      	ldr	r0, [pc, #652]	; (64cc <menu()+0x1f60>)
          settings.balanceHyst = settings.balanceHyst / 1000;
    6240:	4ea3      	ldr	r6, [pc, #652]	; (64d0 <menu()+0x1f64>)
          settings.balanceHyst = Serial.parseInt();
    6242:	f003 fa41 	bl	96c8 <Stream::parseInt()>
    6246:	f006 fcb1 	bl	cbac <__aeabi_i2f>
          settings.balanceHyst = settings.balanceHyst / 1000;
    624a:	49a2      	ldr	r1, [pc, #648]	; (64d4 <menu()+0x1f68>)
    624c:	f006 fdb6 	bl	cdbc <__aeabi_fdiv>
    6250:	6570      	str	r0, [r6, #84]	; 0x54
          incomingByte = 'b';
    6252:	e400      	b.n	5a56 <menu()+0x14ea>
    6254:	f005 fdec 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    6258:	2800      	cmp	r0, #0
    625a:	f77e aaaf 	ble.w	47bc <menu()+0x250>
          settings.balanceVoltage = Serial.parseInt();
    625e:	489b      	ldr	r0, [pc, #620]	; (64cc <menu()+0x1f60>)
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    6260:	4e9b      	ldr	r6, [pc, #620]	; (64d0 <menu()+0x1f64>)
          settings.balanceVoltage = Serial.parseInt();
    6262:	f003 fa31 	bl	96c8 <Stream::parseInt()>
    6266:	f006 fca1 	bl	cbac <__aeabi_i2f>
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    626a:	499a      	ldr	r1, [pc, #616]	; (64d4 <menu()+0x1f68>)
    626c:	f006 fda6 	bl	cdbc <__aeabi_fdiv>
    6270:	6530      	str	r0, [r6, #80]	; 0x50
          incomingByte = 'b';
    6272:	f7ff bbf0 	b.w	5a56 <menu()+0x14ea>
    6276:	f005 fddb 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    627a:	2800      	cmp	r0, #0
    627c:	f77e aa9e 	ble.w	47bc <menu()+0x250>
          settings.UnderTSetpoint = Serial.parseInt();
    6280:	4892      	ldr	r0, [pc, #584]	; (64cc <menu()+0x1f60>)
    6282:	4e93      	ldr	r6, [pc, #588]	; (64d0 <menu()+0x1f64>)
    6284:	f003 fa20 	bl	96c8 <Stream::parseInt()>
    6288:	f006 fc90 	bl	cbac <__aeabi_i2f>
    628c:	6330      	str	r0, [r6, #48]	; 0x30
          incomingByte = 'b';
    628e:	f7ff bbe2 	b.w	5a56 <menu()+0x14ea>
    6292:	f005 fdcd 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    6296:	2800      	cmp	r0, #0
    6298:	f77e aa90 	ble.w	47bc <menu()+0x250>
          settings.OverTSetpoint = Serial.parseInt();
    629c:	488b      	ldr	r0, [pc, #556]	; (64cc <menu()+0x1f60>)
    629e:	4e8c      	ldr	r6, [pc, #560]	; (64d0 <menu()+0x1f64>)
    62a0:	f003 fa12 	bl	96c8 <Stream::parseInt()>
    62a4:	f006 fc82 	bl	cbac <__aeabi_i2f>
    62a8:	62f0      	str	r0, [r6, #44]	; 0x2c
          incomingByte = 'b';
    62aa:	f7ff bbd4 	b.w	5a56 <menu()+0x14ea>
    62ae:	f005 fdbf 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    62b2:	2800      	cmp	r0, #0
    62b4:	f77e aa82 	ble.w	47bc <menu()+0x250>
          settings.UnderVSetpoint = Serial.parseInt();
    62b8:	4884      	ldr	r0, [pc, #528]	; (64cc <menu()+0x1f60>)
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    62ba:	4e85      	ldr	r6, [pc, #532]	; (64d0 <menu()+0x1f64>)
          settings.UnderVSetpoint = Serial.parseInt();
    62bc:	f003 fa04 	bl	96c8 <Stream::parseInt()>
    62c0:	f006 fc74 	bl	cbac <__aeabi_i2f>
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    62c4:	4983      	ldr	r1, [pc, #524]	; (64d4 <menu()+0x1f68>)
    62c6:	f006 fd79 	bl	cdbc <__aeabi_fdiv>
    62ca:	6130      	str	r0, [r6, #16]
          incomingByte = 'b';
    62cc:	f7ff bbc3 	b.w	5a56 <menu()+0x14ea>
    62d0:	f005 fdae 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    62d4:	2800      	cmp	r0, #0
    62d6:	f77e aa71 	ble.w	47bc <menu()+0x250>
          settings.Pstrings = Serial.parseInt();
    62da:	487c      	ldr	r0, [pc, #496]	; (64cc <menu()+0x1f60>)
    62dc:	4e7c      	ldr	r6, [pc, #496]	; (64d0 <menu()+0x1f64>)
    62de:	f003 f9f3 	bl	96c8 <Stream::parseInt()>
          menuload = 1;
    62e2:	2301      	movs	r3, #1
          settings.Pstrings = Serial.parseInt();
    62e4:	4601      	mov	r1, r0
          menuload = 1;
    62e6:	6023      	str	r3, [r4, #0]
          bms.setPstrings(settings.Pstrings);
    62e8:	487b      	ldr	r0, [pc, #492]	; (64d8 <menu()+0x1f6c>)
          settings.Pstrings = Serial.parseInt();
    62ea:	65f1      	str	r1, [r6, #92]	; 0x5c
          incomingByte = 'b';
    62ec:	2362      	movs	r3, #98	; 0x62
    62ee:	602b      	str	r3, [r5, #0]
          bms.setPstrings(settings.Pstrings);
    62f0:	f7fa fdc8 	bl	e84 <BMSModuleManager::setPstrings(int)>
  if (menuload == 1) {
    62f4:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    62f6:	6828      	ldr	r0, [r5, #0]
    62f8:	f7fe ba62 	b.w	47c0 <menu()+0x254>
    62fc:	f005 fd98 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    6300:	2800      	cmp	r0, #0
    6302:	f77e aa5b 	ble.w	47bc <menu()+0x250>
          settings.OverVSetpoint = Serial.parseInt();
    6306:	4871      	ldr	r0, [pc, #452]	; (64cc <menu()+0x1f60>)
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    6308:	4e71      	ldr	r6, [pc, #452]	; (64d0 <menu()+0x1f64>)
          settings.OverVSetpoint = Serial.parseInt();
    630a:	f003 f9dd 	bl	96c8 <Stream::parseInt()>
    630e:	f006 fc4d 	bl	cbac <__aeabi_i2f>
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    6312:	4970      	ldr	r1, [pc, #448]	; (64d4 <menu()+0x1f68>)
    6314:	f006 fd52 	bl	cdbc <__aeabi_fdiv>
    6318:	60f0      	str	r0, [r6, #12]
          incomingByte = 'b';
    631a:	f7ff bb9c 	b.w	5a56 <menu()+0x14ea>
          settings.ChargerDirect = 1;
    631e:	2301      	movs	r3, #1
          incomingByte = 'e';
    6320:	2265      	movs	r2, #101	; 0x65
          settings.ChargerDirect = 1;
    6322:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
          menuload = 1;
    6326:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    6328:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    632a:	f7fe be85 	b.w	5038 <menu()+0xacc>
          settings.ncur = Serial.parseInt();
    632e:	4867      	ldr	r0, [pc, #412]	; (64cc <menu()+0x1f60>)
    6330:	4e67      	ldr	r6, [pc, #412]	; (64d0 <menu()+0x1f64>)
    6332:	f003 f9c9 	bl	96c8 <Stream::parseInt()>
    6336:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
    633a:	f7ff b841 	b.w	53c0 <menu()+0xe54>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    633e:	4867      	ldr	r0, [pc, #412]	; (64dc <menu()+0x1f70>)
    6340:	2106      	movs	r1, #6
    6342:	f005 fda7 	bl	be94 <usb_serial_write>
        if (settings.CSCvariant == MiniE) {
    6346:	f896 30d6 	ldrb.w	r3, [r6, #214]	; 0xd6
    634a:	e5f5      	b.n	5f38 <menu()+0x19cc>
          settings.chargecurrentmax = Serial.parseInt() * 10;
    634c:	485f      	ldr	r0, [pc, #380]	; (64cc <menu()+0x1f60>)
    634e:	4e60      	ldr	r6, [pc, #384]	; (64d0 <menu()+0x1f64>)
    6350:	f003 f9ba 	bl	96c8 <Stream::parseInt()>
    6354:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6358:	0040      	lsls	r0, r0, #1
          menuload = 1;
    635a:	2201      	movs	r2, #1
          incomingByte = 'e';
    635c:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentmax = Serial.parseInt() * 10;
    635e:	6670      	str	r0, [r6, #100]	; 0x64
          menuload = 1;
    6360:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    6362:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    6364:	f7fe be68 	b.w	5038 <menu()+0xacc>
          debugdigits = Serial.parseInt();
    6368:	4858      	ldr	r0, [pc, #352]	; (64cc <menu()+0x1f60>)
    636a:	f003 f9ad 	bl	96c8 <Stream::parseInt()>
    636e:	4b5c      	ldr	r3, [pc, #368]	; (64e0 <menu()+0x1f74>)
    6370:	6018      	str	r0, [r3, #0]
    6372:	f7ff ba47 	b.w	5804 <menu()+0x1298>
    6376:	211e      	movs	r1, #30
    6378:	485a      	ldr	r0, [pc, #360]	; (64e4 <menu()+0x1f78>)
    637a:	f005 fd8b 	bl	be94 <usb_serial_write>
    637e:	4853      	ldr	r0, [pc, #332]	; (64cc <menu()+0x1f60>)
    6380:	f003 f844 	bl	940c <Print::println()>
    6384:	f7fe bfcf 	b.w	5326 <menu()+0xdba>
    6388:	2120      	movs	r1, #32
    638a:	4857      	ldr	r0, [pc, #348]	; (64e8 <menu()+0x1f7c>)
    638c:	f005 fd82 	bl	be94 <usb_serial_write>
    6390:	484e      	ldr	r0, [pc, #312]	; (64cc <menu()+0x1f60>)
    6392:	f003 f83b 	bl	940c <Print::println()>
    6396:	f7fe bfc6 	b.w	5326 <menu()+0xdba>
    639a:	2117      	movs	r1, #23
    639c:	4853      	ldr	r0, [pc, #332]	; (64ec <menu()+0x1f80>)
    639e:	f005 fd79 	bl	be94 <usb_serial_write>
    63a2:	484a      	ldr	r0, [pc, #296]	; (64cc <menu()+0x1f60>)
    63a4:	f003 f832 	bl	940c <Print::println()>
    63a8:	f7fe bfbd 	b.w	5326 <menu()+0xdba>
          contctrl = 0;
    63ac:	4b50      	ldr	r3, [pc, #320]	; (64f0 <menu()+0x1f84>)
    63ae:	2600      	movs	r6, #0
          digitalWrite(OUT1, LOW);
    63b0:	200b      	movs	r0, #11
    63b2:	4631      	mov	r1, r6
          contctrl = 0;
    63b4:	601e      	str	r6, [r3, #0]
          digitalWrite(OUT1, LOW);
    63b6:	f003 fefb 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    63ba:	4631      	mov	r1, r6
    63bc:	200c      	movs	r0, #12
    63be:	f003 fef7 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT3, LOW);
    63c2:	4631      	mov	r1, r6
    63c4:	2014      	movs	r0, #20
    63c6:	f003 fef3 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT4, LOW);
    63ca:	4631      	mov	r1, r6
    63cc:	2015      	movs	r0, #21
    63ce:	f003 feef 	bl	a1b0 <digitalWrite>
        incomingByte = 'd';
    63d2:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    63d4:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    63d6:	602a      	str	r2, [r5, #0]
        break;
    63d8:	f7ff b865 	b.w	54a6 <menu()+0xf3a>
    63dc:	2106      	movs	r1, #6
    63de:	4845      	ldr	r0, [pc, #276]	; (64f4 <menu()+0x1f88>)
    63e0:	f005 fd58 	bl	be94 <usb_serial_write>
    63e4:	e5ab      	b.n	5f3e <menu()+0x19d2>
    63e6:	4844      	ldr	r0, [pc, #272]	; (64f8 <menu()+0x1f8c>)
    63e8:	2117      	movs	r1, #23
    63ea:	f005 fd53 	bl	be94 <usb_serial_write>
          if (settings.curcan == LemCAB300) {
    63ee:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
    63f2:	2b01      	cmp	r3, #1
    63f4:	d023      	beq.n	643e <menu()+0x1ed2>
          } else if (settings.curcan == LemCAB500) {
    63f6:	2b02      	cmp	r3, #2
    63f8:	d02a      	beq.n	6450 <menu()+0x1ee4>
          } else if (settings.curcan == IsaScale) {
    63fa:	2b03      	cmp	r3, #3
    63fc:	f47e afc1 	bne.w	5382 <menu()+0xe16>
            SERIALCONSOLE.println(" IsaScale IVT-S ");
    6400:	493e      	ldr	r1, [pc, #248]	; (64fc <menu()+0x1f90>)
    6402:	4832      	ldr	r0, [pc, #200]	; (64cc <menu()+0x1f60>)
    6404:	f7fb f8ec 	bl	15e0 <Print::println(char const*) [clone .isra.0]>
    6408:	f7fe bfbb 	b.w	5382 <menu()+0xe16>
    640c:	483c      	ldr	r0, [pc, #240]	; (6500 <menu()+0x1f94>)
    640e:	2120      	movs	r1, #32
    6410:	f005 fd40 	bl	be94 <usb_serial_write>
          if (settings.tripcont == 0) {
    6414:	f896 30d5 	ldrb.w	r3, [r6, #213]	; 0xd5
    6418:	b943      	cbnz	r3, 642c <menu()+0x1ec0>
    641a:	210a      	movs	r1, #10
    641c:	4839      	ldr	r0, [pc, #228]	; (6504 <menu()+0x1f98>)
    641e:	f005 fd39 	bl	be94 <usb_serial_write>
    6422:	482a      	ldr	r0, [pc, #168]	; (64cc <menu()+0x1f60>)
    6424:	f002 fff2 	bl	940c <Print::println()>
    6428:	f7fe bda8 	b.w	4f7c <menu()+0xa10>
    642c:	211c      	movs	r1, #28
    642e:	4836      	ldr	r0, [pc, #216]	; (6508 <menu()+0x1f9c>)
    6430:	f005 fd30 	bl	be94 <usb_serial_write>
    6434:	4825      	ldr	r0, [pc, #148]	; (64cc <menu()+0x1f60>)
    6436:	f002 ffe9 	bl	940c <Print::println()>
    643a:	f7fe bd9f 	b.w	4f7c <menu()+0xa10>
    643e:	2117      	movs	r1, #23
    6440:	4832      	ldr	r0, [pc, #200]	; (650c <menu()+0x1fa0>)
    6442:	f005 fd27 	bl	be94 <usb_serial_write>
    6446:	4821      	ldr	r0, [pc, #132]	; (64cc <menu()+0x1f60>)
    6448:	f002 ffe0 	bl	940c <Print::println()>
    644c:	f7fe bf99 	b.w	5382 <menu()+0xe16>
    6450:	2114      	movs	r1, #20
    6452:	482f      	ldr	r0, [pc, #188]	; (6510 <menu()+0x1fa4>)
    6454:	f005 fd1e 	bl	be94 <usb_serial_write>
    6458:	481c      	ldr	r0, [pc, #112]	; (64cc <menu()+0x1f60>)
    645a:	f002 ffd7 	bl	940c <Print::println()>
    645e:	f7fe bf90 	b.w	5382 <menu()+0xe16>
    6462:	4e1b      	ldr	r6, [pc, #108]	; (64d0 <menu()+0x1f64>)
    6464:	f7fe bd27 	b.w	4eb6 <menu()+0x94a>
    6468:	4e19      	ldr	r6, [pc, #100]	; (64d0 <menu()+0x1f64>)
    646a:	f7ff bb2f 	b.w	5acc <menu()+0x1560>
    646e:	4e18      	ldr	r6, [pc, #96]	; (64d0 <menu()+0x1f64>)
    6470:	f7fe ba97 	b.w	49a2 <menu()+0x436>
    6474:	4e16      	ldr	r6, [pc, #88]	; (64d0 <menu()+0x1f64>)
    6476:	f7fe bb2b 	b.w	4ad0 <menu()+0x564>
    647a:	4e15      	ldr	r6, [pc, #84]	; (64d0 <menu()+0x1f64>)
    647c:	f7fe bddc 	b.w	5038 <menu()+0xacc>
        virtual int available() { return usb_serial_available(); }
    6480:	f005 fcd6 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    6484:	2800      	cmp	r0, #0
    6486:	f77e ac60 	ble.w	4d4a <menu()+0x7de>
          settings.Pretime = Serial.parseInt();
    648a:	4810      	ldr	r0, [pc, #64]	; (64cc <menu()+0x1f60>)
    648c:	4e10      	ldr	r6, [pc, #64]	; (64d0 <menu()+0x1f64>)
    648e:	f003 f91b 	bl	96c8 <Stream::parseInt()>
          menuload = 1;
    6492:	2301      	movs	r3, #1
    6494:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    6496:	236b      	movs	r3, #107	; 0x6b
          settings.Pretime = Serial.parseInt();
    6498:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
          incomingByte = 'k';
    649c:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    649e:	f7fe bd0a 	b.w	4eb6 <menu()+0x94a>
    64a2:	f005 fcc5 	bl	be30 <usb_serial_available>
        if (Serial.available() > 0) {
    64a6:	2800      	cmp	r0, #0
    64a8:	f77e a9c7 	ble.w	483a <menu()+0x2ce>
          settings.WarnOff = Serial.parseInt();
    64ac:	4807      	ldr	r0, [pc, #28]	; (64cc <menu()+0x1f60>)
          settings.WarnOff = settings.WarnOff * 0.001;
    64ae:	4e08      	ldr	r6, [pc, #32]	; (64d0 <menu()+0x1f64>)
          settings.WarnOff = Serial.parseInt();
    64b0:	f003 f90a 	bl	96c8 <Stream::parseInt()>
    64b4:	f006 fb7a 	bl	cbac <__aeabi_i2f>
          settings.WarnOff = settings.WarnOff * 0.001;
    64b8:	4916      	ldr	r1, [pc, #88]	; (6514 <menu()+0x1fa8>)
    64ba:	f006 fbcb 	bl	cc54 <__aeabi_fmul>
          menuload = 1;
    64be:	2301      	movs	r3, #1
    64c0:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    64c2:	2361      	movs	r3, #97	; 0x61
          settings.WarnOff = settings.WarnOff * 0.001;
    64c4:	62b0      	str	r0, [r6, #40]	; 0x28
          incomingByte = 'a';
    64c6:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    64c8:	f7fe ba6b 	b.w	49a2 <menu()+0x436>
    64cc:	1fff89fc 	.word	0x1fff89fc
    64d0:	1fffd9bc 	.word	0x1fffd9bc
    64d4:	447a0000 	.word	0x447a0000
    64d8:	1fff91e4 	.word	0x1fff91e4
    64dc:	00014e8c 	.word	0x00014e8c
    64e0:	1fff884c 	.word	0x1fff884c
    64e4:	00014a18 	.word	0x00014a18
    64e8:	00014a38 	.word	0x00014a38
    64ec:	00014a5c 	.word	0x00014a5c
    64f0:	1fffd78c 	.word	0x1fffd78c
    64f4:	00014e94 	.word	0x00014e94
    64f8:	00014b64 	.word	0x00014b64
    64fc:	00014bac 	.word	0x00014bac
    6500:	00014700 	.word	0x00014700
    6504:	00014724 	.word	0x00014724
    6508:	00014730 	.word	0x00014730
    650c:	00014b7c 	.word	0x00014b7c
    6510:	00014b94 	.word	0x00014b94
    6514:	3a83126f 	.word	0x3a83126f

00006518 <assignID()>:
void assignID() {
    6518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg.id = 0x0A0;  //broadcast to all CSC
    651a:	4c2b      	ldr	r4, [pc, #172]	; (65c8 <assignID()+0xb0>)
  msg.buf[2] = DMC[0];
    651c:	4e2b      	ldr	r6, [pc, #172]	; (65cc <assignID()+0xb4>)
  msg.ext = 0;
    651e:	88e3      	ldrh	r3, [r4, #6]
  Can0.write(msg);
    6520:	4d2b      	ldr	r5, [pc, #172]	; (65d0 <assignID()+0xb8>)
  msg.buf[2] = DMC[0];
    6522:	8832      	ldrh	r2, [r6, #0]
    6524:	8162      	strh	r2, [r4, #10]
  msg.ext = 0;
    6526:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    652a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    652e:	80e3      	strh	r3, [r4, #6]
  msg.buf[0] = 0x12;
    6530:	f64a 3312 	movw	r3, #43794	; 0xab12
    6534:	8123      	strh	r3, [r4, #8]
  msg.buf[4] = DMC[2];
    6536:	8873      	ldrh	r3, [r6, #2]
    6538:	81a3      	strh	r3, [r4, #12]
  Can0.write(msg);
    653a:	4621      	mov	r1, r4
  msg.buf[6] = 0xFF;
    653c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  msg.id = 0x0A0;  //broadcast to all CSC
    6540:	27a0      	movs	r7, #160	; 0xa0
  Can0.write(msg);
    6542:	4628      	mov	r0, r5
  msg.buf[6] = 0xFF;
    6544:	81e3      	strh	r3, [r4, #14]
  msg.id = 0x0A0;  //broadcast to all CSC
    6546:	6027      	str	r7, [r4, #0]
  Can0.write(msg);
    6548:	f001 fe90 	bl	826c <FlexCAN::write(CAN_message_t const&)>
  delay(30);
    654c:	201e      	movs	r0, #30
    654e:	f003 febf 	bl	a2d0 <delay>
  msg.buf[1] = 0xBA;
    6552:	23ba      	movs	r3, #186	; 0xba
  msg.buf[2] = DMC[4];
    6554:	88b2      	ldrh	r2, [r6, #4]
  msg.buf[1] = 0xBA;
    6556:	7263      	strb	r3, [r4, #9]
  Can0.write(msg);
    6558:	4621      	mov	r1, r4
  msg.buf[4] = DMC[6];
    655a:	88f3      	ldrh	r3, [r6, #6]
  msg.buf[2] = DMC[4];
    655c:	8162      	strh	r2, [r4, #10]
  Can0.write(msg);
    655e:	4628      	mov	r0, r5
  msg.buf[1] = NextID;
    6560:	4e1c      	ldr	r6, [pc, #112]	; (65d4 <assignID()+0xbc>)
  msg.buf[4] = DMC[6];
    6562:	81a3      	strh	r3, [r4, #12]
  Can0.write(msg);
    6564:	f001 fe82 	bl	826c <FlexCAN::write(CAN_message_t const&)>
  delay(10);
    6568:	200a      	movs	r0, #10
    656a:	f003 feb1 	bl	a2d0 <delay>
  msg.buf[0] = 0x5B;
    656e:	235b      	movs	r3, #91	; 0x5b
  Can0.write(msg);
    6570:	4621      	mov	r1, r4
  msg.buf[0] = 0x5B;
    6572:	7223      	strb	r3, [r4, #8]
  Can0.write(msg);
    6574:	4628      	mov	r0, r5
  msg.buf[1] = NextID;
    6576:	7833      	ldrb	r3, [r6, #0]
    6578:	7263      	strb	r3, [r4, #9]
  Can0.write(msg);
    657a:	f001 fe77 	bl	826c <FlexCAN::write(CAN_message_t const&)>
  delay(10);
    657e:	200a      	movs	r0, #10
    6580:	f003 fea6 	bl	a2d0 <delay>
  msg.buf[0] = 0x37;
    6584:	2337      	movs	r3, #55	; 0x37
    6586:	7223      	strb	r3, [r4, #8]
  Can0.write(msg);
    6588:	4621      	mov	r1, r4
  msg.buf[1] = NextID;
    658a:	7833      	ldrb	r3, [r6, #0]
    658c:	7263      	strb	r3, [r4, #9]
  Can0.write(msg);
    658e:	4628      	mov	r0, r5
    6590:	f001 fe6c 	bl	826c <FlexCAN::write(CAN_message_t const&)>
  NextID++;
    6594:	7832      	ldrb	r2, [r6, #0]
  msg.ext = 0;
    6596:	88e3      	ldrh	r3, [r4, #6]
  msg.id = 0x0A0;  //broadcast to all CSC
    6598:	6027      	str	r7, [r4, #0]
  NextID++;
    659a:	3201      	adds	r2, #1
  msg.buf[0] = 0x37;
    659c:	f06f 01c8 	mvn.w	r1, #200	; 0xc8
  NextID++;
    65a0:	7032      	strb	r2, [r6, #0]
  Unassigned = 0;
    65a2:	4a0d      	ldr	r2, [pc, #52]	; (65d8 <assignID()+0xc0>)
  msg.buf[0] = 0x37;
    65a4:	60a1      	str	r1, [r4, #8]
  msg.ext = 0;
    65a6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  Unassigned = 0;
    65aa:	2100      	movs	r1, #0
    65ac:	7011      	strb	r1, [r2, #0]
  msg.ext = 0;
    65ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  msg.buf[4] = 0xFF;
    65b2:	f04f 32ff 	mov.w	r2, #4294967295
  Can0.write(msg);
    65b6:	4628      	mov	r0, r5
    65b8:	4621      	mov	r1, r4
  msg.ext = 0;
    65ba:	80e3      	strh	r3, [r4, #6]
  msg.buf[4] = 0xFF;
    65bc:	60e2      	str	r2, [r4, #12]
}
    65be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Can0.write(msg);
    65c2:	f001 be53 	b.w	826c <FlexCAN::write(CAN_message_t const&)>
    65c6:	bf00      	nop
    65c8:	1fffd914 	.word	0x1fffd914
    65cc:	1fff9190 	.word	0x1fff9190
    65d0:	1fffdad0 	.word	0x1fffdad0
    65d4:	1fff91a0 	.word	0x1fff91a0
    65d8:	1fff91c0 	.word	0x1fff91c0

000065dc <loop>:
void loop() {
    65dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (Can0.available()) {
    65e0:	4c9b      	ldr	r4, [pc, #620]	; (6850 <loop+0x274>)
void loop() {
    65e2:	b0a3      	sub	sp, #140	; 0x8c
  while (Can0.available()) {
    65e4:	e001      	b.n	65ea <loop+0xe>
    canread();
    65e6:	f7fc fedb 	bl	33a0 <canread()>
  while (Can0.available()) {
    65ea:	4620      	mov	r0, r4
    65ec:	f001 fd50 	bl	8090 <FlexCAN::available()>
    65f0:	2800      	cmp	r0, #0
    65f2:	d1f8      	bne.n	65e6 <loop+0xa>
    65f4:	f005 fc1c 	bl	be30 <usb_serial_available>
  if (SERIALCONSOLE.available() > 0) {
    65f8:	2800      	cmp	r0, #0
    65fa:	dd01      	ble.n	6600 <loop+0x24>
    menu();
    65fc:	f7fd ffb6 	bl	456c <menu()>
  if (outputcheck != 1) {
    6600:	4e94      	ldr	r6, [pc, #592]	; (6854 <loop+0x278>)
    if (settings.ESSmode == 1) {
    6602:	4d95      	ldr	r5, [pc, #596]	; (6858 <loop+0x27c>)
  if (outputcheck != 1) {
    6604:	6833      	ldr	r3, [r6, #0]
    6606:	2b01      	cmp	r3, #1
    6608:	d138      	bne.n	667c <loop+0xa0>
    660a:	4c94      	ldr	r4, [pc, #592]	; (685c <loop+0x280>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    660c:	6823      	ldr	r3, [r4, #0]
  if (millis() - commandtime > commandrate) {
    660e:	4a94      	ldr	r2, [pc, #592]	; (6860 <loop+0x284>)
    6610:	4994      	ldr	r1, [pc, #592]	; (6864 <loop+0x288>)
    6612:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    6614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6616:	6810      	ldr	r0, [r2, #0]
    6618:	8809      	ldrh	r1, [r1, #0]
    661a:	1a1b      	subs	r3, r3, r0
    661c:	428b      	cmp	r3, r1
    661e:	d841      	bhi.n	66a4 <loop+0xc8>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6620:	6823      	ldr	r3, [r4, #0]
  if (millis() - looptime > 500) {
    6622:	4a91      	ldr	r2, [pc, #580]	; (6868 <loop+0x28c>)
    6624:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    6626:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6628:	6811      	ldr	r1, [r2, #0]
    662a:	1a5b      	subs	r3, r3, r1
    662c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    6630:	d855      	bhi.n	66de <loop+0x102>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6632:	6823      	ldr	r3, [r4, #0]
  if (millis() - cleartime > 5000) {
    6634:	4e8d      	ldr	r6, [pc, #564]	; (686c <loop+0x290>)
    6636:	931e      	str	r3, [sp, #120]	; 0x78
    6638:	6832      	ldr	r2, [r6, #0]
	return ret;
    663a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    663c:	1a9b      	subs	r3, r3, r2
    663e:	f241 3288 	movw	r2, #5000	; 0x1388
    6642:	4293      	cmp	r3, r2
    6644:	d835      	bhi.n	66b2 <loop+0xd6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6646:	6823      	ldr	r3, [r4, #0]
  if (millis() - looptime1 > settings.chargerspd) {
    6648:	4a89      	ldr	r2, [pc, #548]	; (6870 <loop+0x294>)
    664a:	9320      	str	r3, [sp, #128]	; 0x80
    664c:	6811      	ldr	r1, [r2, #0]
	return ret;
    664e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    6650:	1a5b      	subs	r3, r3, r1
    6652:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
    6656:	428b      	cmp	r3, r1
    6658:	d90d      	bls.n	6676 <loop+0x9a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    665a:	6823      	ldr	r3, [r4, #0]
    665c:	9321      	str	r3, [sp, #132]	; 0x84
    if (settings.ESSmode == 1) {
    665e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
	return ret;
    6662:	9921      	ldr	r1, [sp, #132]	; 0x84
    looptime1 = millis();
    6664:	6011      	str	r1, [r2, #0]
    if (settings.ESSmode == 1) {
    6666:	2b01      	cmp	r3, #1
    6668:	f000 80ed 	beq.w	6846 <loop+0x26a>
      if (bmsstatus == Charge) {
    666c:	4b81      	ldr	r3, [pc, #516]	; (6874 <loop+0x298>)
    666e:	781b      	ldrb	r3, [r3, #0]
    6670:	2b03      	cmp	r3, #3
    6672:	f000 80e8 	beq.w	6846 <loop+0x26a>
}
    6676:	b023      	add	sp, #140	; 0x8c
    6678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    contcon();
    667c:	f7fc f90e 	bl	289c <contcon()>
    if (settings.ESSmode == 1) {
    6680:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
      if (bmsstatus != Error) {
    6684:	4f7b      	ldr	r7, [pc, #492]	; (6874 <loop+0x298>)
    if (settings.ESSmode == 1) {
    6686:	2c01      	cmp	r4, #1
      if (bmsstatus != Error) {
    6688:	783b      	ldrb	r3, [r7, #0]
    if (settings.ESSmode == 1) {
    668a:	f000 814c 	beq.w	6926 <loop+0x34a>
      switch (bmsstatus) {
    668e:	2b05      	cmp	r3, #5
    6690:	f200 81b8 	bhi.w	6a04 <loop+0x428>
    6694:	e8df f013 	tbh	[pc, r3, lsl #1]
    6698:	027c020b 	.word	0x027c020b
    669c:	02db02ba 	.word	0x02db02ba
    66a0:	02240307 	.word	0x02240307
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    66a4:	6823      	ldr	r3, [r4, #0]
    66a6:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    66a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    commandtime = millis();
    66aa:	6013      	str	r3, [r2, #0]
    sendcommand();
    66ac:	f7fd fe2c 	bl	4308 <sendcommand()>
    66b0:	e7b6      	b.n	6620 <loop+0x44>
    if (bms.checkcomms()) {
    66b2:	4871      	ldr	r0, [pc, #452]	; (6878 <loop+0x29c>)
    66b4:	f7fa f9de 	bl	a74 <BMSModuleManager::checkcomms()>
    66b8:	2800      	cmp	r0, #0
    66ba:	f040 809c 	bne.w	67f6 <loop+0x21a>
      if (debug != 0) {
    66be:	4b6f      	ldr	r3, [pc, #444]	; (687c <loop+0x2a0>)
    66c0:	681b      	ldr	r3, [r3, #0]
    66c2:	2b00      	cmp	r3, #0
    66c4:	f040 81d9 	bne.w	6a7a <loop+0x49e>
      bmsstatus = Error;
    66c8:	4b6a      	ldr	r3, [pc, #424]	; (6874 <loop+0x298>)
    66ca:	2205      	movs	r2, #5
    66cc:	701a      	strb	r2, [r3, #0]
      ErrorReason = 4;
    66ce:	4b6c      	ldr	r3, [pc, #432]	; (6880 <loop+0x2a4>)
    66d0:	2204      	movs	r2, #4
    66d2:	601a      	str	r2, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    66d4:	6823      	ldr	r3, [r4, #0]
    66d6:	931f      	str	r3, [sp, #124]	; 0x7c
	return ret;
    66d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cleartime = millis();
    66da:	6033      	str	r3, [r6, #0]
    66dc:	e7b3      	b.n	6646 <loop+0x6a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    66de:	6823      	ldr	r3, [r4, #0]
    66e0:	9316      	str	r3, [sp, #88]	; 0x58
	return ret;
    66e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    bms.getAllVoltTemp();
    66e4:	4864      	ldr	r0, [pc, #400]	; (6878 <loop+0x29c>)
    looptime = millis();
    66e6:	6013      	str	r3, [r2, #0]
    bms.getAllVoltTemp();
    66e8:	f7fa fab6 	bl	c58 <BMSModuleManager::getAllVoltTemp()>
    if (settings.ESSmode == 1) {
    66ec:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
      if (SOCset != 0) {
    66f0:	f8df 8190 	ldr.w	r8, [pc, #400]	; 6884 <loop+0x2a8>
    if (settings.ESSmode == 1) {
    66f4:	2b01      	cmp	r3, #1
      if (SOCset != 0) {
    66f6:	f8d8 3000 	ldr.w	r3, [r8]
    if (settings.ESSmode == 1) {
    66fa:	f000 8185 	beq.w	6a08 <loop+0x42c>
      if (SOCset != 0) {
    66fe:	2b00      	cmp	r3, #0
    6700:	f040 80d6 	bne.w	68b0 <loop+0x2d4>
    if (debug != 0) {
    6704:	f8df 9174 	ldr.w	r9, [pc, #372]	; 687c <loop+0x2a0>
    6708:	f8d9 3000 	ldr.w	r3, [r9]
    670c:	2b00      	cmp	r3, #0
    670e:	d17a      	bne.n	6806 <loop+0x22a>
    if (CSVdebug != 0) {
    6710:	4f5d      	ldr	r7, [pc, #372]	; (6888 <loop+0x2ac>)
    6712:	683b      	ldr	r3, [r7, #0]
    6714:	2b00      	cmp	r3, #0
    6716:	f040 8084 	bne.w	6822 <loop+0x246>
    if (inputcheck != 0) {
    671a:	4b5c      	ldr	r3, [pc, #368]	; (688c <loop+0x2b0>)
    671c:	681b      	ldr	r3, [r3, #0]
    671e:	2b00      	cmp	r3, #0
    6720:	f040 808e 	bne.w	6840 <loop+0x264>
    if (outputcheck != 0) {
    6724:	6833      	ldr	r3, [r6, #0]
    6726:	2b00      	cmp	r3, #0
    6728:	d158      	bne.n	67dc <loop+0x200>
      gaugeupdate();
    672a:	f7fb f8c3 	bl	18b4 <gaugeupdate()>
    updateSOC();
    672e:	f7fb fef5 	bl	251c <updateSOC()>
    currentlimit();
    6732:	f7fc ffcf 	bl	36d4 <currentlimit()>
    if (SOCset != 0) {
    6736:	f8d8 3000 	ldr.w	r3, [r8]
    673a:	2b00      	cmp	r3, #0
    673c:	d158      	bne.n	67f0 <loop+0x214>
    if (cellspresent == 0 && millis() > 3000) {
    673e:	4e54      	ldr	r6, [pc, #336]	; (6890 <loop+0x2b4>)
    VEcan();
    6740:	f7fc fa66 	bl	2c10 <VEcan()>
    if (cellspresent == 0 && millis() > 3000) {
    6744:	6833      	ldr	r3, [r6, #0]
      cellspresent = bms.seriescells();  //set amount of connected cells, might need delay
    6746:	484c      	ldr	r0, [pc, #304]	; (6878 <loop+0x29c>)
    if (cellspresent == 0 && millis() > 3000) {
    6748:	b93b      	cbnz	r3, 675a <loop+0x17e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    674a:	6823      	ldr	r3, [r4, #0]
    674c:	931c      	str	r3, [sp, #112]	; 0x70
	return ret;
    674e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    6750:	f640 33b8 	movw	r3, #3000	; 0xbb8
    6754:	429a      	cmp	r2, r3
    6756:	f200 8171 	bhi.w	6a3c <loop+0x460>
      if (cellspresent != bms.seriescells())  //detect a fault in cells detected
    675a:	f7fa f9c7 	bl	aec <BMSModuleManager::seriescells()>
    675e:	6833      	ldr	r3, [r6, #0]
    6760:	4298      	cmp	r0, r3
    6762:	d00a      	beq.n	677a <loop+0x19e>
        if (debug != 0) {
    6764:	f8d9 3000 	ldr.w	r3, [r9]
    6768:	2b00      	cmp	r3, #0
    676a:	f040 8173 	bne.w	6a54 <loop+0x478>
        bmsstatus = Error;
    676e:	4b41      	ldr	r3, [pc, #260]	; (6874 <loop+0x298>)
    6770:	2205      	movs	r2, #5
    6772:	701a      	strb	r2, [r3, #0]
        ErrorReason = 3;
    6774:	4b42      	ldr	r3, [pc, #264]	; (6880 <loop+0x2a4>)
    6776:	2203      	movs	r2, #3
    6778:	601a      	str	r2, [r3, #0]
    if (CSVdebug != 1) {
    677a:	683b      	ldr	r3, [r7, #0]
    677c:	2b01      	cmp	r3, #1
    677e:	d001      	beq.n	6784 <loop+0x1a8>
      dashupdate();
    6780:	f7fd fad4 	bl	3d2c <dashupdate()>
    if ((settings.balanceDuty + 5) > ((balancetimer - millis()) * 0.001)) {
    6784:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
    6788:	3005      	adds	r0, #5
    678a:	f006 fa0f 	bl	cbac <__aeabi_i2f>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    678e:	6822      	ldr	r2, [r4, #0]
    6790:	4b40      	ldr	r3, [pc, #256]	; (6894 <loop+0x2b8>)
    6792:	921d      	str	r2, [sp, #116]	; 0x74
    6794:	681a      	ldr	r2, [r3, #0]
	return ret;
    6796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6798:	4606      	mov	r6, r0
    679a:	1ad0      	subs	r0, r2, r3
    679c:	f006 fa02 	bl	cba4 <__aeabi_ui2f>
    67a0:	493d      	ldr	r1, [pc, #244]	; (6898 <loop+0x2bc>)
    67a2:	f006 fa57 	bl	cc54 <__aeabi_fmul>
    67a6:	4601      	mov	r1, r0
    67a8:	4630      	mov	r0, r6
    67aa:	f006 fc0f 	bl	cfcc <__aeabi_fcmpgt>
    67ae:	4601      	mov	r1, r0
      bms.setBalIgnore(true);
    67b0:	4831      	ldr	r0, [pc, #196]	; (6878 <loop+0x29c>)
    if ((settings.balanceDuty + 5) > ((balancetimer - millis()) * 0.001)) {
    67b2:	2900      	cmp	r1, #0
    67b4:	f000 8117 	beq.w	69e6 <loop+0x40a>
      bms.setBalIgnore(true);
    67b8:	2101      	movs	r1, #1
    67ba:	f7fa fb61 	bl	e80 <BMSModuleManager::setBalIgnore(bool)>
    if (Unassigned > 0) {
    67be:	4b37      	ldr	r3, [pc, #220]	; (689c <loop+0x2c0>)
    67c0:	781b      	ldrb	r3, [r3, #0]
    67c2:	2b00      	cmp	r3, #0
    67c4:	f040 8116 	bne.w	69f4 <loop+0x418>
  noInterrupts();  //   No - reset WDT
    67c8:	b672      	cpsid	i
  WDOG_REFRESH = 0xA602;
    67ca:	4b35      	ldr	r3, [pc, #212]	; (68a0 <loop+0x2c4>)
    67cc:	f24a 6102 	movw	r1, #42498	; 0xa602
  WDOG_REFRESH = 0xB480;
    67d0:	f24b 4280 	movw	r2, #46208	; 0xb480
  WDOG_REFRESH = 0xA602;
    67d4:	8199      	strh	r1, [r3, #12]
  WDOG_REFRESH = 0xB480;
    67d6:	819a      	strh	r2, [r3, #12]
  interrupts();
    67d8:	b662      	cpsie	i
}
    67da:	e72a      	b.n	6632 <loop+0x56>
      outputdebug();
    67dc:	f7fd fa50 	bl	3c80 <outputdebug()>
    updateSOC();
    67e0:	f7fb fe9c 	bl	251c <updateSOC()>
    currentlimit();
    67e4:	f7fc ff76 	bl	36d4 <currentlimit()>
    if (SOCset != 0) {
    67e8:	f8d8 3000 	ldr.w	r3, [r8]
    67ec:	2b00      	cmp	r3, #0
    67ee:	d0a6      	beq.n	673e <loop+0x162>
      alarmupdate();
    67f0:	f7fa ffcc 	bl	178c <alarmupdate()>
    67f4:	e7a3      	b.n	673e <loop+0x162>
      if (bmsstatus == Error) {
    67f6:	4b1f      	ldr	r3, [pc, #124]	; (6874 <loop+0x298>)
    67f8:	781a      	ldrb	r2, [r3, #0]
    67fa:	2a05      	cmp	r2, #5
    67fc:	f47f af6a 	bne.w	66d4 <loop+0xf8>
        bmsstatus = Boot;
    6800:	2200      	movs	r2, #0
    6802:	701a      	strb	r2, [r3, #0]
    6804:	e766      	b.n	66d4 <loop+0xf8>
      printbmsstat();
    6806:	f7fb f913 	bl	1a30 <printbmsstat()>
      bms.printPackDetails(debugdigits, settings.CSCvariant);
    680a:	4b26      	ldr	r3, [pc, #152]	; (68a4 <loop+0x2c8>)
    if (CSVdebug != 0) {
    680c:	4f1e      	ldr	r7, [pc, #120]	; (6888 <loop+0x2ac>)
      bms.printPackDetails(debugdigits, settings.CSCvariant);
    680e:	6819      	ldr	r1, [r3, #0]
    6810:	f895 20d6 	ldrb.w	r2, [r5, #214]	; 0xd6
    6814:	4818      	ldr	r0, [pc, #96]	; (6878 <loop+0x29c>)
    6816:	f7fa fbf3 	bl	1000 <BMSModuleManager::printPackDetails(int, int)>
    if (CSVdebug != 0) {
    681a:	683b      	ldr	r3, [r7, #0]
    681c:	2b00      	cmp	r3, #0
    681e:	f43f af7c 	beq.w	671a <loop+0x13e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6822:	6823      	ldr	r3, [r4, #0]
    6824:	931b      	str	r3, [sp, #108]	; 0x6c
      bms.printAllCSV(millis(), currentact, SOC);
    6826:	4a20      	ldr	r2, [pc, #128]	; (68a8 <loop+0x2cc>)
    6828:	4b20      	ldr	r3, [pc, #128]	; (68ac <loop+0x2d0>)
	return ret;
    682a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    682c:	681b      	ldr	r3, [r3, #0]
    682e:	6812      	ldr	r2, [r2, #0]
    6830:	4811      	ldr	r0, [pc, #68]	; (6878 <loop+0x29c>)
    6832:	f7fa fd5f 	bl	12f4 <BMSModuleManager::printAllCSV(unsigned long, float, int)>
    if (inputcheck != 0) {
    6836:	4b15      	ldr	r3, [pc, #84]	; (688c <loop+0x2b0>)
    6838:	681b      	ldr	r3, [r3, #0]
    683a:	2b00      	cmp	r3, #0
    683c:	f43f af72 	beq.w	6724 <loop+0x148>
      inputdebug();
    6840:	f7fd f9b8 	bl	3bb4 <inputdebug()>
    6844:	e76e      	b.n	6724 <loop+0x148>
}
    6846:	b023      	add	sp, #140	; 0x8c
    6848:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      chargercomms();
    684c:	f7fd bc08 	b.w	4060 <chargercomms()>
    6850:	1fffdad0 	.word	0x1fffdad0
    6854:	1fffd9a8 	.word	0x1fffd9a8
    6858:	1fffd9bc 	.word	0x1fffd9bc
    685c:	1fffdcc4 	.word	0x1fffdcc4
    6860:	1fffd728 	.word	0x1fffd728
    6864:	1fff8844 	.word	0x1fff8844
    6868:	1fffd8e0 	.word	0x1fffd8e0
    686c:	1fffd724 	.word	0x1fffd724
    6870:	1fffd8e4 	.word	0x1fffd8e4
    6874:	1fffd708 	.word	0x1fffd708
    6878:	1fff91e4 	.word	0x1fff91e4
    687c:	1fff8848 	.word	0x1fff8848
    6880:	1fff919c 	.word	0x1fff919c
    6884:	1fff91b8 	.word	0x1fff91b8
    6888:	1fff9188 	.word	0x1fff9188
    688c:	1fffd8d4 	.word	0x1fffd8d4
    6890:	1fffd710 	.word	0x1fffd710
    6894:	1fff91e0 	.word	0x1fff91e0
    6898:	3a83126f 	.word	0x3a83126f
    689c:	1fff91c0 	.word	0x1fff91c0
    68a0:	40052000 	.word	0x40052000
    68a4:	1fff884c 	.word	0x1fff884c
    68a8:	1fffd8a0 	.word	0x1fffd8a0
    68ac:	1fff8824 	.word	0x1fff8824
        if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    68b0:	48a4      	ldr	r0, [pc, #656]	; (6b44 <loop+0x568>)
    68b2:	f7fa fa95 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    68b6:	6929      	ldr	r1, [r5, #16]
    68b8:	f006 fb6a 	bl	cf90 <__aeabi_fcmplt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    68bc:	6823      	ldr	r3, [r4, #0]
    68be:	2800      	cmp	r0, #0
    68c0:	f000 81f8 	beq.w	6cb4 <loop+0x6d8>
          if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    68c4:	4aa0      	ldr	r2, [pc, #640]	; (6b48 <loop+0x56c>)
    68c6:	9317      	str	r3, [sp, #92]	; 0x5c
	return ret;
    68c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    68ca:	6812      	ldr	r2, [r2, #0]
    68cc:	429a      	cmp	r2, r3
    68ce:	d202      	bcs.n	68d6 <loop+0x2fa>
            bmsstatus = Error;
    68d0:	4b9e      	ldr	r3, [pc, #632]	; (6b4c <loop+0x570>)
    68d2:	2205      	movs	r2, #5
    68d4:	701a      	strb	r2, [r3, #0]
        if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    68d6:	489b      	ldr	r0, [pc, #620]	; (6b44 <loop+0x568>)
    68d8:	f7fa faaa 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    68dc:	6929      	ldr	r1, [r5, #16]
    68de:	f006 fb57 	bl	cf90 <__aeabi_fcmplt>
    68e2:	2800      	cmp	r0, #0
    68e4:	f000 8351 	beq.w	6f8a <loop+0x9ae>
          bmsstatus = Error;
    68e8:	4b98      	ldr	r3, [pc, #608]	; (6b4c <loop+0x570>)
    68ea:	2205      	movs	r2, #5
    68ec:	701a      	strb	r2, [r3, #0]
        if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    68ee:	4895      	ldr	r0, [pc, #596]	; (6b44 <loop+0x568>)
    68f0:	f7fa fa9e 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    68f4:	68e9      	ldr	r1, [r5, #12]
    68f6:	f006 fb69 	bl	cfcc <__aeabi_fcmpgt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    68fa:	6823      	ldr	r3, [r4, #0]
    68fc:	2800      	cmp	r0, #0
    68fe:	f000 831c 	beq.w	6f3a <loop+0x95e>
          if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    6902:	4a93      	ldr	r2, [pc, #588]	; (6b50 <loop+0x574>)
    6904:	9319      	str	r3, [sp, #100]	; 0x64
	return ret;
    6906:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6908:	6812      	ldr	r2, [r2, #0]
    690a:	429a      	cmp	r2, r3
    690c:	f4bf aefa 	bcs.w	6704 <loop+0x128>
            bmsstatus = Error;
    6910:	4b8e      	ldr	r3, [pc, #568]	; (6b4c <loop+0x570>)
    if (debug != 0) {
    6912:	f8df 9240 	ldr.w	r9, [pc, #576]	; 6b54 <loop+0x578>
            bmsstatus = Error;
    6916:	2205      	movs	r2, #5
    6918:	701a      	strb	r2, [r3, #0]
    if (debug != 0) {
    691a:	f8d9 3000 	ldr.w	r3, [r9]
    691e:	2b00      	cmp	r3, #0
    6920:	f43f aef6 	beq.w	6710 <loop+0x134>
    6924:	e76f      	b.n	6806 <loop+0x22a>
      if (bmsstatus != Error) {
    6926:	2b05      	cmp	r3, #5
    6928:	d067      	beq.n	69fa <loop+0x41e>
        contctrl = contctrl | 4;  //turn on negative contactor
    692a:	4f8b      	ldr	r7, [pc, #556]	; (6b58 <loop+0x57c>)
    692c:	683b      	ldr	r3, [r7, #0]
    692e:	f043 0304 	orr.w	r3, r3, #4
    6932:	603b      	str	r3, [r7, #0]
        if (settings.tripcont != 0) {
    6934:	f895 30d5 	ldrb.w	r3, [r5, #213]	; 0xd5
    6938:	2b00      	cmp	r3, #0
    693a:	f040 82a3 	bne.w	6e84 <loop+0x8a8>
    693e:	4c87      	ldr	r4, [pc, #540]	; (6b5c <loop+0x580>)
          if (storagemode == 1) {
    6940:	f8df 821c 	ldr.w	r8, [pc, #540]	; 6b60 <loop+0x584>
        if (digitalRead(IN1) == LOW)  //Key OFF
    6944:	2011      	movs	r0, #17
    6946:	f003 fc59 	bl	a1fc <digitalRead>
          if (storagemode == 1) {
    694a:	f8d8 3000 	ldr.w	r3, [r8]
        if (digitalRead(IN1) == LOW)  //Key OFF
    694e:	2800      	cmp	r0, #0
    6950:	f040 80a6 	bne.w	6aa0 <loop+0x4c4>
          if (storagemode == 1) {
    6954:	2b01      	cmp	r3, #1
    6956:	f000 8209 	beq.w	6d6c <loop+0x790>
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    695a:	487a      	ldr	r0, [pc, #488]	; (6b44 <loop+0x568>)
    695c:	f7fa fa68 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6960:	6d29      	ldr	r1, [r5, #80]	; 0x50
    6962:	f006 fb33 	bl	cfcc <__aeabi_fcmpgt>
    6966:	2800      	cmp	r0, #0
    6968:	f040 82d5 	bne.w	6f16 <loop+0x93a>
        if (storagemode == 1) {
    696c:	f8d8 8000 	ldr.w	r8, [r8]
    6970:	4b7c      	ldr	r3, [pc, #496]	; (6b64 <loop+0x588>)
    6972:	f1b8 0f01 	cmp.w	r8, #1
    6976:	6018      	str	r0, [r3, #0]
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    6978:	4872      	ldr	r0, [pc, #456]	; (6b44 <loop+0x568>)
        if (storagemode == 1) {
    697a:	f000 823a 	beq.w	6df2 <loop+0x816>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    697e:	f7fa fa57 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6982:	68e9      	ldr	r1, [r5, #12]
    6984:	f006 fb22 	bl	cfcc <__aeabi_fcmpgt>
    6988:	2800      	cmp	r0, #0
    698a:	f000 819a 	beq.w	6cc2 <loop+0x6e6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    698e:	6823      	ldr	r3, [r4, #0]
            if ((millis() - overtriptimer) > settings.triptime) {
    6990:	4a75      	ldr	r2, [pc, #468]	; (6b68 <loop+0x58c>)
    6992:	9308      	str	r3, [sp, #32]
    6994:	6812      	ldr	r2, [r2, #0]
	return ret;
    6996:	9b08      	ldr	r3, [sp, #32]
    6998:	1a9b      	subs	r3, r3, r2
    699a:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    699c:	4293      	cmp	r3, r2
    699e:	f200 81c0 	bhi.w	6d22 <loop+0x746>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    69a2:	4868      	ldr	r0, [pc, #416]	; (6b44 <loop+0x568>)
    69a4:	f7fa fa1c 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    69a8:	6929      	ldr	r1, [r5, #16]
    69aa:	f006 faf1 	bl	cf90 <__aeabi_fcmplt>
    69ae:	2800      	cmp	r0, #0
    69b0:	f000 8280 	beq.w	6eb4 <loop+0x8d8>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    69b4:	6823      	ldr	r3, [r4, #0]
          if ((millis() - undertriptimer) > settings.triptime) {
    69b6:	4a6d      	ldr	r2, [pc, #436]	; (6b6c <loop+0x590>)
    69b8:	930d      	str	r3, [sp, #52]	; 0x34
    69ba:	6812      	ldr	r2, [r2, #0]
	return ret;
    69bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    69be:	1a9b      	subs	r3, r3, r2
    69c0:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    69c2:	4293      	cmp	r3, r2
    69c4:	f200 82c7 	bhi.w	6f56 <loop+0x97a>
        if (SOCset == 1) {
    69c8:	4b69      	ldr	r3, [pc, #420]	; (6b70 <loop+0x594>)
    69ca:	681b      	ldr	r3, [r3, #0]
    69cc:	2b01      	cmp	r3, #1
    69ce:	f000 81f6 	beq.w	6dbe <loop+0x7e2>
    if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    69d2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    69d6:	f023 0302 	bic.w	r3, r3, #2
    69da:	2b01      	cmp	r3, #1
    69dc:	f47f ae16 	bne.w	660c <loop+0x30>
      getcurrent();
    69e0:	f7fb fa9e 	bl	1f20 <getcurrent()>
    69e4:	e612      	b.n	660c <loop+0x30>
      bms.setBalIgnore(false);
    69e6:	f7fa fa4b 	bl	e80 <BMSModuleManager::setBalIgnore(bool)>
    if (Unassigned > 0) {
    69ea:	4b62      	ldr	r3, [pc, #392]	; (6b74 <loop+0x598>)
    69ec:	781b      	ldrb	r3, [r3, #0]
    69ee:	2b00      	cmp	r3, #0
    69f0:	f43f aeea 	beq.w	67c8 <loop+0x1ec>
      assignID();
    69f4:	f7ff fd90 	bl	6518 <assignID()>
    69f8:	e6e6      	b.n	67c8 <loop+0x1ec>
        if (SOCset == 1) {
    69fa:	4b5d      	ldr	r3, [pc, #372]	; (6b70 <loop+0x594>)
    69fc:	681b      	ldr	r3, [r3, #0]
    69fe:	2b01      	cmp	r3, #1
    6a00:	f000 81b7 	beq.w	6d72 <loop+0x796>
    6a04:	4c55      	ldr	r4, [pc, #340]	; (6b5c <loop+0x580>)
    6a06:	e7e4      	b.n	69d2 <loop+0x3f6>
      if (SOCset != 0) {
    6a08:	2b00      	cmp	r3, #0
    6a0a:	f43f ae7b 	beq.w	6704 <loop+0x128>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6a0e:	484d      	ldr	r0, [pc, #308]	; (6b44 <loop+0x568>)
          if (debug != 0) {
    6a10:	f8df 9140 	ldr.w	r9, [pc, #320]	; 6b54 <loop+0x578>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6a14:	f7fa f9e4 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6a18:	6929      	ldr	r1, [r5, #16]
    6a1a:	f006 fab9 	bl	cf90 <__aeabi_fcmplt>
    6a1e:	2800      	cmp	r0, #0
    6a20:	f000 830f 	beq.w	7042 <loop+0xa66>
          if (debug != 0) {
    6a24:	f8d9 3000 	ldr.w	r3, [r9]
    6a28:	2b00      	cmp	r3, #0
    6a2a:	f040 8314 	bne.w	7056 <loop+0xa7a>
          bmsstatus = Error;
    6a2e:	4a47      	ldr	r2, [pc, #284]	; (6b4c <loop+0x570>)
          ErrorReason = 1;
    6a30:	4b51      	ldr	r3, [pc, #324]	; (6b78 <loop+0x59c>)
          bmsstatus = Error;
    6a32:	2105      	movs	r1, #5
    6a34:	7011      	strb	r1, [r2, #0]
          ErrorReason = 1;
    6a36:	2201      	movs	r2, #1
    6a38:	601a      	str	r2, [r3, #0]
    if (debug != 0) {
    6a3a:	e669      	b.n	6710 <loop+0x134>
      cellspresent = bms.seriescells();  //set amount of connected cells, might need delay
    6a3c:	f7fa f856 	bl	aec <BMSModuleManager::seriescells()>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    6a40:	f9b5 30d8 	ldrsh.w	r3, [r5, #216]	; 0xd8
      cellspresent = bms.seriescells();  //set amount of connected cells, might need delay
    6a44:	6030      	str	r0, [r6, #0]
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    6a46:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    6a48:	f895 1048 	ldrb.w	r1, [r5, #72]	; 0x48
    6a4c:	483d      	ldr	r0, [pc, #244]	; (6b44 <loop+0x568>)
    6a4e:	f7fa fa1b 	bl	e88 <BMSModuleManager::setSensors(int, float, int)>
    6a52:	e692      	b.n	677a <loop+0x19e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6a54:	2102      	movs	r1, #2
    6a56:	4849      	ldr	r0, [pc, #292]	; (6b7c <loop+0x5a0>)
    6a58:	f005 fa1c 	bl	be94 <usb_serial_write>
    6a5c:	4848      	ldr	r0, [pc, #288]	; (6b80 <loop+0x5a4>)
    6a5e:	f002 fcd5 	bl	940c <Print::println()>
    6a62:	211d      	movs	r1, #29
    6a64:	4847      	ldr	r0, [pc, #284]	; (6b84 <loop+0x5a8>)
    6a66:	f005 fa15 	bl	be94 <usb_serial_write>
    6a6a:	2102      	movs	r1, #2
    6a6c:	4843      	ldr	r0, [pc, #268]	; (6b7c <loop+0x5a0>)
    6a6e:	f005 fa11 	bl	be94 <usb_serial_write>
    6a72:	4843      	ldr	r0, [pc, #268]	; (6b80 <loop+0x5a4>)
    6a74:	f002 fcca 	bl	940c <Print::println()>
    6a78:	e679      	b.n	676e <loop+0x192>
    6a7a:	2102      	movs	r1, #2
    6a7c:	483f      	ldr	r0, [pc, #252]	; (6b7c <loop+0x5a0>)
    6a7e:	f005 fa09 	bl	be94 <usb_serial_write>
    6a82:	483f      	ldr	r0, [pc, #252]	; (6b80 <loop+0x5a4>)
    6a84:	f002 fcc2 	bl	940c <Print::println()>
    6a88:	2119      	movs	r1, #25
    6a8a:	483f      	ldr	r0, [pc, #252]	; (6b88 <loop+0x5ac>)
    6a8c:	f005 fa02 	bl	be94 <usb_serial_write>
    6a90:	2102      	movs	r1, #2
    6a92:	483a      	ldr	r0, [pc, #232]	; (6b7c <loop+0x5a0>)
    6a94:	f005 f9fe 	bl	be94 <usb_serial_write>
    6a98:	4839      	ldr	r0, [pc, #228]	; (6b80 <loop+0x5a4>)
    6a9a:	f002 fcb7 	bl	940c <Print::println()>
    6a9e:	e613      	b.n	66c8 <loop+0xec>
          if (storagemode == 0) {
    6aa0:	2b00      	cmp	r3, #0
    6aa2:	f47f af5a 	bne.w	695a <loop+0x37e>
            storagemode = 1;
    6aa6:	2301      	movs	r3, #1
    6aa8:	f8c8 3000 	str.w	r3, [r8]
    6aac:	e755      	b.n	695a <loop+0x37e>
          Discharge = 0;
    6aae:	2400      	movs	r4, #0
    6ab0:	4b36      	ldr	r3, [pc, #216]	; (6b8c <loop+0x5b0>)
          digitalWrite(OUT4, LOW);
    6ab2:	4621      	mov	r1, r4
    6ab4:	2015      	movs	r0, #21
          Discharge = 0;
    6ab6:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    6ab8:	f003 fb7a 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    6abc:	4621      	mov	r1, r4
    6abe:	2014      	movs	r0, #20
    6ac0:	f003 fb76 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    6ac4:	4621      	mov	r1, r4
    6ac6:	200c      	movs	r0, #12
    6ac8:	f003 fb72 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    6acc:	4621      	mov	r1, r4
    6ace:	200b      	movs	r0, #11
    6ad0:	f003 fb6e 	bl	a1b0 <digitalWrite>
          contctrl = 0;
    6ad4:	4b20      	ldr	r3, [pc, #128]	; (6b58 <loop+0x57c>)
    6ad6:	601c      	str	r4, [r3, #0]
          bmsstatus = Ready;
    6ad8:	2301      	movs	r3, #1
    6ada:	4c20      	ldr	r4, [pc, #128]	; (6b5c <loop+0x580>)
    6adc:	703b      	strb	r3, [r7, #0]
          break;
    6ade:	e778      	b.n	69d2 <loop+0x3f6>
          Discharge = 0;
    6ae0:	4b2a      	ldr	r3, [pc, #168]	; (6b8c <loop+0x5b0>)
    6ae2:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    6ae4:	4621      	mov	r1, r4
    6ae6:	2015      	movs	r0, #21
          Discharge = 0;
    6ae8:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    6aea:	f003 fb61 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    6aee:	4621      	mov	r1, r4
    6af0:	2014      	movs	r0, #20
    6af2:	f003 fb5d 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    6af6:	4621      	mov	r1, r4
    6af8:	200c      	movs	r0, #12
    6afa:	f003 fb59 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    6afe:	4621      	mov	r1, r4
    6b00:	200b      	movs	r0, #11
    6b02:	f003 fb55 	bl	a1b0 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    6b06:	4b14      	ldr	r3, [pc, #80]	; (6b58 <loop+0x57c>)
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint && digitalRead(IN1) == LOW)  //Key OFF
    6b08:	480e      	ldr	r0, [pc, #56]	; (6b44 <loop+0x568>)
          contctrl = 0;             //turn off out 5 and 6
    6b0a:	601c      	str	r4, [r3, #0]
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint && digitalRead(IN1) == LOW)  //Key OFF
    6b0c:	f7fa f968 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6b10:	6929      	ldr	r1, [r5, #16]
    6b12:	f006 fa5b 	bl	cfcc <__aeabi_fcmpgt>
    6b16:	2800      	cmp	r0, #0
    6b18:	f43f af74 	beq.w	6a04 <loop+0x428>
    6b1c:	4809      	ldr	r0, [pc, #36]	; (6b44 <loop+0x568>)
    6b1e:	f7fa f987 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6b22:	68e9      	ldr	r1, [r5, #12]
    6b24:	f006 fa34 	bl	cf90 <__aeabi_fcmplt>
    6b28:	2800      	cmp	r0, #0
    6b2a:	f43f af6b 	beq.w	6a04 <loop+0x428>
    6b2e:	2011      	movs	r0, #17
    6b30:	f003 fb64 	bl	a1fc <digitalRead>
    6b34:	2800      	cmp	r0, #0
    6b36:	f47f af65 	bne.w	6a04 <loop+0x428>
            bmsstatus = Ready;
    6b3a:	2301      	movs	r3, #1
    6b3c:	4c07      	ldr	r4, [pc, #28]	; (6b5c <loop+0x580>)
    6b3e:	703b      	strb	r3, [r7, #0]
    6b40:	e747      	b.n	69d2 <loop+0x3f6>
    6b42:	bf00      	nop
    6b44:	1fff91e4 	.word	0x1fff91e4
    6b48:	1fff91c4 	.word	0x1fff91c4
    6b4c:	1fffd708 	.word	0x1fffd708
    6b50:	1fff91a4 	.word	0x1fff91a4
    6b54:	1fff8848 	.word	0x1fff8848
    6b58:	1fffd78c 	.word	0x1fffd78c
    6b5c:	1fffdcc4 	.word	0x1fffdcc4
    6b60:	1fffdaa0 	.word	0x1fffdaa0
    6b64:	1fff91d8 	.word	0x1fff91d8
    6b68:	1fffd9b0 	.word	0x1fffd9b0
    6b6c:	1fffdaa8 	.word	0x1fffdaa8
    6b70:	1fff91b8 	.word	0x1fff91b8
    6b74:	1fff91c0 	.word	0x1fff91c0
    6b78:	1fff919c 	.word	0x1fff919c
    6b7c:	00014200 	.word	0x00014200
    6b80:	1fff89fc 	.word	0x1fff89fc
    6b84:	00014ed8 	.word	0x00014ed8
    6b88:	00014ef8 	.word	0x00014ef8
    6b8c:	1fff9198 	.word	0x1fff9198
          Discharge = 0;
    6b90:	4bae      	ldr	r3, [pc, #696]	; (6e4c <loop+0x870>)
    6b92:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    6b94:	4621      	mov	r1, r4
    6b96:	2015      	movs	r0, #21
          Discharge = 0;
    6b98:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    6b9a:	f003 fb09 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    6b9e:	4621      	mov	r1, r4
    6ba0:	2014      	movs	r0, #20
    6ba2:	f003 fb05 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    6ba6:	4621      	mov	r1, r4
    6ba8:	200c      	movs	r0, #12
    6baa:	f003 fb01 	bl	a1b0 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    6bae:	4621      	mov	r1, r4
    6bb0:	200b      	movs	r0, #11
    6bb2:	f003 fafd 	bl	a1b0 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    6bb6:	4ba6      	ldr	r3, [pc, #664]	; (6e50 <loop+0x874>)
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6bb8:	48a6      	ldr	r0, [pc, #664]	; (6e54 <loop+0x878>)
          contctrl = 0;             //turn off out 5 and 6
    6bba:	601c      	str	r4, [r3, #0]
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6bbc:	f7fa f938 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6bc0:	6d29      	ldr	r1, [r5, #80]	; 0x50
    6bc2:	f006 fa03 	bl	cfcc <__aeabi_fcmpgt>
    6bc6:	2800      	cmp	r0, #0
    6bc8:	f040 8229 	bne.w	701e <loop+0xa42>
    6bcc:	4ba2      	ldr	r3, [pc, #648]	; (6e58 <loop+0x87c>)
    6bce:	6018      	str	r0, [r3, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    6bd0:	2012      	movs	r0, #18
    6bd2:	f003 fb13 	bl	a1fc <digitalRead>
    6bd6:	2801      	cmp	r0, #1
    6bd8:	f000 8274 	beq.w	70c4 <loop+0xae8>
    6bdc:	4c9f      	ldr	r4, [pc, #636]	; (6e5c <loop+0x880>)
          if (digitalRead(IN1) == HIGH && bms.getLowCellVolt() > settings.DischVsetpoint)  //detect Key ON
    6bde:	2011      	movs	r0, #17
    6be0:	f003 fb0c 	bl	a1fc <digitalRead>
    6be4:	2801      	cmp	r0, #1
    6be6:	f47f aef4 	bne.w	69d2 <loop+0x3f6>
    6bea:	489a      	ldr	r0, [pc, #616]	; (6e54 <loop+0x878>)
    6bec:	f7fa f8f8 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6bf0:	69e9      	ldr	r1, [r5, #28]
    6bf2:	f006 f9eb 	bl	cfcc <__aeabi_fcmpgt>
    6bf6:	2800      	cmp	r0, #0
    6bf8:	f43f aeeb 	beq.w	69d2 <loop+0x3f6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6bfc:	6822      	ldr	r2, [r4, #0]
    6bfe:	9212      	str	r2, [sp, #72]	; 0x48
            bmsstatus = Precharge;
    6c00:	2304      	movs	r3, #4
    6c02:	703b      	strb	r3, [r7, #0]
            Pretimer = millis();
    6c04:	4b96      	ldr	r3, [pc, #600]	; (6e60 <loop+0x884>)
	return ret;
    6c06:	9a12      	ldr	r2, [sp, #72]	; 0x48
    6c08:	601a      	str	r2, [r3, #0]
    6c0a:	e6e2      	b.n	69d2 <loop+0x3f6>
          Discharge = 1;
    6c0c:	4b8f      	ldr	r3, [pc, #572]	; (6e4c <loop+0x870>)
    6c0e:	2401      	movs	r4, #1
          if (digitalRead(IN1) == LOW)  //Key OFF
    6c10:	2011      	movs	r0, #17
          Discharge = 1;
    6c12:	601c      	str	r4, [r3, #0]
          if (digitalRead(IN1) == LOW)  //Key OFF
    6c14:	f003 faf2 	bl	a1fc <digitalRead>
    6c18:	b900      	cbnz	r0, 6c1c <loop+0x640>
            bmsstatus = Ready;
    6c1a:	703c      	strb	r4, [r7, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    6c1c:	2012      	movs	r0, #18
    6c1e:	f003 faed 	bl	a1fc <digitalRead>
    6c22:	2801      	cmp	r0, #1
    6c24:	f47f aeee 	bne.w	6a04 <loop+0x428>
    6c28:	488a      	ldr	r0, [pc, #552]	; (6e54 <loop+0x878>)
    6c2a:	f7fa f901 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6c2e:	6a29      	ldr	r1, [r5, #32]
    6c30:	4604      	mov	r4, r0
    6c32:	69a8      	ldr	r0, [r5, #24]
    6c34:	f005 ff04 	bl	ca40 <__aeabi_fsub>
    6c38:	4601      	mov	r1, r0
    6c3a:	4620      	mov	r0, r4
    6c3c:	f006 f9a8 	bl	cf90 <__aeabi_fcmplt>
    6c40:	2800      	cmp	r0, #0
    6c42:	f43f aedf 	beq.w	6a04 <loop+0x428>
            bmsstatus = Charge;
    6c46:	2303      	movs	r3, #3
    6c48:	4c84      	ldr	r4, [pc, #528]	; (6e5c <loop+0x880>)
    6c4a:	703b      	strb	r3, [r7, #0]
    6c4c:	e6c1      	b.n	69d2 <loop+0x3f6>
          Discharge = 0;
    6c4e:	4b7f      	ldr	r3, [pc, #508]	; (6e4c <loop+0x870>)
    6c50:	4c81      	ldr	r4, [pc, #516]	; (6e58 <loop+0x87c>)
    6c52:	2200      	movs	r2, #0
          if (digitalRead(IN2) == HIGH) {
    6c54:	2010      	movs	r0, #16
          Discharge = 0;
    6c56:	601a      	str	r2, [r3, #0]
          if (digitalRead(IN2) == HIGH) {
    6c58:	f003 fad0 	bl	a1fc <digitalRead>
    6c5c:	f1a0 0301 	sub.w	r3, r0, #1
    6c60:	4a80      	ldr	r2, [pc, #512]	; (6e64 <loop+0x888>)
    6c62:	fab3 f383 	clz	r3, r3
    6c66:	095b      	lsrs	r3, r3, #5
          digitalWrite(OUT3, HIGH);  //enable charger
    6c68:	2101      	movs	r1, #1
    6c6a:	2014      	movs	r0, #20
          if (digitalRead(IN2) == HIGH) {
    6c6c:	7013      	strb	r3, [r2, #0]
          digitalWrite(OUT3, HIGH);  //enable charger
    6c6e:	f003 fa9f 	bl	a1b0 <digitalWrite>
          if (bms.getHighCellVolt() > settings.balanceVoltage) {
    6c72:	4878      	ldr	r0, [pc, #480]	; (6e54 <loop+0x878>)
    6c74:	f7fa f8dc 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6c78:	6d29      	ldr	r1, [r5, #80]	; 0x50
    6c7a:	f006 f9a7 	bl	cfcc <__aeabi_fcmpgt>
    6c7e:	3800      	subs	r0, #0
    6c80:	bf18      	it	ne
    6c82:	2001      	movne	r0, #1
    6c84:	6020      	str	r0, [r4, #0]
          if (bms.getHighCellVolt() > settings.ChargeVsetpoint) {
    6c86:	4873      	ldr	r0, [pc, #460]	; (6e54 <loop+0x878>)
    6c88:	f7fa f8d2 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6c8c:	69a9      	ldr	r1, [r5, #24]
    6c8e:	f006 f99d 	bl	cfcc <__aeabi_fcmpgt>
    6c92:	2800      	cmp	r0, #0
    6c94:	f040 819b 	bne.w	6fce <loop+0x9f2>
          if (digitalRead(IN3) == LOW)  //detect AC not present for charging
    6c98:	2012      	movs	r0, #18
    6c9a:	f003 faaf 	bl	a1fc <digitalRead>
    6c9e:	2800      	cmp	r0, #0
    6ca0:	f43f af4b 	beq.w	6b3a <loop+0x55e>
    6ca4:	e6ae      	b.n	6a04 <loop+0x428>
          Discharge = 0;
    6ca6:	4b69      	ldr	r3, [pc, #420]	; (6e4c <loop+0x870>)
    6ca8:	4c6c      	ldr	r4, [pc, #432]	; (6e5c <loop+0x880>)
    6caa:	2200      	movs	r2, #0
    6cac:	601a      	str	r2, [r3, #0]
          Prechargecon();
    6cae:	f7fb fd83 	bl	27b8 <Prechargecon()>
          break;
    6cb2:	e68e      	b.n	69d2 <loop+0x3f6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6cb4:	9318      	str	r3, [sp, #96]	; 0x60
	return ret;
    6cb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
          UnderTime = millis() + settings.triptime;
    6cb8:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    6cba:	4413      	add	r3, r2
    6cbc:	4a6a      	ldr	r2, [pc, #424]	; (6e68 <loop+0x88c>)
    6cbe:	6013      	str	r3, [r2, #0]
    6cc0:	e609      	b.n	68d6 <loop+0x2fa>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    6cc2:	4864      	ldr	r0, [pc, #400]	; (6e54 <loop+0x878>)
    6cc4:	f7fa f8b4 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6cc8:	69a9      	ldr	r1, [r5, #24]
    6cca:	f006 f97f 	bl	cfcc <__aeabi_fcmpgt>
    6cce:	4680      	mov	r8, r0
    6cd0:	2800      	cmp	r0, #0
    6cd2:	f47f ae5c 	bne.w	698e <loop+0x3b2>
    6cd6:	4b65      	ldr	r3, [pc, #404]	; (6e6c <loop+0x890>)
    6cd8:	881b      	ldrh	r3, [r3, #0]
    6cda:	2b00      	cmp	r3, #0
    6cdc:	f43f ae57 	beq.w	698e <loop+0x3b2>
            if (Charged == 1) {
    6ce0:	f8df b18c 	ldr.w	fp, [pc, #396]	; 6e70 <loop+0x894>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6ce4:	6823      	ldr	r3, [r4, #0]
    6ce6:	f8db a000 	ldr.w	sl, [fp]
            overtriptimer = millis();
    6cea:	4962      	ldr	r1, [pc, #392]	; (6e74 <loop+0x898>)
    6cec:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    6cee:	980a      	ldr	r0, [sp, #40]	; 0x28
    6cf0:	6008      	str	r0, [r1, #0]
            if (Charged == 1) {
    6cf2:	f1ba 0f01 	cmp.w	sl, #1
    6cf6:	f000 8293 	beq.w	7220 <loop+0xc44>
              digitalWrite(OUT3, HIGH);  //turn on charger
    6cfa:	2101      	movs	r1, #1
    6cfc:	2014      	movs	r0, #20
    6cfe:	f003 fa57 	bl	a1b0 <digitalWrite>
              if (Pretimer + settings.Pretime < millis()) {
    6d02:	4b57      	ldr	r3, [pc, #348]	; (6e60 <loop+0x884>)
    6d04:	681a      	ldr	r2, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d06:	6823      	ldr	r3, [r4, #0]
    6d08:	930c      	str	r3, [sp, #48]	; 0x30
    6d0a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    6d0e:	4413      	add	r3, r2
	return ret;
    6d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6d12:	4293      	cmp	r3, r2
    6d14:	f4bf ae45 	bcs.w	69a2 <loop+0x3c6>
                contctrl = contctrl | 2;
    6d18:	683b      	ldr	r3, [r7, #0]
    6d1a:	f043 0302 	orr.w	r3, r3, #2
    6d1e:	603b      	str	r3, [r7, #0]
    6d20:	e63f      	b.n	69a2 <loop+0x3c6>
              digitalWrite(OUT3, LOW);  //turn off charger
    6d22:	2100      	movs	r1, #0
    6d24:	2014      	movs	r0, #20
    6d26:	f003 fa43 	bl	a1b0 <digitalWrite>
              contctrl = contctrl & 253;
    6d2a:	683b      	ldr	r3, [r7, #0]
    6d2c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6d30:	603b      	str	r3, [r7, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d32:	6823      	ldr	r3, [r4, #0]
    6d34:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    6d36:	9909      	ldr	r1, [sp, #36]	; 0x24
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6d38:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    6d3a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6d3c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 6e78 <loop+0x89c>
    6d40:	fb02 f303 	mul.w	r3, r2, r3
              Pretimer = millis();
    6d44:	4a46      	ldr	r2, [pc, #280]	; (6e60 <loop+0x884>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
              Pretimer = millis();
    6d4a:	6011      	str	r1, [r2, #0]
              Charged = 1;
    6d4c:	4948      	ldr	r1, [pc, #288]	; (6e70 <loop+0x894>)
    SOC = 100;
    6d4e:	4a4b      	ldr	r2, [pc, #300]	; (6e7c <loop+0x8a0>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6d50:	fb03 f000 	mul.w	r0, r3, r0
              Charged = 1;
    6d54:	2301      	movs	r3, #1
    6d56:	600b      	str	r3, [r1, #0]
    SOC = 100;
    6d58:	2364      	movs	r3, #100	; 0x64
    6d5a:	6013      	str	r3, [r2, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6d5c:	f005 ff26 	bl	cbac <__aeabi_i2f>
    6d60:	4947      	ldr	r1, [pc, #284]	; (6e80 <loop+0x8a4>)
    6d62:	f006 f82b 	bl	cdbc <__aeabi_fdiv>
    6d66:	f8c8 0000 	str.w	r0, [r8]
    6d6a:	e61a      	b.n	69a2 <loop+0x3c6>
            storagemode = 0;
    6d6c:	f8c8 0000 	str.w	r0, [r8]
    6d70:	e5f3      	b.n	695a <loop+0x37e>
          if (settings.tripcont == 0) {
    6d72:	f895 30d5 	ldrb.w	r3, [r5, #213]	; 0xd5
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6d76:	4837      	ldr	r0, [pc, #220]	; (6e54 <loop+0x878>)
          if (settings.tripcont == 0) {
    6d78:	2b00      	cmp	r3, #0
    6d7a:	f040 818b 	bne.w	7094 <loop+0xab8>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6d7e:	f7fa f82f 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6d82:	6929      	ldr	r1, [r5, #16]
    6d84:	f006 f904 	bl	cf90 <__aeabi_fcmplt>
    6d88:	b940      	cbnz	r0, 6d9c <loop+0x7c0>
    6d8a:	4832      	ldr	r0, [pc, #200]	; (6e54 <loop+0x878>)
    6d8c:	f7fa f850 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6d90:	68e9      	ldr	r1, [r5, #12]
    6d92:	f006 f91b 	bl	cfcc <__aeabi_fcmpgt>
    6d96:	2800      	cmp	r0, #0
    6d98:	f000 8263 	beq.w	7262 <loop+0xc86>
              digitalWrite(OUT2, HIGH);  //trip breaker
    6d9c:	2101      	movs	r1, #1
    6d9e:	200c      	movs	r0, #12
    6da0:	f003 fa06 	bl	a1b0 <digitalWrite>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint || bms.getHighCellVolt() < settings.OverVSetpoint || bms.getHighTemperature() < settings.OverTSetpoint) {
    6da4:	482b      	ldr	r0, [pc, #172]	; (6e54 <loop+0x878>)
    6da6:	f7fa f81b 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6daa:	6929      	ldr	r1, [r5, #16]
    6dac:	f006 f90e 	bl	cfcc <__aeabi_fcmpgt>
    6db0:	2800      	cmp	r0, #0
    6db2:	f000 81a1 	beq.w	70f8 <loop+0xb1c>
            bmsstatus = Boot;
    6db6:	2300      	movs	r3, #0
    6db8:	4c28      	ldr	r4, [pc, #160]	; (6e5c <loop+0x880>)
    6dba:	703b      	strb	r3, [r7, #0]
    6dbc:	e609      	b.n	69d2 <loop+0x3f6>
          if (settings.tripcont == 0) {
    6dbe:	f895 30d5 	ldrb.w	r3, [r5, #213]	; 0xd5
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6dc2:	4824      	ldr	r0, [pc, #144]	; (6e54 <loop+0x878>)
          if (settings.tripcont == 0) {
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	f040 80ea 	bne.w	6f9e <loop+0x9c2>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6dca:	f7fa f809 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6dce:	6929      	ldr	r1, [r5, #16]
    6dd0:	f006 f8de 	bl	cf90 <__aeabi_fcmplt>
    6dd4:	b940      	cbnz	r0, 6de8 <loop+0x80c>
    6dd6:	481f      	ldr	r0, [pc, #124]	; (6e54 <loop+0x878>)
    6dd8:	f7fa f82a 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6ddc:	68e9      	ldr	r1, [r5, #12]
    6dde:	f006 f8f5 	bl	cfcc <__aeabi_fcmpgt>
    6de2:	2800      	cmp	r0, #0
    6de4:	f000 8208 	beq.w	71f8 <loop+0xc1c>
              digitalWrite(OUT2, HIGH);  //trip breaker
    6de8:	2101      	movs	r1, #1
    6dea:	200c      	movs	r0, #12
    6dec:	f003 f9e0 	bl	a1b0 <digitalWrite>
    6df0:	e5ef      	b.n	69d2 <loop+0x3f6>
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    6df2:	f7fa f81d 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6df6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6df8:	f006 f8e8 	bl	cfcc <__aeabi_fcmpgt>
    6dfc:	4681      	mov	r9, r0
    6dfe:	2800      	cmp	r0, #0
    6e00:	f040 80b7 	bne.w	6f72 <loop+0x996>
    6e04:	4b19      	ldr	r3, [pc, #100]	; (6e6c <loop+0x890>)
    6e06:	881b      	ldrh	r3, [r3, #0]
    6e08:	2b00      	cmp	r3, #0
    6e0a:	f000 80b2 	beq.w	6f72 <loop+0x996>
            if (Charged == 1) {
    6e0e:	f8df b060 	ldr.w	fp, [pc, #96]	; 6e70 <loop+0x894>
    6e12:	f8db a000 	ldr.w	sl, [fp]
    6e16:	f1ba 0f01 	cmp.w	sl, #1
    6e1a:	f000 81c1 	beq.w	71a0 <loop+0xbc4>
              digitalWrite(OUT3, HIGH);  //turn on charger
    6e1e:	4641      	mov	r1, r8
    6e20:	2014      	movs	r0, #20
    6e22:	f003 f9c5 	bl	a1b0 <digitalWrite>
              if (Pretimer + settings.Pretime < millis()) {
    6e26:	4a0e      	ldr	r2, [pc, #56]	; (6e60 <loop+0x884>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6e28:	6823      	ldr	r3, [r4, #0]
    6e2a:	6811      	ldr	r1, [r2, #0]
    6e2c:	9307      	str	r3, [sp, #28]
    6e2e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    6e32:	440b      	add	r3, r1
	return ret;
    6e34:	9907      	ldr	r1, [sp, #28]
    6e36:	428b      	cmp	r3, r1
    6e38:	f4bf adb3 	bcs.w	69a2 <loop+0x3c6>
                contctrl = contctrl | 2;
    6e3c:	683b      	ldr	r3, [r7, #0]
                Pretimer = 0;
    6e3e:	f8c2 9000 	str.w	r9, [r2]
                contctrl = contctrl | 2;
    6e42:	f043 0302 	orr.w	r3, r3, #2
    6e46:	603b      	str	r3, [r7, #0]
                Pretimer = 0;
    6e48:	e5ab      	b.n	69a2 <loop+0x3c6>
    6e4a:	bf00      	nop
    6e4c:	1fff9198 	.word	0x1fff9198
    6e50:	1fffd78c 	.word	0x1fffd78c
    6e54:	1fff91e4 	.word	0x1fff91e4
    6e58:	1fff91d8 	.word	0x1fff91d8
    6e5c:	1fffdcc4 	.word	0x1fffdcc4
    6e60:	1fff91a8 	.word	0x1fff91a8
    6e64:	1fffd716 	.word	0x1fffd716
    6e68:	1fff91c4 	.word	0x1fff91c4
    6e6c:	1fffd714 	.word	0x1fffd714
    6e70:	1fff918c 	.word	0x1fff918c
    6e74:	1fffd9b0 	.word	0x1fffd9b0
    6e78:	1fff91d4 	.word	0x1fff91d4
    6e7c:	1fff8824 	.word	0x1fff8824
    6e80:	3e8e38e4 	.word	0x3e8e38e4
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    6e84:	48a6      	ldr	r0, [pc, #664]	; (7120 <loop+0xb44>)
    6e86:	f7f9 ffab 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6e8a:	6929      	ldr	r1, [r5, #16]
    6e8c:	f006 f89e 	bl	cfcc <__aeabi_fcmpgt>
    6e90:	b140      	cbz	r0, 6ea4 <loop+0x8c8>
    6e92:	48a3      	ldr	r0, [pc, #652]	; (7120 <loop+0xb44>)
    6e94:	f7f9 ffcc 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6e98:	68e9      	ldr	r1, [r5, #12]
    6e9a:	f006 f879 	bl	cf90 <__aeabi_fcmplt>
    6e9e:	2800      	cmp	r0, #0
    6ea0:	f040 815c 	bne.w	715c <loop+0xb80>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    6ea4:	2100      	movs	r1, #0
    6ea6:	2015      	movs	r0, #21
    6ea8:	f003 f982 	bl	a1b0 <digitalWrite>
            mainconttimer = 0;
    6eac:	4b9d      	ldr	r3, [pc, #628]	; (7124 <loop+0xb48>)
    6eae:	2200      	movs	r2, #0
    6eb0:	601a      	str	r2, [r3, #0]
    6eb2:	e544      	b.n	693e <loop+0x362>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    6eb4:	489a      	ldr	r0, [pc, #616]	; (7120 <loop+0xb44>)
    6eb6:	f7f9 ff93 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6eba:	69e9      	ldr	r1, [r5, #28]
    6ebc:	f006 f868 	bl	cf90 <__aeabi_fcmplt>
    6ec0:	2800      	cmp	r0, #0
    6ec2:	f47f ad77 	bne.w	69b4 <loop+0x3d8>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6ec6:	6823      	ldr	r3, [r4, #0]
    6ec8:	930f      	str	r3, [sp, #60]	; 0x3c
          undertriptimer = millis();
    6eca:	4b97      	ldr	r3, [pc, #604]	; (7128 <loop+0xb4c>)
	return ret;
    6ecc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    6ece:	4894      	ldr	r0, [pc, #592]	; (7120 <loop+0xb44>)
          undertriptimer = millis();
    6ed0:	601a      	str	r2, [r3, #0]
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    6ed2:	f7f9 ff85 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6ed6:	6969      	ldr	r1, [r5, #20]
    6ed8:	4680      	mov	r8, r0
    6eda:	69e8      	ldr	r0, [r5, #28]
    6edc:	f005 fdb2 	bl	ca44 <__addsf3>
    6ee0:	4601      	mov	r1, r0
    6ee2:	4640      	mov	r0, r8
    6ee4:	f006 f872 	bl	cfcc <__aeabi_fcmpgt>
    6ee8:	2800      	cmp	r0, #0
    6eea:	f43f ad6d 	beq.w	69c8 <loop+0x3ec>
            digitalWrite(OUT1, HIGH);  //turn on discharge
    6eee:	2101      	movs	r1, #1
    6ef0:	200b      	movs	r0, #11
    6ef2:	f003 f95d 	bl	a1b0 <digitalWrite>
            if (Pretimer1 + settings.Pretime < millis()) {
    6ef6:	4b8d      	ldr	r3, [pc, #564]	; (712c <loop+0xb50>)
    6ef8:	681a      	ldr	r2, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6efa:	6823      	ldr	r3, [r4, #0]
    6efc:	9310      	str	r3, [sp, #64]	; 0x40
    6efe:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    6f02:	4413      	add	r3, r2
	return ret;
    6f04:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6f06:	4293      	cmp	r3, r2
    6f08:	f4bf ad5e 	bcs.w	69c8 <loop+0x3ec>
              contctrl = contctrl | 1;
    6f0c:	683b      	ldr	r3, [r7, #0]
    6f0e:	f043 0301 	orr.w	r3, r3, #1
    6f12:	603b      	str	r3, [r7, #0]
    6f14:	e558      	b.n	69c8 <loop+0x3ec>
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6f16:	4882      	ldr	r0, [pc, #520]	; (7120 <loop+0xb44>)
    6f18:	f7f9 ff8a 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6f1c:	4681      	mov	r9, r0
    6f1e:	4880      	ldr	r0, [pc, #512]	; (7120 <loop+0xb44>)
    6f20:	f7f9 ff5e 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6f24:	6d69      	ldr	r1, [r5, #84]	; 0x54
    6f26:	f005 fd8d 	bl	ca44 <__addsf3>
    6f2a:	4601      	mov	r1, r0
    6f2c:	4648      	mov	r0, r9
    6f2e:	f006 f84d 	bl	cfcc <__aeabi_fcmpgt>
    6f32:	3800      	subs	r0, #0
    6f34:	bf18      	it	ne
    6f36:	2001      	movne	r0, #1
    6f38:	e518      	b.n	696c <loop+0x390>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f3a:	931a      	str	r3, [sp, #104]	; 0x68
	return ret;
    6f3c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
          OverTime = millis() + settings.triptime;
    6f3e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    if (debug != 0) {
    6f40:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 7130 <loop+0xb54>
          OverTime = millis() + settings.triptime;
    6f44:	4413      	add	r3, r2
    6f46:	4a7b      	ldr	r2, [pc, #492]	; (7134 <loop+0xb58>)
    6f48:	6013      	str	r3, [r2, #0]
    if (debug != 0) {
    6f4a:	f8d9 3000 	ldr.w	r3, [r9]
    6f4e:	2b00      	cmp	r3, #0
    6f50:	f43f abde 	beq.w	6710 <loop+0x134>
    6f54:	e457      	b.n	6806 <loop+0x22a>
            digitalWrite(OUT1, LOW);  //turn off discharge
    6f56:	2100      	movs	r1, #0
    6f58:	200b      	movs	r0, #11
    6f5a:	f003 f929 	bl	a1b0 <digitalWrite>
            contctrl = contctrl & 254;
    6f5e:	683b      	ldr	r3, [r7, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f60:	6822      	ldr	r2, [r4, #0]
    6f62:	920e      	str	r2, [sp, #56]	; 0x38
    6f64:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    6f68:	603b      	str	r3, [r7, #0]
            Pretimer1 = millis();
    6f6a:	4b70      	ldr	r3, [pc, #448]	; (712c <loop+0xb50>)
	return ret;
    6f6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6f6e:	601a      	str	r2, [r3, #0]
    6f70:	e52a      	b.n	69c8 <loop+0x3ec>
            digitalWrite(OUT3, LOW);  //turn off charger
    6f72:	2100      	movs	r1, #0
    6f74:	2014      	movs	r0, #20
    6f76:	f003 f91b 	bl	a1b0 <digitalWrite>
            contctrl = contctrl & 253;
    6f7a:	683b      	ldr	r3, [r7, #0]
    6f7c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6f80:	603b      	str	r3, [r7, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f82:	6823      	ldr	r3, [r4, #0]
    6f84:	9305      	str	r3, [sp, #20]
	return ret;
    6f86:	9905      	ldr	r1, [sp, #20]
    6f88:	e6d6      	b.n	6d38 <loop+0x75c>
        if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6f8a:	4865      	ldr	r0, [pc, #404]	; (7120 <loop+0xb44>)
    6f8c:	f7fa f80a 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    6f90:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    6f92:	f006 f81b 	bl	cfcc <__aeabi_fcmpgt>
    6f96:	2800      	cmp	r0, #0
    6f98:	f47f aca6 	bne.w	68e8 <loop+0x30c>
    6f9c:	e4a7      	b.n	68ee <loop+0x312>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6f9e:	f7f9 ff1f 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    6fa2:	6929      	ldr	r1, [r5, #16]
    6fa4:	f005 fff4 	bl	cf90 <__aeabi_fcmplt>
    6fa8:	b940      	cbnz	r0, 6fbc <loop+0x9e0>
    6faa:	485d      	ldr	r0, [pc, #372]	; (7120 <loop+0xb44>)
    6fac:	f7f9 ff40 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    6fb0:	68e9      	ldr	r1, [r5, #12]
    6fb2:	f006 f80b 	bl	cfcc <__aeabi_fcmpgt>
    6fb6:	2800      	cmp	r0, #0
    6fb8:	f000 8113 	beq.w	71e2 <loop+0xc06>
              digitalWrite(OUT2, LOW);  //turn off contactor
    6fbc:	2100      	movs	r1, #0
    6fbe:	200c      	movs	r0, #12
    6fc0:	f003 f8f6 	bl	a1b0 <digitalWrite>
              digitalWrite(OUT4, LOW);  //ensure precharge is low
    6fc4:	2100      	movs	r1, #0
    6fc6:	2015      	movs	r0, #21
    6fc8:	f003 f8f2 	bl	a1b0 <digitalWrite>
    6fcc:	e501      	b.n	69d2 <loop+0x3f6>
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    6fce:	4854      	ldr	r0, [pc, #336]	; (7120 <loop+0xb44>)
    6fd0:	f7f9 ffec 	bl	fac <BMSModuleManager::getAvgCellVolt()>
    6fd4:	6a29      	ldr	r1, [r5, #32]
    6fd6:	4604      	mov	r4, r0
    6fd8:	69a8      	ldr	r0, [r5, #24]
    6fda:	f005 fd31 	bl	ca40 <__aeabi_fsub>
    6fde:	4601      	mov	r1, r0
    6fe0:	4620      	mov	r0, r4
    6fe2:	f005 fff3 	bl	cfcc <__aeabi_fcmpgt>
    SOC = 100;
    6fe6:	4b54      	ldr	r3, [pc, #336]	; (7138 <loop+0xb5c>)
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    6fe8:	2800      	cmp	r0, #0
    6fea:	f000 8083 	beq.w	70f4 <loop+0xb18>
    SOC = 100;
    6fee:	2264      	movs	r2, #100	; 0x64
    SOC = 95;
    6ff0:	601a      	str	r2, [r3, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6ff2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    6ff4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6ff6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6ffa:	fb02 f303 	mul.w	r3, r2, r3
    6ffe:	fb03 f000 	mul.w	r0, r3, r0
    7002:	f005 fdd3 	bl	cbac <__aeabi_i2f>
    7006:	494d      	ldr	r1, [pc, #308]	; (713c <loop+0xb60>)
    7008:	f005 fed8 	bl	cdbc <__aeabi_fdiv>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    700c:	4a4c      	ldr	r2, [pc, #304]	; (7140 <loop+0xb64>)
            digitalWrite(OUT3, LOW);  //turn off charger
    700e:	2100      	movs	r1, #0
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7010:	6010      	str	r0, [r2, #0]
            digitalWrite(OUT3, LOW);  //turn off charger
    7012:	2014      	movs	r0, #20
    7014:	f003 f8cc 	bl	a1b0 <digitalWrite>
            bmsstatus = Ready;
    7018:	2301      	movs	r3, #1
    701a:	703b      	strb	r3, [r7, #0]
    701c:	e63c      	b.n	6c98 <loop+0x6bc>
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    701e:	4840      	ldr	r0, [pc, #256]	; (7120 <loop+0xb44>)
    7020:	f7f9 ff06 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    7024:	4604      	mov	r4, r0
    7026:	483e      	ldr	r0, [pc, #248]	; (7120 <loop+0xb44>)
    7028:	f7f9 feda 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    702c:	6d69      	ldr	r1, [r5, #84]	; 0x54
    702e:	f005 fd09 	bl	ca44 <__addsf3>
    7032:	4601      	mov	r1, r0
    7034:	4620      	mov	r0, r4
    7036:	f005 ffc9 	bl	cfcc <__aeabi_fcmpgt>
    703a:	3800      	subs	r0, #0
    703c:	bf18      	it	ne
    703e:	2001      	movne	r0, #1
    7040:	e5c4      	b.n	6bcc <loop+0x5f0>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    7042:	4837      	ldr	r0, [pc, #220]	; (7120 <loop+0xb44>)
    7044:	f7f9 fef4 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    7048:	6929      	ldr	r1, [r5, #16]
    704a:	f005 ffa1 	bl	cf90 <__aeabi_fcmplt>
    704e:	2800      	cmp	r0, #0
    7050:	f47f ace8 	bne.w	6a24 <loop+0x448>
    7054:	e779      	b.n	6f4a <loop+0x96e>
    7056:	2102      	movs	r1, #2
    7058:	483a      	ldr	r0, [pc, #232]	; (7144 <loop+0xb68>)
    705a:	f004 ff1b 	bl	be94 <usb_serial_write>
    705e:	483a      	ldr	r0, [pc, #232]	; (7148 <loop+0xb6c>)
    7060:	f002 f9d4 	bl	940c <Print::println()>
    7064:	211d      	movs	r1, #29
    7066:	4839      	ldr	r0, [pc, #228]	; (714c <loop+0xb70>)
    7068:	f004 ff14 	bl	be94 <usb_serial_write>
    706c:	2102      	movs	r1, #2
    706e:	4835      	ldr	r0, [pc, #212]	; (7144 <loop+0xb68>)
    7070:	f004 ff10 	bl	be94 <usb_serial_write>
    7074:	4834      	ldr	r0, [pc, #208]	; (7148 <loop+0xb6c>)
    7076:	f002 f9c9 	bl	940c <Print::println()>
          bmsstatus = Error;
    707a:	4a35      	ldr	r2, [pc, #212]	; (7150 <loop+0xb74>)
          ErrorReason = 1;
    707c:	4b35      	ldr	r3, [pc, #212]	; (7154 <loop+0xb78>)
          bmsstatus = Error;
    707e:	2105      	movs	r1, #5
    7080:	7011      	strb	r1, [r2, #0]
          ErrorReason = 1;
    7082:	2201      	movs	r2, #1
    7084:	601a      	str	r2, [r3, #0]
    if (debug != 0) {
    7086:	f8d9 3000 	ldr.w	r3, [r9]
    708a:	2b00      	cmp	r3, #0
    708c:	f43f ab40 	beq.w	6710 <loop+0x134>
    7090:	f7ff bbb9 	b.w	6806 <loop+0x22a>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7094:	f7f9 fea4 	bl	de0 <BMSModuleManager::getLowCellVolt()>
    7098:	6929      	ldr	r1, [r5, #16]
    709a:	f005 ff79 	bl	cf90 <__aeabi_fcmplt>
    709e:	b940      	cbnz	r0, 70b2 <loop+0xad6>
    70a0:	481f      	ldr	r0, [pc, #124]	; (7120 <loop+0xb44>)
    70a2:	f7f9 fec5 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    70a6:	68e9      	ldr	r1, [r5, #12]
    70a8:	f005 ff90 	bl	cfcc <__aeabi_fcmpgt>
    70ac:	2800      	cmp	r0, #0
    70ae:	f000 80e3 	beq.w	7278 <loop+0xc9c>
              digitalWrite(OUT2, LOW);  //turn off contactor
    70b2:	2100      	movs	r1, #0
    70b4:	200c      	movs	r0, #12
    70b6:	f003 f87b 	bl	a1b0 <digitalWrite>
              digitalWrite(OUT4, LOW);  //ensure precharge is low
    70ba:	2100      	movs	r1, #0
    70bc:	2015      	movs	r0, #21
    70be:	f003 f877 	bl	a1b0 <digitalWrite>
    70c2:	e66f      	b.n	6da4 <loop+0x7c8>
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    70c4:	4816      	ldr	r0, [pc, #88]	; (7120 <loop+0xb44>)
    70c6:	f7f9 feb3 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    70ca:	6a29      	ldr	r1, [r5, #32]
    70cc:	4604      	mov	r4, r0
    70ce:	69a8      	ldr	r0, [r5, #24]
    70d0:	f005 fcb6 	bl	ca40 <__aeabi_fsub>
    70d4:	4601      	mov	r1, r0
    70d6:	4620      	mov	r0, r4
    70d8:	f005 ff5a 	bl	cf90 <__aeabi_fcmplt>
    70dc:	2800      	cmp	r0, #0
    70de:	f43f ad7d 	beq.w	6bdc <loop+0x600>
            if (settings.ChargerDirect == 1) {
    70e2:	f895 30d4 	ldrb.w	r3, [r5, #212]	; 0xd4
    70e6:	2b00      	cmp	r3, #0
    70e8:	f000 8091 	beq.w	720e <loop+0xc32>
              bmsstatus = Charge;
    70ec:	2303      	movs	r3, #3
    70ee:	4c1a      	ldr	r4, [pc, #104]	; (7158 <loop+0xb7c>)
    70f0:	703b      	strb	r3, [r7, #0]
    70f2:	e574      	b.n	6bde <loop+0x602>
    SOC = 95;
    70f4:	225f      	movs	r2, #95	; 0x5f
    70f6:	e77b      	b.n	6ff0 <loop+0xa14>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint || bms.getHighCellVolt() < settings.OverVSetpoint || bms.getHighTemperature() < settings.OverTSetpoint) {
    70f8:	4809      	ldr	r0, [pc, #36]	; (7120 <loop+0xb44>)
    70fa:	f7f9 fe99 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    70fe:	68e9      	ldr	r1, [r5, #12]
    7100:	f005 ff46 	bl	cf90 <__aeabi_fcmplt>
    7104:	2800      	cmp	r0, #0
    7106:	f47f ae56 	bne.w	6db6 <loop+0x7da>
    710a:	4805      	ldr	r0, [pc, #20]	; (7120 <loop+0xb44>)
    710c:	f7f9 ff4a 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    7110:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    7112:	f005 ff3d 	bl	cf90 <__aeabi_fcmplt>
    7116:	2800      	cmp	r0, #0
    7118:	f47f ae4d 	bne.w	6db6 <loop+0x7da>
    711c:	e472      	b.n	6a04 <loop+0x428>
    711e:	bf00      	nop
    7120:	1fff91e4 	.word	0x1fff91e4
    7124:	1fffd908 	.word	0x1fffd908
    7128:	1fffdaa8 	.word	0x1fffdaa8
    712c:	1fff91ac 	.word	0x1fff91ac
    7130:	1fff8848 	.word	0x1fff8848
    7134:	1fff91a4 	.word	0x1fff91a4
    7138:	1fff8824 	.word	0x1fff8824
    713c:	3e8e38e4 	.word	0x3e8e38e4
    7140:	1fff91d4 	.word	0x1fff91d4
    7144:	00014200 	.word	0x00014200
    7148:	1fff89fc 	.word	0x1fff89fc
    714c:	00014eb8 	.word	0x00014eb8
    7150:	1fffd708 	.word	0x1fffd708
    7154:	1fff919c 	.word	0x1fff919c
    7158:	1fffdcc4 	.word	0x1fffdcc4
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    715c:	200c      	movs	r0, #12
    715e:	f003 f84d 	bl	a1fc <digitalRead>
    7162:	2800      	cmp	r0, #0
    7164:	f000 80ae 	beq.w	72c4 <loop+0xce8>
    7168:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 7344 <loop+0xd68>
    716c:	4c76      	ldr	r4, [pc, #472]	; (7348 <loop+0xd6c>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    716e:	6823      	ldr	r3, [r4, #0]
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    7170:	f8d8 2000 	ldr.w	r2, [r8]
    7174:	9302      	str	r3, [sp, #8]
    7176:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    717a:	4413      	add	r3, r2
	return ret;
    717c:	9a02      	ldr	r2, [sp, #8]
    717e:	4293      	cmp	r3, r2
    7180:	f0c0 8084 	bcc.w	728c <loop+0xcb0>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7184:	6822      	ldr	r2, [r4, #0]
    7186:	9204      	str	r2, [sp, #16]
	return ret;
    7188:	9a04      	ldr	r2, [sp, #16]
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    718a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    718e:	4293      	cmp	r3, r2
    7190:	f4bf abd6 	bcs.w	6940 <loop+0x364>
              digitalWrite(OUT4, LOW);  //ensure precharge is low
    7194:	2100      	movs	r1, #0
    7196:	2015      	movs	r0, #21
    7198:	f003 f80a 	bl	a1b0 <digitalWrite>
    719c:	f7ff bbd0 	b.w	6940 <loop+0x364>
              if (bms.getHighCellVolt() < (settings.StoreVsetpoint - settings.ChargeHys)) {
    71a0:	486a      	ldr	r0, [pc, #424]	; (734c <loop+0xd70>)
    71a2:	f7f9 fe45 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    71a6:	6a29      	ldr	r1, [r5, #32]
    71a8:	4680      	mov	r8, r0
    71aa:	6a68      	ldr	r0, [r5, #36]	; 0x24
    71ac:	f005 fc48 	bl	ca40 <__aeabi_fsub>
    71b0:	4601      	mov	r1, r0
    71b2:	4640      	mov	r0, r8
    71b4:	f005 feec 	bl	cf90 <__aeabi_fcmplt>
    71b8:	2800      	cmp	r0, #0
    71ba:	f43f abf2 	beq.w	69a2 <loop+0x3c6>
                digitalWrite(OUT3, HIGH);  //turn on charger
    71be:	4651      	mov	r1, sl
    71c0:	2014      	movs	r0, #20
                Charged = 0;
    71c2:	f8cb 9000 	str.w	r9, [fp]
                digitalWrite(OUT3, HIGH);  //turn on charger
    71c6:	f002 fff3 	bl	a1b0 <digitalWrite>
                if (Pretimer + settings.Pretime < millis()) {
    71ca:	4a61      	ldr	r2, [pc, #388]	; (7350 <loop+0xd74>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71cc:	6823      	ldr	r3, [r4, #0]
    71ce:	6811      	ldr	r1, [r2, #0]
    71d0:	9306      	str	r3, [sp, #24]
    71d2:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    71d6:	440b      	add	r3, r1
	return ret;
    71d8:	9906      	ldr	r1, [sp, #24]
    71da:	428b      	cmp	r3, r1
    71dc:	f4bf abe1 	bcs.w	69a2 <loop+0x3c6>
    71e0:	e62c      	b.n	6e3c <loop+0x860>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    71e2:	485a      	ldr	r0, [pc, #360]	; (734c <loop+0xd70>)
    71e4:	f7f9 fede 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    71e8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    71ea:	f005 feef 	bl	cfcc <__aeabi_fcmpgt>
    71ee:	2800      	cmp	r0, #0
    71f0:	f47f aee4 	bne.w	6fbc <loop+0x9e0>
    71f4:	f7ff bbed 	b.w	69d2 <loop+0x3f6>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    71f8:	4854      	ldr	r0, [pc, #336]	; (734c <loop+0xd70>)
    71fa:	f7f9 fed3 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    71fe:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    7200:	f005 fee4 	bl	cfcc <__aeabi_fcmpgt>
    7204:	4601      	mov	r1, r0
    7206:	2800      	cmp	r0, #0
    7208:	f47f adee 	bne.w	6de8 <loop+0x80c>
    720c:	e5ed      	b.n	6dea <loop+0x80e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    720e:	4c4e      	ldr	r4, [pc, #312]	; (7348 <loop+0xd6c>)
              bmsstatus = Precharge;
    7210:	2304      	movs	r3, #4
    7212:	703b      	strb	r3, [r7, #0]
    7214:	6823      	ldr	r3, [r4, #0]
    7216:	9311      	str	r3, [sp, #68]	; 0x44
              Pretimer = millis();
    7218:	4b4d      	ldr	r3, [pc, #308]	; (7350 <loop+0xd74>)
	return ret;
    721a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    721c:	601a      	str	r2, [r3, #0]
    721e:	e4de      	b.n	6bde <loop+0x602>
              if (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) {
    7220:	484a      	ldr	r0, [pc, #296]	; (734c <loop+0xd70>)
    7222:	f7f9 fe05 	bl	e30 <BMSModuleManager::getHighCellVolt()>
    7226:	6a29      	ldr	r1, [r5, #32]
    7228:	4681      	mov	r9, r0
    722a:	69a8      	ldr	r0, [r5, #24]
    722c:	f005 fc08 	bl	ca40 <__aeabi_fsub>
    7230:	4601      	mov	r1, r0
    7232:	4648      	mov	r0, r9
    7234:	f005 feac 	bl	cf90 <__aeabi_fcmplt>
    7238:	2800      	cmp	r0, #0
    723a:	f43f abb2 	beq.w	69a2 <loop+0x3c6>
                digitalWrite(OUT3, HIGH);  //turn on charger
    723e:	4651      	mov	r1, sl
    7240:	2014      	movs	r0, #20
                Charged = 0;
    7242:	f8cb 8000 	str.w	r8, [fp]
                digitalWrite(OUT3, HIGH);  //turn on charger
    7246:	f002 ffb3 	bl	a1b0 <digitalWrite>
                if (Pretimer + settings.Pretime < millis()) {
    724a:	4b41      	ldr	r3, [pc, #260]	; (7350 <loop+0xd74>)
    724c:	681a      	ldr	r2, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    724e:	6823      	ldr	r3, [r4, #0]
    7250:	930b      	str	r3, [sp, #44]	; 0x2c
    7252:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    7256:	4413      	add	r3, r2
	return ret;
    7258:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    725a:	4293      	cmp	r3, r2
    725c:	f4bf aba1 	bcs.w	69a2 <loop+0x3c6>
    7260:	e55a      	b.n	6d18 <loop+0x73c>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7262:	483a      	ldr	r0, [pc, #232]	; (734c <loop+0xd70>)
    7264:	f7f9 fe9e 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    7268:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    726a:	f005 feaf 	bl	cfcc <__aeabi_fcmpgt>
    726e:	4601      	mov	r1, r0
    7270:	2800      	cmp	r0, #0
    7272:	f47f ad93 	bne.w	6d9c <loop+0x7c0>
    7276:	e592      	b.n	6d9e <loop+0x7c2>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7278:	4834      	ldr	r0, [pc, #208]	; (734c <loop+0xd70>)
    727a:	f7f9 fe93 	bl	fa4 <BMSModuleManager::getHighTemperature()>
    727e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    7280:	f005 fea4 	bl	cfcc <__aeabi_fcmpgt>
    7284:	2800      	cmp	r0, #0
    7286:	f47f af14 	bne.w	70b2 <loop+0xad6>
    728a:	e58b      	b.n	6da4 <loop+0x7c8>
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    728c:	200c      	movs	r0, #12
    728e:	f002 ffb5 	bl	a1fc <digitalRead>
    7292:	b988      	cbnz	r0, 72b8 <loop+0xcdc>
    7294:	4b2f      	ldr	r3, [pc, #188]	; (7354 <loop+0xd78>)
    7296:	f8d3 9000 	ldr.w	r9, [r3]
    729a:	2100      	movs	r1, #0
    729c:	4648      	mov	r0, r9
    729e:	f005 fe95 	bl	cfcc <__aeabi_fcmpgt>
    72a2:	b908      	cbnz	r0, 72a8 <loop+0xccc>
    72a4:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
    72a8:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    72ac:	f005 fc7e 	bl	cbac <__aeabi_i2f>
    72b0:	4649      	mov	r1, r9
    72b2:	f005 fe8b 	bl	cfcc <__aeabi_fcmpgt>
    72b6:	bb68      	cbnz	r0, 7314 <loop+0xd38>
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    72b8:	f8d8 2000 	ldr.w	r2, [r8]
    72bc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    72c0:	4413      	add	r3, r2
    72c2:	e75f      	b.n	7184 <loop+0xba8>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    72c4:	2015      	movs	r0, #21
    72c6:	f002 ff99 	bl	a1fc <digitalRead>
    72ca:	4681      	mov	r9, r0
    72cc:	2800      	cmp	r0, #0
    72ce:	f47f af4b 	bne.w	7168 <loop+0xb8c>
              digitalWrite(OUT4, HIGH);  //Precharge start
    72d2:	4621      	mov	r1, r4
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    72d4:	4c1c      	ldr	r4, [pc, #112]	; (7348 <loop+0xd6c>)
              mainconttimer = millis();
    72d6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7344 <loop+0xd68>
    72da:	6823      	ldr	r3, [r4, #0]
    72dc:	9301      	str	r3, [sp, #4]
	return ret;
    72de:	9b01      	ldr	r3, [sp, #4]
    72e0:	f8c8 3000 	str.w	r3, [r8]
              digitalWrite(OUT4, HIGH);  //Precharge start
    72e4:	2015      	movs	r0, #21
    72e6:	f002 ff63 	bl	a1b0 <digitalWrite>
              Serial.println();
    72ea:	481b      	ldr	r0, [pc, #108]	; (7358 <loop+0xd7c>)
    72ec:	f002 f88e 	bl	940c <Print::println()>
              Serial.println("Precharge!!!");
    72f0:	491a      	ldr	r1, [pc, #104]	; (735c <loop+0xd80>)
    72f2:	4819      	ldr	r0, [pc, #100]	; (7358 <loop+0xd7c>)
    72f4:	f7fa f974 	bl	15e0 <Print::println(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    72f8:	f8d8 1000 	ldr.w	r1, [r8]
    72fc:	4816      	ldr	r0, [pc, #88]	; (7358 <loop+0xd7c>)
    72fe:	464b      	mov	r3, r9
    7300:	220a      	movs	r2, #10
    7302:	f002 f89b 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    7306:	4814      	ldr	r0, [pc, #80]	; (7358 <loop+0xd7c>)
    7308:	f002 f880 	bl	940c <Print::println()>
              Serial.println();
    730c:	4812      	ldr	r0, [pc, #72]	; (7358 <loop+0xd7c>)
    730e:	f002 f87d 	bl	940c <Print::println()>
    7312:	e72c      	b.n	716e <loop+0xb92>
              digitalWrite(OUT2, HIGH);  //turn on contactor
    7314:	2101      	movs	r1, #1
    7316:	200c      	movs	r0, #12
    7318:	f002 ff4a 	bl	a1b0 <digitalWrite>
              Serial.println();
    731c:	480e      	ldr	r0, [pc, #56]	; (7358 <loop+0xd7c>)
    731e:	f002 f875 	bl	940c <Print::println()>
              Serial.println("Main On!!!");
    7322:	490f      	ldr	r1, [pc, #60]	; (7360 <loop+0xd84>)
    7324:	480c      	ldr	r0, [pc, #48]	; (7358 <loop+0xd7c>)
    7326:	f7fa f95b 	bl	15e0 <Print::println(char const*) [clone .isra.0]>
              Serial.println();
    732a:	480b      	ldr	r0, [pc, #44]	; (7358 <loop+0xd7c>)
    732c:	f002 f86e 	bl	940c <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7330:	6823      	ldr	r3, [r4, #0]
    7332:	9303      	str	r3, [sp, #12]
	return ret;
    7334:	9a03      	ldr	r2, [sp, #12]
              mainconttimer = millis() + settings.Pretime;
    7336:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    733a:	441a      	add	r2, r3
    733c:	f8c8 2000 	str.w	r2, [r8]
    7340:	4413      	add	r3, r2
    7342:	e71f      	b.n	7184 <loop+0xba8>
    7344:	1fffd908 	.word	0x1fffd908
    7348:	1fffdcc4 	.word	0x1fffdcc4
    734c:	1fff91e4 	.word	0x1fff91e4
    7350:	1fff91a8 	.word	0x1fff91a8
    7354:	1fffd8a0 	.word	0x1fffd8a0
    7358:	1fff89fc 	.word	0x1fff89fc
    735c:	00014e9c 	.word	0x00014e9c
    7360:	00014eac 	.word	0x00014eac

00007364 <low_voltage_isr>:

void low_voltage_isr(void) {
  EEPROM.update(1000, uint8_t(SOC));
    7364:	4b0b      	ldr	r3, [pc, #44]	; (7394 <low_voltage_isr+0x30>)
void low_voltage_isr(void) {
    7366:	b510      	push	{r4, lr}
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  EEPROM.update(1000, uint8_t(SOC));
    736c:	781c      	ldrb	r4, [r3, #0]
    736e:	f002 fa67 	bl	9840 <eeprom_read_byte>
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    7372:	4284      	cmp	r4, r0
    7374:	d004      	beq.n	7380 <low_voltage_isr+0x1c>
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    7376:	4621      	mov	r1, r4
    7378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    737c:	f002 fa7a 	bl	9874 <eeprom_write_byte>

  PMC_LVDSC2 |= PMC_LVDSC2_LVWACK;  // clear if we can
    7380:	4b05      	ldr	r3, [pc, #20]	; (7398 <low_voltage_isr+0x34>)
    7382:	785a      	ldrb	r2, [r3, #1]
    7384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7388:	705a      	strb	r2, [r3, #1]
  PMC_LVDSC1 |= PMC_LVDSC1_LVDACK;
    738a:	781a      	ldrb	r2, [r3, #0]
    738c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7390:	701a      	strb	r2, [r3, #0]
}
    7392:	bd10      	pop	{r4, pc}
    7394:	1fff8824 	.word	0x1fff8824
    7398:	4007d000 	.word	0x4007d000

0000739c <_GLOBAL__sub_I_bms>:
    739c:	b510      	push	{r4, lr}
    EEPROMClass()                        { eeprom_initialize(); }
    739e:	f002 fa19 	bl	97d4 <eeprom_initialize>
BMSModuleManager bms;
    73a2:	480c      	ldr	r0, [pc, #48]	; (73d4 <_GLOBAL__sub_I_bms+0x38>)
    73a4:	f7f9 fb32 	bl	a0c <BMSModuleManager::BMSModuleManager()>
SerialConsole console;
    73a8:	480b      	ldr	r0, [pc, #44]	; (73d8 <_GLOBAL__sub_I_bms+0x3c>)
    73aa:	f000 fc0d 	bl	7bc8 <SerialConsole::SerialConsole()>
FilterOnePole lowpassFilter(LOWPASS, filterFrequency);
    73ae:	4a0b      	ldr	r2, [pc, #44]	; (73dc <_GLOBAL__sub_I_bms+0x40>)
    73b0:	480b      	ldr	r0, [pc, #44]	; (73e0 <_GLOBAL__sub_I_bms+0x44>)
    73b2:	6812      	ldr	r2, [r2, #0]
    73b4:	2300      	movs	r3, #0
    73b6:	2101      	movs	r1, #1
    73b8:	f001 fd82 	bl	8ec0 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>
CRC8 crc8;
    73bc:	4809      	ldr	r0, [pc, #36]	; (73e4 <_GLOBAL__sub_I_bms+0x48>)
    73be:	f000 fa65 	bl	788c <CRC8::CRC8()>
ADC *adc = new ADC();  // adc object
    73c2:	2094      	movs	r0, #148	; 0x94
    73c4:	f002 fc50 	bl	9c68 <operator new(unsigned int)>
    73c8:	4604      	mov	r4, r0
    73ca:	f001 f945 	bl	8658 <ADC::ADC()>
    73ce:	4b06      	ldr	r3, [pc, #24]	; (73e8 <_GLOBAL__sub_I_bms+0x4c>)
    73d0:	601c      	str	r4, [r3, #0]
}
    73d2:	bd10      	pop	{r4, pc}
    73d4:	1fff91e4 	.word	0x1fff91e4
    73d8:	1fffd72c 	.word	0x1fffd72c
    73dc:	1fff8850 	.word	0x1fff8850
    73e0:	1fffd8e8 	.word	0x1fffd8e8
    73e4:	1fffd7a0 	.word	0x1fffd7a0
    73e8:	1fff91cc 	.word	0x1fff91cc

000073ec <setup>:
void setup() {
    73ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(IN1, INPUT);
    73f0:	2100      	movs	r1, #0
void setup() {
    73f2:	b085      	sub	sp, #20
  pinMode(IN1, INPUT);
    73f4:	2011      	movs	r0, #17
    73f6:	f002 ff0f 	bl	a218 <pinMode>
  pinMode(IN2, INPUT);
    73fa:	2100      	movs	r1, #0
    73fc:	2010      	movs	r0, #16
    73fe:	f002 ff0b 	bl	a218 <pinMode>
  pinMode(IN3, INPUT);
    7402:	2100      	movs	r1, #0
    7404:	2012      	movs	r0, #18
    7406:	f002 ff07 	bl	a218 <pinMode>
  pinMode(IN4, INPUT);
    740a:	2100      	movs	r1, #0
    740c:	2013      	movs	r0, #19
    740e:	f002 ff03 	bl	a218 <pinMode>
  pinMode(OUT1, OUTPUT);  // drive contactor
    7412:	2101      	movs	r1, #1
    7414:	200b      	movs	r0, #11
    7416:	f002 feff 	bl	a218 <pinMode>
  pinMode(OUT2, OUTPUT);  // precharge
    741a:	2101      	movs	r1, #1
    741c:	200c      	movs	r0, #12
    741e:	f002 fefb 	bl	a218 <pinMode>
  pinMode(OUT3, OUTPUT);  // charge relay
    7422:	2101      	movs	r1, #1
    7424:	2014      	movs	r0, #20
    7426:	f002 fef7 	bl	a218 <pinMode>
  pinMode(OUT4, OUTPUT);  // Negative contactor
    742a:	2101      	movs	r1, #1
    742c:	2015      	movs	r0, #21
    742e:	f002 fef3 	bl	a218 <pinMode>
  pinMode(OUT5, OUTPUT);  // pwm driver output
    7432:	2101      	movs	r1, #1
    7434:	2016      	movs	r0, #22
    7436:	f002 feef 	bl	a218 <pinMode>
  pinMode(OUT6, OUTPUT);  // pwm driver output
    743a:	2101      	movs	r1, #1
    743c:	2017      	movs	r0, #23
    743e:	f002 feeb 	bl	a218 <pinMode>
  pinMode(OUT7, OUTPUT);  // pwm driver output
    7442:	2101      	movs	r1, #1
    7444:	2005      	movs	r0, #5
    7446:	f002 fee7 	bl	a218 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    744a:	4cb2      	ldr	r4, [pc, #712]	; (7714 <L_31694_delayMicroseconds+0xf4>)
    Can0.getFilter(filter, i);
    744c:	4fb2      	ldr	r7, [pc, #712]	; (7718 <L_31694_delayMicroseconds+0xf8>)
  pinMode(OUT8, OUTPUT);  // pwm driver output
    744e:	2101      	movs	r1, #1
    7450:	2006      	movs	r0, #6
    7452:	f002 fee1 	bl	a218 <pinMode>
  pinMode(led, OUTPUT);
    7456:	2101      	movs	r1, #1
    7458:	200d      	movs	r0, #13
    745a:	f002 fedd 	bl	a218 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    745e:	8820      	ldrh	r0, [r4, #0]
    7460:	f005 fba0 	bl	cba4 <__aeabi_ui2f>
    7464:	4601      	mov	r1, r0
    7466:	2016      	movs	r0, #22
    7468:	f002 fe38 	bl	a0dc <analogWriteFrequency>
  analogWriteFrequency(OUT6, pwmfreq);
    746c:	8820      	ldrh	r0, [r4, #0]
    746e:	f005 fb99 	bl	cba4 <__aeabi_ui2f>
    7472:	4601      	mov	r1, r0
    7474:	2017      	movs	r0, #23
    7476:	f002 fe31 	bl	a0dc <analogWriteFrequency>
  analogWriteFrequency(OUT7, pwmfreq);
    747a:	8820      	ldrh	r0, [r4, #0]
    747c:	f005 fb92 	bl	cba4 <__aeabi_ui2f>
    7480:	4601      	mov	r1, r0
    7482:	2005      	movs	r0, #5
    7484:	f002 fe2a 	bl	a0dc <analogWriteFrequency>
  analogWriteFrequency(OUT8, pwmfreq);
    7488:	8820      	ldrh	r0, [r4, #0]
    748a:	4ca4      	ldr	r4, [pc, #656]	; (771c <L_31694_delayMicroseconds+0xfc>)
    748c:	f005 fb8a 	bl	cba4 <__aeabi_ui2f>
  Can0.begin(500000);
    7490:	2500      	movs	r5, #0
  analogWriteFrequency(OUT8, pwmfreq);
    7492:	4601      	mov	r1, r0
    7494:	2006      	movs	r0, #6
    7496:	f002 fe21 	bl	a0dc <analogWriteFrequency>
  Can0.begin(500000);
    749a:	4aa1      	ldr	r2, [pc, #644]	; (7720 <L_31694_delayMicroseconds+0x100>)
    749c:	49a1      	ldr	r1, [pc, #644]	; (7724 <L_31694_delayMicroseconds+0x104>)
    749e:	489e      	ldr	r0, [pc, #632]	; (7718 <L_31694_delayMicroseconds+0xf8>)
    74a0:	9500      	str	r5, [sp, #0]
    74a2:	462b      	mov	r3, r5
    74a4:	f000 fd18 	bl	7ed8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>
    Can0.getFilter(filter, i);
    74a8:	b2ee      	uxtb	r6, r5
    74aa:	4632      	mov	r2, r6
    74ac:	4621      	mov	r1, r4
    74ae:	4638      	mov	r0, r7
    74b0:	f000 fcba 	bl	7e28 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>
    filter.flags.extended = 0;
    74b4:	7923      	ldrb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    74b6:	4632      	mov	r2, r6
    filter.flags.extended = 0;
    74b8:	f36f 0300 	bfc	r3, #0, #1
    Can0.setFilter(filter, i);
    74bc:	4621      	mov	r1, r4
    74be:	4638      	mov	r0, r7
  for (int i = 0; i < 8; i++) {
    74c0:	3501      	adds	r5, #1
    filter.flags.extended = 0;
    74c2:	7123      	strb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    74c4:	f000 fc6e 	bl	7da4 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 0; i < 8; i++) {
    74c8:	2d08      	cmp	r5, #8
    74ca:	d1ed      	bne.n	74a8 <setup+0xbc>
    Can0.getFilter(filter, i);
    74cc:	f8df 824c 	ldr.w	r8, [pc, #588]	; 771c <L_31694_delayMicroseconds+0xfc>
    74d0:	4f91      	ldr	r7, [pc, #580]	; (7718 <L_31694_delayMicroseconds+0xf8>)
  for (int i = 9; i < 13; i++) {
    74d2:	2509      	movs	r5, #9
    Can0.getFilter(filter, i);
    74d4:	b2ee      	uxtb	r6, r5
    74d6:	4632      	mov	r2, r6
    74d8:	4641      	mov	r1, r8
    74da:	4638      	mov	r0, r7
    74dc:	f000 fca4 	bl	7e28 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>
    filter.flags.extended = 1;
    74e0:	7923      	ldrb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    74e2:	4632      	mov	r2, r6
    filter.flags.extended = 1;
    74e4:	f043 0301 	orr.w	r3, r3, #1
    Can0.setFilter(filter, i);
    74e8:	4641      	mov	r1, r8
    74ea:	4638      	mov	r0, r7
  for (int i = 9; i < 13; i++) {
    74ec:	3501      	adds	r5, #1
    filter.flags.extended = 1;
    74ee:	7123      	strb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    74f0:	f000 fc58 	bl	7da4 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 9; i < 13; i++) {
    74f4:	2d0d      	cmp	r5, #13
    74f6:	d1ed      	bne.n	74d4 <setup+0xe8>
  adc->adc0->setAveraging(16);   // set number of averages
    74f8:	4c8b      	ldr	r4, [pc, #556]	; (7728 <L_31694_delayMicroseconds+0x108>)
		uint32_t millis_begin = systick_millis_count;
    74fa:	4f8c      	ldr	r7, [pc, #560]	; (772c <L_31694_delayMicroseconds+0x10c>)
    74fc:	6823      	ldr	r3, [r4, #0]
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    74fe:	4e8c      	ldr	r6, [pc, #560]	; (7730 <L_31694_delayMicroseconds+0x110>)
    7500:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    7504:	f8df 922c 	ldr.w	r9, [pc, #556]	; 7734 <L_31694_delayMicroseconds+0x114>
    7508:	2110      	movs	r1, #16
    750a:	f001 fb7d 	bl	8c08 <ADC_Module::setAveraging(unsigned char)>
  adc->adc0->setResolution(16);  // set bits of resolution
    750e:	6823      	ldr	r3, [r4, #0]
    7510:	2110      	movs	r1, #16
    7512:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7516:	f001 fa3d 	bl	8994 <ADC_Module::setResolution(unsigned char)>
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    751a:	6823      	ldr	r3, [r4, #0]
    751c:	2102      	movs	r1, #2
    751e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7522:	f001 f91f 	bl	8764 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
    7526:	6823      	ldr	r3, [r4, #0]
    7528:	2102      	movs	r1, #2
    752a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    752e:	f001 fb17 	bl	8b60 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
  adc->adc0->startContinuous(ACUR1);
    7532:	6823      	ldr	r3, [r4, #0]
    7534:	4c80      	ldr	r4, [pc, #512]	; (7738 <L_31694_delayMicroseconds+0x118>)
    7536:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    753a:	210f      	movs	r1, #15
    753c:	f001 fbc8 	bl	8cd0 <ADC_Module::startContinuous(unsigned char)>
		uint32_t millis_begin = systick_millis_count;
    7540:	683d      	ldr	r5, [r7, #0]
				if (elapsed > 750) break;
    7542:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
    7546:	f004 fdab 	bl	c0a0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    754a:	7823      	ldrb	r3, [r4, #0]
    754c:	2b00      	cmp	r3, #0
    754e:	f000 8123 	beq.w	7798 <L_31694_delayMicroseconds+0x178>
    7552:	7833      	ldrb	r3, [r6, #0]
    7554:	07d8      	lsls	r0, r3, #31
    7556:	f140 811f 	bpl.w	7798 <L_31694_delayMicroseconds+0x178>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    755a:	683b      	ldr	r3, [r7, #0]
    755c:	f8d9 2000 	ldr.w	r2, [r9]
    7560:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7562:	2b0e      	cmp	r3, #14
    7564:	f240 8118 	bls.w	7798 <L_31694_delayMicroseconds+0x178>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7568:	210c      	movs	r1, #12
    756a:	4874      	ldr	r0, [pc, #464]	; (773c <L_31694_delayMicroseconds+0x11c>)
    756c:	f004 fc92 	bl	be94 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    7570:	4873      	ldr	r0, [pc, #460]	; (7740 <L_31694_delayMicroseconds+0x120>)
    7572:	f001 ff4b 	bl	940c <Print::println()>
    7576:	2111      	movs	r1, #17
    7578:	4872      	ldr	r0, [pc, #456]	; (7744 <L_31694_delayMicroseconds+0x124>)
    757a:	f004 fc8b 	bl	be94 <usb_serial_write>
    757e:	4870      	ldr	r0, [pc, #448]	; (7740 <L_31694_delayMicroseconds+0x120>)
    7580:	f001 ff44 	bl	940c <Print::println()>
  Serial2.begin(115200);
    7584:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    7588:	486f      	ldr	r0, [pc, #444]	; (7748 <L_31694_delayMicroseconds+0x128>)
    758a:	f001 fd85 	bl	9098 <HardwareSerial2::begin(unsigned long)>
  Serial.println();
    758e:	486c      	ldr	r0, [pc, #432]	; (7740 <L_31694_delayMicroseconds+0x120>)
    7590:	f001 ff3c 	bl	940c <Print::println()>
    7594:	2117      	movs	r1, #23
    7596:	486d      	ldr	r0, [pc, #436]	; (774c <L_31694_delayMicroseconds+0x12c>)
    7598:	f004 fc7c 	bl	be94 <usb_serial_write>
    759c:	4868      	ldr	r0, [pc, #416]	; (7740 <L_31694_delayMicroseconds+0x120>)
    759e:	f001 ff35 	bl	940c <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_SACKERR) Serial.println("Stop Mode Acknowledge Error Reset");
    75a2:	4b6b      	ldr	r3, [pc, #428]	; (7750 <L_31694_delayMicroseconds+0x130>)
    75a4:	785b      	ldrb	r3, [r3, #1]
    75a6:	0699      	lsls	r1, r3, #26
    75a8:	f100 8150 	bmi.w	784c <L_31694_delayMicroseconds+0x22c>
  if (RCM_SRS1 & RCM_SRS1_MDM_AP) Serial.println("MDM-AP Reset");
    75ac:	4b68      	ldr	r3, [pc, #416]	; (7750 <L_31694_delayMicroseconds+0x130>)
    75ae:	785b      	ldrb	r3, [r3, #1]
    75b0:	071a      	lsls	r2, r3, #28
    75b2:	f100 8143 	bmi.w	783c <L_31694_delayMicroseconds+0x21c>
  if (RCM_SRS1 & RCM_SRS1_SW) Serial.println("Software Reset");  // reboot with SCB_AIRCR = 0x05FA0004
    75b6:	4b66      	ldr	r3, [pc, #408]	; (7750 <L_31694_delayMicroseconds+0x130>)
    75b8:	785b      	ldrb	r3, [r3, #1]
    75ba:	075b      	lsls	r3, r3, #29
    75bc:	f100 8136 	bmi.w	782c <L_31694_delayMicroseconds+0x20c>
  if (RCM_SRS1 & RCM_SRS1_LOCKUP) Serial.println("Core Lockup Event Reset");
    75c0:	4b63      	ldr	r3, [pc, #396]	; (7750 <L_31694_delayMicroseconds+0x130>)
    75c2:	785b      	ldrb	r3, [r3, #1]
    75c4:	079e      	lsls	r6, r3, #30
    75c6:	f100 811d 	bmi.w	7804 <L_31694_delayMicroseconds+0x1e4>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    75ca:	4b61      	ldr	r3, [pc, #388]	; (7750 <L_31694_delayMicroseconds+0x130>)
    75cc:	781b      	ldrb	r3, [r3, #0]
    75ce:	061d      	lsls	r5, r3, #24
    75d0:	f100 8124 	bmi.w	781c <L_31694_delayMicroseconds+0x1fc>
  if (RCM_SRS0 & RCM_SRS0_PIN) Serial.println("External Pin Reset");    // Reboot with software download
    75d4:	4b5e      	ldr	r3, [pc, #376]	; (7750 <L_31694_delayMicroseconds+0x130>)
    75d6:	781b      	ldrb	r3, [r3, #0]
    75d8:	065c      	lsls	r4, r3, #25
    75da:	f100 810b 	bmi.w	77f4 <L_31694_delayMicroseconds+0x1d4>
  if (RCM_SRS0 & RCM_SRS0_WDOG) Serial.println("Watchdog(COP) Reset");  // WDT timed out
    75de:	4b5c      	ldr	r3, [pc, #368]	; (7750 <L_31694_delayMicroseconds+0x130>)
    75e0:	781b      	ldrb	r3, [r3, #0]
    75e2:	0698      	lsls	r0, r3, #26
    75e4:	f100 80fe 	bmi.w	77e4 <L_31694_delayMicroseconds+0x1c4>
  if (RCM_SRS0 & RCM_SRS0_LOC) Serial.println("Loss of External Clock Reset");
    75e8:	4b59      	ldr	r3, [pc, #356]	; (7750 <L_31694_delayMicroseconds+0x130>)
    75ea:	781b      	ldrb	r3, [r3, #0]
    75ec:	0759      	lsls	r1, r3, #29
    75ee:	f100 80f1 	bmi.w	77d4 <L_31694_delayMicroseconds+0x1b4>
  if (RCM_SRS0 & RCM_SRS0_LOL) Serial.println("Loss of Lock in PLL Reset");
    75f2:	4b57      	ldr	r3, [pc, #348]	; (7750 <L_31694_delayMicroseconds+0x130>)
    75f4:	781b      	ldrb	r3, [r3, #0]
    75f6:	071a      	lsls	r2, r3, #28
    75f8:	f100 80e4 	bmi.w	77c4 <L_31694_delayMicroseconds+0x1a4>
  if (RCM_SRS0 & RCM_SRS0_LVD) Serial.println("Low-voltage Detect Reset");
    75fc:	4b54      	ldr	r3, [pc, #336]	; (7750 <L_31694_delayMicroseconds+0x130>)
    75fe:	781b      	ldrb	r3, [r3, #0]
    7600:	079b      	lsls	r3, r3, #30
    7602:	f100 80d7 	bmi.w	77b4 <L_31694_delayMicroseconds+0x194>
  Serial.println();
    7606:	484e      	ldr	r0, [pc, #312]	; (7740 <L_31694_delayMicroseconds+0x120>)
    7608:	f001 ff00 	bl	940c <Print::println()>
  noInterrupts();                  // don't allow interrupts while setting up WDOG
    760c:	b672      	cpsid	i
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    760e:	4b51      	ldr	r3, [pc, #324]	; (7754 <L_31694_delayMicroseconds+0x134>)
    7610:	f24c 5120 	movw	r1, #50464	; 0xc520
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    7614:	f64d 1228 	movw	r2, #55592	; 0xd928
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
	__asm__ volatile(
    7618:	2420      	movs	r4, #32
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    761a:	81d9      	strh	r1, [r3, #14]
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    761c:	81da      	strh	r2, [r3, #14]
    761e:	4622      	mov	r2, r4

00007620 <L_31694_delayMicroseconds>:
    7620:	3a01      	subs	r2, #1
    7622:	d1fd      	bne.n	7620 <L_31694_delayMicroseconds>
  WDOG_TOVALL = 0x0000;
    7624:	2200      	movs	r2, #0
  WDOG_TOVALH = 0x1000;
    7626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    762a:	8099      	strh	r1, [r3, #4]
  WDOG_TOVALL = 0x0000;
    762c:	80da      	strh	r2, [r3, #6]
  WDOG_PRESC = 0;
    762e:	82da      	strh	r2, [r3, #22]
  WDOG_STCTRLH |= WDOG_STCTRLH_ALLOWUPDATE | WDOG_STCTRLH_WDOGEN | WDOG_STCTRLH_WAITEN | WDOG_STCTRLH_STOPEN | WDOG_STCTRLH_CLKSRC;
    7630:	881a      	ldrh	r2, [r3, #0]
    7632:	b292      	uxth	r2, r2
    7634:	f042 02d3 	orr.w	r2, r2, #211	; 0xd3
    7638:	801a      	strh	r2, [r3, #0]
  interrupts();
    763a:	b662      	cpsie	i
  SERIALBMS.begin(612500);  //Tesla serial bus
    763c:	4846      	ldr	r0, [pc, #280]	; (7758 <L_31694_delayMicroseconds+0x138>)
    763e:	4947      	ldr	r1, [pc, #284]	; (775c <L_31694_delayMicroseconds+0x13c>)
    7640:	f8df 811c 	ldr.w	r8, [pc, #284]	; 7760 <L_31694_delayMicroseconds+0x140>
    7644:	f001 fde0 	bl	9208 <HardwareSerial3::begin(unsigned long)>
    7648:	4621      	mov	r1, r4
    764a:	4846      	ldr	r0, [pc, #280]	; (7764 <L_31694_delayMicroseconds+0x144>)
    764c:	f004 fc22 	bl	be94 <usb_serial_write>
    7650:	483b      	ldr	r0, [pc, #236]	; (7740 <L_31694_delayMicroseconds+0x120>)
    7652:	f001 fedb 	bl	940c <Print::println()>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7656:	f108 34ff 	add.w	r4, r8, #4294967295
    765a:	f108 06e3 	add.w	r6, r8, #227	; 0xe3
    765e:	f1c8 0501 	rsb	r5, r8, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7662:	1928      	adds	r0, r5, r4
    7664:	f002 f8ec 	bl	9840 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7668:	f804 0f01 	strb.w	r0, [r4, #1]!
    766c:	42b4      	cmp	r4, r6
    766e:	d1f8      	bne.n	7662 <L_31694_delayMicroseconds+0x42>
  if (settings.version != EEPROM_VERSION) {
    7670:	f898 3000 	ldrb.w	r3, [r8]
    7674:	2b11      	cmp	r3, #17
    7676:	d001      	beq.n	767c <L_31694_delayMicroseconds+0x5c>
    loadSettings();
    7678:	f7f9 ffc4 	bl	1604 <loadSettings()>
  Logger::setLoglevel(Logger::Off);  //Debug = 0, Info = 1, Warn = 2, Error = 3, Off = 4
    767c:	2004      	movs	r0, #4
    767e:	f000 f93b 	bl	78f8 <Logger::setLoglevel(Logger::LogLevel)>
  lastUpdate = 0;
    7682:	4b39      	ldr	r3, [pc, #228]	; (7768 <L_31694_delayMicroseconds+0x148>)
  crc8.begin();
    7684:	4839      	ldr	r0, [pc, #228]	; (776c <L_31694_delayMicroseconds+0x14c>)
  lastUpdate = 0;
    7686:	2400      	movs	r4, #0
    7688:	601c      	str	r4, [r3, #0]
  crc8.begin();
    768a:	f000 f901 	bl	7890 <CRC8::begin()>
  digitalWrite(led, HIGH);
    768e:	2101      	movs	r1, #1
    7690:	200d      	movs	r0, #13
    7692:	f002 fd8d 	bl	a1b0 <digitalWrite>
  bms.setPstrings(settings.Pstrings);
    7696:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
    769a:	4835      	ldr	r0, [pc, #212]	; (7770 <L_31694_delayMicroseconds+0x150>)
    769c:	f7f9 fbf2 	bl	e84 <BMSModuleManager::setPstrings(int)>
  bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    76a0:	f9b8 30d8 	ldrsh.w	r3, [r8, #216]	; 0xd8
    76a4:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
    76a8:	f898 1048 	ldrb.w	r1, [r8, #72]	; 0x48
    76ac:	4830      	ldr	r0, [pc, #192]	; (7770 <L_31694_delayMicroseconds+0x150>)
    76ae:	f7f9 fbeb 	bl	e88 <BMSModuleManager::setSensors(int, float, int)>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    76b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    76b6:	f002 f8c3 	bl	9840 <eeprom_read_byte>
  if (settings.voltsoc == 1) {
    76ba:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
  SOC = (EEPROM.read(1000));
    76be:	4a2d      	ldr	r2, [pc, #180]	; (7774 <L_31694_delayMicroseconds+0x154>)
  if (settings.voltsoc == 1) {
    76c0:	2b01      	cmp	r3, #1
  SOC = (EEPROM.read(1000));
    76c2:	6010      	str	r0, [r2, #0]
  if (settings.voltsoc == 1) {
    76c4:	d003      	beq.n	76ce <L_31694_delayMicroseconds+0xae>
    if (SOC > 100) {
    76c6:	2864      	cmp	r0, #100	; 0x64
    76c8:	bfcc      	ite	gt
    76ca:	2400      	movgt	r4, #0
    76cc:	2401      	movle	r4, #1
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    76ce:	4b2a      	ldr	r3, [pc, #168]	; (7778 <L_31694_delayMicroseconds+0x158>)
    76d0:	4a2a      	ldr	r2, [pc, #168]	; (777c <L_31694_delayMicroseconds+0x15c>)
    76d2:	681b      	ldr	r3, [r3, #0]
    SOCmem = 0;
    76d4:	492a      	ldr	r1, [pc, #168]	; (7780 <L_31694_delayMicroseconds+0x160>)
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    76d6:	fb82 0203 	smull	r0, r2, r2, r3
    76da:	17db      	asrs	r3, r3, #31
    76dc:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    76e0:	4a28      	ldr	r2, [pc, #160]	; (7784 <L_31694_delayMicroseconds+0x164>)
    SOCmem = 0;
    76e2:	600c      	str	r4, [r1, #0]
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    76e4:	6812      	ldr	r2, [r2, #0]
    76e6:	4828      	ldr	r0, [pc, #160]	; (7788 <L_31694_delayMicroseconds+0x168>)
    76e8:	fb13 f302 	smulbb	r3, r3, r2
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76ec:	683a      	ldr	r2, [r7, #0]
    76ee:	9203      	str	r2, [sp, #12]
	return ret;
    76f0:	9903      	ldr	r1, [sp, #12]
  Pretimer = millis();
    76f2:	4a26      	ldr	r2, [pc, #152]	; (778c <L_31694_delayMicroseconds+0x16c>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76f4:	683c      	ldr	r4, [r7, #0]
    76f6:	9402      	str	r4, [sp, #8]
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    76f8:	8003      	strh	r3, [r0, #0]
  Pretimer = millis();
    76fa:	6011      	str	r1, [r2, #0]
	return ret;
    76fc:	9c02      	ldr	r4, [sp, #8]
  Pretimer1 = millis();
    76fe:	4b24      	ldr	r3, [pc, #144]	; (7790 <L_31694_delayMicroseconds+0x170>)
  attachInterrupt(IN4, isrCP, CHANGE);  // attach BUTTON 1 interrupt handler [ pin# 7 ]
    7700:	4924      	ldr	r1, [pc, #144]	; (7794 <L_31694_delayMicroseconds+0x174>)
  Pretimer1 = millis();
    7702:	601c      	str	r4, [r3, #0]
  attachInterrupt(IN4, isrCP, CHANGE);  // attach BUTTON 1 interrupt handler [ pin# 7 ]
    7704:	2204      	movs	r2, #4
    7706:	2013      	movs	r0, #19
}
    7708:	b005      	add	sp, #20
    770a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  attachInterrupt(IN4, isrCP, CHANGE);  // attach BUTTON 1 interrupt handler [ pin# 7 ]
    770e:	f002 bb01 	b.w	9d14 <attachInterrupt>
    7712:	bf00      	nop
    7714:	1fff8870 	.word	0x1fff8870
    7718:	1fffdad0 	.word	0x1fffdad0
    771c:	1fffd8b0 	.word	0x1fffd8b0
    7720:	1fffdc6c 	.word	0x1fffdc6c
    7724:	0007a120 	.word	0x0007a120
    7728:	1fff91cc 	.word	0x1fff91cc
    772c:	1fffdcc4 	.word	0x1fffdcc4
    7730:	1fffdee0 	.word	0x1fffdee0
    7734:	1fffdee4 	.word	0x1fffdee4
    7738:	1fffdebc 	.word	0x1fffdebc
    773c:	00014f14 	.word	0x00014f14
    7740:	1fff89fc 	.word	0x1fff89fc
    7744:	00014f24 	.word	0x00014f24
    7748:	1fff88bc 	.word	0x1fff88bc
    774c:	00014f38 	.word	0x00014f38
    7750:	4007f000 	.word	0x4007f000
    7754:	40052000 	.word	0x40052000
    7758:	1fff88d0 	.word	0x1fff88d0
    775c:	00095894 	.word	0x00095894
    7760:	1fffd9bc 	.word	0x1fffd9bc
    7764:	0001503c 	.word	0x0001503c
    7768:	1fffd8d8 	.word	0x1fffd8d8
    776c:	1fffd7a0 	.word	0x1fffd7a0
    7770:	1fff91e4 	.word	0x1fff91e4
    7774:	1fff8824 	.word	0x1fff8824
    7778:	1fff886c 	.word	0x1fff886c
    777c:	51eb851f 	.word	0x51eb851f
    7780:	1fff91b4 	.word	0x1fff91b4
    7784:	1fff8868 	.word	0x1fff8868
    7788:	1fffd9b8 	.word	0x1fffd9b8
    778c:	1fff91a8 	.word	0x1fff91a8
    7790:	1fff91ac 	.word	0x1fff91ac
    7794:	00001531 	.word	0x00001531
			uint32_t elapsed = systick_millis_count - millis_begin;
    7798:	683b      	ldr	r3, [r7, #0]
			if (usb_configuration) {
    779a:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    779c:	1b5b      	subs	r3, r3, r5
			if (usb_configuration) {
    779e:	b132      	cbz	r2, 77ae <L_31694_delayMicroseconds+0x18e>
				if (elapsed > 2000) break;
    77a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    77a4:	f63f aee0 	bhi.w	7568 <setup+0x17c>
			yield();
    77a8:	f004 fc7a 	bl	c0a0 <yield>
    77ac:	e6cb      	b.n	7546 <setup+0x15a>
				if (elapsed > 750) break;
    77ae:	4543      	cmp	r3, r8
    77b0:	d9fa      	bls.n	77a8 <L_31694_delayMicroseconds+0x188>
    77b2:	e6d9      	b.n	7568 <setup+0x17c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    77b4:	2118      	movs	r1, #24
    77b6:	4829      	ldr	r0, [pc, #164]	; (785c <L_31694_delayMicroseconds+0x23c>)
    77b8:	f004 fb6c 	bl	be94 <usb_serial_write>
    77bc:	4828      	ldr	r0, [pc, #160]	; (7860 <L_31694_delayMicroseconds+0x240>)
    77be:	f001 fe25 	bl	940c <Print::println()>
    77c2:	e720      	b.n	7606 <setup+0x21a>
    77c4:	2119      	movs	r1, #25
    77c6:	4827      	ldr	r0, [pc, #156]	; (7864 <L_31694_delayMicroseconds+0x244>)
    77c8:	f004 fb64 	bl	be94 <usb_serial_write>
    77cc:	4824      	ldr	r0, [pc, #144]	; (7860 <L_31694_delayMicroseconds+0x240>)
    77ce:	f001 fe1d 	bl	940c <Print::println()>
    77d2:	e713      	b.n	75fc <setup+0x210>
    77d4:	211c      	movs	r1, #28
    77d6:	4824      	ldr	r0, [pc, #144]	; (7868 <L_31694_delayMicroseconds+0x248>)
    77d8:	f004 fb5c 	bl	be94 <usb_serial_write>
    77dc:	4820      	ldr	r0, [pc, #128]	; (7860 <L_31694_delayMicroseconds+0x240>)
    77de:	f001 fe15 	bl	940c <Print::println()>
    77e2:	e706      	b.n	75f2 <setup+0x206>
    77e4:	2113      	movs	r1, #19
    77e6:	4821      	ldr	r0, [pc, #132]	; (786c <L_31694_delayMicroseconds+0x24c>)
    77e8:	f004 fb54 	bl	be94 <usb_serial_write>
    77ec:	481c      	ldr	r0, [pc, #112]	; (7860 <L_31694_delayMicroseconds+0x240>)
    77ee:	f001 fe0d 	bl	940c <Print::println()>
    77f2:	e6f9      	b.n	75e8 <setup+0x1fc>
    77f4:	2112      	movs	r1, #18
    77f6:	481e      	ldr	r0, [pc, #120]	; (7870 <L_31694_delayMicroseconds+0x250>)
    77f8:	f004 fb4c 	bl	be94 <usb_serial_write>
    77fc:	4818      	ldr	r0, [pc, #96]	; (7860 <L_31694_delayMicroseconds+0x240>)
    77fe:	f001 fe05 	bl	940c <Print::println()>
    7802:	e6ec      	b.n	75de <setup+0x1f2>
    7804:	2117      	movs	r1, #23
    7806:	481b      	ldr	r0, [pc, #108]	; (7874 <L_31694_delayMicroseconds+0x254>)
    7808:	f004 fb44 	bl	be94 <usb_serial_write>
    780c:	4814      	ldr	r0, [pc, #80]	; (7860 <L_31694_delayMicroseconds+0x240>)
    780e:	f001 fdfd 	bl	940c <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    7812:	4b19      	ldr	r3, [pc, #100]	; (7878 <L_31694_delayMicroseconds+0x258>)
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	061d      	lsls	r5, r3, #24
    7818:	f57f aedc 	bpl.w	75d4 <setup+0x1e8>
    781c:	210e      	movs	r1, #14
    781e:	4817      	ldr	r0, [pc, #92]	; (787c <L_31694_delayMicroseconds+0x25c>)
    7820:	f004 fb38 	bl	be94 <usb_serial_write>
    7824:	480e      	ldr	r0, [pc, #56]	; (7860 <L_31694_delayMicroseconds+0x240>)
    7826:	f001 fdf1 	bl	940c <Print::println()>
    782a:	e6d3      	b.n	75d4 <setup+0x1e8>
    782c:	210e      	movs	r1, #14
    782e:	4814      	ldr	r0, [pc, #80]	; (7880 <L_31694_delayMicroseconds+0x260>)
    7830:	f004 fb30 	bl	be94 <usb_serial_write>
    7834:	480a      	ldr	r0, [pc, #40]	; (7860 <L_31694_delayMicroseconds+0x240>)
    7836:	f001 fde9 	bl	940c <Print::println()>
    783a:	e6c1      	b.n	75c0 <setup+0x1d4>
    783c:	210c      	movs	r1, #12
    783e:	4811      	ldr	r0, [pc, #68]	; (7884 <L_31694_delayMicroseconds+0x264>)
    7840:	f004 fb28 	bl	be94 <usb_serial_write>
    7844:	4806      	ldr	r0, [pc, #24]	; (7860 <L_31694_delayMicroseconds+0x240>)
    7846:	f001 fde1 	bl	940c <Print::println()>
    784a:	e6b4      	b.n	75b6 <setup+0x1ca>
    784c:	2121      	movs	r1, #33	; 0x21
    784e:	480e      	ldr	r0, [pc, #56]	; (7888 <L_31694_delayMicroseconds+0x268>)
    7850:	f004 fb20 	bl	be94 <usb_serial_write>
    7854:	4802      	ldr	r0, [pc, #8]	; (7860 <L_31694_delayMicroseconds+0x240>)
    7856:	f001 fdd9 	bl	940c <Print::println()>
    785a:	e6a7      	b.n	75ac <setup+0x1c0>
    785c:	00015020 	.word	0x00015020
    7860:	1fff89fc 	.word	0x1fff89fc
    7864:	00015004 	.word	0x00015004
    7868:	00014fe4 	.word	0x00014fe4
    786c:	00014fd0 	.word	0x00014fd0
    7870:	00014fbc 	.word	0x00014fbc
    7874:	00014f94 	.word	0x00014f94
    7878:	4007f000 	.word	0x4007f000
    787c:	00014fac 	.word	0x00014fac
    7880:	00014f84 	.word	0x00014f84
    7884:	00014f74 	.word	0x00014f74
    7888:	00014f50 	.word	0x00014f50

0000788c <CRC8::CRC8()>:


CRC8::CRC8(void) {
 
  
}
    788c:	4770      	bx	lr
    788e:	bf00      	nop

00007890 <CRC8::begin()>:

void CRC8::begin(void) {
  crc  remainder;
    for (int dividend = 0; dividend < 256; ++dividend)
    7890:	f100 3cff 	add.w	ip, r0, #4294967295
    7894:	2000      	movs	r0, #0
    {
        remainder = dividend << (WIDTH - 8);
    7896:	b2c1      	uxtb	r1, r0
    for (int dividend = 0; dividend < 256; ++dividend)
    7898:	2208      	movs	r2, #8
        
        for (uint8_t bit = 8; bit > 0; --bit)
        {  
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
    789a:	004b      	lsls	r3, r1, #1
            if (remainder & TOPBIT)
    789c:	f011 0f80 	tst.w	r1, #128	; 0x80
                remainder = (remainder << 1) ^ POLYNOMIAL;
    78a0:	f083 031d 	eor.w	r3, r3, #29
    78a4:	bf14      	ite	ne
    78a6:	b2d9      	uxtbne	r1, r3
            }
            else
            {
                remainder = (remainder << 1);
    78a8:	0049      	lsleq	r1, r1, #1
        for (uint8_t bit = 8; bit > 0; --bit)
    78aa:	f102 33ff 	add.w	r3, r2, #4294967295
                remainder = (remainder << 1);
    78ae:	bf08      	it	eq
    78b0:	b2c9      	uxtbeq	r1, r1
        for (uint8_t bit = 8; bit > 0; --bit)
    78b2:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
    78b6:	d1f0      	bne.n	789a <CRC8::begin()+0xa>
    for (int dividend = 0; dividend < 256; ++dividend)
    78b8:	3001      	adds	r0, #1
    78ba:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
            }
        }
        crcTable[dividend] = remainder;
    78be:	f80c 1f01 	strb.w	r1, [ip, #1]!
    for (int dividend = 0; dividend < 256; ++dividend)
    78c2:	d1e8      	bne.n	7896 <CRC8::begin()+0x6>
    }
}
    78c4:	4770      	bx	lr
    78c6:	bf00      	nop

000078c8 <CRC8::get_crc8(unsigned char const*, int, unsigned char)>:

crc CRC8::get_crc8(uint8_t const message[], int nBytes, uint8_t final) {
   uint8_t data;
    crc remainder = 0xFF;

    for (int byte = 0; byte < nBytes; ++byte)
    78c8:	2a00      	cmp	r2, #0
    78ca:	dd10      	ble.n	78ee <CRC8::get_crc8(unsigned char const*, int, unsigned char)+0x26>
crc CRC8::get_crc8(uint8_t const message[], int nBytes, uint8_t final) {
    78cc:	b500      	push	{lr}
    78ce:	3901      	subs	r1, #1
    78d0:	440a      	add	r2, r1
    crc remainder = 0xFF;
    78d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    {
        data = message[byte] ^ (remainder >> (WIDTH - 8));
    78d6:	f811 ef01 	ldrb.w	lr, [r1, #1]!
        remainder = crcTable[data] ^ (remainder << 8);
    78da:	ea8c 0c0e 	eor.w	ip, ip, lr
    for (int byte = 0; byte < nBytes; ++byte)
    78de:	428a      	cmp	r2, r1
        remainder = crcTable[data] ^ (remainder << 8);
    78e0:	f810 c00c 	ldrb.w	ip, [r0, ip]
    for (int byte = 0; byte < nBytes; ++byte)
    78e4:	d1f7      	bne.n	78d6 <CRC8::get_crc8(unsigned char const*, int, unsigned char)+0xe>
	
remainder = remainder^final;
   
    return (remainder);

}
    78e6:	ea83 000c 	eor.w	r0, r3, ip
    78ea:	f85d fb04 	ldr.w	pc, [sp], #4
    crc remainder = 0xFF;
    78ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
}
    78f2:	ea83 000c 	eor.w	r0, r3, ip
    78f6:	4770      	bx	lr

000078f8 <Logger::setLoglevel(Logger::LogLevel)>:

/*
   Set the log level. Any output below the specified log level will be omitted.
*/
void Logger::setLoglevel(LogLevel level) {
  logLevel = level;
    78f8:	4b01      	ldr	r3, [pc, #4]	; (7900 <Logger::setLoglevel(Logger::LogLevel)+0x8>)
    78fa:	7018      	strb	r0, [r3, #0]
}
    78fc:	4770      	bx	lr
    78fe:	bf00      	nop
    7900:	1fff8878 	.word	0x1fff8878

00007904 <Logger::logMessage(char*, std::__va_list)>:
   %c - prints the next parameter as a character
   %t - prints the next parameter as boolean ('T' or 'F')
   %T - prints the next parameter as boolean ('true' or 'false')
*/
void Logger::logMessage(char *format, va_list args) {
  for (; *format != 0; ++format) {
    7904:	7802      	ldrb	r2, [r0, #0]
    7906:	2a00      	cmp	r2, #0
    7908:	f000 80b8 	beq.w	7a7c <Logger::logMessage(char*, std::__va_list)+0x178>
void Logger::logMessage(char *format, va_list args) {
    790c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7910:	4f5c      	ldr	r7, [pc, #368]	; (7a84 <Logger::logMessage(char*, std::__va_list)+0x180>)
    7912:	f8df 8174 	ldr.w	r8, [pc, #372]	; 7a88 <Logger::logMessage(char*, std::__va_list)+0x184>
    7916:	4e5d      	ldr	r6, [pc, #372]	; (7a8c <Logger::logMessage(char*, std::__va_list)+0x188>)
    7918:	b083      	sub	sp, #12
    791a:	4603      	mov	r3, r0
    791c:	460d      	mov	r5, r1
    if (*format == '%') {
    791e:	2a25      	cmp	r2, #37	; 0x25
    7920:	d134      	bne.n	798c <Logger::logMessage(char*, std::__va_list)+0x88>
      ++format;
      if (*format == '\0')
    7922:	7858      	ldrb	r0, [r3, #1]
      ++format;
    7924:	1c5c      	adds	r4, r3, #1
      if (*format == '\0')
    7926:	2800      	cmp	r0, #0
    7928:	d038      	beq.n	799c <Logger::logMessage(char*, std::__va_list)+0x98>
        break;
      if (*format == '%') {
    792a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    792e:	2b55      	cmp	r3, #85	; 0x55
    7930:	d82e      	bhi.n	7990 <Logger::logMessage(char*, std::__va_list)+0x8c>
    7932:	e8df f003 	tbb	[pc, r3]
    7936:	2d9f      	.short	0x2d9f
    7938:	2d2d2d2d 	.word	0x2d2d2d2d
    793c:	2d2d2d2d 	.word	0x2d2d2d2d
    7940:	2d2d2d2d 	.word	0x2d2d2d2d
    7944:	2d2d2d2d 	.word	0x2d2d2d2d
    7948:	2d2d2d2d 	.word	0x2d2d2d2d
    794c:	2d2d2d2d 	.word	0x2d2d2d2d
    7950:	932d2d2d 	.word	0x932d2d2d
    7954:	2d2d2d2d 	.word	0x2d2d2d2d
    7958:	2d2d2d2d 	.word	0x2d2d2d2d
    795c:	2d2d2d2d 	.word	0x2d2d2d2d
    7960:	2d2d2d2d 	.word	0x2d2d2d2d
    7964:	2d2d882d 	.word	0x2d2d882d
    7968:	2d2d7c2d 	.word	0x2d2d7c2d
    796c:	2d2d2d2d 	.word	0x2d2d2d2d
    7970:	742d2d2d 	.word	0x742d2d2d
    7974:	5e2d3939 	.word	0x5e2d3939
    7978:	2d392d2d 	.word	0x2d392d2d
    797c:	2d2d392d 	.word	0x2d2d392d
    7980:	2d2d2d2d 	.word	0x2d2d2d2d
    7984:	2d2d3f49 	.word	0x2d2d3f49
    7988:	692d562d 	.word	0x692d562d
        }
        continue;
      }

    }
    SERIALCONSOLE.print(*format);
    798c:	7818      	ldrb	r0, [r3, #0]
    798e:	461c      	mov	r4, r3
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7990:	f004 fb04 	bl	bf9c <usb_serial_putchar>
  for (; *format != 0; ++format) {
    7994:	7862      	ldrb	r2, [r4, #1]
    7996:	1c63      	adds	r3, r4, #1
    7998:	2a00      	cmp	r2, #0
    799a:	d1c0      	bne.n	791e <Logger::logMessage(char*, std::__va_list)+0x1a>
  }
  SERIALCONSOLE.println();
    799c:	483c      	ldr	r0, [pc, #240]	; (7a90 <Logger::logMessage(char*, std::__va_list)+0x18c>)
}
    799e:	b003      	add	sp, #12
    79a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SERIALCONSOLE.println();
    79a4:	f001 bd32 	b.w	940c <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    79a8:	f855 1b04 	ldr.w	r1, [r5], #4
    79ac:	4838      	ldr	r0, [pc, #224]	; (7a90 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    79ae:	f001 fd25 	bl	93fc <Print::print(long)>
        continue;
    79b2:	e7ef      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    79b4:	f855 1b04 	ldr.w	r1, [r5], #4
    79b8:	2901      	cmp	r1, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    79ba:	bf0e      	itee	eq
    79bc:	4835      	ldreq	r0, [pc, #212]	; (7a94 <Logger::logMessage(char*, std::__va_list)+0x190>)
    79be:	2101      	movne	r1, #1
    79c0:	4630      	movne	r0, r6
    79c2:	f004 fa67 	bl	be94 <usb_serial_write>
    79c6:	e7e5      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
        register char *s = (char *) va_arg( args, int );
    79c8:	f855 9b04 	ldr.w	r9, [r5], #4
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    79cc:	f1b9 0f00 	cmp.w	r9, #0
    79d0:	d0e0      	beq.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
							  return write((const uint8_t *)str, strlen(str)); }
    79d2:	4648      	mov	r0, r9
    79d4:	f006 faf4 	bl	dfc0 <strlen>
    79d8:	4601      	mov	r1, r0
    79da:	4648      	mov	r0, r9
    79dc:	f004 fa5a 	bl	be94 <usb_serial_write>
    79e0:	e7d8      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    79e2:	f855 1b04 	ldr.w	r1, [r5], #4
    79e6:	482a      	ldr	r0, [pc, #168]	; (7a90 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    79e8:	2300      	movs	r3, #0
    79ea:	2210      	movs	r2, #16
    79ec:	f001 fd26 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    79f0:	e7d0      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 3);
    79f2:	3507      	adds	r5, #7
    79f4:	f025 0507 	bic.w	r5, r5, #7
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    79f8:	2103      	movs	r1, #3
    79fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    79fe:	4824      	ldr	r0, [pc, #144]	; (7a90 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    7a00:	9100      	str	r1, [sp, #0]
    7a02:	f001 fd25 	bl	9450 <Print::printFloat(double, unsigned char)>
        continue;
    7a06:	e7c5      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 0);
    7a08:	3507      	adds	r5, #7
    7a0a:	f025 0507 	bic.w	r5, r5, #7
    7a0e:	2100      	movs	r1, #0
    7a10:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    7a14:	481e      	ldr	r0, [pc, #120]	; (7a90 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    7a16:	9100      	str	r1, [sp, #0]
    7a18:	f001 fd1a 	bl	9450 <Print::printFloat(double, unsigned char)>
        continue;
    7a1c:	e7ba      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    7a1e:	f855 1b04 	ldr.w	r1, [r5], #4
    7a22:	481b      	ldr	r0, [pc, #108]	; (7a90 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    7a24:	2300      	movs	r3, #0
    7a26:	2202      	movs	r2, #2
    7a28:	f001 fd08 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    7a2c:	e7b2      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
    7a2e:	2102      	movs	r1, #2
    7a30:	4819      	ldr	r0, [pc, #100]	; (7a98 <Logger::logMessage(char*, std::__va_list)+0x194>)
    7a32:	f004 fa2f 	bl	be94 <usb_serial_write>
    7a36:	f855 1b04 	ldr.w	r1, [r5], #4
    7a3a:	4815      	ldr	r0, [pc, #84]	; (7a90 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    7a3c:	2300      	movs	r3, #0
    7a3e:	2210      	movs	r2, #16
    7a40:	f001 fcfc 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    7a44:	e7a6      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    7a46:	f855 3b04 	ldr.w	r3, [r5], #4
    7a4a:	2b01      	cmp	r3, #1
    7a4c:	bf07      	ittee	eq
    7a4e:	2104      	moveq	r1, #4
    7a50:	4640      	moveq	r0, r8
    7a52:	2105      	movne	r1, #5
    7a54:	4638      	movne	r0, r7
    7a56:	f004 fa1d 	bl	be94 <usb_serial_write>
    7a5a:	e79b      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
    7a5c:	2102      	movs	r1, #2
    7a5e:	480f      	ldr	r0, [pc, #60]	; (7a9c <Logger::logMessage(char*, std::__va_list)+0x198>)
    7a60:	f004 fa18 	bl	be94 <usb_serial_write>
    7a64:	f855 1b04 	ldr.w	r1, [r5], #4
    7a68:	4809      	ldr	r0, [pc, #36]	; (7a90 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    7a6a:	2300      	movs	r3, #0
    7a6c:	2202      	movs	r2, #2
    7a6e:	f001 fce5 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    7a72:	e78f      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7a74:	2025      	movs	r0, #37	; 0x25
    7a76:	f004 fa91 	bl	bf9c <usb_serial_putchar>
        continue;
    7a7a:	e78b      	b.n	7994 <Logger::logMessage(char*, std::__va_list)+0x90>
  SERIALCONSOLE.println();
    7a7c:	4804      	ldr	r0, [pc, #16]	; (7a90 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    7a7e:	f001 bcc5 	b.w	940c <Print::println()>
    7a82:	bf00      	nop
    7a84:	00015084 	.word	0x00015084
    7a88:	0001507c 	.word	0x0001507c
    7a8c:	00015078 	.word	0x00015078
    7a90:	1fff89fc 	.word	0x1fff89fc
    7a94:	00015074 	.word	0x00015074
    7a98:	0001506c 	.word	0x0001506c
    7a9c:	00015070 	.word	0x00015070

00007aa0 <Logger::console(char*, ...)>:
void Logger::console(char *message, ...) {
    7aa0:	b40f      	push	{r0, r1, r2, r3}
    7aa2:	b500      	push	{lr}
    7aa4:	b083      	sub	sp, #12
    7aa6:	a904      	add	r1, sp, #16
    7aa8:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, message);
    7aac:	9101      	str	r1, [sp, #4]
  Logger::logMessage(message, args);
    7aae:	f7ff ff29 	bl	7904 <Logger::logMessage(char*, std::__va_list)>
}
    7ab2:	b003      	add	sp, #12
    7ab4:	f85d eb04 	ldr.w	lr, [sp], #4
    7ab8:	b004      	add	sp, #16
    7aba:	4770      	bx	lr

00007abc <Logger::log(Logger::LogLevel, char*, std::__va_list)>:
void Logger::log(LogLevel level, char *format, va_list args) {
    7abc:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7abe:	4b1c      	ldr	r3, [pc, #112]	; (7b30 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x74>)
  lastLogTime = millis();
    7ac0:	4f1c      	ldr	r7, [pc, #112]	; (7b34 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x78>)
    7ac2:	681b      	ldr	r3, [r3, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    7ac4:	b083      	sub	sp, #12
    7ac6:	4604      	mov	r4, r0
    7ac8:	9301      	str	r3, [sp, #4]
	return ret;
    7aca:	9b01      	ldr	r3, [sp, #4]
  lastLogTime = millis();
    7acc:	603b      	str	r3, [r7, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    7ace:	460d      	mov	r5, r1
    7ad0:	4616      	mov	r6, r2
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    7ad2:	4619      	mov	r1, r3
    7ad4:	220a      	movs	r2, #10
    7ad6:	2300      	movs	r3, #0
    7ad8:	4817      	ldr	r0, [pc, #92]	; (7b38 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x7c>)
    7ada:	f001 fcaf 	bl	943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7ade:	2103      	movs	r1, #3
    7ae0:	4816      	ldr	r0, [pc, #88]	; (7b3c <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x80>)
    7ae2:	f004 f9d7 	bl	be94 <usb_serial_write>
  switch (level) {
    7ae6:	2c03      	cmp	r4, #3
    7ae8:	d807      	bhi.n	7afa <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    7aea:	e8df f004 	tbb	[pc, r4]
    7aee:	161b      	.short	0x161b
    7af0:	1102      	.short	0x1102
    7af2:	4813      	ldr	r0, [pc, #76]	; (7b40 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x84>)
    7af4:	2107      	movs	r1, #7
    7af6:	f004 f9cd 	bl	be94 <usb_serial_write>
    7afa:	2102      	movs	r1, #2
    7afc:	4811      	ldr	r0, [pc, #68]	; (7b44 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x88>)
    7afe:	f004 f9c9 	bl	be94 <usb_serial_write>
  logMessage(format, args);
    7b02:	4631      	mov	r1, r6
    7b04:	4628      	mov	r0, r5
}
    7b06:	b003      	add	sp, #12
    7b08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  logMessage(format, args);
    7b0c:	f7ff befa 	b.w	7904 <Logger::logMessage(char*, std::__va_list)>
    7b10:	2105      	movs	r1, #5
    7b12:	480d      	ldr	r0, [pc, #52]	; (7b48 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x8c>)
    7b14:	f004 f9be 	bl	be94 <usb_serial_write>
    7b18:	e7ef      	b.n	7afa <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    7b1a:	2104      	movs	r1, #4
    7b1c:	480b      	ldr	r0, [pc, #44]	; (7b4c <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x90>)
    7b1e:	f004 f9b9 	bl	be94 <usb_serial_write>
    7b22:	e7ea      	b.n	7afa <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    7b24:	2105      	movs	r1, #5
    7b26:	480a      	ldr	r0, [pc, #40]	; (7b50 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x94>)
    7b28:	f004 f9b4 	bl	be94 <usb_serial_write>
    7b2c:	e7e5      	b.n	7afa <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    7b2e:	bf00      	nop
    7b30:	1fffdcc4 	.word	0x1fffdcc4
    7b34:	1fffdac0 	.word	0x1fffdac0
    7b38:	1fff89fc 	.word	0x1fff89fc
    7b3c:	0001508c 	.word	0x0001508c
    7b40:	000150a0 	.word	0x000150a0
    7b44:	00013e2c 	.word	0x00013e2c
    7b48:	000150a8 	.word	0x000150a8
    7b4c:	00015098 	.word	0x00015098
    7b50:	00015090 	.word	0x00015090

00007b54 <Logger::debug(char*, ...)>:
void Logger::debug(char *message, ...) {
    7b54:	b40f      	push	{r0, r1, r2, r3}
    7b56:	b500      	push	{lr}
  if (logLevel > Debug)
    7b58:	4b06      	ldr	r3, [pc, #24]	; (7b74 <Logger::debug(char*, ...)+0x20>)
    7b5a:	7818      	ldrb	r0, [r3, #0]
void Logger::debug(char *message, ...) {
    7b5c:	b083      	sub	sp, #12
  if (logLevel > Debug)
    7b5e:	b920      	cbnz	r0, 7b6a <Logger::debug(char*, ...)+0x16>
  va_start(args, message);
    7b60:	aa05      	add	r2, sp, #20
  Logger::log(Debug, message, args);
    7b62:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    7b64:	9201      	str	r2, [sp, #4]
  Logger::log(Debug, message, args);
    7b66:	f7ff ffa9 	bl	7abc <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    7b6a:	b003      	add	sp, #12
    7b6c:	f85d eb04 	ldr.w	lr, [sp], #4
    7b70:	b004      	add	sp, #16
    7b72:	4770      	bx	lr
    7b74:	1fff8878 	.word	0x1fff8878

00007b78 <Logger::info(char*, ...)>:
void Logger::info(char *message, ...) {
    7b78:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Info)
    7b7a:	4b08      	ldr	r3, [pc, #32]	; (7b9c <Logger::info(char*, ...)+0x24>)
void Logger::info(char *message, ...) {
    7b7c:	b500      	push	{lr}
  if (logLevel > Info)
    7b7e:	781b      	ldrb	r3, [r3, #0]
    7b80:	2b01      	cmp	r3, #1
void Logger::info(char *message, ...) {
    7b82:	b083      	sub	sp, #12
  if (logLevel > Info)
    7b84:	d805      	bhi.n	7b92 <Logger::info(char*, ...)+0x1a>
  va_start(args, message);
    7b86:	aa05      	add	r2, sp, #20
  Logger::log(Info, message, args);
    7b88:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    7b8a:	9201      	str	r2, [sp, #4]
  Logger::log(Info, message, args);
    7b8c:	2001      	movs	r0, #1
    7b8e:	f7ff ff95 	bl	7abc <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    7b92:	b003      	add	sp, #12
    7b94:	f85d eb04 	ldr.w	lr, [sp], #4
    7b98:	b004      	add	sp, #16
    7b9a:	4770      	bx	lr
    7b9c:	1fff8878 	.word	0x1fff8878

00007ba0 <Logger::error(char*, ...)>:
void Logger::error(char *message, ...) {
    7ba0:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Error)
    7ba2:	4b08      	ldr	r3, [pc, #32]	; (7bc4 <Logger::error(char*, ...)+0x24>)
void Logger::error(char *message, ...) {
    7ba4:	b500      	push	{lr}
  if (logLevel > Error)
    7ba6:	781b      	ldrb	r3, [r3, #0]
    7ba8:	2b03      	cmp	r3, #3
void Logger::error(char *message, ...) {
    7baa:	b083      	sub	sp, #12
  if (logLevel > Error)
    7bac:	d805      	bhi.n	7bba <Logger::error(char*, ...)+0x1a>
  va_start(args, message);
    7bae:	aa05      	add	r2, sp, #20
  Logger::log(Error, message, args);
    7bb0:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    7bb2:	9201      	str	r2, [sp, #4]
  Logger::log(Error, message, args);
    7bb4:	2003      	movs	r0, #3
    7bb6:	f7ff ff81 	bl	7abc <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    7bba:	b003      	add	sp, #12
    7bbc:	f85d eb04 	ldr.w	lr, [sp], #4
    7bc0:	b004      	add	sp, #16
    7bc2:	4770      	bx	lr
    7bc4:	1fff8878 	.word	0x1fff8878

00007bc8 <SerialConsole::SerialConsole()>:

bool printPrettyDisplay;
uint32_t prettyCounter;
int whichDisplay;

SerialConsole::SerialConsole() {
    7bc8:	b430      	push	{r4, r5}
    //State variables for serial console
    ptrBuffer = 0;
    state = STATE_ROOT_MENU;
    loopcount=0;
    cancel=false;
    printPrettyDisplay = false;
    7bca:	4d07      	ldr	r5, [pc, #28]	; (7be8 <SerialConsole::SerialConsole()+0x20>)
    prettyCounter = 0;
    7bcc:	4c07      	ldr	r4, [pc, #28]	; (7bec <SerialConsole::SerialConsole()+0x24>)
    whichDisplay = 0;
    7bce:	4908      	ldr	r1, [pc, #32]	; (7bf0 <SerialConsole::SerialConsole()+0x28>)
    ptrBuffer = 0;
    7bd0:	2300      	movs	r3, #0
    printPrettyDisplay = false;
    7bd2:	702b      	strb	r3, [r5, #0]
    prettyCounter = 0;
    7bd4:	6023      	str	r3, [r4, #0]
    ptrBuffer = 0;
    7bd6:	6503      	str	r3, [r0, #80]	; 0x50
}
    7bd8:	bc30      	pop	{r4, r5}
    state = STATE_ROOT_MENU;
    7bda:	6543      	str	r3, [r0, #84]	; 0x54
    loopcount=0;
    7bdc:	6583      	str	r3, [r0, #88]	; 0x58
    cancel=false;
    7bde:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    whichDisplay = 0;
    7be2:	600b      	str	r3, [r1, #0]
}
    7be4:	4770      	bx	lr
    7be6:	bf00      	nop
    7be8:	1fffdac8 	.word	0x1fffdac8
    7bec:	1fffdac4 	.word	0x1fffdac4
    7bf0:	1fffdacc 	.word	0x1fffdacc

00007bf4 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
{

    /* default implementation that doesn't handle frames */

    return (false);
}
    7bf4:	2000      	movs	r0, #0
    7bf6:	4770      	bx	lr

00007bf8 <CANListener::txHandler(int, unsigned char)>:
 */

void CANListener::txHandler (int /*mailbox*/, uint8_t /*controller*/)
{

}
    7bf8:	4770      	bx	lr
    7bfa:	bf00      	nop

00007bfc <FlexCAN::FlexCAN(unsigned char)>:
FlexCAN::FlexCAN (uint8_t id)
    7bfc:	b538      	push	{r3, r4, r5, lr}
    defaultMask.id = 0;
    7bfe:	4b1b      	ldr	r3, [pc, #108]	; (7c6c <FlexCAN::FlexCAN(unsigned char)+0x70>)
    flexcanBase = FLEXCAN0_BASE;
    7c00:	491b      	ldr	r1, [pc, #108]	; (7c70 <FlexCAN::FlexCAN(unsigned char)+0x74>)
    defaultMask.flags.extended = 0;
    7c02:	791a      	ldrb	r2, [r3, #4]
FlexCAN::FlexCAN (uint8_t id)
    7c04:	4604      	mov	r4, r0
    defaultMask.id = 0;
    7c06:	2500      	movs	r5, #0
    flexcanBase = FLEXCAN0_BASE;
    7c08:	6021      	str	r1, [r4, #0]
    defaultMask.flags.extended = 0;
    7c0a:	f022 0203 	bic.w	r2, r2, #3
    IrqMessage=IRQ_CAN_MESSAGE;
    7c0e:	211d      	movs	r1, #29
    7c10:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
    defaultMask.id = 0;
    7c14:	601d      	str	r5, [r3, #0]
    defaultMask.flags.extended = 0;
    7c16:	711a      	strb	r2, [r3, #4]
    numTxMailboxes=2;
    7c18:	2002      	movs	r0, #2
    sizeTxBuffer=SIZE_TX_BUFFER;
    7c1a:	2310      	movs	r3, #16
    sizeRxBuffer=SIZE_RX_BUFFER;
    7c1c:	2120      	movs	r1, #32
    sizeTxBuffer=SIZE_TX_BUFFER;
    7c1e:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
    numTxMailboxes=2;
    7c22:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    sizeRxBuffer=SIZE_RX_BUFFER;
    7c26:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
    tx_buffer=0;
    7c2a:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
      txRings[i]=0;
    7c2e:	4629      	mov	r1, r5
    rx_buffer=0;
    7c30:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
      txRings[i]=0;
    7c34:	2240      	movs	r2, #64	; 0x40
    7c36:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7c3a:	f006 f88d 	bl	dd58 <memset>
        listener[i] = NULL;
    7c3e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    7c42:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    7c46:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    7c4a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    memset (&stats, 0, sizeof(stats));
    7c4e:	2298      	movs	r2, #152	; 0x98
    7c50:	4629      	mov	r1, r5
    7c52:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
    7c56:	f006 f87f 	bl	dd58 <memset>
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    7c5a:	221f      	movs	r2, #31
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    7c5c:	230f      	movs	r3, #15
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    7c5e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    7c62:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
}
    7c66:	4620      	mov	r0, r4
    7c68:	bd38      	pop	{r3, r4, r5, pc}
    7c6a:	bf00      	nop
    7c6c:	1fffdc6c 	.word	0x1fffdc6c
    7c70:	40024000 	.word	0x40024000

00007c74 <FlexCAN::setBaudRate(unsigned long)>:
void FlexCAN::setBaudRate(uint32_t baud) {
    7c74:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = 16000000 / baud / (divisor + 1);
    7c76:	4e2d      	ldr	r6, [pc, #180]	; (7d2c <FlexCAN::setBaudRate(unsigned long)+0xb8>)
    7c78:	fbb6 fcf1 	udiv	ip, r6, r1
    while (result > 5) {
    7c7c:	f1bc 0f05 	cmp.w	ip, #5
    int error = baud - (16000000 / (result * (divisor + 1)));
    7c80:	fbb6 f4fc 	udiv	r4, r6, ip
    uint32_t bestDivisor = 0;
    7c84:	f04f 0500 	mov.w	r5, #0
    int error = baud - (16000000 / (result * (divisor + 1)));
    7c88:	eba1 0404 	sub.w	r4, r1, r4
    while (result > 5) {
    7c8c:	d921      	bls.n	7cd2 <FlexCAN::setBaudRate(unsigned long)+0x5e>
    uint32_t divisor = 0;
    7c8e:	462b      	mov	r3, r5
        divisor++;
    7c90:	f103 0e01 	add.w	lr, r3, #1
        result = 16000000 / baud / (divisor + 1);
    7c94:	3302      	adds	r3, #2
    7c96:	fbbc f2f3 	udiv	r2, ip, r3
        if (result <= 25) {
    7c9a:	2a19      	cmp	r2, #25
            error = baud - (16000000 / (result * (divisor + 1)));
    7c9c:	fb02 f303 	mul.w	r3, r2, r3
        if (result <= 25) {
    7ca0:	d80f      	bhi.n	7cc2 <FlexCAN::setBaudRate(unsigned long)+0x4e>
            error = baud - (16000000 / (result * (divisor + 1)));
    7ca2:	fbb6 f3f3 	udiv	r3, r6, r3
    7ca6:	1acb      	subs	r3, r1, r3
            if (error < 0)
    7ca8:	2b00      	cmp	r3, #0
    7caa:	bfb8      	it	lt
    7cac:	425b      	neglt	r3, r3
            if (error < bestError) {
    7cae:	42a3      	cmp	r3, r4
    7cb0:	da09      	bge.n	7cc6 <FlexCAN::setBaudRate(unsigned long)+0x52>
    7cb2:	461c      	mov	r4, r3
                bestDivisor = divisor;
    7cb4:	4675      	mov	r5, lr
            if ((error == bestError) && (result > 11) && (result < 19)) {
    7cb6:	2a0b      	cmp	r2, #11
    7cb8:	d906      	bls.n	7cc8 <FlexCAN::setBaudRate(unsigned long)+0x54>
    7cba:	2a12      	cmp	r2, #18
    7cbc:	bf9c      	itt	ls
    7cbe:	461c      	movls	r4, r3
    7cc0:	4675      	movls	r5, lr
void FlexCAN::setBaudRate(uint32_t baud) {
    7cc2:	4673      	mov	r3, lr
    7cc4:	e7e4      	b.n	7c90 <FlexCAN::setBaudRate(unsigned long)+0x1c>
            if ((error == bestError) && (result > 11) && (result < 19)) {
    7cc6:	d0f6      	beq.n	7cb6 <FlexCAN::setBaudRate(unsigned long)+0x42>
    while (result > 5) {
    7cc8:	2a05      	cmp	r2, #5
    7cca:	d8fa      	bhi.n	7cc2 <FlexCAN::setBaudRate(unsigned long)+0x4e>
    result = 16000000 / baud / (divisor + 1);
    7ccc:	1c6b      	adds	r3, r5, #1
    7cce:	fbbc fcf3 	udiv	ip, ip, r3
    if ((result < 5) || (result > 25) || (bestError > 300)) {
    7cd2:	f1ac 0c05 	sub.w	ip, ip, #5
    7cd6:	f1bc 0f14 	cmp.w	ip, #20
    7cda:	d81e      	bhi.n	7d1a <FlexCAN::setBaudRate(unsigned long)+0xa6>
    7cdc:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    7ce0:	dc1b      	bgt.n	7d1a <FlexCAN::setBaudRate(unsigned long)+0xa6>
    uint8_t pSeg1   = bitTimingTable[result][1];
    7ce2:	4b13      	ldr	r3, [pc, #76]	; (7d30 <FlexCAN::setBaudRate(unsigned long)+0xbc>)
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7ce4:	6800      	ldr	r0, [r0, #0]
    uint8_t pSeg1   = bitTimingTable[result][1];
    7ce6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    7cea:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7cee:	f813 100c 	ldrb.w	r1, [r3, ip]
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    7cf2:	7853      	ldrb	r3, [r2, #1]
    7cf4:	7892      	ldrb	r2, [r2, #2]
    7cf6:	04db      	lsls	r3, r3, #19
    7cf8:	0412      	lsls	r2, r2, #16
    7cfa:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
    7cfe:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7d02:	f001 0107 	and.w	r1, r1, #7
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    7d06:	4313      	orrs	r3, r2
    7d08:	430b      	orrs	r3, r1
    7d0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    7d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    7d12:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7d16:	6043      	str	r3, [r0, #4]
}
    7d18:	bd70      	pop	{r4, r5, r6, pc}
    7d1a:	4806      	ldr	r0, [pc, #24]	; (7d34 <FlexCAN::setBaudRate(unsigned long)+0xc0>)
    7d1c:	2139      	movs	r1, #57	; 0x39
    7d1e:	f004 f8b9 	bl	be94 <usb_serial_write>
    7d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    7d26:	4804      	ldr	r0, [pc, #16]	; (7d38 <FlexCAN::setBaudRate(unsigned long)+0xc4>)
    7d28:	f001 bb70 	b.w	940c <Print::println()>
    7d2c:	00f42400 	.word	0x00f42400
    7d30:	1fff887c 	.word	0x1fff887c
    7d34:	000150b0 	.word	0x000150b0
    7d38:	1fff89fc 	.word	0x1fff89fc

00007d3c <FlexCAN::setNumTxBoxes(unsigned char)>:
{
    7d3c:	b530      	push	{r4, r5, lr}
    7d3e:	2901      	cmp	r1, #1
    7d40:	4604      	mov	r4, r0
    7d42:	bf38      	it	cc
    7d44:	2101      	movcc	r1, #1
    7d46:	290f      	cmp	r1, #15
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    7d48:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7d4c:	4608      	mov	r0, r1
    7d4e:	bf28      	it	cs
    7d50:	200f      	movcs	r0, #15
    numTxMailboxes = txboxes;
    7d52:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    7d56:	b31b      	cbz	r3, 7da0 <FlexCAN::setNumTxBoxes(unsigned char)+0x64>
    void setMailBoxTxBufferSize(uint8_t mbox, uint16_t size);

    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    inline uint8_t getLastTxBox() { return getNumMailBoxes()-1; }
    inline uint8_t getNumMailBoxes() { return NUM_MAILBOXES; }
    inline uint8_t getNumRxBoxes() { return getNumMailBoxes()-numTxMailboxes; }
    7d58:	f1c0 0e10 	rsb	lr, r0, #16
    7d5c:	fa5f f58e 	uxtb.w	r5, lr
    7d60:	46ae      	mov	lr, r5
    7d62:	2200      	movs	r2, #0
    7d64:	012d      	lsls	r5, r5, #4
        oldIde = FLEXCANb_MBn_CS(flexcanBase, c) & FLEXCAN_MB_CS_IDE;
    7d66:	6823      	ldr	r3, [r4, #0]
    7d68:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    7d6c:	f85c 3002 	ldr.w	r3, [ip, r2]
    7d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | oldIde;
    7d74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    7d78:	f84c 3002 	str.w	r3, [ip, r2]
    for (c = 0; c < getNumRxBoxes(); c++) {
    7d7c:	3210      	adds	r2, #16
    7d7e:	4295      	cmp	r5, r2
    7d80:	d1f1      	bne.n	7d66 <FlexCAN::setNumTxBoxes(unsigned char)+0x2a>
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    7d82:	2510      	movs	r5, #16
    7d84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    7d88:	6823      	ldr	r3, [r4, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    7d8a:	f10e 0201 	add.w	r2, lr, #1
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    7d8e:	3380      	adds	r3, #128	; 0x80
    7d90:	fb15 330e 	smlabb	r3, r5, lr, r3
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    7d94:	fa5f fe82 	uxtb.w	lr, r2
    7d98:	f1be 0f10 	cmp.w	lr, #16
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    7d9c:	6019      	str	r1, [r3, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    7d9e:	d1f3      	bne.n	7d88 <FlexCAN::setNumTxBoxes(unsigned char)+0x4c>
}
    7da0:	bd30      	pop	{r4, r5, pc}
    7da2:	bf00      	nop

00007da4 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>:
    7da4:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    7da8:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    7dac:	b2db      	uxtb	r3, r3
    7dae:	429a      	cmp	r2, r3
    7db0:	d222      	bcs.n	7df8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x54>
{
    7db2:	b510      	push	{r4, lr}
    7db4:	468c      	mov	ip, r1
    7db6:	4686      	mov	lr, r0
        MBFilters[mbox] = filter;
    7db8:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    7dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
    7dc0:	3304      	adds	r3, #4
    7dc2:	e883 0003 	stmia.w	r3, {r0, r1}
        if (filter.flags.extended) {
    7dc6:	f89c 3004 	ldrb.w	r3, [ip, #4]
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    7dca:	f8de 1000 	ldr.w	r1, [lr]
        if (filter.flags.extended) {
    7dce:	07db      	lsls	r3, r3, #31
    7dd0:	d513      	bpl.n	7dfa <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x56>
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    7dd2:	f8dc 0000 	ldr.w	r0, [ip]
    7dd6:	2310      	movs	r3, #16
    7dd8:	3184      	adds	r1, #132	; 0x84
    7dda:	fb13 1102 	smlabb	r1, r3, r2, r1
    7dde:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
    7de2:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) |= FLEXCAN_MB_CS_IDE;
    7de4:	f8de 1000 	ldr.w	r1, [lr]
    7de8:	3180      	adds	r1, #128	; 0x80
    7dea:	fb13 1302 	smlabb	r3, r3, r2, r1
    7dee:	681a      	ldr	r2, [r3, #0]
    7df0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    7df4:	601a      	str	r2, [r3, #0]
}
    7df6:	bd10      	pop	{r4, pc}
    7df8:	4770      	bx	lr
            FLEXCANb_MBn_ID(flexcanBase, mbox) = FLEXCAN_MB_ID_IDSTD(filter.id);
    7dfa:	f8dc 4000 	ldr.w	r4, [ip]
    7dfe:	4809      	ldr	r0, [pc, #36]	; (7e24 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x80>)
    7e00:	2310      	movs	r3, #16
    7e02:	3184      	adds	r1, #132	; 0x84
    7e04:	fb13 1102 	smlabb	r1, r3, r2, r1
    7e08:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    7e0c:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) &= ~FLEXCAN_MB_CS_IDE;
    7e0e:	f8de 1000 	ldr.w	r1, [lr]
    7e12:	3180      	adds	r1, #128	; 0x80
    7e14:	fb13 1302 	smlabb	r3, r3, r2, r1
    7e18:	681a      	ldr	r2, [r3, #0]
    7e1a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    7e1e:	601a      	str	r2, [r3, #0]
}
    7e20:	bd10      	pop	{r4, pc}
    7e22:	bf00      	nop
    7e24:	1ffc0000 	.word	0x1ffc0000

00007e28 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>:
    7e28:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    7e2c:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    7e30:	b2db      	uxtb	r3, r3
    7e32:	429a      	cmp	r2, r3
    7e34:	d301      	bcc.n	7e3a <FlexCAN::getFilter(CAN_filter_t&, unsigned char)+0x12>
    return (false);
    7e36:	2000      	movs	r0, #0
}
    7e38:	4770      	bx	lr
        filter.id = MBFilters[mbox].id;
    7e3a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
        filter.flags.extended = MBFilters[mbox].flags.extended;
    7e3e:	790b      	ldrb	r3, [r1, #4]
        filter.id = MBFilters[mbox].id;
    7e40:	6850      	ldr	r0, [r2, #4]
    7e42:	6008      	str	r0, [r1, #0]
        filter.flags.extended = MBFilters[mbox].flags.extended;
    7e44:	f892 c008 	ldrb.w	ip, [r2, #8]
    7e48:	f36c 0300 	bfi	r3, ip, #0, #1
    7e4c:	710b      	strb	r3, [r1, #4]
        filter.flags.remote = MBFilters[mbox].flags.remote;
    7e4e:	7a13      	ldrb	r3, [r2, #8]
    7e50:	f891 c004 	ldrb.w	ip, [r1, #4]
    7e54:	f3c3 0340 	ubfx	r3, r3, #1, #1
    7e58:	f363 0c41 	bfi	ip, r3, #1, #1
    7e5c:	f881 c004 	strb.w	ip, [r1, #4]
        filter.flags.reserved = MBFilters[mbox].flags.reserved;
    7e60:	7a13      	ldrb	r3, [r2, #8]
    7e62:	fa5f f28c 	uxtb.w	r2, ip
    7e66:	089b      	lsrs	r3, r3, #2
    7e68:	f363 0287 	bfi	r2, r3, #2, #6
        return (true);
    7e6c:	2001      	movs	r0, #1
        filter.flags.reserved = MBFilters[mbox].flags.reserved;
    7e6e:	710a      	strb	r2, [r1, #4]
        return (true);
    7e70:	4770      	bx	lr
    7e72:	bf00      	nop

00007e74 <FlexCAN::setMask(unsigned long, unsigned char)>:
    7e74:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    7e78:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    7e7c:	b2db      	uxtb	r3, r3
    7e7e:	429a      	cmp	r2, r3
    7e80:	d221      	bcs.n	7ec6 <FlexCAN::setMask(unsigned long, unsigned char)+0x52>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7e82:	6803      	ldr	r3, [r0, #0]
{
    7e84:	b410      	push	{r4}
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7e86:	681c      	ldr	r4, [r3, #0]
      if (!wasFrozen) {
    7e88:	01e4      	lsls	r4, r4, #7
    7e8a:	d41d      	bmi.n	7ec8 <FlexCAN::setMask(unsigned long, unsigned char)+0x54>
  FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_FRZ;
    7e8c:	681c      	ldr	r4, [r3, #0]
    7e8e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    7e92:	601c      	str	r4, [r3, #0]
    FLEXCANb_MCR(flexcanBase) |= (FLEXCAN_MCR_HALT);
    7e94:	6804      	ldr	r4, [r0, #0]
    7e96:	6823      	ldr	r3, [r4, #0]
    7e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7e9c:	6023      	str	r3, [r4, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7e9e:	6804      	ldr	r4, [r0, #0]
    7ea0:	6823      	ldr	r3, [r4, #0]
  while (!isFrozen());
    7ea2:	01db      	lsls	r3, r3, #7
    7ea4:	d5fc      	bpl.n	7ea0 <FlexCAN::setMask(unsigned long, unsigned char)+0x2c>
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    7ea6:	f504 6408 	add.w	r4, r4, #2176	; 0x880
    7eaa:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    7eae:	6021      	str	r1, [r4, #0]
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    7eb0:	6802      	ldr	r2, [r0, #0]
    7eb2:	6813      	ldr	r3, [r2, #0]
    7eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    7eb8:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7eba:	6802      	ldr	r2, [r0, #0]
    7ebc:	6813      	ldr	r3, [r2, #0]
  while (isFrozen());
    7ebe:	01db      	lsls	r3, r3, #7
    7ec0:	d4fc      	bmi.n	7ebc <FlexCAN::setMask(unsigned long, unsigned char)+0x48>
}
    7ec2:	bc10      	pop	{r4}
    7ec4:	4770      	bx	lr
    7ec6:	4770      	bx	lr
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    7ec8:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    7ecc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
    7ed0:	bc10      	pop	{r4}
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    7ed2:	6019      	str	r1, [r3, #0]
}
    7ed4:	4770      	bx	lr
    7ed6:	bf00      	nop

00007ed8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>:
{
    7ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7edc:	4617      	mov	r7, r2
    if ( isInitialized() ) return;
    7ede:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
    7ee2:	f89d 8018 	ldrb.w	r8, [sp, #24]
    7ee6:	4606      	mov	r6, r0
    7ee8:	460d      	mov	r5, r1
    7eea:	461c      	mov	r4, r3
    if ( isInitialized() ) return;
    7eec:	2a00      	cmp	r2, #0
    7eee:	f000 808f 	beq.w	8010 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x138>
    if (flexcanBase == FLEXCAN0_BASE) {
    7ef2:	4a63      	ldr	r2, [pc, #396]	; (8080 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a8>)
    7ef4:	6831      	ldr	r1, [r6, #0]
    7ef6:	4291      	cmp	r1, r2
    7ef8:	d07c      	beq.n	7ff4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x11c>
    OSC0_CR |= OSC_ERCLKEN;
    7efa:	4a62      	ldr	r2, [pc, #392]	; (8084 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1ac>)
    7efc:	7813      	ldrb	r3, [r2, #0]
    7efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7f02:	7013      	strb	r3, [r2, #0]
    if (flexcanBase == FLEXCAN0_BASE) {
    7f04:	6833      	ldr	r3, [r6, #0]
    7f06:	f5a2 2282 	sub.w	r2, r2, #266240	; 0x41000
    7f0a:	4293      	cmp	r3, r2
    7f0c:	d106      	bne.n	7f1c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x44>
        SIM_SCGC6 |=  SIM_SCGC6_FLEXCAN0;
    7f0e:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    7f12:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    7f14:	f043 0310 	orr.w	r3, r3, #16
    7f18:	63d3      	str	r3, [r2, #60]	; 0x3c
    FLEXCANb_CTRL1(flexcanBase) &= ~FLEXCAN_CTRL_CLK_SRC;
    7f1a:	6833      	ldr	r3, [r6, #0]
    7f1c:	685a      	ldr	r2, [r3, #4]
    7f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    7f22:	605a      	str	r2, [r3, #4]
    FLEXCANb_MCR (flexcanBase) |=  FLEXCAN_MCR_FRZ;
    7f24:	6832      	ldr	r2, [r6, #0]
    7f26:	6813      	ldr	r3, [r2, #0]
    7f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    7f2c:	6013      	str	r3, [r2, #0]
    FLEXCANb_MCR (flexcanBase) &= ~FLEXCAN_MCR_MDIS;
    7f2e:	6832      	ldr	r2, [r6, #0]
    7f30:	6813      	ldr	r3, [r2, #0]
    7f32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    7f36:	6013      	str	r3, [r2, #0]
    while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_LPM_ACK)
    7f38:	6832      	ldr	r2, [r6, #0]
    7f3a:	6813      	ldr	r3, [r2, #0]
    7f3c:	02d9      	lsls	r1, r3, #11
    7f3e:	d4fc      	bmi.n	7f3a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x62>
  FLEXCANb_MCR (flexcanBase) ^=  FLEXCAN_MCR_SOFT_RST;
    7f40:	6813      	ldr	r3, [r2, #0]
    7f42:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
    7f46:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR (flexcanBase) & FLEXCAN_MCR_SOFT_RST)
    7f48:	6833      	ldr	r3, [r6, #0]
    7f4a:	681c      	ldr	r4, [r3, #0]
    7f4c:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
    7f50:	d1fb      	bne.n	7f4a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x72>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7f52:	681a      	ldr	r2, [r3, #0]
  while (!isFrozen());
    7f54:	01d2      	lsls	r2, r2, #7
    7f56:	d5fc      	bpl.n	7f52 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x7a>
    FLEXCANb_MCR (flexcanBase) |= FLEXCAN_MCR_SRX_DIS;
    7f58:	681a      	ldr	r2, [r3, #0]
    7f5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    7f5e:	601a      	str	r2, [r3, #0]
    setBaudRate(baud);
    7f60:	4629      	mov	r1, r5
    7f62:	4630      	mov	r0, r6
    7f64:	f7ff fe86 	bl	7c74 <FlexCAN::setBaudRate(unsigned long)>
    FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_IRMQ;
    7f68:	6832      	ldr	r2, [r6, #0]
    7f6a:	6813      	ldr	r3, [r2, #0]
    7f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7f70:	6013      	str	r3, [r2, #0]
    7f72:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    7f76:	2910      	cmp	r1, #16
    7f78:	d012      	beq.n	7fa0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xc8>
    7f7a:	2500      	movs	r5, #0
        setMask (0, c);
    7f7c:	462a      	mov	r2, r5
    7f7e:	4630      	mov	r0, r6
    7f80:	2100      	movs	r1, #0
    7f82:	f7ff ff77 	bl	7e74 <FlexCAN::setMask(unsigned long, unsigned char)>
        setFilter (mask, c);
    7f86:	462a      	mov	r2, r5
    7f88:	4639      	mov	r1, r7
    7f8a:	f7ff ff0b 	bl	7da4 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
    7f8e:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    7f92:	3401      	adds	r4, #1
    7f94:	f1c1 0310 	rsb	r3, r1, #16
    7f98:	b2e5      	uxtb	r5, r4
    7f9a:	b2db      	uxtb	r3, r3
    7f9c:	429d      	cmp	r5, r3
    7f9e:	d3ed      	bcc.n	7f7c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xa4>
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    7fa0:	6832      	ldr	r2, [r6, #0]
    7fa2:	6813      	ldr	r3, [r2, #0]
    7fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    7fa8:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7faa:	6833      	ldr	r3, [r6, #0]
    7fac:	681a      	ldr	r2, [r3, #0]
  while (isFrozen());
    7fae:	01d0      	lsls	r0, r2, #7
    7fb0:	d4fc      	bmi.n	7fac <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xd4>
  while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_NOT_RDY);
    7fb2:	681a      	ldr	r2, [r3, #0]
    7fb4:	0112      	lsls	r2, r2, #4
    7fb6:	d4fc      	bmi.n	7fb2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xda>
    setNumTxBoxes (numTxMailboxes);
    7fb8:	4630      	mov	r0, r6
    7fba:	f7ff febf 	bl	7d3c <FlexCAN::setNumTxBoxes(unsigned char)>
    NVIC_SET_PRIORITY (IrqMessage, IRQ_PRIORITY);
    7fbe:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    7fc2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7fc6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    7fca:	2240      	movs	r2, #64	; 0x40
    7fcc:	701a      	strb	r2, [r3, #0]
    NVIC_ENABLE_IRQ (IrqMessage);
    7fce:	f8d6 20f8 	ldr.w	r2, [r6, #248]	; 0xf8
    7fd2:	0953      	lsrs	r3, r2, #5
    7fd4:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7fd8:	3340      	adds	r3, #64	; 0x40
    7fda:	009b      	lsls	r3, r3, #2
    7fdc:	2101      	movs	r1, #1
    7fde:	f002 021f 	and.w	r2, r2, #31
    7fe2:	fa01 f202 	lsl.w	r2, r1, r2
    7fe6:	601a      	str	r2, [r3, #0]
    FLEXCANb_IMASK1 (flexcanBase) = 0xFFFF;
    7fe8:	6833      	ldr	r3, [r6, #0]
    7fea:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7fee:	6298      	str	r0, [r3, #40]	; 0x28
}
    7ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (txAlt == 1)
    7ff4:	2c01      	cmp	r4, #1
    7ff6:	d02b      	beq.n	8050 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x178>
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    7ff8:	4b23      	ldr	r3, [pc, #140]	; (8088 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    7ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    7ffe:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    8002:	631a      	str	r2, [r3, #48]	; 0x30
        if (rxAlt == 1)
    8004:	d02b      	beq.n	805e <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x186>
            CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
    8006:	4b20      	ldr	r3, [pc, #128]	; (8088 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    8008:	f44f 7200 	mov.w	r2, #512	; 0x200
    800c:	635a      	str	r2, [r3, #52]	; 0x34
    800e:	e774      	b.n	7efa <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    8010:	f8b0 0198 	ldrh.w	r0, [r0, #408]	; 0x198
    8014:	0100      	lsls	r0, r0, #4
    8016:	f001 fe29 	bl	9c6c <operator new[](unsigned int)>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    801a:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    801e:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    8022:	b30b      	cbz	r3, 8068 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x190>
    ring.buffer = buffer;
    8024:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
    ring.head = 0;
    8028:	2300      	movs	r3, #0
    802a:	f8a6 3094 	strh.w	r3, [r6, #148]	; 0x94
    ring.tail = 0;
    802e:	f8a6 3096 	strh.w	r3, [r6, #150]	; 0x96
    ring.head = 0;
    8032:	f8a6 30a4 	strh.w	r3, [r6, #164]	; 0xa4
    ring.tail = 0;
    8036:	f8a6 30a6 	strh.w	r3, [r6, #166]	; 0xa6
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    803a:	f8b6 3198 	ldrh.w	r3, [r6, #408]	; 0x198
    ring.size = size;
    803e:	f8a6 3098 	strh.w	r3, [r6, #152]	; 0x98
    initRingBuffer (rxRing, rx_buffer, sizeRxBuffer);
    8042:	f8b6 3196 	ldrh.w	r3, [r6, #406]	; 0x196
    ring.buffer = buffer;
    8046:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
    ring.size = size;
    804a:	f8a6 30a8 	strh.w	r3, [r6, #168]	; 0xa8
    ring.tail = 0;
    804e:	e750      	b.n	7ef2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a>
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    8050:	4b0e      	ldr	r3, [pc, #56]	; (808c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    8052:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    8056:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    805a:	649a      	str	r2, [r3, #72]	; 0x48
        if (rxAlt == 1)
    805c:	d1d3      	bne.n	8006 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x12e>
            CORE_PIN25_CONFIG = PORT_PCR_MUX(2);
    805e:	4b0b      	ldr	r3, [pc, #44]	; (808c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    8060:	f44f 7200 	mov.w	r2, #512	; 0x200
    8064:	64da      	str	r2, [r3, #76]	; 0x4c
    8066:	e748      	b.n	7efa <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    8068:	f8b6 0196 	ldrh.w	r0, [r6, #406]	; 0x196
    806c:	0100      	lsls	r0, r0, #4
    806e:	f001 fdfd 	bl	9c6c <operator new[](unsigned int)>
    8072:	4603      	mov	r3, r0
    8074:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    8078:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    807c:	e7d2      	b.n	8024 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x14c>
    807e:	bf00      	nop
    8080:	40024000 	.word	0x40024000
    8084:	40065000 	.word	0x40065000
    8088:	40049000 	.word	0x40049000
    808c:	4004a000 	.word	0x4004a000

00008090 <FlexCAN::available()>:
{
    8090:	b410      	push	{r4}
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    8092:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    8096:	0963      	lsrs	r3, r4, #5
    8098:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    809c:	3340      	adds	r3, #64	; 0x40
    809e:	009b      	lsls	r3, r3, #2
    80a0:	4602      	mov	r2, r0
    80a2:	f004 041f 	and.w	r4, r4, #31
    80a6:	6818      	ldr	r0, [r3, #0]
    80a8:	2101      	movs	r1, #1
    80aa:	40a1      	lsls	r1, r4
    80ac:	ea10 0401 	ands.w	r4, r0, r1
    80b0:	bf14      	ite	ne
    80b2:	2001      	movne	r0, #1
    80b4:	2000      	moveq	r0, #0
    80b6:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    80ba:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    entries = ring.head - ring.tail;
    80be:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
    80c2:	f8b2 30a6 	ldrh.w	r3, [r2, #166]	; 0xa6
    80c6:	b280      	uxth	r0, r0
    80c8:	b29b      	uxth	r3, r3
    if (entries < 0) {
    80ca:	1ac0      	subs	r0, r0, r3
        entries += ring.size;
    80cc:	bf44      	itt	mi
    80ce:	f8b2 30a8 	ldrhmi.w	r3, [r2, #168]	; 0xa8
    80d2:	18c0      	addmi	r0, r0, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    80d4:	b164      	cbz	r4, 80f0 <FlexCAN::available()+0x60>
    80d6:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
    80da:	0953      	lsrs	r3, r2, #5
    80dc:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    80e0:	3340      	adds	r3, #64	; 0x40
    80e2:	2101      	movs	r1, #1
    80e4:	009b      	lsls	r3, r3, #2
    80e6:	f002 021f 	and.w	r2, r2, #31
    80ea:	fa01 f202 	lsl.w	r2, r1, r2
    80ee:	601a      	str	r2, [r3, #0]
}
    80f0:	bc10      	pop	{r4}
    80f2:	4770      	bx	lr

000080f4 <FlexCAN::read(CAN_message_t&)>:
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    80f4:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
{
    80f8:	b538      	push	{r3, r4, r5, lr}
    80fa:	0953      	lsrs	r3, r2, #5
    80fc:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8100:	3340      	adds	r3, #64	; 0x40
    8102:	009b      	lsls	r3, r3, #2
    8104:	4604      	mov	r4, r0
    8106:	2501      	movs	r5, #1
    8108:	4608      	mov	r0, r1
    810a:	f002 021f 	and.w	r2, r2, #31
    810e:	6819      	ldr	r1, [r3, #0]
    8110:	fa05 f202 	lsl.w	r2, r5, r2
    8114:	4211      	tst	r1, r2
    8116:	bf14      	ite	ne
    8118:	4629      	movne	r1, r5
    811a:	2100      	moveq	r1, #0
    811c:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
    8120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    8124:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    8128:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    812c:	b292      	uxth	r2, r2
    812e:	b29b      	uxth	r3, r3
    8130:	429a      	cmp	r2, r3
    8132:	d028      	beq.n	8186 <FlexCAN::read(CAN_message_t&)+0x92>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    8134:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8138:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    813c:	b29b      	uxth	r3, r3
    813e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    8142:	2210      	movs	r2, #16
    8144:	f001 fc42 	bl	99cc <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    8148:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    814c:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    8150:	b29b      	uxth	r3, r3
    8152:	442b      	add	r3, r5
    8154:	fbb3 f1f2 	udiv	r1, r3, r2
    8158:	fb02 3311 	mls	r3, r2, r1, r3
    815c:	b29b      	uxth	r3, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    815e:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    8162:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
        result=1;
    8166:	4628      	mov	r0, r5
    8168:	b161      	cbz	r1, 8184 <FlexCAN::read(CAN_message_t&)+0x90>
    816a:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    816e:	0953      	lsrs	r3, r2, #5
    8170:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8174:	3340      	adds	r3, #64	; 0x40
    8176:	2101      	movs	r1, #1
    8178:	009b      	lsls	r3, r3, #2
    817a:	f002 021f 	and.w	r2, r2, #31
    817e:	fa01 f202 	lsl.w	r2, r1, r2
    8182:	601a      	str	r2, [r3, #0]
}
    8184:	bd38      	pop	{r3, r4, r5, pc}
    int result=0;
    8186:	2000      	movs	r0, #0
    8188:	e7ee      	b.n	8168 <FlexCAN::read(CAN_message_t&)+0x74>
    818a:	bf00      	nop

0000818c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>:
{
    818c:	b530      	push	{r4, r5, lr}
    if (msg.flags.extended) {
    818e:	798b      	ldrb	r3, [r1, #6]
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    8190:	6804      	ldr	r4, [r0, #0]
    8192:	f04f 0e10 	mov.w	lr, #16
    8196:	f104 0c84 	add.w	ip, r4, #132	; 0x84
    if (msg.flags.extended) {
    819a:	07dc      	lsls	r4, r3, #31
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    819c:	fb1e cc02 	smlabb	ip, lr, r2, ip
    if (msg.flags.extended) {
    81a0:	d525      	bpl.n	81ee <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0x62>
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    81a2:	680c      	ldr	r4, [r1, #0]
    81a4:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    81a8:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    81ac:	6804      	ldr	r4, [r0, #0]
    81ae:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    81b2:	688c      	ldr	r4, [r1, #8]
    81b4:	fb1e cc02 	smlabb	ip, lr, r2, ip
    81b8:	ba24      	rev	r4, r4
    81ba:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    81be:	6804      	ldr	r4, [r0, #0]
    81c0:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    81c4:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    81c8:	fb12 fe0e 	smulbb	lr, r2, lr
    81cc:	68ca      	ldr	r2, [r1, #12]
    81ce:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    81d0:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    81d4:	079a      	lsls	r2, r3, #30
    81d6:	d53c      	bpl.n	8252 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xc6>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    81d8:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    81da:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    81dc:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    81de:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    81e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                                                   FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_RTR;
    81e4:	f043 6347 	orr.w	r3, r3, #208666624	; 0xc700000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    81e8:	f842 300e 	str.w	r3, [r2, lr]
}
    81ec:	bd30      	pop	{r4, r5, pc}
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    81ee:	680d      	ldr	r5, [r1, #0]
    81f0:	4c1d      	ldr	r4, [pc, #116]	; (8268 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xdc>)
    81f2:	ea04 4485 	and.w	r4, r4, r5, lsl #18
    81f6:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    81fa:	6804      	ldr	r4, [r0, #0]
    81fc:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    8200:	688c      	ldr	r4, [r1, #8]
    8202:	fb1e cc02 	smlabb	ip, lr, r2, ip
    8206:	ba24      	rev	r4, r4
    8208:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    820c:	6804      	ldr	r4, [r0, #0]
    820e:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    8212:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    8216:	fb12 fe0e 	smulbb	lr, r2, lr
    821a:	68ca      	ldr	r2, [r1, #12]
        if (msg.flags.remote) {
    821c:	079b      	lsls	r3, r3, #30
    821e:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8220:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    8224:	d50a      	bpl.n	823c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xb0>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    8226:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8228:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    822a:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    822c:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    822e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8232:	f043 6341 	orr.w	r3, r3, #202375168	; 0xc100000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8236:	f842 300e 	str.w	r3, [r2, lr]
}
    823a:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    823c:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    823e:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8240:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8242:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8244:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8248:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    824c:	f842 300e 	str.w	r3, [r2, lr]
}
    8250:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8252:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8254:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8256:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8258:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    825a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    825e:	f043 6346 	orr.w	r3, r3, #207618048	; 0xc600000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8262:	f842 300e 	str.w	r3, [r2, lr]
}
    8266:	bd30      	pop	{r4, r5, pc}
    8268:	1ffc0000 	.word	0x1ffc0000

0000826c <FlexCAN::write(CAN_message_t const&)>:
{
    826c:	b570      	push	{r4, r5, r6, lr}
    826e:	4604      	mov	r4, r0
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    8270:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
    8274:	0943      	lsrs	r3, r0, #5
    8276:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    827a:	3340      	adds	r3, #64	; 0x40
    827c:	009b      	lsls	r3, r3, #2
    827e:	f000 001f 	and.w	r0, r0, #31
    8282:	681d      	ldr	r5, [r3, #0]
    8284:	2201      	movs	r2, #1
    8286:	4082      	lsls	r2, r0
    8288:	4215      	tst	r5, r2
    828a:	bf14      	ite	ne
    828c:	2501      	movne	r5, #1
    828e:	2500      	moveq	r5, #0
    8290:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
    8294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    8298:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    829c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    82a0:	b29b      	uxth	r3, r3
    82a2:	b292      	uxth	r2, r2
    82a4:	429a      	cmp	r2, r3
    82a6:	d02d      	beq.n	8304 <FlexCAN::write(CAN_message_t const&)+0x98>
    nextEntry = (ring.head + 1) % ring.size;
    82a8:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    82ac:	f8b4 0098 	ldrh.w	r0, [r4, #152]	; 0x98
    if (nextEntry == ring.tail) {
    82b0:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    nextEntry = (ring.head + 1) % ring.size;
    82b4:	b29b      	uxth	r3, r3
    82b6:	3301      	adds	r3, #1
    82b8:	fbb3 f6f0 	udiv	r6, r3, r0
    82bc:	fb00 3316 	mls	r3, r0, r6, r3
    if (nextEntry == ring.tail) {
    82c0:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    82c2:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    82c4:	4296      	cmp	r6, r2
    82c6:	d042      	beq.n	834e <FlexCAN::write(CAN_message_t const&)+0xe2>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    82c8:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    82cc:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    82d0:	b29b      	uxth	r3, r3
    82d2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    82d6:	2210      	movs	r2, #16
    82d8:	f001 fb78 	bl	99cc <memcpy>
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    82dc:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
    ring.head = nextEntry;
    82e0:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
            result=1;
    82e4:	2001      	movs	r0, #1
    82e6:	b165      	cbz	r5, 8302 <FlexCAN::write(CAN_message_t const&)+0x96>
    82e8:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    82ec:	0953      	lsrs	r3, r2, #5
    82ee:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    82f2:	3340      	adds	r3, #64	; 0x40
    82f4:	2101      	movs	r1, #1
    82f6:	009b      	lsls	r3, r3, #2
    82f8:	f002 021f 	and.w	r2, r2, #31
    82fc:	fa01 f202 	lsl.w	r2, r1, r2
    8300:	601a      	str	r2, [r3, #0]
}
    8302:	bd70      	pop	{r4, r5, r6, pc}
    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    8304:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    8308:	f1c2 0210 	rsb	r2, r2, #16
      for (index = getFirstTxBox(); index < getNumMailBoxes(); index++) {
    830c:	b2d2      	uxtb	r2, r2
    830e:	2a0f      	cmp	r2, #15
    8310:	d8ca      	bhi.n	82a8 <FlexCAN::write(CAN_message_t const&)+0x3c>
    8312:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    8316:	332c      	adds	r3, #44	; 0x2c
    8318:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    831c:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
    8320:	e003      	b.n	832a <FlexCAN::write(CAN_message_t const&)+0xbe>
    8322:	4563      	cmp	r3, ip
    8324:	f102 0201 	add.w	r2, r2, #1
    8328:	d0be      	beq.n	82a8 <FlexCAN::write(CAN_message_t const&)+0x3c>
    bool usesGlobalTxRing(uint8_t mbox) { return (mbox<getNumMailBoxes()?txRings[mbox]==0:true); }
    832a:	f853 0f04 	ldr.w	r0, [r3, #4]!
    832e:	2800      	cmp	r0, #0
    8330:	d1f7      	bne.n	8322 <FlexCAN::write(CAN_message_t const&)+0xb6>
          if ( usesGlobalTxRing(index) && FLEXCAN_get_code(FLEXCANb_MBn_CS(flexcanBase, index)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    8332:	6826      	ldr	r6, [r4, #0]
    8334:	0110      	lsls	r0, r2, #4
    8336:	3680      	adds	r6, #128	; 0x80
    8338:	5830      	ldr	r0, [r6, r0]
    833a:	f3c0 6003 	ubfx	r0, r0, #24, #4
    833e:	2808      	cmp	r0, #8
    8340:	d1ef      	bne.n	8322 <FlexCAN::write(CAN_message_t const&)+0xb6>
        writeTxRegisters (msg, index);
    8342:	4620      	mov	r0, r4
    8344:	b2d2      	uxtb	r2, r2
    8346:	f7ff ff21 	bl	818c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
        result=1;
    834a:	2001      	movs	r0, #1
    834c:	e7cb      	b.n	82e6 <FlexCAN::write(CAN_message_t const&)+0x7a>
    int result=0;
    834e:	2000      	movs	r0, #0
    8350:	e7c9      	b.n	82e6 <FlexCAN::write(CAN_message_t const&)+0x7a>
    8352:	bf00      	nop

00008354 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>:
{
    8354:	460b      	mov	r3, r1
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8356:	6801      	ldr	r1, [r0, #0]
    8358:	f04f 0c10 	mov.w	ip, #16
    835c:	3180      	adds	r1, #128	; 0x80
    835e:	fb1c 1102 	smlabb	r1, ip, r2, r1
{
    8362:	b570      	push	{r4, r5, r6, lr}
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8364:	6809      	ldr	r1, [r1, #0]
    msg.timestamp = FLEXCAN_get_timestamp (mb_CS);
    8366:	8099      	strh	r1, [r3, #4]
    msg.len = FLEXCAN_get_length (mb_CS);
    8368:	f3c1 4603 	ubfx	r6, r1, #16, #4
    836c:	71de      	strb	r6, [r3, #7]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    836e:	6804      	ldr	r4, [r0, #0]
    8370:	3484      	adds	r4, #132	; 0x84
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8372:	fb12 fe0c 	smulbb	lr, r2, ip
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8376:	fb1c 4c02 	smlabb	ip, ip, r2, r4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    837a:	f3c1 5500 	ubfx	r5, r1, #20, #1
    837e:	f3c1 5240 	ubfx	r2, r1, #21, #1
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8382:	f8dc 4000 	ldr.w	r4, [ip]
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    8386:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    838a:	f3c1 6c03 	ubfx	ip, r1, #24, #4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    838e:	719a      	strb	r2, [r3, #6]
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8390:	f1ac 0c06 	sub.w	ip, ip, #6
    if (!msg.flags.extended) {
    8394:	b2d2      	uxtb	r2, r2
    8396:	07d2      	lsls	r2, r2, #31
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8398:	fabc fc8c 	clz	ip, ip
    839c:	799a      	ldrb	r2, [r3, #6]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    839e:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    83a2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    83a6:	601c      	str	r4, [r3, #0]
    83a8:	f36c 0282 	bfi	r2, ip, #2, #1
        msg.id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    83ac:	bf5c      	itt	pl
    83ae:	0ca4      	lsrpl	r4, r4, #18
    83b0:	601c      	strpl	r4, [r3, #0]
    83b2:	719a      	strb	r2, [r3, #6]
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    83b4:	6802      	ldr	r2, [r0, #0]
    83b6:	3288      	adds	r2, #136	; 0x88
    if (msg.len > 4) {
    83b8:	2e04      	cmp	r6, #4
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    83ba:	f852 200e 	ldr.w	r2, [r2, lr]
    msg.buf[0] = dataIn;
    83be:	ba12      	rev	r2, r2
    msg.len = FLEXCAN_get_length (mb_CS);
    83c0:	f3c1 4507 	ubfx	r5, r1, #16, #8
    msg.buf[0] = dataIn;
    83c4:	609a      	str	r2, [r3, #8]
    if (msg.len > 4) {
    83c6:	d905      	bls.n	83d4 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x80>
        dataIn = FLEXCANb_MBn_WORD1(flexcanBase, buffer);
    83c8:	6802      	ldr	r2, [r0, #0]
    83ca:	328c      	adds	r2, #140	; 0x8c
    83cc:	f852 200e 	ldr.w	r2, [r2, lr]
        msg.buf[4] = dataIn;
    83d0:	ba12      	rev	r2, r2
    83d2:	60da      	str	r2, [r3, #12]
    for (uint32_t loop=msg.len; loop < 8; loop++ ) {
    83d4:	f015 0108 	ands.w	r1, r5, #8
    83d8:	d108      	bne.n	83ec <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x98>
        msg.buf[loop] = 0;
    83da:	f106 0008 	add.w	r0, r6, #8
    83de:	f1c6 0208 	rsb	r2, r6, #8
    83e2:	4418      	add	r0, r3
}
    83e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        msg.buf[loop] = 0;
    83e8:	f005 bcb6 	b.w	dd58 <memset>
}
    83ec:	bd70      	pop	{r4, r5, r6, pc}
    83ee:	bf00      	nop

000083f0 <FlexCAN::message_isr()>:
{
    83f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    83f4:	4683      	mov	fp, r0
{
    83f6:	b089      	sub	sp, #36	; 0x24
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    83f8:	f85b 2bb4 	ldr.w	r2, [fp], #180
    83fc:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
    8400:	f8cd 900c 	str.w	r9, [sp, #12]
{
    8404:	4605      	mov	r5, r0
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    8406:	4682      	mov	sl, r0
    for (i = 0; i < getNumMailBoxes(); i++) {
    8408:	2400      	movs	r4, #0
    840a:	e008      	b.n	841e <FlexCAN::message_isr()+0x2e>
        switch (code) {
    840c:	2b02      	cmp	r3, #2
    840e:	d04c      	beq.n	84aa <FlexCAN::message_isr()+0xba>
    for (i = 0; i < getNumMailBoxes(); i++) {
    8410:	3401      	adds	r4, #1
    8412:	2c10      	cmp	r4, #16
    8414:	f10a 0a08 	add.w	sl, sl, #8
    8418:	f10b 0b04 	add.w	fp, fp, #4
    841c:	d040      	beq.n	84a0 <FlexCAN::message_isr()+0xb0>
        if ((status & (1UL << i)) == 0) {
    841e:	fa29 f304 	lsr.w	r3, r9, r4
    8422:	07d9      	lsls	r1, r3, #31
    8424:	d5f4      	bpl.n	8410 <FlexCAN::message_isr()+0x20>
        uint32_t code = FLEXCAN_get_code (FLEXCANb_MBn_CS(flexcanBase, i));
    8426:	0127      	lsls	r7, r4, #4
    8428:	f102 0380 	add.w	r3, r2, #128	; 0x80
    842c:	59db      	ldr	r3, [r3, r7]
    842e:	f3c3 6303 	ubfx	r3, r3, #24, #4
        switch (code) {
    8432:	2b06      	cmp	r3, #6
    8434:	d039      	beq.n	84aa <FlexCAN::message_isr()+0xba>
    8436:	2b08      	cmp	r3, #8
    8438:	d1e8      	bne.n	840c <FlexCAN::message_isr()+0x1c>
    843a:	f8db 6000 	ldr.w	r6, [fp]
    843e:	2e00      	cmp	r6, #0
    8440:	f000 80b9 	beq.w	85b6 <FlexCAN::message_isr()+0x1c6>
    if (ring.head == ring.tail) {
    8444:	8831      	ldrh	r1, [r6, #0]
    8446:	8873      	ldrh	r3, [r6, #2]
    8448:	b289      	uxth	r1, r1
    844a:	b29b      	uxth	r3, r3
    844c:	4299      	cmp	r1, r3
    844e:	f000 80be 	beq.w	85ce <FlexCAN::message_isr()+0x1de>
    8452:	8831      	ldrh	r1, [r6, #0]
    8454:	8873      	ldrh	r3, [r6, #2]
    8456:	b289      	uxth	r1, r1
    8458:	b29b      	uxth	r3, r3
    845a:	4299      	cmp	r1, r3
    845c:	d0d8      	beq.n	8410 <FlexCAN::message_isr()+0x20>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    845e:	8873      	ldrh	r3, [r6, #2]
    8460:	68b1      	ldr	r1, [r6, #8]
    8462:	b29b      	uxth	r3, r3
    8464:	2210      	movs	r2, #16
    8466:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    846a:	eb0d 0002 	add.w	r0, sp, r2
    846e:	f001 faad 	bl	99cc <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    8472:	8873      	ldrh	r3, [r6, #2]
    8474:	88b2      	ldrh	r2, [r6, #4]
    8476:	b29b      	uxth	r3, r3
    8478:	3301      	adds	r3, #1
    847a:	fbb3 f1f2 	udiv	r1, r3, r2
    847e:	fb02 3311 	mls	r3, r2, r1, r3
    8482:	b29b      	uxth	r3, r3
                    writeTxRegisters (msg, i);
    8484:	b2e2      	uxtb	r2, r4
    ring.tail = (ring.tail + 1) % ring.size;
    8486:	8073      	strh	r3, [r6, #2]
                    writeTxRegisters (msg, i);
    8488:	a904      	add	r1, sp, #16
    848a:	4628      	mov	r0, r5
    for (i = 0; i < getNumMailBoxes(); i++) {
    848c:	3401      	adds	r4, #1
                    writeTxRegisters (msg, i);
    848e:	f7ff fe7d 	bl	818c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
    for (i = 0; i < getNumMailBoxes(); i++) {
    8492:	2c10      	cmp	r4, #16
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8494:	682a      	ldr	r2, [r5, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    8496:	f10a 0a08 	add.w	sl, sl, #8
    849a:	f10b 0b04 	add.w	fp, fp, #4
    849e:	d1be      	bne.n	841e <FlexCAN::message_isr()+0x2e>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    84a0:	9b03      	ldr	r3, [sp, #12]
    84a2:	6313      	str	r3, [r2, #48]	; 0x30
}
    84a4:	b009      	add	sp, #36	; 0x24
    84a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            readRxRegisters (msg, i);
    84aa:	b2e2      	uxtb	r2, r4
    84ac:	a904      	add	r1, sp, #16
    84ae:	4628      	mov	r0, r5
    84b0:	f7ff ff50 	bl	8354 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>
            if (stats.enabled == true) {
    84b4:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    84b8:	b16b      	cbz	r3, 84d6 <FlexCAN::message_isr()+0xe6>
                stats.mb[i].refCount++;
    84ba:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
    84be:	3301      	adds	r3, #1
    84c0:	f8ca 3114 	str.w	r3, [sl, #276]	; 0x114
                if (msg.flags.overrun) {
    84c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    84c8:	075b      	lsls	r3, r3, #29
    84ca:	d504      	bpl.n	84d6 <FlexCAN::message_isr()+0xe6>
                    stats.mb[i].overrunCount++;
    84cc:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    84d0:	3301      	adds	r3, #1
    84d2:	f8ca 3118 	str.w	r3, [sl, #280]	; 0x118
    84d6:	2301      	movs	r3, #1
    84d8:	40a3      	lsls	r3, r4
    84da:	9300      	str	r3, [sp, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    84dc:	2300      	movs	r3, #0
    84de:	f105 0680 	add.w	r6, r5, #128	; 0x80
    84e2:	f105 0890 	add.w	r8, r5, #144	; 0x90
    84e6:	9301      	str	r3, [sp, #4]
    84e8:	f8cd b008 	str.w	fp, [sp, #8]
                thisListener = listener[listenerPos];
    84ec:	f856 0f04 	ldr.w	r0, [r6, #4]!
                if (thisListener != NULL) {
    84f0:	b148      	cbz	r0, 8506 <FlexCAN::message_isr()+0x116>
                    if (thisListener->callbacksActive & (1UL << i)) {
    84f2:	6842      	ldr	r2, [r0, #4]
    84f4:	9b00      	ldr	r3, [sp, #0]
    84f6:	4013      	ands	r3, r2
    84f8:	d033      	beq.n	8562 <FlexCAN::message_isr()+0x172>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    84fa:	6803      	ldr	r3, [r0, #0]
    84fc:	f8d3 b000 	ldr.w	fp, [r3]
    8500:	4b45      	ldr	r3, [pc, #276]	; (8618 <FlexCAN::message_isr()+0x228>)
    8502:	459b      	cmp	fp, r3
    8504:	d15a      	bne.n	85bc <FlexCAN::message_isr()+0x1cc>
            for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    8506:	45b0      	cmp	r8, r6
    8508:	d1f0      	bne.n	84ec <FlexCAN::message_isr()+0xfc>
            if (handledFrame == false) {
    850a:	9b01      	ldr	r3, [sp, #4]
    850c:	f8dd b008 	ldr.w	fp, [sp, #8]
    8510:	b393      	cbz	r3, 8578 <FlexCAN::message_isr()+0x188>
            if (stats.enabled == true) {
    8512:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    8516:	b183      	cbz	r3, 853a <FlexCAN::message_isr()+0x14a>
    entries = ring.head - ring.tail;
    8518:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    851c:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    8520:	b29b      	uxth	r3, r3
    8522:	b292      	uxth	r2, r2
    if (entries < 0) {
    8524:	1a9b      	subs	r3, r3, r2
        entries += ring.size;
    8526:	bf44      	itt	mi
    8528:	f8b5 20a8 	ldrhmi.w	r2, [r5, #168]	; 0xa8
    852c:	189b      	addmi	r3, r3, r2
                if (stats.ringRxHighWater < rxEntries) {
    852e:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    8532:	429a      	cmp	r2, r3
                    stats.ringRxHighWater = rxEntries;
    8534:	bf38      	it	cc
    8536:	f8c5 3104 	strcc.w	r3, [r5, #260]	; 0x104
            if (MBFilters[i].flags.extended) {
    853a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    853e:	f8da 2004 	ldr.w	r2, [sl, #4]
            if (MBFilters[i].flags.extended) {
    8542:	7a1b      	ldrb	r3, [r3, #8]
    8544:	f013 0f01 	tst.w	r3, #1
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    8548:	682b      	ldr	r3, [r5, #0]
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    854a:	bf08      	it	eq
    854c:	4933      	ldreq	r1, [pc, #204]	; (861c <FlexCAN::message_isr()+0x22c>)
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    854e:	f103 0384 	add.w	r3, r3, #132	; 0x84
    8552:	bf14      	ite	ne
    8554:	f022 4260 	bicne.w	r2, r2, #3758096384	; 0xe0000000
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    8558:	ea01 4282 	andeq.w	r2, r1, r2, lsl #18
    855c:	51da      	str	r2, [r3, r7]
    FLEXCANb_IFLAG1(flexcanBase) = status;
    855e:	682a      	ldr	r2, [r5, #0]
    8560:	e756      	b.n	8410 <FlexCAN::message_isr()+0x20>
                    } else if (thisListener->callbacksActive & (1UL << 31)) {
    8562:	2a00      	cmp	r2, #0
    8564:	dacf      	bge.n	8506 <FlexCAN::message_isr()+0x116>
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    8566:	6802      	ldr	r2, [r0, #0]
    8568:	f8d2 b000 	ldr.w	fp, [r2]
    856c:	4a2a      	ldr	r2, [pc, #168]	; (8618 <FlexCAN::message_isr()+0x228>)
    856e:	4593      	cmp	fp, r2
    8570:	d0c9      	beq.n	8506 <FlexCAN::message_isr()+0x116>
    8572:	f04f 32ff 	mov.w	r2, #4294967295
    8576:	e023      	b.n	85c0 <FlexCAN::message_isr()+0x1d0>
    nextEntry = (ring.head + 1) % ring.size;
    8578:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    857c:	f8b5 10a8 	ldrh.w	r1, [r5, #168]	; 0xa8
    if (nextEntry == ring.tail) {
    8580:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    nextEntry = (ring.head + 1) % ring.size;
    8584:	b29b      	uxth	r3, r3
    8586:	3301      	adds	r3, #1
    8588:	fbb3 f0f1 	udiv	r0, r3, r1
    858c:	fb01 3310 	mls	r3, r1, r0, r3
    if (nextEntry == ring.tail) {
    8590:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    8592:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    8594:	4296      	cmp	r6, r2
    8596:	d031      	beq.n	85fc <FlexCAN::message_isr()+0x20c>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    8598:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    859c:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    85a0:	b29b      	uxth	r3, r3
    85a2:	2210      	movs	r2, #16
    85a4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    85a8:	eb0d 0102 	add.w	r1, sp, r2
    85ac:	f001 fa0e 	bl	99cc <memcpy>
    ring.head = nextEntry;
    85b0:	f8a5 60a4 	strh.w	r6, [r5, #164]	; 0xa4
    return (true);
    85b4:	e7ad      	b.n	8512 <FlexCAN::message_isr()+0x122>
            pRing=( usesGlobalTxRing(i) ? &txRing : txRings[i] );
    85b6:	f105 0694 	add.w	r6, r5, #148	; 0x94
    85ba:	e743      	b.n	8444 <FlexCAN::message_isr()+0x54>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    85bc:	2300      	movs	r3, #0
    85be:	4622      	mov	r2, r4
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    85c0:	a904      	add	r1, sp, #16
    85c2:	47d8      	blx	fp
    85c4:	9b01      	ldr	r3, [sp, #4]
    85c6:	4318      	orrs	r0, r3
    85c8:	b2c3      	uxtb	r3, r0
    85ca:	9301      	str	r3, [sp, #4]
    85cc:	e79b      	b.n	8506 <FlexCAN::message_isr()+0x116>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    85ce:	2701      	movs	r7, #1
    85d0:	40a7      	lsls	r7, r4
    85d2:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
    85d6:	f105 0680 	add.w	r6, r5, #128	; 0x80
    85da:	f105 0890 	add.w	r8, r5, #144	; 0x90
                    thisListener = listener[listenerPos];
    85de:	f856 0f04 	ldr.w	r0, [r6, #4]!
                    if (thisListener != NULL) {
    85e2:	b138      	cbz	r0, 85f4 <FlexCAN::message_isr()+0x204>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    85e4:	6843      	ldr	r3, [r0, #4]
    85e6:	421f      	tst	r7, r3
    85e8:	d004      	beq.n	85f4 <FlexCAN::message_isr()+0x204>
                            thisListener->txHandler (i, controller);
    85ea:	6803      	ldr	r3, [r0, #0]
    85ec:	4a0c      	ldr	r2, [pc, #48]	; (8620 <FlexCAN::message_isr()+0x230>)
    85ee:	685b      	ldr	r3, [r3, #4]
    85f0:	4293      	cmp	r3, r2
    85f2:	d10d      	bne.n	8610 <FlexCAN::message_isr()+0x220>
                for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    85f4:	45b0      	cmp	r8, r6
    85f6:	d1f2      	bne.n	85de <FlexCAN::message_isr()+0x1ee>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    85f8:	682a      	ldr	r2, [r5, #0]
    85fa:	e709      	b.n	8410 <FlexCAN::message_isr()+0x20>
                    if (stats.enabled == true) {
    85fc:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    8600:	2b00      	cmp	r3, #0
    8602:	d09a      	beq.n	853a <FlexCAN::message_isr()+0x14a>
                        stats.ringRxFramesLost++;
    8604:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    8608:	3301      	adds	r3, #1
    860a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            if (stats.enabled == true) {
    860e:	e783      	b.n	8518 <FlexCAN::message_isr()+0x128>
                            thisListener->txHandler (i, controller);
    8610:	2200      	movs	r2, #0
    8612:	4621      	mov	r1, r4
    8614:	4798      	blx	r3
    8616:	e7ed      	b.n	85f4 <FlexCAN::message_isr()+0x204>
    8618:	00007bf5 	.word	0x00007bf5
    861c:	1ffc0000 	.word	0x1ffc0000
    8620:	00007bf9 	.word	0x00007bf9

00008624 <can0_message_isr>:
    Can0.message_isr ();
    8624:	4801      	ldr	r0, [pc, #4]	; (862c <can0_message_isr+0x8>)
    8626:	f7ff bee3 	b.w	83f0 <FlexCAN::message_isr()>
    862a:	bf00      	nop
    862c:	1fffdad0 	.word	0x1fffdad0

00008630 <can0_bus_off_isr>:
}
    8630:	4770      	bx	lr
    8632:	bf00      	nop

00008634 <can0_error_isr>:
    uint32_t status = FLEXCANb_ESR1 (flexcanBase);
    8634:	4b01      	ldr	r3, [pc, #4]	; (863c <can0_error_isr+0x8>)
    8636:	681b      	ldr	r3, [r3, #0]
    8638:	6a1b      	ldr	r3, [r3, #32]
}
    863a:	4770      	bx	lr
    863c:	1fffdad0 	.word	0x1fffdad0

00008640 <can0_tx_warn_isr>:
    8640:	4770      	bx	lr
    8642:	bf00      	nop

00008644 <can0_rx_warn_isr>:
    8644:	4770      	bx	lr
    8646:	bf00      	nop

00008648 <can0_wakeup_isr>:
    8648:	4770      	bx	lr
    864a:	bf00      	nop

0000864c <_GLOBAL__sub_I_Can0>:
FlexCAN Can0 (0);
    864c:	4801      	ldr	r0, [pc, #4]	; (8654 <_GLOBAL__sub_I_Can0+0x8>)
    864e:	2100      	movs	r1, #0
    8650:	f7ff bad4 	b.w	7bfc <FlexCAN::FlexCAN(unsigned char)>
    8654:	1fffdad0 	.word	0x1fffdad0

00008658 <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8658:	b530      	push	{r4, r5, lr}
    865a:	b083      	sub	sp, #12
#if ADC_DIFF_PAIRS > 0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    865c:	490f      	ldr	r1, [pc, #60]	; (869c <ADC::ADC()+0x44>)
    865e:	9100      	str	r1, [sp, #0]
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8660:	4604      	mov	r4, r0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    8662:	4b0f      	ldr	r3, [pc, #60]	; (86a0 <ADC::ADC()+0x48>)
    8664:	4a0f      	ldr	r2, [pc, #60]	; (86a4 <ADC::ADC()+0x4c>)
    8666:	2100      	movs	r1, #0
    8668:	f000 fa60 	bl	8b2c <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    866c:	f104 0540 	add.w	r5, r4, #64	; 0x40
    8670:	490d      	ldr	r1, [pc, #52]	; (86a8 <ADC::ADC()+0x50>)
    8672:	9100      	str	r1, [sp, #0]
    8674:	4b0d      	ldr	r3, [pc, #52]	; (86ac <ADC::ADC()+0x54>)
    8676:	4a0e      	ldr	r2, [pc, #56]	; (86b0 <ADC::ADC()+0x58>)
    8678:	2101      	movs	r1, #1
    867a:	4628      	mov	r0, r5
    867c:	f000 fa56 	bl	8b2c <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
    8680:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    8682:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    8684:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    8688:	f8c4 4084 	str.w	r4, [r4, #132]	; 0x84
    868c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    8690:	f8c4 408c 	str.w	r4, [r4, #140]	; 0x8c
    8694:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
    8698:	b003      	add	sp, #12
    869a:	bd30      	pop	{r4, r5, pc}
    869c:	4003b000 	.word	0x4003b000
    86a0:	000150ec 	.word	0x000150ec
    86a4:	000150f4 	.word	0x000150f4
    86a8:	400bb000 	.word	0x400bb000
    86ac:	000150f0 	.word	0x000150f0
    86b0:	00015120 	.word	0x00015120

000086b4 <ADC::startContinuous(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->startContinuous(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    86b4:	1c53      	adds	r3, r2, #1
{
    86b6:	b570      	push	{r4, r5, r6, lr}
    86b8:	4604      	mov	r4, r0
    if (adc_num == -1)
    86ba:	d011      	beq.n	86e0 <ADC::startContinuous(unsigned char, signed char)+0x2c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return false; // all others are invalid
        }
    }
    else if (adc_num == 0)
    86bc:	b152      	cbz	r2, 86d4 <ADC::startContinuous(unsigned char, signed char)+0x20>
    { // user wants ADC0
        return adc0->startContinuous(pin);
    }
    else if (adc_num == 1)
    86be:	2a01      	cmp	r2, #1
    86c0:	d029      	beq.n	8716 <ADC::startContinuous(unsigned char, signed char)+0x62>
    { // user wants ADC 1
        return adc1->startContinuous(pin);
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    86c2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    86c6:	8ad3      	ldrh	r3, [r2, #22]
    86c8:	b29b      	uxth	r3, r3
    86ca:	f043 0301 	orr.w	r3, r3, #1
    86ce:	82d3      	strh	r3, [r2, #22]
    return false;
#endif
}
    86d0:	2000      	movs	r0, #0
    86d2:	bd70      	pop	{r4, r5, r6, pc}
    86d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->startContinuous(pin);
    86d8:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    86dc:	f000 baf8 	b.w	8cd0 <ADC_Module::startContinuous(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    86e0:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    86e4:	460d      	mov	r5, r1
    86e6:	f000 fac9 	bl	8c7c <ADC_Module::checkPin(unsigned char)>
        bool adc1Pin = adc1->checkPin(pin);
    86ea:	4629      	mov	r1, r5
        bool adc0Pin = adc0->checkPin(pin);
    86ec:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    86ee:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    86f2:	f000 fac3 	bl	8c7c <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    86f6:	b1a6      	cbz	r6, 8722 <ADC::startContinuous(unsigned char, signed char)+0x6e>
    86f8:	b318      	cbz	r0, 8742 <ADC::startContinuous(unsigned char, signed char)+0x8e>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    86fa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    86fe:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8702:	7d59      	ldrb	r1, [r3, #21]
    8704:	7d42      	ldrb	r2, [r0, #21]
    8706:	4291      	cmp	r1, r2
                return adc1->startContinuous(pin);
    8708:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    870a:	d806      	bhi.n	871a <ADC::startContinuous(unsigned char, signed char)+0x66>
}
    870c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->startContinuous(pin);
    8710:	4618      	mov	r0, r3
    8712:	f000 badd 	b.w	8cd0 <ADC_Module::startContinuous(unsigned char)>
        return adc1->startContinuous(pin);
    8716:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
    871a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->startContinuous(pin);
    871e:	f000 bad7 	b.w	8cd0 <ADC_Module::startContinuous(unsigned char)>
        else if (adc1Pin)
    8722:	b9a8      	cbnz	r0, 8750 <ADC::startContinuous(unsigned char, signed char)+0x9c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
    8724:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    8728:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    872c:	8acb      	ldrh	r3, [r1, #22]
    872e:	b29b      	uxth	r3, r3
    8730:	f043 0304 	orr.w	r3, r3, #4
    8734:	82cb      	strh	r3, [r1, #22]
    8736:	8ad3      	ldrh	r3, [r2, #22]
    8738:	b29b      	uxth	r3, r3
    873a:	f043 0304 	orr.w	r3, r3, #4
    873e:	82d3      	strh	r3, [r2, #22]
            return false; // all others are invalid
    8740:	e7c6      	b.n	86d0 <ADC::startContinuous(unsigned char, signed char)+0x1c>
            return adc0->startContinuous(pin);
    8742:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    8746:	4629      	mov	r1, r5
}
    8748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->startContinuous(pin);
    874c:	f000 bac0 	b.w	8cd0 <ADC_Module::startContinuous(unsigned char)>
            return adc1->startContinuous(pin);
    8750:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8754:	4629      	mov	r1, r5
}
    8756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->startContinuous(pin);
    875a:	f000 bab9 	b.w	8cd0 <ADC_Module::startContinuous(unsigned char)>
    875e:	bf00      	nop

00008760 <ADC_Module::getMaxValue()>:
*
*/
uint32_t ADC_Module::getMaxValue()
{
    return analog_max_val;
}
    8760:	69c0      	ldr	r0, [r0, #28]
    8762:	4770      	bx	lr

00008764 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setConversionSpeed(ADC_CONVERSION_SPEED speed)
{

    if (speed == conversion_speed)
    8764:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    8768:	428b      	cmp	r3, r1
    876a:	d00a      	beq.n	8782 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e>
{
    876c:	b470      	push	{r4, r5, r6}
    //if (calibrating) wait_for_cal();

    bool is_adack = false;
    uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

    switch (speed)
    876e:	2909      	cmp	r1, #9
    8770:	f200 8093 	bhi.w	889a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x136>
    8774:	e8df f001 	tbb	[pc, r1]
    8778:	06612f2f 	.word	0x06612f2f
    877c:	8e817106 	.word	0x8e817106
    8780:	5440      	.short	0x5440
    8782:	4770      	bx	lr
    case ADC_CONVERSION_SPEED::HIGH_SPEED:
#ifdef ADC_TEENSY_4
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
#else
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8784:	6b43      	ldr	r3, [r0, #52]	; 0x34
    *   \return A pointer to the aliased address of the bit of reg
    */
    template <typename T>
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    {
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8786:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    878a:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    878e:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8792:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, bit) = 0;
    }
    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8796:	2400      	movs	r4, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8798:	2201      	movs	r2, #1
    879a:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    879e:	4626      	mov	r6, r4
    87a0:	61dc      	str	r4, [r3, #28]
    87a2:	2500      	movs	r5, #0
    87a4:	f8cc 500c 	str.w	r5, [ip, #12]
        bitband_address(reg, bit) = state;
    }
    template <typename T>
    __attribute__((always_inline)) inline void changeBitFlag(volatile T &reg, T flag, T state)
    {
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    87a8:	601e      	str	r6, [r3, #0]
        if (__builtin_popcount(flag) > 1)
        {
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    87aa:	605d      	str	r5, [r3, #4]
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    87ac:	615c      	str	r4, [r3, #20]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    87ae:	619a      	str	r2, [r3, #24]
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADICLK(3), ADC_CFG1_speed & ADC_CFG1_ADICLK(3));
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADIV(3), ADC_CFG1_speed & ADC_CFG1_ADIV(3));
#endif
    }

    conversion_speed = speed;
    87b0:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    __disable_irq();
    87b4:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    87b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    87b8:	015b      	lsls	r3, r3, #5
    87ba:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    calibrating = 1;
    87be:	2201      	movs	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    87c0:	2100      	movs	r1, #0
    87c2:	7642      	strb	r2, [r0, #25]
    87c4:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    87c8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    87cc:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    87d0:	b662      	cpsie	i
    calibrate();
}
    87d2:	bc70      	pop	{r4, r5, r6}
    87d4:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    87d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    87d8:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    87dc:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    87e0:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    87e4:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    87e8:	2200      	movs	r2, #0
    87ea:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    87ee:	2201      	movs	r2, #1
    87f0:	61da      	str	r2, [r3, #28]
    87f2:	4614      	mov	r4, r2
    87f4:	4616      	mov	r6, r2
    87f6:	e7d4      	b.n	87a2 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    87f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    87fa:	2400      	movs	r4, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    87fc:	015a      	lsls	r2, r3, #5
    87fe:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8802:	f502 7380 	add.w	r3, r2, #256	; 0x100
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8806:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    880a:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    880e:	61dc      	str	r4, [r3, #28]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8810:	2401      	movs	r4, #1
    8812:	60d4      	str	r4, [r2, #12]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8814:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8816:	605c      	str	r4, [r3, #4]
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8818:	601c      	str	r4, [r3, #0]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    881a:	619a      	str	r2, [r3, #24]
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    881c:	615a      	str	r2, [r3, #20]
    }
    881e:	e7c7      	b.n	87b0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x4c>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8820:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8822:	015a      	lsls	r2, r3, #5
    8824:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8828:	f502 7380 	add.w	r3, r2, #256	; 0x100
    882c:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8830:	2401      	movs	r4, #1
    8832:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8834:	2400      	movs	r4, #0
    8836:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8838:	e7ea      	b.n	8810 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    883a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    883c:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8840:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8844:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8848:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    884c:	2600      	movs	r6, #0
    884e:	2201      	movs	r2, #1
    8850:	f8cc 6008 	str.w	r6, [ip, #8]
    8854:	4614      	mov	r4, r2
    8856:	61de      	str	r6, [r3, #28]
    if (is_adack)
    8858:	e7a3      	b.n	87a2 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    885a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    885c:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8860:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8864:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8868:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    886c:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    886e:	2401      	movs	r4, #1
    8870:	f8cc 4008 	str.w	r4, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8874:	4616      	mov	r6, r2
    8876:	61da      	str	r2, [r3, #28]
    if (is_adack)
    8878:	e793      	b.n	87a2 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    887a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    887c:	015a      	lsls	r2, r3, #5
    887e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8882:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8886:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    888a:	2400      	movs	r4, #0
    888c:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    888e:	2401      	movs	r4, #1
    8890:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8892:	e7bd      	b.n	8810 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8894:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8896:	2401      	movs	r4, #1
    8898:	e7b0      	b.n	87fc <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x98>
    889a:	8ac3      	ldrh	r3, [r0, #22]
    889c:	b29b      	uxth	r3, r3
    889e:	f043 0301 	orr.w	r3, r3, #1
    88a2:	82c3      	strh	r3, [r0, #22]
    88a4:	e795      	b.n	87d2 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x6e>
    88a6:	bf00      	nop

000088a8 <ADC_Module::wait_for_cal()>:
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    88a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    88aa:	015b      	lsls	r3, r3, #5
    88ac:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
{
    88b0:	b510      	push	{r4, lr}
        return (volatile bool)bitband_address(reg, bit);
    }
    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    88b2:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    88b6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    88ba:	4604      	mov	r4, r0
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    88bc:	b152      	cbz	r2, 88d4 <ADC_Module::wait_for_cal()+0x2c>
        yield();
    88be:	f003 fbef 	bl	c0a0 <yield>
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    88c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    88c4:	015b      	lsls	r3, r3, #5
    88c6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    88ca:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    88ce:	69da      	ldr	r2, [r3, #28]
    88d0:	2a00      	cmp	r2, #0
    88d2:	d1f4      	bne.n	88be <ADC_Module::wait_for_cal()+0x16>
    88d4:	699b      	ldr	r3, [r3, #24]
    if (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CALF))
    88d6:	b123      	cbz	r3, 88e2 <ADC_Module::wait_for_cal()+0x3a>
    88d8:	8ae3      	ldrh	r3, [r4, #22]
    88da:	b29b      	uxth	r3, r3
    88dc:	f043 0302 	orr.w	r3, r3, #2
    88e0:	82e3      	strh	r3, [r4, #22]
    __disable_irq();
    88e2:	b672      	cpsid	i
    if (calibrating)
    88e4:	7e63      	ldrb	r3, [r4, #25]
    88e6:	b303      	cbz	r3, 892a <ADC_Module::wait_for_cal()+0x82>
        sum = adc_regs.CLPS + adc_regs.CLP4 + adc_regs.CLP3 + adc_regs.CLP2 + adc_regs.CLP1 + adc_regs.CLP0;
    88e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    88ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
    88ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    88ee:	440b      	add	r3, r1
    88f0:	6c11      	ldr	r1, [r2, #64]	; 0x40
    88f2:	6c50      	ldr	r0, [r2, #68]	; 0x44
    88f4:	440b      	add	r3, r1
    88f6:	6c91      	ldr	r1, [r2, #72]	; 0x48
    88f8:	4403      	add	r3, r0
    88fa:	440b      	add	r3, r1
    88fc:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    88fe:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    8900:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.PG = sum;
    8904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8908:	62d3      	str	r3, [r2, #44]	; 0x2c
        sum = adc_regs.CLMS + adc_regs.CLM4 + adc_regs.CLM3 + adc_regs.CLM2 + adc_regs.CLM1 + adc_regs.CLM0;
    890a:	6d93      	ldr	r3, [r2, #88]	; 0x58
    890c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    890e:	440b      	add	r3, r1
    8910:	6e11      	ldr	r1, [r2, #96]	; 0x60
    8912:	6e50      	ldr	r0, [r2, #100]	; 0x64
    8914:	440b      	add	r3, r1
    8916:	6e91      	ldr	r1, [r2, #104]	; 0x68
    8918:	4403      	add	r3, r0
    891a:	440b      	add	r3, r1
    891c:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    891e:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    8920:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.MG = sum;
    8924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8928:	6313      	str	r3, [r2, #48]	; 0x30
    __enable_irq();
    892a:	b662      	cpsie	i
    if (init_calib)
    892c:	7ea3      	ldrb	r3, [r4, #26]
    calibrating = 0;
    892e:	2200      	movs	r2, #0
    8930:	7662      	strb	r2, [r4, #25]
    if (init_calib)
    8932:	b903      	cbnz	r3, 8936 <ADC_Module::wait_for_cal()+0x8e>
}
    8934:	bd10      	pop	{r4, pc}
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    8936:	2102      	movs	r1, #2
    8938:	4620      	mov	r0, r4
    893a:	f7ff ff13 	bl	8764 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setSamplingSpeed(ADC_SAMPLING_SPEED speed)
{
    if (calibrating)
    893e:	7e63      	ldrb	r3, [r4, #25]
    8940:	bb03      	cbnz	r3, 8984 <ADC_Module::wait_for_cal()+0xdc>
    case ADC_SAMPLING_SPEED::LOW_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
        atomic::changeBitFlag(adc_regs.CFG2, ADC_CFG2_ADLSTS(3), ADC_CFG2_ADLSTS(1)); // high sampling time (+16 ADCK)
        break;
    case ADC_SAMPLING_SPEED::MED_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8942:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8944:	0159      	lsls	r1, r3, #5
    8946:	f101 4284 	add.w	r2, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    894a:	2001      	movs	r0, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    894c:	2100      	movs	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    894e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8952:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8956:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
*
*/
void ADC_Module::setAveraging(uint8_t num)
{

    if (calibrating)
    895a:	7e62      	ldrb	r2, [r4, #25]
    sampling_speed = speed;
    895c:	2102      	movs	r1, #2
    895e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if (calibrating)
    8962:	b992      	cbnz	r2, 898a <ADC_Module::wait_for_cal()+0xe2>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8964:	015b      	lsls	r3, r3, #5
    8966:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    896a:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    896c:	2001      	movs	r0, #1
#else
            atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGS(3));
#endif
        }
    }
    analog_num_average = num;
    896e:	2104      	movs	r1, #4
    8970:	f8c3 0488 	str.w	r0, [r3, #1160]	; 0x488
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8974:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8978:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    897c:	f884 1020 	strb.w	r1, [r4, #32]
        init_calib = 0; // clear
    8980:	76a2      	strb	r2, [r4, #26]
}
    8982:	bd10      	pop	{r4, pc}
        wait_for_cal();
    8984:	f7ff ff90 	bl	88a8 <ADC_Module::wait_for_cal()>
    8988:	e7db      	b.n	8942 <ADC_Module::wait_for_cal()+0x9a>
        wait_for_cal();
    898a:	4620      	mov	r0, r4
    898c:	f7ff ff8c 	bl	88a8 <ADC_Module::wait_for_cal()>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8990:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8992:	e7e7      	b.n	8964 <ADC_Module::wait_for_cal()+0xbc>

00008994 <ADC_Module::setResolution(unsigned char)>:
{
    8994:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    8996:	7ec3      	ldrb	r3, [r0, #27]
    8998:	428b      	cmp	r3, r1
    899a:	d012      	beq.n	89c2 <ADC_Module::setResolution(unsigned char)+0x2e>
    if (calibrating)
    899c:	7e43      	ldrb	r3, [r0, #25]
    899e:	4604      	mov	r4, r0
    89a0:	460d      	mov	r5, r1
    89a2:	bb0b      	cbnz	r3, 89e8 <ADC_Module::setResolution(unsigned char)+0x54>
    if (bits <= 9)
    89a4:	2d09      	cmp	r5, #9
    89a6:	d80d      	bhi.n	89c4 <ADC_Module::setResolution(unsigned char)+0x30>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    89a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    89aa:	015b      	lsls	r3, r3, #5
    89ac:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    89b0:	2000      	movs	r0, #0
    89b2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    89b6:	21ff      	movs	r1, #255	; 0xff
        config = 8;
    89b8:	2208      	movs	r2, #8
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    89ba:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    89be:	61e1      	str	r1, [r4, #28]
    analog_res_bits = config;
    89c0:	76e2      	strb	r2, [r4, #27]
}
    89c2:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits <= 11)
    89c4:	2d0b      	cmp	r5, #11
    89c6:	d912      	bls.n	89ee <ADC_Module::setResolution(unsigned char)+0x5a>
    else if (bits <= 13)
    89c8:	2d0d      	cmp	r5, #13
    89ca:	d81e      	bhi.n	8a0a <ADC_Module::setResolution(unsigned char)+0x76>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(1));
    89cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    89ce:	015b      	lsls	r3, r3, #5
    89d0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    89d4:	2200      	movs	r2, #0
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    89d6:	2001      	movs	r0, #1
    89d8:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    89dc:	f640 71ff 	movw	r1, #4095	; 0xfff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    89e0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 12;
    89e4:	220c      	movs	r2, #12
    89e6:	e7ea      	b.n	89be <ADC_Module::setResolution(unsigned char)+0x2a>
        wait_for_cal();
    89e8:	f7ff ff5e 	bl	88a8 <ADC_Module::wait_for_cal()>
    89ec:	e7da      	b.n	89a4 <ADC_Module::setResolution(unsigned char)+0x10>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(2));
    89ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    89f0:	015b      	lsls	r3, r3, #5
    89f2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    89f6:	2201      	movs	r2, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    89f8:	2000      	movs	r0, #0
    89fa:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    89fe:	f240 31ff 	movw	r1, #1023	; 0x3ff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8a02:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 10;
    8a06:	220a      	movs	r2, #10
    8a08:	e7d9      	b.n	89be <ADC_Module::setResolution(unsigned char)+0x2a>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    8a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a0c:	015b      	lsls	r3, r3, #5
    8a0e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8a12:	2001      	movs	r0, #1
    8a14:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8a18:	f64f 71ff 	movw	r1, #65535	; 0xffff
        config = 16;
    8a1c:	2210      	movs	r2, #16
    8a1e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 65535;
    8a22:	e7cc      	b.n	89be <ADC_Module::setResolution(unsigned char)+0x2a>

00008a24 <ADC_Module::analog_init()>:
{
    8a24:	b538      	push	{r3, r4, r5, lr}
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
        }
#else
        if (ADC_num == 0)
    8a26:	7e03      	ldrb	r3, [r0, #24]
        {
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    8a28:	4a3d      	ldr	r2, [pc, #244]	; (8b20 <ADC_Module::analog_init()+0xfc>)
    8a2a:	4604      	mov	r4, r0
        if (ADC_num == 0)
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d16a      	bne.n	8b06 <ADC_Module::analog_init()+0xe2>
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    8a30:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    8a32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    8a36:	63d3      	str	r3, [r2, #60]	; 0x3c
    atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    8a38:	6b62      	ldr	r2, [r4, #52]	; 0x34
    //! Stops the internal reference
    /** This is called automatically by ADC_Module::setReference(ref) when ref is any other than REF_1V2
    */
    __attribute__((always_inline)) inline void stop()
    {
        VREF_SC = 0;
    8a3a:	483a      	ldr	r0, [pc, #232]	; (8b24 <ADC_Module::analog_init()+0x100>)
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a3c:	493a      	ldr	r1, [pc, #232]	; (8b28 <ADC_Module::analog_init()+0x104>)
    pga_value = 1;
    8a3e:	f240 4501 	movw	r5, #1025	; 0x401
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a42:	0152      	lsls	r2, r2, #5
    8a44:	8465      	strh	r5, [r4, #34]	; 0x22
    8a46:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    8a4a:	2504      	movs	r5, #4
    analog_res_bits = 0;
    8a4c:	2300      	movs	r3, #0
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    8a4e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8a52:	2501      	movs	r5, #1
    analog_res_bits = 0;
    8a54:	76e3      	strb	r3, [r4, #27]
    analog_max_val = 0;
    8a56:	61e3      	str	r3, [r4, #28]
    analog_num_average = 0;
    8a58:	f884 3020 	strb.w	r3, [r4, #32]
    interrupts_enabled = false;
    8a5c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    calibrating = 0;
    8a60:	7663      	strb	r3, [r4, #25]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    8a62:	82e3      	strh	r3, [r4, #22]
    num_measurements = 0;
    8a64:	7563      	strb	r3, [r4, #21]
    8a66:	f8c2 5190 	str.w	r5, [r2, #400]	; 0x190
    8a6a:	7043      	strb	r3, [r0, #1]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a6c:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
        atomic::clearBitFlag(adc_regs.SC2, ADC_SC2_REFSEL(1));
    8a70:	6b62      	ldr	r2, [r4, #52]	; 0x34
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    8a72:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a76:	0152      	lsls	r2, r2, #5
    8a78:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a7c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    __disable_irq();
    8a80:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8a82:	6b62      	ldr	r2, [r4, #52]	; 0x34
    calibrating = 1;
    8a84:	7665      	strb	r5, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a86:	0152      	lsls	r2, r2, #5
    8a88:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a8c:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8a90:	f8c2 5498 	str.w	r5, [r2, #1176]	; 0x498
    8a94:	f8c2 549c 	str.w	r5, [r2, #1180]	; 0x49c
    __enable_irq();
    8a98:	b662      	cpsie	i
    setResolution(10);
    8a9a:	210a      	movs	r1, #10
    8a9c:	4620      	mov	r0, r4
    8a9e:	f7ff ff79 	bl	8994 <ADC_Module::setResolution(unsigned char)>
    if (calibrating)
    8aa2:	7e63      	ldrb	r3, [r4, #25]
    init_calib = 1;
    8aa4:	76a5      	strb	r5, [r4, #26]
    if (calibrating)
    8aa6:	bb9b      	cbnz	r3, 8b10 <ADC_Module::analog_init()+0xec>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8aa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8aaa:	015b      	lsls	r3, r3, #5
    8aac:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ab0:	2101      	movs	r1, #1
    analog_num_average = num;
    8ab2:	2220      	movs	r2, #32
    8ab4:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    8ab8:	4620      	mov	r0, r4
    8aba:	f8c3 1484 	str.w	r1, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8abe:	f8c3 1480 	str.w	r1, [r3, #1152]	; 0x480
    analog_num_average = num;
    8ac2:	f884 2020 	strb.w	r2, [r4, #32]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    8ac6:	f7ff fe4d 	bl	8764 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    if (calibrating)
    8aca:	7e63      	ldrb	r3, [r4, #25]
    8acc:	bb23      	cbnz	r3, 8b18 <ADC_Module::analog_init()+0xf4>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8ace:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8ad0:	0159      	lsls	r1, r3, #5
    8ad2:	f101 4384 	add.w	r3, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ad6:	2201      	movs	r2, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8ad8:	2000      	movs	r0, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ada:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8ade:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8ae2:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    sampling_speed = speed;
    8ae6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __disable_irq();
    8aea:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8aec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    calibrating = 1;
    8aee:	7662      	strb	r2, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8af0:	015b      	lsls	r3, r3, #5
    8af2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8af6:	f8c3 049c 	str.w	r0, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8afa:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    8afe:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    8b02:	b662      	cpsie	i
}
    8b04:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
            SIM_SCGC3 |= SIM_SCGC3_ADC1;
    8b06:	6b13      	ldr	r3, [r2, #48]	; 0x30
    8b08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    8b0c:	6313      	str	r3, [r2, #48]	; 0x30
    8b0e:	e793      	b.n	8a38 <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    8b10:	4620      	mov	r0, r4
    8b12:	f7ff fec9 	bl	88a8 <ADC_Module::wait_for_cal()>
    8b16:	e7c7      	b.n	8aa8 <ADC_Module::analog_init()+0x84>
        wait_for_cal();
    8b18:	f7ff fec6 	bl	88a8 <ADC_Module::wait_for_cal()>
    8b1c:	e7d7      	b.n	8ace <ADC_Module::analog_init()+0xaa>
    8b1e:	bf00      	nop
    8b20:	40048000 	.word	0x40048000
    8b24:	40074000 	.word	0x40074000
    8b28:	42fa0000 	.word	0x42fa0000

00008b2c <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>:
ADC_Module::ADC_Module(uint8_t ADC_number,
    8b2c:	b510      	push	{r4, lr}
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8b2e:	2900      	cmp	r1, #0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    8b30:	6282      	str	r2, [r0, #40]	; 0x28
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8b32:	4a09      	ldr	r2, [pc, #36]	; (8b58 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x2c>)
                                                 diff_table(a_diff_table)
    8b34:	6303      	str	r3, [r0, #48]	; 0x30
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8b36:	bf0c      	ite	eq
    8b38:	2339      	moveq	r3, #57	; 0x39
    8b3a:	233a      	movne	r3, #58	; 0x3a
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    8b3c:	7601      	strb	r1, [r0, #24]
                                                 IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC1 : IRQ_NUMBER_t::IRQ_ADC0)
    8b3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8b42:	4906      	ldr	r1, [pc, #24]	; (8b5c <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x30>)
ADC_Module::ADC_Module(uint8_t ADC_number,
    8b44:	9b02      	ldr	r3, [sp, #8]
                                                 adc_regs(a_adc_regs)
    8b46:	6343      	str	r3, [r0, #52]	; 0x34
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8b48:	bf18      	it	ne
    8b4a:	4611      	movne	r1, r2
ADC_Module::ADC_Module(uint8_t ADC_number,
    8b4c:	4604      	mov	r4, r0
    8b4e:	6381      	str	r1, [r0, #56]	; 0x38
    analog_init();
    8b50:	f7ff ff68 	bl	8a24 <ADC_Module::analog_init()>
}
    8b54:	4620      	mov	r0, r4
    8b56:	bd10      	pop	{r4, pc}
    8b58:	40036038 	.word	0x40036038
    8b5c:	40036010 	.word	0x40036010

00008b60 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    8b60:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    8b62:	7e43      	ldrb	r3, [r0, #25]
{
    8b64:	4605      	mov	r5, r0
    8b66:	460c      	mov	r4, r1
    if (calibrating)
    8b68:	b9a3      	cbnz	r3, 8b94 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x34>
    switch (speed)
    8b6a:	2c04      	cmp	r4, #4
    8b6c:	d80f      	bhi.n	8b8e <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x2e>
    8b6e:	e8df f004 	tbb	[pc, r4]
    8b72:	2d1e      	.short	0x2d1e
    8b74:	033c      	.short	0x033c
    8b76:	14          	.byte	0x14
    8b77:	00          	.byte	0x00
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);    // long sampling time enable
    8b78:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b7a:	015a      	lsls	r2, r3, #5
    8b7c:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b80:	2101      	movs	r1, #1
    8b82:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    8b86:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8b8a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    8b8e:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8b92:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    8b94:	f7ff fe88 	bl	88a8 <ADC_Module::wait_for_cal()>
    8b98:	e7e7      	b.n	8b6a <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP); // shortest sampling time
    8b9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b9c:	015b      	lsls	r3, r3, #5
    8b9e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ba2:	2200      	movs	r2, #0
    8ba4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    sampling_speed = speed;
    8ba8:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8bac:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);      // long sampling time enable
    8bae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8bb0:	015a      	lsls	r2, r3, #5
    8bb2:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8bb6:	2101      	movs	r1, #1
    8bb8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8bbc:	2100      	movs	r1, #0
    8bbe:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8bc2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    8bc6:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8bca:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8bcc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8bce:	015a      	lsls	r2, r3, #5
    8bd0:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8bd4:	2101      	movs	r1, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8bd6:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8bd8:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8bdc:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8be0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    sampling_speed = speed;
    8be4:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8be8:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8bea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8bec:	015a      	lsls	r2, r3, #5
    8bee:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8bf2:	2101      	movs	r1, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8bf4:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8bf6:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8bfa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8bfe:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    sampling_speed = speed;
    8c02:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8c06:	bd38      	pop	{r3, r4, r5, pc}

00008c08 <ADC_Module::setAveraging(unsigned char)>:
{
    8c08:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    8c0a:	7e43      	ldrb	r3, [r0, #25]
{
    8c0c:	4604      	mov	r4, r0
    8c0e:	460d      	mov	r5, r1
    if (calibrating)
    8c10:	bb2b      	cbnz	r3, 8c5e <ADC_Module::setAveraging(unsigned char)+0x56>
    if (num <= 1)
    8c12:	2d01      	cmp	r5, #1
        atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8c14:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (num <= 1)
    8c16:	d918      	bls.n	8c4a <ADC_Module::setAveraging(unsigned char)+0x42>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c18:	015b      	lsls	r3, r3, #5
    8c1a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8c1e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8c22:	2101      	movs	r1, #1
        if (num <= 4)
    8c24:	2d04      	cmp	r5, #4
    8c26:	6099      	str	r1, [r3, #8]
    8c28:	d806      	bhi.n	8c38 <ADC_Module::setAveraging(unsigned char)+0x30>
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8c2a:	2100      	movs	r1, #0
    8c2c:	6059      	str	r1, [r3, #4]
            num = 4;
    8c2e:	2204      	movs	r2, #4
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8c30:	6019      	str	r1, [r3, #0]
    analog_num_average = num;
    8c32:	f884 2020 	strb.w	r2, [r4, #32]
}
    8c36:	bd38      	pop	{r3, r4, r5, pc}
        else if (num <= 8)
    8c38:	2d08      	cmp	r5, #8
    8c3a:	d913      	bls.n	8c64 <ADC_Module::setAveraging(unsigned char)+0x5c>
        else if (num <= 16)
    8c3c:	2d10      	cmp	r5, #16
    8c3e:	d818      	bhi.n	8c72 <ADC_Module::setAveraging(unsigned char)+0x6a>
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8c40:	2200      	movs	r2, #0
    8c42:	601a      	str	r2, [r3, #0]
            num = 16;
    8c44:	2210      	movs	r2, #16
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8c46:	6059      	str	r1, [r3, #4]
    }
    8c48:	e7f3      	b.n	8c32 <ADC_Module::setAveraging(unsigned char)+0x2a>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c4a:	015b      	lsls	r3, r3, #5
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8c4c:	2100      	movs	r1, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c4e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        num = 0;
    8c52:	460a      	mov	r2, r1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8c54:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    analog_num_average = num;
    8c58:	f884 2020 	strb.w	r2, [r4, #32]
}
    8c5c:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    8c5e:	f7ff fe23 	bl	88a8 <ADC_Module::wait_for_cal()>
    8c62:	e7d6      	b.n	8c12 <ADC_Module::setAveraging(unsigned char)+0xa>
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8c64:	2000      	movs	r0, #0
            num = 8;
    8c66:	2208      	movs	r2, #8
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8c68:	6019      	str	r1, [r3, #0]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8c6a:	6058      	str	r0, [r3, #4]
    analog_num_average = num;
    8c6c:	f884 2020 	strb.w	r2, [r4, #32]
}
    8c70:	bd38      	pop	{r3, r4, r5, pc}
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8c72:	6059      	str	r1, [r3, #4]
            num = 32;
    8c74:	2220      	movs	r2, #32
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8c76:	6019      	str	r1, [r3, #0]
    }
    8c78:	e7db      	b.n	8c32 <ADC_Module::setAveraging(unsigned char)+0x2a>
    8c7a:	bf00      	nop

00008c7c <ADC_Module::checkPin(unsigned char)>:

// check whether the pin is a valid analog pin
bool ADC_Module::checkPin(uint8_t pin)
{

    if (pin > ADC_MAX_PIN)
    8c7c:	292b      	cmp	r1, #43	; 0x2b
    8c7e:	d807      	bhi.n	8c90 <ADC_Module::checkPin(unsigned char)+0x14>
    {
        return false; // all others are invalid
    }

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8c80:	6a83      	ldr	r3, [r0, #40]	; 0x28

    // check for valid pin
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    8c82:	5c58      	ldrb	r0, [r3, r1]
    8c84:	f000 001f 	and.w	r0, r0, #31
    8c88:	381f      	subs	r0, #31
    8c8a:	bf18      	it	ne
    8c8c:	2001      	movne	r0, #1
    8c8e:	4770      	bx	lr
        return false; // all others are invalid
    8c90:	2000      	movs	r0, #0
    {
        return false; // all others are invalid
    }

    return true;
}
    8c92:	4770      	bx	lr

00008c94 <ADC_Module::startReadFast(unsigned char)>:
// It doesn't change the continuous conversion bit
void ADC_Module::startReadFast(uint8_t pin)
{

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8c94:	6a83      	ldr	r3, [r0, #40]	; 0x28

#ifdef ADC_TEENSY_4
// Teensy 4 has no a or b channels
#else
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8c96:	565a      	ldrsb	r2, [r3, r1]
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8c98:	5c5b      	ldrb	r3, [r3, r1]
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8c9a:	2a00      	cmp	r2, #0
    { // mux a
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    8c9c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c9e:	ea4f 1242 	mov.w	r2, r2, lsl #5
    8ca2:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ca6:	bfb4      	ite	lt
    8ca8:	2100      	movlt	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8caa:	2101      	movge	r1, #1
    8cac:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    }
#endif

    // select pin for single-ended mode and start conversion, enable interrupts if requested
    __disable_irq();
    8cb0:	b672      	cpsid	i
#ifdef ADC_TEENSY_4
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
#else
    adc_regs.SC1A = (sc1a_pin & ADC_SC1A_CHANNELS) + atomic::getBitFlag(adc_regs.SC1A, ADC_SC1_AIEN) * ADC_SC1_AIEN;
    8cb2:	6b41      	ldr	r1, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8cb4:	014a      	lsls	r2, r1, #5
    8cb6:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8cba:	f003 031f 	and.w	r3, r3, #31
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8cbe:	6992      	ldr	r2, [r2, #24]
    8cc0:	3a00      	subs	r2, #0
    8cc2:	bf18      	it	ne
    8cc4:	2201      	movne	r2, #1
    8cc6:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    8cca:	600b      	str	r3, [r1, #0]
#endif
    __enable_irq();
    8ccc:	b662      	cpsie	i
}
    8cce:	4770      	bx	lr

00008cd0 <ADC_Module::startContinuous(unsigned char)>:
/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool ADC_Module::startContinuous(uint8_t pin)
{
    8cd0:	b550      	push	{r4, r6, lr}
    if (pin > ADC_MAX_PIN)
    8cd2:	292b      	cmp	r1, #43	; 0x2b
{
    8cd4:	b083      	sub	sp, #12
    8cd6:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    8cd8:	d817      	bhi.n	8d0a <ADC_Module::startContinuous(unsigned char)+0x3a>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8cda:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    8cdc:	5c5b      	ldrb	r3, [r3, r1]
    8cde:	f003 031f 	and.w	r3, r3, #31
    8ce2:	2b1f      	cmp	r3, #31
    8ce4:	d011      	beq.n	8d0a <ADC_Module::startContinuous(unsigned char)+0x3a>
        fail_flag |= ADC_ERROR::WRONG_PIN;
        return false;
    }

    // check for calibration before setting channels,
    if (calibrating)
    8ce6:	7e43      	ldrb	r3, [r0, #25]
    8ce8:	b9bb      	cbnz	r3, 8d1a <ADC_Module::startContinuous(unsigned char)+0x4a>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_ADCO);
    8cea:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wait_for_cal();

    // increase the counter of measurements
    num_measurements++;
    8cec:	7d62      	ldrb	r2, [r4, #21]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8cee:	015b      	lsls	r3, r3, #5
    8cf0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8cf4:	3201      	adds	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8cf6:	2601      	movs	r6, #1
    8cf8:	7562      	strb	r2, [r4, #21]

    // set continuous conversion flag
    continuousMode();

    startReadFast(pin);
    8cfa:	4620      	mov	r0, r4
    8cfc:	f8c3 648c 	str.w	r6, [r3, #1164]	; 0x48c
    8d00:	f7ff ffc8 	bl	8c94 <ADC_Module::startReadFast(unsigned char)>

    return true;
    8d04:	4630      	mov	r0, r6
}
    8d06:	b003      	add	sp, #12
    8d08:	bd50      	pop	{r4, r6, pc}
    8d0a:	8ae3      	ldrh	r3, [r4, #22]
    8d0c:	b29b      	uxth	r3, r3
        return false;
    8d0e:	2000      	movs	r0, #0
    8d10:	f043 0304 	orr.w	r3, r3, #4
    8d14:	82e3      	strh	r3, [r4, #22]
}
    8d16:	b003      	add	sp, #12
    8d18:	bd50      	pop	{r4, r6, pc}
    8d1a:	9101      	str	r1, [sp, #4]
        wait_for_cal();
    8d1c:	f7ff fdc4 	bl	88a8 <ADC_Module::wait_for_cal()>
    8d20:	9901      	ldr	r1, [sp, #4]
    8d22:	e7e2      	b.n	8cea <ADC_Module::startContinuous(unsigned char)+0x1a>

00008d24 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    8d24:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    8d28:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    8d2a:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    8d2e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    8d30:	d101      	bne.n	8d36 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    8d32:	6883      	ldr	r3, [r0, #8]
    8d34:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    8d36:	f000 b941 	b.w	8fbc <EventResponder::triggerEventNotImmediate()>
    8d3a:	bf00      	nop

00008d3c <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    8d3c:	b470      	push	{r4, r5, r6}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    8d3e:	6b01      	ldr	r1, [r0, #48]	; 0x30
    8d40:	4a4a      	ldr	r2, [pc, #296]	; (8e6c <SPIClass::dma_rxisr()+0x130>)
    8d42:	7909      	ldrb	r1, [r1, #4]
    8d44:	77d1      	strb	r1, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    8d46:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    8d48:	7909      	ldrb	r1, [r1, #4]
    8d4a:	7711      	strb	r1, [r2, #28]
    8d4c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    8d4e:	7909      	ldrb	r1, [r1, #4]
    8d50:	7711      	strb	r1, [r2, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    8d52:	6a82      	ldr	r2, [r0, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
    8d54:	4603      	mov	r3, r0
	if (_dma_count_remaining) {
    8d56:	b32a      	cbz	r2, 8da4 <SPIClass::dma_rxisr()+0x68>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    8d58:	6841      	ldr	r1, [r0, #4]
    8d5a:	68c9      	ldr	r1, [r1, #12]
    8d5c:	428a      	cmp	r2, r1
    8d5e:	d943      	bls.n	8de8 <SPIClass::dma_rxisr()+0xac>
			_dma_count_remaining -= hardware().max_dma_count;
    8d60:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    8d62:	6b00      	ldr	r0, [r0, #48]	; 0x30
			_dma_count_remaining -= hardware().max_dma_count;
    8d64:	1a52      	subs	r2, r2, r1
    8d66:	6821      	ldr	r1, [r4, #0]
    8d68:	629a      	str	r2, [r3, #40]	; 0x28
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8d6a:	680d      	ldr	r5, [r1, #0]
    8d6c:	f103 0424 	add.w	r4, r3, #36	; 0x24
    8d70:	42a5      	cmp	r5, r4
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8d72:	f04f 0201 	mov.w	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8d76:	d059      	beq.n	8e2c <SPIClass::dma_rxisr()+0xf0>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8d78:	681c      	ldr	r4, [r3, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8d7a:	68e5      	ldr	r5, [r4, #12]
    8d7c:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8d80:	680d      	ldr	r5, [r1, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8d82:	d129      	bne.n	8dd8 <SPIClass::dma_rxisr()+0x9c>
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    8d84:	782d      	ldrb	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    8d86:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8d88:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    8d8c:	3601      	adds	r6, #1
    8d8e:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8d90:	6365      	str	r5, [r4, #52]	; 0x34
		DMA_SERQ = channel;
    8d92:	4936      	ldr	r1, [pc, #216]	; (8e6c <SPIClass::dma_rxisr()+0x130>)
    8d94:	7900      	ldrb	r0, [r0, #4]
    8d96:	76c8      	strb	r0, [r1, #27]
			}
		}
		_dmaRX->enable();
		if (should_reenable_tx)
    8d98:	b112      	cbz	r2, 8da0 <SPIClass::dma_rxisr()+0x64>
    8d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8d9c:	791b      	ldrb	r3, [r3, #4]
    8d9e:	76cb      	strb	r3, [r1, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    8da0:	bc70      	pop	{r4, r5, r6}
    8da2:	4770      	bx	lr
    8da4:	6801      	ldr	r1, [r0, #0]
		port().SR = 0xFF0F0000;
    8da6:	4c32      	ldr	r4, [pc, #200]	; (8e70 <SPIClass::dma_rxisr()+0x134>)
		_dma_event_responder->triggerEvent();
    8da8:	6b40      	ldr	r0, [r0, #52]	; 0x34
		port().RSER = 0;
    8daa:	630a      	str	r2, [r1, #48]	; 0x30
		port().SR = 0xFF0F0000;
    8dac:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    8dae:	68cc      	ldr	r4, [r1, #12]
    8db0:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
    8db4:	60cc      	str	r4, [r1, #12]
		_dma_event_responder->triggerEvent();
    8db6:	6804      	ldr	r4, [r0, #0]
    8db8:	492e      	ldr	r1, [pc, #184]	; (8e74 <SPIClass::dma_rxisr()+0x138>)
    8dba:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    8dbc:	f04f 0c03 	mov.w	ip, #3
    8dc0:	428c      	cmp	r4, r1
    8dc2:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
		_dma_event_responder->triggerEvent();
    8dc6:	d139      	bne.n	8e3c <SPIClass::dma_rxisr()+0x100>
		if (_type == EventTypeImmediate) {
    8dc8:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    8dca:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    8dcc:	2b02      	cmp	r3, #2
		_data = data;
    8dce:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    8dd0:	d138      	bne.n	8e44 <SPIClass::dma_rxisr()+0x108>
}
    8dd2:	bc70      	pop	{r4, r5, r6}
			(*_function)(*this);
    8dd4:	6883      	ldr	r3, [r0, #8]
    8dd6:	4718      	bx	r3
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8dd8:	882d      	ldrh	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    8dda:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8ddc:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    8de0:	3602      	adds	r6, #2
    8de2:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8de4:	6365      	str	r5, [r4, #52]	; 0x34
    8de6:	e7d4      	b.n	8d92 <SPIClass::dma_rxisr()+0x56>
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    8de8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    8dea:	6809      	ldr	r1, [r1, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8dec:	8bcc      	ldrh	r4, [r1, #30]
    8dee:	0426      	lsls	r6, r4, #16
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    8df0:	f102 30ff 	add.w	r0, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8df4:	d431      	bmi.n	8e5a <SPIClass::dma_rxisr()+0x11e>
		tcd->BITER = len & 0x7fff;
    8df6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    8dfa:	83c8      	strh	r0, [r1, #30]
	tcd->CITER = tcd->BITER; 
    8dfc:	8bcc      	ldrh	r4, [r1, #30]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    8dfe:	6b18      	ldr	r0, [r3, #48]	; 0x30
	tcd->CITER = tcd->BITER; 
    8e00:	b2a4      	uxth	r4, r4
    8e02:	82cc      	strh	r4, [r1, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    8e04:	6804      	ldr	r4, [r0, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8e06:	8be5      	ldrh	r5, [r4, #30]
    8e08:	042d      	lsls	r5, r5, #16
    8e0a:	d41e      	bmi.n	8e4a <SPIClass::dma_rxisr()+0x10e>
		tcd->BITER = len & 0x7fff;
    8e0c:	f3c2 050e 	ubfx	r5, r2, #0, #15
    8e10:	83e5      	strh	r5, [r4, #30]
	tcd->CITER = tcd->BITER; 
    8e12:	8be5      	ldrh	r5, [r4, #30]
    8e14:	b2ad      	uxth	r5, r5
    8e16:	82e5      	strh	r5, [r4, #22]
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8e18:	680d      	ldr	r5, [r1, #0]
			_dma_count_remaining = 0;
    8e1a:	2400      	movs	r4, #0
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8e1c:	3a01      	subs	r2, #1
			_dma_count_remaining = 0;
    8e1e:	629c      	str	r4, [r3, #40]	; 0x28
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8e20:	f103 0424 	add.w	r4, r3, #36	; 0x24
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8e24:	bf18      	it	ne
    8e26:	2201      	movne	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8e28:	42a5      	cmp	r5, r4
    8e2a:	d1a5      	bne.n	8d78 <SPIClass::dma_rxisr()+0x3c>
    8e2c:	6819      	ldr	r1, [r3, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8e2e:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8e30:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    8e34:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    8e38:	634c      	str	r4, [r1, #52]	; 0x34
    8e3a:	e7aa      	b.n	8d92 <SPIClass::dma_rxisr()+0x56>
		_dma_event_responder->triggerEvent();
    8e3c:	4623      	mov	r3, r4
    8e3e:	4611      	mov	r1, r2
}
    8e40:	bc70      	pop	{r4, r5, r6}
		_dma_event_responder->triggerEvent();
    8e42:	4718      	bx	r3
}
    8e44:	bc70      	pop	{r4, r5, r6}
			triggerEventNotImmediate();
    8e46:	f000 b8b9 	b.w	8fbc <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    8e4a:	8be5      	ldrh	r5, [r4, #30]
    8e4c:	f3c2 0608 	ubfx	r6, r2, #0, #9
    8e50:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
    8e54:	4335      	orrs	r5, r6
    8e56:	83e5      	strh	r5, [r4, #30]
    8e58:	e7db      	b.n	8e12 <SPIClass::dma_rxisr()+0xd6>
    8e5a:	8bcc      	ldrh	r4, [r1, #30]
    8e5c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8e60:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    8e64:	4320      	orrs	r0, r4
    8e66:	83c8      	strh	r0, [r1, #30]
    8e68:	e7c8      	b.n	8dfc <SPIClass::dma_rxisr()+0xc0>
    8e6a:	bf00      	nop
    8e6c:	40008000 	.word	0x40008000
    8e70:	ff0f0000 	.word	0xff0f0000
    8e74:	00008d25 	.word	0x00008d25

00008e78 <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8e78:	b508      	push	{r3, lr}
    8e7a:	4802      	ldr	r0, [pc, #8]	; (8e84 <_spi_dma_rxISR0()+0xc>)
    8e7c:	f7ff ff5e 	bl	8d3c <SPIClass::dma_rxisr()>
    8e80:	bd08      	pop	{r3, pc}
    8e82:	bf00      	nop
    8e84:	1fffdc74 	.word	0x1fffdc74

00008e88 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v>:
		: port_addr(myport), hardware_addr(myhardware) {
    8e88:	4a0a      	ldr	r2, [pc, #40]	; (8eb4 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x2c>)
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);
    8e8a:	490b      	ldr	r1, [pc, #44]	; (8eb8 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x30>)
    8e8c:	2300      	movs	r3, #0
}
    8e8e:	b410      	push	{r4}
    8e90:	4c0a      	ldr	r4, [pc, #40]	; (8ebc <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x34>)
    8e92:	6093      	str	r3, [r2, #8]
    8e94:	8493      	strh	r3, [r2, #36]	; 0x24
    8e96:	6014      	str	r4, [r2, #0]
    8e98:	6051      	str	r1, [r2, #4]
    8e9a:	bc10      	pop	{r4}
    8e9c:	60d3      	str	r3, [r2, #12]
    8e9e:	6193      	str	r3, [r2, #24]
    8ea0:	6293      	str	r3, [r2, #40]	; 0x28
    8ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
    8ea4:	6313      	str	r3, [r2, #48]	; 0x30
    8ea6:	6353      	str	r3, [r2, #52]	; 0x34
    8ea8:	6113      	str	r3, [r2, #16]
    8eaa:	6153      	str	r3, [r2, #20]
    8eac:	61d3      	str	r3, [r2, #28]
    8eae:	6213      	str	r3, [r2, #32]
    8eb0:	4770      	bx	lr
    8eb2:	bf00      	nop
    8eb4:	1fffdc74 	.word	0x1fffdc74
    8eb8:	0001514c 	.word	0x0001514c
    8ebc:	4002c000 	.word	0x4002c000

00008ec0 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>:
#include "FilterOnePole.h"
#include "FloatDefine.h"

FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    8ec0:	b538      	push	{r3, r4, r5, lr}
    8ec2:	4604      	mov	r4, r0
    8ec4:	4608      	mov	r0, r1
  setFilter( ft, fc, initialValue );
}

void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
  FT = ft;
    8ec6:	7020      	strb	r0, [r4, #0]

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    8ec8:	490a      	ldr	r1, [pc, #40]	; (8ef4 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x34>)
    8eca:	4610      	mov	r0, r2
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    8ecc:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    8ece:	f003 fec1 	bl	cc54 <__aeabi_fmul>
    8ed2:	4601      	mov	r1, r0
    8ed4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    8ed8:	f003 ff70 	bl	cdbc <__aeabi_fdiv>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    8edc:	4906      	ldr	r1, [pc, #24]	; (8ef8 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x38>)
    8ede:	f003 feb9 	bl	cc54 <__aeabi_fmul>
  Y = initialValue;
    8ee2:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
    8ee4:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
    8ee6:	6125      	str	r5, [r4, #16]
  X = initialValue;
    8ee8:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    8eea:	f001 f9d1 	bl	a290 <micros>
    8eee:	61e0      	str	r0, [r4, #28]
}
    8ef0:	4620      	mov	r0, r4
    8ef2:	bd38      	pop	{r3, r4, r5, pc}
    8ef4:	40c90fdb 	.word	0x40c90fdb
    8ef8:	49742400 	.word	0x49742400

00008efc <FilterOnePole::output()>:
}

float FilterOnePole::output() {
    // figure out which button to read
  switch (FT) {
    8efc:	7803      	ldrb	r3, [r0, #0]
float FilterOnePole::output() {
    8efe:	b510      	push	{r4, lr}
    8f00:	4604      	mov	r4, r0
  switch (FT) {
    8f02:	2b03      	cmp	r3, #3
    8f04:	d821      	bhi.n	8f4a <FilterOnePole::output()+0x4e>
    8f06:	e8df f003 	tbb	[pc, r3]
    8f0a:	1e19      	.short	0x1e19
    8f0c:	0211      	.short	0x0211
      // highpass is the _difference_
      return X-Y;
      break;
    case DIFFERENTIATOR:
      // like a highpass, but normalize
      return (X-Y)/(TauUS/1.0e6);
    8f0e:	68c1      	ldr	r1, [r0, #12]
    8f10:	6940      	ldr	r0, [r0, #20]
    8f12:	f003 fd95 	bl	ca40 <__aeabi_fsub>
    8f16:	490e      	ldr	r1, [pc, #56]	; (8f50 <FilterOnePole::output()+0x54>)
    8f18:	4603      	mov	r3, r0
    8f1a:	6860      	ldr	r0, [r4, #4]
    8f1c:	461c      	mov	r4, r3
    8f1e:	f003 ff4d 	bl	cdbc <__aeabi_fdiv>
    8f22:	4601      	mov	r1, r0
    8f24:	4620      	mov	r0, r4
    8f26:	f003 ff49 	bl	cdbc <__aeabi_fdiv>
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    8f2a:	bd10      	pop	{r4, pc}
      return Y * (TauUS/1.0e6);
    8f2c:	4908      	ldr	r1, [pc, #32]	; (8f50 <FilterOnePole::output()+0x54>)
    8f2e:	6840      	ldr	r0, [r0, #4]
    8f30:	f003 ff44 	bl	cdbc <__aeabi_fdiv>
    8f34:	68e1      	ldr	r1, [r4, #12]
    8f36:	f003 fe8d 	bl	cc54 <__aeabi_fmul>
}
    8f3a:	bd10      	pop	{r4, pc}
      return X-Y;
    8f3c:	68c1      	ldr	r1, [r0, #12]
    8f3e:	6940      	ldr	r0, [r0, #20]
    8f40:	f003 fd7e 	bl	ca40 <__aeabi_fsub>
}
    8f44:	bd10      	pop	{r4, pc}
      return Y; 
    8f46:	68c0      	ldr	r0, [r0, #12]
}
    8f48:	bd10      	pop	{r4, pc}
  switch (FT) {
    8f4a:	2000      	movs	r0, #0
}
    8f4c:	bd10      	pop	{r4, pc}
    8f4e:	bf00      	nop
    8f50:	49742400 	.word	0x49742400

00008f54 <FilterOnePole::input(float)>:
float FilterOnePole::input( float inVal ) {
    8f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f56:	4604      	mov	r4, r0
    8f58:	460e      	mov	r6, r1
  long time = micros();
    8f5a:	f001 f999 	bl	a290 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    8f5e:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    8f60:	4605      	mov	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    8f62:	1ac0      	subs	r0, r0, r3
    8f64:	f003 fe22 	bl	cbac <__aeabi_i2f>
  Ylast = Y;
    8f68:	68e7      	ldr	r7, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    8f6a:	61a0      	str	r0, [r4, #24]
    8f6c:	4601      	mov	r1, r0
  LastUS = time;                      // update this now
    8f6e:	61e5      	str	r5, [r4, #28]
  TauSamps = TauUS / ElapsedUS;
    8f70:	6860      	ldr	r0, [r4, #4]
  X = inVal;                          // this is now the most recent input value
    8f72:	6166      	str	r6, [r4, #20]
  Ylast = Y;
    8f74:	6127      	str	r7, [r4, #16]
  TauSamps = TauUS / ElapsedUS;
    8f76:	f003 ff21 	bl	cdbc <__aeabi_fdiv>
    8f7a:	4601      	mov	r1, r0
    8f7c:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    8f7e:	480e      	ldr	r0, [pc, #56]	; (8fb8 <FilterOnePole::input(float)+0x64>)
    8f80:	f003 ff1c 	bl	cdbc <__aeabi_fdiv>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    8f84:	f003 f966 	bl	c254 <expf>
    8f88:	4605      	mov	r5, r0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    8f8a:	4601      	mov	r1, r0
    8f8c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    8f90:	f003 fd56 	bl	ca40 <__aeabi_fsub>
    8f94:	4631      	mov	r1, r6
    8f96:	f003 fe5d 	bl	cc54 <__aeabi_fmul>
    8f9a:	4629      	mov	r1, r5
    8f9c:	4606      	mov	r6, r0
    8f9e:	4638      	mov	r0, r7
    8fa0:	f003 fe58 	bl	cc54 <__aeabi_fmul>
    8fa4:	4601      	mov	r1, r0
    8fa6:	4630      	mov	r0, r6
    8fa8:	f003 fd4c 	bl	ca44 <__addsf3>
    8fac:	60e0      	str	r0, [r4, #12]
  return output();
    8fae:	4620      	mov	r0, r4
}
    8fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return output();
    8fb4:	f7ff bfa2 	b.w	8efc <FilterOnePole::output()>
    8fb8:	bf800000 	.word	0xbf800000

00008fbc <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8fbc:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8fc0:	b672      	cpsid	i
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    8fc2:	7f43      	ldrb	r3, [r0, #29]
    8fc4:	b95b      	cbnz	r3, 8fde <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    8fc6:	7f01      	ldrb	r1, [r0, #28]
    8fc8:	2901      	cmp	r1, #1
{
    8fca:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    8fcc:	d00b      	beq.n	8fe6 <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    8fce:	2903      	cmp	r1, #3
    8fd0:	d013      	beq.n	8ffa <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    8fd2:	2301      	movs	r3, #1
    8fd4:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    8fd6:	b902      	cbnz	r2, 8fda <EventResponder::triggerEventNotImmediate()+0x1e>
    8fd8:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    8fda:	bc30      	pop	{r4, r5}
    8fdc:	4770      	bx	lr
    8fde:	b90a      	cbnz	r2, 8fe4 <EventResponder::triggerEventNotImmediate()+0x28>
    8fe0:	b662      	cpsie	i
    8fe2:	4770      	bx	lr
    8fe4:	4770      	bx	lr
			if (firstYield == nullptr) {
    8fe6:	4c12      	ldr	r4, [pc, #72]	; (9030 <EventResponder::triggerEventNotImmediate()+0x74>)
    8fe8:	6821      	ldr	r1, [r4, #0]
    8fea:	b1b1      	cbz	r1, 901a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    8fec:	4911      	ldr	r1, [pc, #68]	; (9034 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    8fee:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    8ff0:	680b      	ldr	r3, [r1, #0]
    8ff2:	6183      	str	r3, [r0, #24]
				lastYield = this;
    8ff4:	6008      	str	r0, [r1, #0]
				_prev->_next = this;
    8ff6:	6158      	str	r0, [r3, #20]
				lastYield = this;
    8ff8:	e7eb      	b.n	8fd2 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    8ffa:	4d0f      	ldr	r5, [pc, #60]	; (9038 <EventResponder::triggerEventNotImmediate()+0x7c>)
    8ffc:	490f      	ldr	r1, [pc, #60]	; (903c <EventResponder::triggerEventNotImmediate()+0x80>)
    8ffe:	682c      	ldr	r4, [r5, #0]
    9000:	b18c      	cbz	r4, 9026 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    9002:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9004:	680b      	ldr	r3, [r1, #0]
    9006:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    9008:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    900a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    900e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    9012:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9014:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    9018:	e7db      	b.n	8fd2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    901a:	4b06      	ldr	r3, [pc, #24]	; (9034 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    901c:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    901e:	6181      	str	r1, [r0, #24]
				firstYield = this;
    9020:	6020      	str	r0, [r4, #0]
				lastYield = this;
    9022:	6018      	str	r0, [r3, #0]
    9024:	e7d5      	b.n	8fd2 <EventResponder::triggerEventNotImmediate()+0x16>
				_next = nullptr;
    9026:	6144      	str	r4, [r0, #20]
				_prev = nullptr;
    9028:	6184      	str	r4, [r0, #24]
				firstInterrupt = this;
    902a:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    902c:	e7ed      	b.n	900a <EventResponder::triggerEventNotImmediate()+0x4e>
    902e:	bf00      	nop
    9030:	1fffdcac 	.word	0x1fffdcac
    9034:	1fffdcbc 	.word	0x1fffdcbc
    9038:	1fffdcb4 	.word	0x1fffdcb4
    903c:	1fffdcb0 	.word	0x1fffdcb0

00009040 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9040:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9042:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9046:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9048:	4c0c      	ldr	r4, [pc, #48]	; (907c <EventResponder::runFromInterrupt()+0x3c>)
    904a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    904c:	b180      	cbz	r0, 9070 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    904e:	4e0c      	ldr	r6, [pc, #48]	; (9080 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    9050:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    9052:	6943      	ldr	r3, [r0, #20]
    9054:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    9056:	b173      	cbz	r3, 9076 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    9058:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    905a:	b902      	cbnz	r2, 905e <EventResponder::runFromInterrupt()+0x1e>
    905c:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    905e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    9060:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    9062:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9064:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9068:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    906a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    906c:	2800      	cmp	r0, #0
    906e:	d1f0      	bne.n	9052 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    9070:	b902      	cbnz	r2, 9074 <EventResponder::runFromInterrupt()+0x34>
    9072:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    9074:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    9076:	6033      	str	r3, [r6, #0]
    9078:	e7ef      	b.n	905a <EventResponder::runFromInterrupt()+0x1a>
    907a:	bf00      	nop
    907c:	1fffdcb4 	.word	0x1fffdcb4
    9080:	1fffdcb0 	.word	0x1fffdcb0

00009084 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    9084:	f7ff bfdc 	b.w	9040 <EventResponder::runFromInterrupt()>

00009088 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    9088:	4a02      	ldr	r2, [pc, #8]	; (9094 <systick_isr+0xc>)
    908a:	6813      	ldr	r3, [r2, #0]
    908c:	3301      	adds	r3, #1
    908e:	6013      	str	r3, [r2, #0]
}
    9090:	4770      	bx	lr
    9092:	bf00      	nop
    9094:	1fffdcc4 	.word	0x1fffdcc4

00009098 <HardwareSerial2::begin(unsigned long)>:
HardwareSerial2 Serial2(&serialEvent2);

uint8_t _serialEvent2_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial2::begin(uint32_t baud) {
	serial2_begin(BAUD2DIV2(baud));
    9098:	084b      	lsrs	r3, r1, #1
    909a:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
    909e:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
void HardwareSerial2::begin(uint32_t baud) {
    90a2:	b510      	push	{r4, lr}
    90a4:	4604      	mov	r4, r0
	serial2_begin(BAUD2DIV2(baud));
    90a6:	fbb3 f0f1 	udiv	r0, r3, r1
    90aa:	f001 f95d 	bl	a368 <serial2_begin>
	if (!_serialEvent2_default) addToSerialEventsList();
    90ae:	4b04      	ldr	r3, [pc, #16]	; (90c0 <HardwareSerial2::begin(unsigned long)+0x28>)
    90b0:	781b      	ldrb	r3, [r3, #0]
    90b2:	b103      	cbz	r3, 90b6 <HardwareSerial2::begin(unsigned long)+0x1e>
}
    90b4:	bd10      	pop	{r4, pc}
	if (!_serialEvent2_default) addToSerialEventsList();
    90b6:	4620      	mov	r0, r4
}
    90b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent2_default) addToSerialEventsList();
    90bc:	f003 b868 	b.w	c190 <HardwareSerial::addToSerialEventsList()>
    90c0:	1fff89f9 	.word	0x1fff89f9

000090c4 <HardwareSerial2::write9bit(unsigned long)>:
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    90c4:	b508      	push	{r3, lr}
    90c6:	4608      	mov	r0, r1
    90c8:	f001 fb3c 	bl	a744 <serial2_putchar>
    90cc:	2001      	movs	r0, #1
    90ce:	bd08      	pop	{r3, pc}

000090d0 <HardwareSerial2::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    90d0:	b508      	push	{r3, lr}
    90d2:	4608      	mov	r0, r1
    90d4:	f001 fb36 	bl	a744 <serial2_putchar>
    90d8:	2001      	movs	r0, #1
    90da:	bd08      	pop	{r3, pc}

000090dc <HardwareSerial2::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    90dc:	b538      	push	{r3, r4, r5, lr}
    90de:	4608      	mov	r0, r1
    90e0:	460d      	mov	r5, r1
    90e2:	f004 ff6d 	bl	dfc0 <strlen>
    90e6:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    90e8:	4601      	mov	r1, r0
    90ea:	4628      	mov	r0, r5
    90ec:	f001 fba6 	bl	a83c <serial2_write>
					  return len; }
    90f0:	4620      	mov	r0, r4
    90f2:	bd38      	pop	{r3, r4, r5, pc}

000090f4 <HardwareSerial2::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    90f4:	b510      	push	{r4, lr}
    90f6:	4608      	mov	r0, r1
    90f8:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    90fa:	4611      	mov	r1, r2
    90fc:	f001 fb9e 	bl	a83c <serial2_write>
    9100:	4620      	mov	r0, r4
    9102:	bd10      	pop	{r4, pc}

00009104 <HardwareSerial2::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial2_add_memory_for_write(buffer, length);}
    9104:	4608      	mov	r0, r1
    9106:	4611      	mov	r1, r2
    9108:	f001 bdc6 	b.w	ac98 <serial2_add_memory_for_write>

0000910c <HardwareSerial2::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial2_add_memory_for_read(buffer, length);}
    910c:	4608      	mov	r0, r1
    910e:	4611      	mov	r1, r2
    9110:	f001 bda6 	b.w	ac60 <serial2_add_memory_for_read>

00009114 <HardwareSerial2::clear()>:
	virtual void clear(void)	{ serial2_clear(); }
    9114:	f001 bcbe 	b.w	aa94 <serial2_clear>

00009118 <HardwareSerial2::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    9118:	b508      	push	{r3, lr}
    911a:	4608      	mov	r0, r1
    911c:	f001 faf2 	bl	a704 <serial2_set_cts>
    9120:	3800      	subs	r0, #0
    9122:	bf18      	it	ne
    9124:	2001      	movne	r0, #1
    9126:	bd08      	pop	{r3, pc}

00009128 <HardwareSerial2::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    9128:	b508      	push	{r3, lr}
    912a:	4608      	mov	r0, r1
    912c:	f001 fac8 	bl	a6c0 <serial2_set_rts>
    9130:	3800      	subs	r0, #0
    9132:	bf18      	it	ne
    9134:	2001      	movne	r0, #1
    9136:	bd08      	pop	{r3, pc}

00009138 <HardwareSerial2::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    9138:	4608      	mov	r0, r1
    913a:	4611      	mov	r1, r2
    913c:	f001 ba54 	b.w	a5e8 <serial2_set_tx>

00009140 <HardwareSerial2::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    9140:	4608      	mov	r0, r1
    9142:	f001 ba8f 	b.w	a664 <serial2_set_rx>
    9146:	bf00      	nop

00009148 <HardwareSerial2::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    9148:	4608      	mov	r0, r1
    914a:	f001 ba31 	b.w	a5b0 <serial2_set_transmit_pin>
    914e:	bf00      	nop

00009150 <HardwareSerial2::end()>:
	virtual void end(void)		{ serial2_end(); }
    9150:	f001 b9c6 	b.w	a4e0 <serial2_end>

00009154 <HardwareSerial2::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    9154:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    9156:	084b      	lsrs	r3, r1, #1
    9158:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
	virtual void begin(uint32_t baud, uint32_t format) {
    915c:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    915e:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    9162:	fbb3 f0f1 	udiv	r0, r3, r1
    9166:	f001 f8ff 	bl	a368 <serial2_begin>
					  serial2_format(format); }
    916a:	4620      	mov	r0, r4
    916c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9170:	f001 b968 	b.w	a444 <serial2_format>

00009174 <HardwareSerial2::peek()>:
	virtual int peek(void)          { return serial2_peek(); }
    9174:	f001 bc68 	b.w	aa48 <serial2_peek>

00009178 <HardwareSerial2::read()>:
	virtual int read(void)          { return serial2_getchar(); }
    9178:	f001 bc20 	b.w	a9bc <serial2_getchar>

0000917c <HardwareSerial2::available()>:
	virtual int available(void)     { return serial2_available(); }
    917c:	f001 bc0a 	b.w	a994 <serial2_available>

00009180 <HardwareSerial2::flush()>:
	virtual void flush(void)        { serial2_flush(); }
    9180:	f001 bbe4 	b.w	a94c <serial2_flush>

00009184 <HardwareSerial2::availableForWrite()>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    9184:	f001 bbee 	b.w	a964 <serial2_write_buffer_free>

00009188 <HardwareSerial2::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    9188:	6803      	ldr	r3, [r0, #0]
    918a:	4a06      	ldr	r2, [pc, #24]	; (91a4 <HardwareSerial2::write(int)+0x1c>)
    918c:	681b      	ldr	r3, [r3, #0]
    918e:	4293      	cmp	r3, r2
    9190:	d105      	bne.n	919e <HardwareSerial2::write(int)+0x16>
    9192:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    9194:	b2c8      	uxtb	r0, r1
    9196:	f001 fad5 	bl	a744 <serial2_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    919a:	2001      	movs	r0, #1
    919c:	bd10      	pop	{r4, pc}
    919e:	b2c9      	uxtb	r1, r1
    91a0:	4718      	bx	r3
    91a2:	bf00      	nop
    91a4:	000090d1 	.word	0x000090d1

000091a8 <HardwareSerial2::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    91a8:	6803      	ldr	r3, [r0, #0]
    91aa:	4a06      	ldr	r2, [pc, #24]	; (91c4 <HardwareSerial2::write(unsigned long)+0x1c>)
    91ac:	681b      	ldr	r3, [r3, #0]
    91ae:	4293      	cmp	r3, r2
    91b0:	d105      	bne.n	91be <HardwareSerial2::write(unsigned long)+0x16>
    91b2:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    91b4:	b2c8      	uxtb	r0, r1
    91b6:	f001 fac5 	bl	a744 <serial2_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    91ba:	2001      	movs	r0, #1
    91bc:	bd10      	pop	{r4, pc}
    91be:	b2c9      	uxtb	r1, r1
    91c0:	4718      	bx	r3
    91c2:	bf00      	nop
    91c4:	000090d1 	.word	0x000090d1

000091c8 <HardwareSerial2::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    91c8:	6803      	ldr	r3, [r0, #0]
    91ca:	4a06      	ldr	r2, [pc, #24]	; (91e4 <HardwareSerial2::write(long)+0x1c>)
    91cc:	681b      	ldr	r3, [r3, #0]
    91ce:	4293      	cmp	r3, r2
    91d0:	d105      	bne.n	91de <HardwareSerial2::write(long)+0x16>
    91d2:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    91d4:	b2c8      	uxtb	r0, r1
    91d6:	f001 fab5 	bl	a744 <serial2_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    91da:	2001      	movs	r0, #1
    91dc:	bd10      	pop	{r4, pc}
    91de:	b2c9      	uxtb	r1, r1
    91e0:	4718      	bx	r3
    91e2:	bf00      	nop
    91e4:	000090d1 	.word	0x000090d1

000091e8 <HardwareSerial2::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    91e8:	6803      	ldr	r3, [r0, #0]
    91ea:	4a06      	ldr	r2, [pc, #24]	; (9204 <HardwareSerial2::write(unsigned int)+0x1c>)
    91ec:	681b      	ldr	r3, [r3, #0]
    91ee:	4293      	cmp	r3, r2
    91f0:	d105      	bne.n	91fe <HardwareSerial2::write(unsigned int)+0x16>
    91f2:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    91f4:	b2c8      	uxtb	r0, r1
    91f6:	f001 faa5 	bl	a744 <serial2_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    91fa:	2001      	movs	r0, #1
    91fc:	bd10      	pop	{r4, pc}
    91fe:	b2c9      	uxtb	r1, r1
    9200:	4718      	bx	r3
    9202:	bf00      	nop
    9204:	000090d1 	.word	0x000090d1

00009208 <HardwareSerial3::begin(unsigned long)>:
HardwareSerial3 Serial3(&serialEvent3);

uint8_t _serialEvent3_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial3::begin(uint32_t baud) { 
	serial3_begin(BAUD2DIV3(baud));
    9208:	084b      	lsrs	r3, r1, #1
    920a:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
    920e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
void HardwareSerial3::begin(uint32_t baud) { 
    9212:	b510      	push	{r4, lr}
    9214:	4604      	mov	r4, r0
	serial3_begin(BAUD2DIV3(baud));
    9216:	fbb3 f0f1 	udiv	r0, r3, r1
    921a:	f001 fdc3 	bl	ada4 <serial3_begin>
	if (!_serialEvent3_default) addToSerialEventsList();
    921e:	4b04      	ldr	r3, [pc, #16]	; (9230 <HardwareSerial3::begin(unsigned long)+0x28>)
    9220:	781b      	ldrb	r3, [r3, #0]
    9222:	b103      	cbz	r3, 9226 <HardwareSerial3::begin(unsigned long)+0x1e>
}
    9224:	bd10      	pop	{r4, pc}
	if (!_serialEvent3_default) addToSerialEventsList();
    9226:	4620      	mov	r0, r4
}
    9228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent3_default) addToSerialEventsList();
    922c:	f002 bfb0 	b.w	c190 <HardwareSerial::addToSerialEventsList()>
    9230:	1fff89fa 	.word	0x1fff89fa

00009234 <HardwareSerial3::write9bit(unsigned long)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    9234:	b508      	push	{r3, lr}
    9236:	4608      	mov	r0, r1
    9238:	f001 ff10 	bl	b05c <serial3_putchar>
    923c:	2001      	movs	r0, #1
    923e:	bd08      	pop	{r3, pc}

00009240 <HardwareSerial3::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9240:	b508      	push	{r3, lr}
    9242:	4608      	mov	r0, r1
    9244:	f001 ff0a 	bl	b05c <serial3_putchar>
    9248:	2001      	movs	r0, #1
    924a:	bd08      	pop	{r3, pc}

0000924c <HardwareSerial3::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    924c:	b538      	push	{r3, r4, r5, lr}
    924e:	4608      	mov	r0, r1
    9250:	460d      	mov	r5, r1
    9252:	f004 feb5 	bl	dfc0 <strlen>
    9256:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    9258:	4601      	mov	r1, r0
    925a:	4628      	mov	r0, r5
    925c:	f001 ff08 	bl	b070 <serial3_write>
					  return len; }
    9260:	4620      	mov	r0, r4
    9262:	bd38      	pop	{r3, r4, r5, pc}

00009264 <HardwareSerial3::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    9264:	b510      	push	{r4, lr}
    9266:	4608      	mov	r0, r1
    9268:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    926a:	4611      	mov	r1, r2
    926c:	f001 ff00 	bl	b070 <serial3_write>
    9270:	4620      	mov	r0, r4
    9272:	bd10      	pop	{r4, pc}

00009274 <HardwareSerial3::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
    9274:	4608      	mov	r0, r1
    9276:	4611      	mov	r1, r2
    9278:	f002 b874 	b.w	b364 <serial3_add_memory_for_write>

0000927c <HardwareSerial3::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
    927c:	4608      	mov	r0, r1
    927e:	4611      	mov	r1, r2
    9280:	f002 b854 	b.w	b32c <serial3_add_memory_for_read>

00009284 <HardwareSerial3::clear()>:
	virtual void clear(void)	{ serial3_clear(); }
    9284:	f001 bfac 	b.w	b1e0 <serial3_clear>

00009288 <HardwareSerial3::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    9288:	b508      	push	{r3, lr}
    928a:	4608      	mov	r0, r1
    928c:	f001 fec6 	bl	b01c <serial3_set_cts>
    9290:	3800      	subs	r0, #0
    9292:	bf18      	it	ne
    9294:	2001      	movne	r0, #1
    9296:	bd08      	pop	{r3, pc}

00009298 <HardwareSerial3::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    9298:	b508      	push	{r3, lr}
    929a:	4608      	mov	r0, r1
    929c:	f001 fe9c 	bl	afd8 <serial3_set_rts>
    92a0:	3800      	subs	r0, #0
    92a2:	bf18      	it	ne
    92a4:	2001      	movne	r0, #1
    92a6:	bd08      	pop	{r3, pc}

000092a8 <HardwareSerial3::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    92a8:	4608      	mov	r0, r1
    92aa:	4611      	mov	r1, r2
    92ac:	f001 be66 	b.w	af7c <serial3_set_tx>

000092b0 <HardwareSerial3::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    92b0:	4608      	mov	r0, r1
    92b2:	f001 be8f 	b.w	afd4 <serial3_set_rx>
    92b6:	bf00      	nop

000092b8 <HardwareSerial3::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    92b8:	4608      	mov	r0, r1
    92ba:	f001 be43 	b.w	af44 <serial3_set_transmit_pin>
    92be:	bf00      	nop

000092c0 <HardwareSerial3::end()>:
	virtual void end(void)          { serial3_end(); }
    92c0:	f001 be0a 	b.w	aed8 <serial3_end>

000092c4 <HardwareSerial3::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    92c4:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    92c6:	084b      	lsrs	r3, r1, #1
    92c8:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
	virtual void begin(uint32_t baud, uint32_t format) {
    92cc:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    92ce:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    92d2:	fbb3 f0f1 	udiv	r0, r3, r1
    92d6:	f001 fd65 	bl	ada4 <serial3_begin>
					  serial3_format(format); }
    92da:	4620      	mov	r0, r4
    92dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    92e0:	f001 bdac 	b.w	ae3c <serial3_format>

000092e4 <HardwareSerial3::peek()>:
	virtual int peek(void)          { return serial3_peek(); }
    92e4:	f001 bf56 	b.w	b194 <serial3_peek>

000092e8 <HardwareSerial3::read()>:
	virtual int read(void)          { return serial3_getchar(); }
    92e8:	f001 bf0e 	b.w	b108 <serial3_getchar>

000092ec <HardwareSerial3::available()>:
	virtual int available(void)     { return serial3_available(); }
    92ec:	f001 bef8 	b.w	b0e0 <serial3_available>

000092f0 <HardwareSerial3::flush()>:
	virtual void flush(void)        { serial3_flush(); }
    92f0:	f001 bed2 	b.w	b098 <serial3_flush>

000092f4 <HardwareSerial3::availableForWrite()>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    92f4:	f001 bedc 	b.w	b0b0 <serial3_write_buffer_free>

000092f8 <HardwareSerial3::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    92f8:	6803      	ldr	r3, [r0, #0]
    92fa:	4a06      	ldr	r2, [pc, #24]	; (9314 <HardwareSerial3::write(int)+0x1c>)
    92fc:	681b      	ldr	r3, [r3, #0]
    92fe:	4293      	cmp	r3, r2
    9300:	d105      	bne.n	930e <HardwareSerial3::write(int)+0x16>
    9302:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9304:	b2c8      	uxtb	r0, r1
    9306:	f001 fea9 	bl	b05c <serial3_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    930a:	2001      	movs	r0, #1
    930c:	bd10      	pop	{r4, pc}
    930e:	b2c9      	uxtb	r1, r1
    9310:	4718      	bx	r3
    9312:	bf00      	nop
    9314:	00009241 	.word	0x00009241

00009318 <HardwareSerial3::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9318:	6803      	ldr	r3, [r0, #0]
    931a:	4a06      	ldr	r2, [pc, #24]	; (9334 <HardwareSerial3::write(unsigned long)+0x1c>)
    931c:	681b      	ldr	r3, [r3, #0]
    931e:	4293      	cmp	r3, r2
    9320:	d105      	bne.n	932e <HardwareSerial3::write(unsigned long)+0x16>
    9322:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9324:	b2c8      	uxtb	r0, r1
    9326:	f001 fe99 	bl	b05c <serial3_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    932a:	2001      	movs	r0, #1
    932c:	bd10      	pop	{r4, pc}
    932e:	b2c9      	uxtb	r1, r1
    9330:	4718      	bx	r3
    9332:	bf00      	nop
    9334:	00009241 	.word	0x00009241

00009338 <HardwareSerial3::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    9338:	6803      	ldr	r3, [r0, #0]
    933a:	4a06      	ldr	r2, [pc, #24]	; (9354 <HardwareSerial3::write(long)+0x1c>)
    933c:	681b      	ldr	r3, [r3, #0]
    933e:	4293      	cmp	r3, r2
    9340:	d105      	bne.n	934e <HardwareSerial3::write(long)+0x16>
    9342:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9344:	b2c8      	uxtb	r0, r1
    9346:	f001 fe89 	bl	b05c <serial3_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    934a:	2001      	movs	r0, #1
    934c:	bd10      	pop	{r4, pc}
    934e:	b2c9      	uxtb	r1, r1
    9350:	4718      	bx	r3
    9352:	bf00      	nop
    9354:	00009241 	.word	0x00009241

00009358 <HardwareSerial3::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9358:	6803      	ldr	r3, [r0, #0]
    935a:	4a06      	ldr	r2, [pc, #24]	; (9374 <HardwareSerial3::write(unsigned int)+0x1c>)
    935c:	681b      	ldr	r3, [r3, #0]
    935e:	4293      	cmp	r3, r2
    9360:	d105      	bne.n	936e <HardwareSerial3::write(unsigned int)+0x16>
    9362:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9364:	b2c8      	uxtb	r0, r1
    9366:	f001 fe79 	bl	b05c <serial3_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    936a:	2001      	movs	r0, #1
    936c:	bd10      	pop	{r4, pc}
    936e:	b2c9      	uxtb	r1, r1
    9370:	4718      	bx	r3
    9372:	bf00      	nop
    9374:	00009241 	.word	0x00009241

00009378 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    9378:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    937a:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    937c:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    937e:	bf08      	it	eq
    9380:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    9382:	b3a1      	cbz	r1, 93ee <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    9384:	f04f 0e21 	mov.w	lr, #33	; 0x21
    9388:	e002      	b.n	9390 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    938a:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    938e:	4629      	mov	r1, r5
			digit = n % base;
    9390:	fbb1 f5f2 	udiv	r5, r1, r2
    9394:	fb02 1415 	mls	r4, r2, r5, r1
    9398:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    939c:	2c09      	cmp	r4, #9
    939e:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    93a2:	bf98      	it	ls
    93a4:	fa5f fc84 	uxtbls.w	ip, r4
    93a8:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    93ac:	bf88      	it	hi
    93ae:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    93b2:	446c      	add	r4, sp
    93b4:	bf88      	it	hi
    93b6:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    93ba:	4291      	cmp	r1, r2
			i--;
    93bc:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    93c0:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    93c4:	d2e1      	bcs.n	938a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    93c6:	b14b      	cbz	r3, 93dc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    93c8:	f10e 3eff 	add.w	lr, lr, #4294967295
    93cc:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    93d0:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    93d4:	446b      	add	r3, sp
    93d6:	222d      	movs	r2, #45	; 0x2d
    93d8:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    93dc:	6803      	ldr	r3, [r0, #0]
    93de:	a901      	add	r1, sp, #4
    93e0:	685b      	ldr	r3, [r3, #4]
    93e2:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    93e6:	4471      	add	r1, lr
    93e8:	4798      	blx	r3
}
    93ea:	b00a      	add	sp, #40	; 0x28
    93ec:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    93ee:	2230      	movs	r2, #48	; 0x30
    93f0:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    93f4:	f04f 0e21 	mov.w	lr, #33	; 0x21
    93f8:	e7e5      	b.n	93c6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    93fa:	bf00      	nop

000093fc <Print::print(long)>:
	if (n < 0) {
    93fc:	2900      	cmp	r1, #0
		n = -n;
    93fe:	bfba      	itte	lt
    9400:	4249      	neglt	r1, r1
		sign = '-';
    9402:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    9404:	2300      	movge	r3, #0
	if (base == 0) {
    9406:	220a      	movs	r2, #10
    9408:	f7ff bfb6 	b.w	9378 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000940c <Print::println()>:
{
    940c:	b500      	push	{lr}
	return write(buf, 2);
    940e:	6803      	ldr	r3, [r0, #0]
{
    9410:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    9412:	f640 220d 	movw	r2, #2573	; 0xa0d
    9416:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    941a:	685b      	ldr	r3, [r3, #4]
    941c:	2202      	movs	r2, #2
    941e:	a901      	add	r1, sp, #4
    9420:	4798      	blx	r3
}
    9422:	b003      	add	sp, #12
    9424:	f85d fb04 	ldr.w	pc, [sp], #4

00009428 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    9428:	4b03      	ldr	r3, [pc, #12]	; (9438 <_write+0x10>)
    942a:	2802      	cmp	r0, #2
    942c:	bf88      	it	hi
    942e:	4603      	movhi	r3, r0
    9430:	4618      	mov	r0, r3
    9432:	681b      	ldr	r3, [r3, #0]
    9434:	685b      	ldr	r3, [r3, #4]
    9436:	4718      	bx	r3
    9438:	1fff89fc 	.word	0x1fff89fc

0000943c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    943c:	b932      	cbnz	r2, 944c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    943e:	6803      	ldr	r3, [r0, #0]
{
    9440:	b500      	push	{lr}
		return write((uint8_t)n);
    9442:	681b      	ldr	r3, [r3, #0]
}
    9444:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    9448:	b2c9      	uxtb	r1, r1
    944a:	4718      	bx	r3
    944c:	f7ff bf94 	b.w	9378 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00009450 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    9450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    9454:	4619      	mov	r1, r3
{
    9456:	b087      	sub	sp, #28
    9458:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    945a:	4610      	mov	r0, r2
{
    945c:	4614      	mov	r4, r2
    945e:	469a      	mov	sl, r3
	if (isnan(number)) return print("nan");
    9460:	f003 fab4 	bl	c9cc <__aeabi_dcmpun>
{
    9464:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
	if (isnan(number)) return print("nan");
    9468:	2800      	cmp	r0, #0
    946a:	f040 80a9 	bne.w	95c0 <Print::printFloat(double, unsigned char)+0x170>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    946e:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
    	if (isinf(number)) return print("inf");
    9472:	4b5f      	ldr	r3, [pc, #380]	; (95f0 <Print::printFloat(double, unsigned char)+0x1a0>)
    9474:	4620      	mov	r0, r4
    9476:	4629      	mov	r1, r5
    9478:	f04f 32ff 	mov.w	r2, #4294967295
    947c:	f003 faa6 	bl	c9cc <__aeabi_dcmpun>
    9480:	b948      	cbnz	r0, 9496 <Print::printFloat(double, unsigned char)+0x46>
    9482:	4b5b      	ldr	r3, [pc, #364]	; (95f0 <Print::printFloat(double, unsigned char)+0x1a0>)
    9484:	4620      	mov	r0, r4
    9486:	4629      	mov	r1, r5
    9488:	f04f 32ff 	mov.w	r2, #4294967295
    948c:	f003 fa80 	bl	c990 <__aeabi_dcmple>
    9490:	2800      	cmp	r0, #0
    9492:	f000 808e 	beq.w	95b2 <Print::printFloat(double, unsigned char)+0x162>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    9496:	4b57      	ldr	r3, [pc, #348]	; (95f4 <Print::printFloat(double, unsigned char)+0x1a4>)
    9498:	4620      	mov	r0, r4
    949a:	4651      	mov	r1, sl
    949c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    94a0:	f003 fa8a 	bl	c9b8 <__aeabi_dcmpgt>
    94a4:	2800      	cmp	r0, #0
    94a6:	d17b      	bne.n	95a0 <Print::printFloat(double, unsigned char)+0x150>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    94a8:	4b53      	ldr	r3, [pc, #332]	; (95f8 <Print::printFloat(double, unsigned char)+0x1a8>)
    94aa:	4620      	mov	r0, r4
    94ac:	4651      	mov	r1, sl
    94ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    94b2:	f003 fa63 	bl	c97c <__aeabi_dcmplt>
    94b6:	2800      	cmp	r0, #0
    94b8:	d172      	bne.n	95a0 <Print::printFloat(double, unsigned char)+0x150>
	
	// Handle negative numbers
	if (number < 0.0) {
    94ba:	4620      	mov	r0, r4
    94bc:	4651      	mov	r1, sl
    94be:	2200      	movs	r2, #0
    94c0:	2300      	movs	r3, #0
    94c2:	f003 fa5b 	bl	c97c <__aeabi_dcmplt>
    94c6:	4605      	mov	r5, r0
    94c8:	2800      	cmp	r0, #0
    94ca:	d175      	bne.n	95b8 <Print::printFloat(double, unsigned char)+0x168>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    94cc:	2f00      	cmp	r7, #0
    94ce:	d07a      	beq.n	95c6 <Print::printFloat(double, unsigned char)+0x176>
		rounding *= 0.1;
    94d0:	f20f 1914 	addw	r9, pc, #276	; 0x114
    94d4:	e9d9 8900 	ldrd	r8, r9, [r9]
	double rounding = 0.5;
    94d8:	4948      	ldr	r1, [pc, #288]	; (95fc <Print::printFloat(double, unsigned char)+0x1ac>)
	for (uint8_t i=0; i<digits; ++i) {
    94da:	f04f 0b00 	mov.w	fp, #0
	double rounding = 0.5;
    94de:	2000      	movs	r0, #0
		rounding *= 0.1;
    94e0:	464b      	mov	r3, r9
	for (uint8_t i=0; i<digits; ++i) {
    94e2:	f10b 0b01 	add.w	fp, fp, #1
		rounding *= 0.1;
    94e6:	4642      	mov	r2, r8
    94e8:	f00a f816 	bl	13518 <__aeabi_dmul>
	for (uint8_t i=0; i<digits; ++i) {
    94ec:	fa5f f38b 	uxtb.w	r3, fp
    94f0:	42bb      	cmp	r3, r7
    94f2:	d3f5      	bcc.n	94e0 <Print::printFloat(double, unsigned char)+0x90>
	}
	number += rounding;
    94f4:	4602      	mov	r2, r0
    94f6:	460b      	mov	r3, r1
    94f8:	4620      	mov	r0, r4
    94fa:	4651      	mov	r1, sl
    94fc:	f003 f828 	bl	c550 <__adddf3>
    9500:	4689      	mov	r9, r1
    9502:	4680      	mov	r8, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    9504:	f003 fa78 	bl	c9f8 <__aeabi_d2uiz>
    9508:	2f0f      	cmp	r7, #15
    950a:	bf28      	it	cs
    950c:	270f      	movcs	r7, #15
    950e:	4682      	mov	sl, r0
	double remainder = number - (double)int_part;
    9510:	9701      	str	r7, [sp, #4]
    9512:	f003 f959 	bl	c7c8 <__aeabi_ui2d>
    9516:	4602      	mov	r2, r0
    9518:	460b      	mov	r3, r1
    951a:	4640      	mov	r0, r8
    951c:	4649      	mov	r1, r9
    951e:	f003 f815 	bl	c54c <__aeabi_dsub>
    9522:	462b      	mov	r3, r5
    9524:	4680      	mov	r8, r0
    9526:	4689      	mov	r9, r1
    9528:	220a      	movs	r2, #10
    952a:	4651      	mov	r1, sl
    952c:	4630      	mov	r0, r6
    952e:	f7ff ff23 	bl	9378 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    9532:	232e      	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    9534:	464d      	mov	r5, r9
		buf[0] = '.';
    9536:	f88d 3008 	strb.w	r3, [sp, #8]
    953a:	f10d 0209 	add.w	r2, sp, #9

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    953e:	1e7b      	subs	r3, r7, #1
			remainder *= 10.0;
    9540:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 9600 <Print::printFloat(double, unsigned char)+0x1b0>
	double remainder = number - (double)int_part;
    9544:	4644      	mov	r4, r8
	if (base == 0) {
    9546:	4683      	mov	fp, r0
		while (digits-- > 0) {
    9548:	fa52 fa83 	uxtab	sl, r2, r3
    954c:	af02      	add	r7, sp, #8
			remainder *= 10.0;
    954e:	f04f 0800 	mov.w	r8, #0
    9552:	4642      	mov	r2, r8
    9554:	464b      	mov	r3, r9
    9556:	4620      	mov	r0, r4
    9558:	4629      	mov	r1, r5
    955a:	f009 ffdd 	bl	13518 <__aeabi_dmul>
    955e:	460d      	mov	r5, r1
    9560:	4604      	mov	r4, r0
			n = (uint8_t)(remainder);
    9562:	f003 fa49 	bl	c9f8 <__aeabi_d2uiz>
    9566:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    9568:	f100 0330 	add.w	r3, r0, #48	; 0x30
    956c:	f807 3f01 	strb.w	r3, [r7, #1]!
			remainder -= n; 
    9570:	f003 f93a 	bl	c7e8 <__aeabi_i2d>
    9574:	4602      	mov	r2, r0
    9576:	460b      	mov	r3, r1
    9578:	4620      	mov	r0, r4
    957a:	4629      	mov	r1, r5
    957c:	f002 ffe6 	bl	c54c <__aeabi_dsub>
		while (digits-- > 0) {
    9580:	45ba      	cmp	sl, r7
			remainder -= n; 
    9582:	4604      	mov	r4, r0
    9584:	460d      	mov	r5, r1
		while (digits-- > 0) {
    9586:	d1e4      	bne.n	9552 <Print::printFloat(double, unsigned char)+0x102>
			buf[count++] = '0' + n;
    9588:	9a01      	ldr	r2, [sp, #4]
		}
		count += write(buf, count);
    958a:	6833      	ldr	r3, [r6, #0]
			buf[count++] = '0' + n;
    958c:	3201      	adds	r2, #1
		count += write(buf, count);
    958e:	685b      	ldr	r3, [r3, #4]
    9590:	b2d2      	uxtb	r2, r2
    9592:	a902      	add	r1, sp, #8
    9594:	4630      	mov	r0, r6
    9596:	4798      	blx	r3
	}
	return count;
}
    9598:	4658      	mov	r0, fp
    959a:	b007      	add	sp, #28
    959c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    95a0:	6833      	ldr	r3, [r6, #0]
    95a2:	4918      	ldr	r1, [pc, #96]	; (9604 <Print::printFloat(double, unsigned char)+0x1b4>)
    95a4:	685b      	ldr	r3, [r3, #4]
    95a6:	2203      	movs	r2, #3
    95a8:	4630      	mov	r0, r6
    95aa:	b007      	add	sp, #28
    95ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95b0:	4718      	bx	r3
    95b2:	6833      	ldr	r3, [r6, #0]
    95b4:	4914      	ldr	r1, [pc, #80]	; (9608 <Print::printFloat(double, unsigned char)+0x1b8>)
    95b6:	e7f5      	b.n	95a4 <Print::printFloat(double, unsigned char)+0x154>
		number = -number;
    95b8:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
		sign = 1;
    95bc:	2501      	movs	r5, #1
    95be:	e785      	b.n	94cc <Print::printFloat(double, unsigned char)+0x7c>
    95c0:	6833      	ldr	r3, [r6, #0]
    95c2:	4912      	ldr	r1, [pc, #72]	; (960c <Print::printFloat(double, unsigned char)+0x1bc>)
    95c4:	e7ee      	b.n	95a4 <Print::printFloat(double, unsigned char)+0x154>
	number += rounding;
    95c6:	4b0d      	ldr	r3, [pc, #52]	; (95fc <Print::printFloat(double, unsigned char)+0x1ac>)
    95c8:	2200      	movs	r2, #0
    95ca:	4620      	mov	r0, r4
    95cc:	4651      	mov	r1, sl
    95ce:	f002 ffbf 	bl	c550 <__adddf3>
	unsigned long int_part = (unsigned long)number;
    95d2:	f003 fa11 	bl	c9f8 <__aeabi_d2uiz>
    95d6:	462b      	mov	r3, r5
    95d8:	4601      	mov	r1, r0
    95da:	220a      	movs	r2, #10
    95dc:	4630      	mov	r0, r6
}
    95de:	b007      	add	sp, #28
    95e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95e4:	f7ff bec8 	b.w	9378 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    95e8:	a0000000 	.word	0xa0000000
    95ec:	3fb99999 	.word	0x3fb99999
    95f0:	7fefffff 	.word	0x7fefffff
    95f4:	41efffff 	.word	0x41efffff
    95f8:	c1efffff 	.word	0xc1efffff
    95fc:	3fe00000 	.word	0x3fe00000
    9600:	40240000 	.word	0x40240000
    9604:	000152a0 	.word	0x000152a0
    9608:	0001529c 	.word	0x0001529c
    960c:	00015298 	.word	0x00015298

00009610 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    9610:	b570      	push	{r4, r5, r6, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9612:	4d0e      	ldr	r5, [pc, #56]	; (964c <Stream::timedPeek()+0x3c>)
    9614:	b082      	sub	sp, #8
    9616:	682b      	ldr	r3, [r5, #0]
    9618:	9300      	str	r3, [sp, #0]
	return ret;
    961a:	9e00      	ldr	r6, [sp, #0]
    961c:	4604      	mov	r4, r0
    961e:	e008      	b.n	9632 <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    9620:	f002 fd3e 	bl	c0a0 <yield>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9624:	682b      	ldr	r3, [r5, #0]
    9626:	9301      	str	r3, [sp, #4]
	return ret;
    9628:	9b01      	ldr	r3, [sp, #4]
  } while(millis() - startMillis < _timeout);
    962a:	68a2      	ldr	r2, [r4, #8]
    962c:	1b9b      	subs	r3, r3, r6
    962e:	4293      	cmp	r3, r2
    9630:	d207      	bcs.n	9642 <Stream::timedPeek()+0x32>
    c = peek();
    9632:	6823      	ldr	r3, [r4, #0]
    9634:	4620      	mov	r0, r4
    9636:	699b      	ldr	r3, [r3, #24]
    9638:	4798      	blx	r3
    if (c >= 0) return c;
    963a:	2800      	cmp	r0, #0
    963c:	dbf0      	blt.n	9620 <Stream::timedPeek()+0x10>
  return -1;     // -1 indicates timeout
}
    963e:	b002      	add	sp, #8
    9640:	bd70      	pop	{r4, r5, r6, pc}
  return -1;     // -1 indicates timeout
    9642:	f04f 30ff 	mov.w	r0, #4294967295
}
    9646:	b002      	add	sp, #8
    9648:	bd70      	pop	{r4, r5, r6, pc}
    964a:	bf00      	nop
    964c:	1fffdcc4 	.word	0x1fffdcc4

00009650 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    9650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9652:	4604      	mov	r4, r0
    9654:	460d      	mov	r5, r1
int Stream::peekNextDigit()
    9656:	e006      	b.n	9666 <Stream::parseInt(char)+0x16>
    if (c == '-') return c;
    9658:	2b2d      	cmp	r3, #45	; 0x2d
    965a:	d00f      	beq.n	967c <Stream::parseInt(char)+0x2c>
    if (c >= '0' && c <= '9') return c;
    965c:	2a09      	cmp	r2, #9
    965e:	d90d      	bls.n	967c <Stream::parseInt(char)+0x2c>
    read();  // discard non-numeric
    9660:	6823      	ldr	r3, [r4, #0]
    9662:	695b      	ldr	r3, [r3, #20]
    9664:	4798      	blx	r3
    c = timedPeek();
    9666:	4620      	mov	r0, r4
    9668:	f7ff ffd2 	bl	9610 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    966c:	1e03      	subs	r3, r0, #0
    if (c >= '0' && c <= '9') return c;
    966e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    9672:	4620      	mov	r0, r4
    if (c < 0) return c;  // timeout
    9674:	daf0      	bge.n	9658 <Stream::parseInt(char)+0x8>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    9676:	2700      	movs	r7, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    9678:	4638      	mov	r0, r7
    967a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(c == skipChar)
    967c:	2700      	movs	r7, #0
    967e:	463e      	mov	r6, r7
    9680:	42ab      	cmp	r3, r5
    9682:	d00b      	beq.n	969c <Stream::parseInt(char)+0x4c>
    else if(c == '-')
    9684:	2b2d      	cmp	r3, #45	; 0x2d
    9686:	d01c      	beq.n	96c2 <Stream::parseInt(char)+0x72>
    else if(c >= '0' && c <= '9')        // is c a digit?
    9688:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    968c:	2a09      	cmp	r2, #9
    968e:	d805      	bhi.n	969c <Stream::parseInt(char)+0x4c>
      value = value * 10 + c - '0';
    9690:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    9694:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    9698:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
    read();  // consume the character we got with peek
    969c:	6823      	ldr	r3, [r4, #0]
    969e:	4620      	mov	r0, r4
    96a0:	695b      	ldr	r3, [r3, #20]
    96a2:	4798      	blx	r3
    c = timedPeek();
    96a4:	4620      	mov	r0, r4
    96a6:	f7ff ffb3 	bl	9610 <Stream::timedPeek()>
  while( (c >= '0' && c <= '9') || c == skipChar );
    96aa:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    96ae:	2a09      	cmp	r2, #9
    c = timedPeek();
    96b0:	4603      	mov	r3, r0
  while( (c >= '0' && c <= '9') || c == skipChar );
    96b2:	d9e5      	bls.n	9680 <Stream::parseInt(char)+0x30>
    96b4:	42a8      	cmp	r0, r5
    96b6:	d0f1      	beq.n	969c <Stream::parseInt(char)+0x4c>
  if(isNegative)
    96b8:	2e00      	cmp	r6, #0
    96ba:	d0dd      	beq.n	9678 <Stream::parseInt(char)+0x28>
    value = -value;
    96bc:	427f      	negs	r7, r7
}
    96be:	4638      	mov	r0, r7
    96c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      isNegative = true;
    96c2:	2601      	movs	r6, #1
    96c4:	e7ea      	b.n	969c <Stream::parseInt(char)+0x4c>
    96c6:	bf00      	nop

000096c8 <Stream::parseInt()>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    96c8:	2101      	movs	r1, #1
    96ca:	f7ff bfc1 	b.w	9650 <Stream::parseInt(char)>
    96ce:	bf00      	nop

000096d0 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    96d0:	4b2a      	ldr	r3, [pc, #168]	; (977c <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    96d2:	4a2b      	ldr	r2, [pc, #172]	; (9780 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    96d4:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    96d6:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    96d8:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    96da:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    96dc:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    96de:	4829      	ldr	r0, [pc, #164]	; (9784 <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    96e0:	2b08      	cmp	r3, #8
    96e2:	d034      	beq.n	974e <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    96e4:	2b0a      	cmp	r3, #10
    96e6:	d020      	beq.n	972a <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    96e8:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    96ea:	4b27      	ldr	r3, [pc, #156]	; (9788 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    96ec:	bf0c      	ite	eq
    96ee:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    96f0:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    96f2:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    96f4:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    96f6:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    96f8:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    96fa:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    96fc:	4b23      	ldr	r3, [pc, #140]	; (978c <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    96fe:	4921      	ldr	r1, [pc, #132]	; (9784 <analog_init+0xb4>)
	if (analog_reference_internal) {
    9700:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9702:	4a21      	ldr	r2, [pc, #132]	; (9788 <analog_init+0xb8>)
	if (analog_reference_internal) {
    9704:	b1cb      	cbz	r3, 973a <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9706:	2301      	movs	r3, #1
    9708:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    970a:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    970c:	4b20      	ldr	r3, [pc, #128]	; (9790 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    970e:	491d      	ldr	r1, [pc, #116]	; (9784 <analog_init+0xb4>)
	num = analog_num_average;
    9710:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    9712:	4a1d      	ldr	r2, [pc, #116]	; (9788 <analog_init+0xb8>)
	if (num <= 1) {
    9714:	2b01      	cmp	r3, #1
    9716:	d913      	bls.n	9740 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    9718:	2b04      	cmp	r3, #4
    971a:	d81b      	bhi.n	9754 <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    971c:	2384      	movs	r3, #132	; 0x84
    971e:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    9720:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    9722:	4b1c      	ldr	r3, [pc, #112]	; (9794 <analog_init+0xc4>)
    9724:	2201      	movs	r2, #1
    9726:	701a      	strb	r2, [r3, #0]
}
    9728:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    972a:	4b17      	ldr	r3, [pc, #92]	; (9788 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    972c:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    972e:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9730:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9732:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9734:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9736:	60da      	str	r2, [r3, #12]
    9738:	e7e0      	b.n	96fc <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    973a:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    973c:	6213      	str	r3, [r2, #32]
    973e:	e7e5      	b.n	970c <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    9740:	2380      	movs	r3, #128	; 0x80
    9742:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    9744:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9746:	4b13      	ldr	r3, [pc, #76]	; (9794 <analog_init+0xc4>)
    9748:	2201      	movs	r2, #1
    974a:	701a      	strb	r2, [r3, #0]
}
    974c:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    974e:	4b0e      	ldr	r3, [pc, #56]	; (9788 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9750:	2101      	movs	r1, #1
    9752:	e7ec      	b.n	972e <analog_init+0x5e>
	} else if (num <= 8) {
    9754:	2b08      	cmp	r3, #8
    9756:	d806      	bhi.n	9766 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    9758:	2385      	movs	r3, #133	; 0x85
    975a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    975c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    975e:	4b0d      	ldr	r3, [pc, #52]	; (9794 <analog_init+0xc4>)
    9760:	2201      	movs	r2, #1
    9762:	701a      	strb	r2, [r3, #0]
}
    9764:	4770      	bx	lr
	} else if (num <= 16) {
    9766:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    9768:	bf94      	ite	ls
    976a:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    976c:	2387      	movhi	r3, #135	; 0x87
    976e:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    9770:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9772:	4b08      	ldr	r3, [pc, #32]	; (9794 <analog_init+0xc4>)
    9774:	2201      	movs	r2, #1
    9776:	701a      	strb	r2, [r3, #0]
}
    9778:	4770      	bx	lr
    977a:	bf00      	nop
    977c:	40074000 	.word	0x40074000
    9780:	1fff88e4 	.word	0x1fff88e4
    9784:	4003b000 	.word	0x4003b000
    9788:	400bb000 	.word	0x400bb000
    978c:	1fffdcc0 	.word	0x1fffdcc0
    9790:	1fff88e5 	.word	0x1fff88e5
    9794:	1fffdcc1 	.word	0x1fffdcc1

00009798 <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    9798:	4a0b      	ldr	r2, [pc, #44]	; (97c8 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    979a:	490c      	ldr	r1, [pc, #48]	; (97cc <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    979c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    979e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    97a2:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (analog_reference_internal) {
    97a4:	780b      	ldrb	r3, [r1, #0]
    97a6:	b14b      	cbz	r3, 97bc <analogWriteDAC0+0x24>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    97a8:	4b09      	ldr	r3, [pc, #36]	; (97d0 <analogWriteDAC0+0x38>)
    97aa:	2280      	movs	r2, #128	; 0x80
    97ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    97b0:	4b07      	ldr	r3, [pc, #28]	; (97d0 <analogWriteDAC0+0x38>)
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    97b2:	f380 000c 	usat	r0, #12, r0
	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    97b6:	b200      	sxth	r0, r0
    97b8:	8018      	strh	r0, [r3, #0]
	if (val < 0) val = 0;
	else if (val > 4095) val = 4095;

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
#endif
}
    97ba:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    97bc:	4b04      	ldr	r3, [pc, #16]	; (97d0 <analogWriteDAC0+0x38>)
    97be:	22c0      	movs	r2, #192	; 0xc0
    97c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    97c4:	e7f4      	b.n	97b0 <analogWriteDAC0+0x18>
    97c6:	bf00      	nop
    97c8:	40048000 	.word	0x40048000
    97cc:	1fffdcc0 	.word	0x1fffdcc0
    97d0:	400cc000 	.word	0x400cc000

000097d4 <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    97d4:	b510      	push	{r4, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    97d6:	4b17      	ldr	r3, [pc, #92]	; (9834 <eeprom_initialize+0x60>)
    97d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    97da:	b084      	sub	sp, #16
	uint16_t do_flash_cmd[] = {
    97dc:	46ec      	mov	ip, sp
    97de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    97e2:	4b15      	ldr	r3, [pc, #84]	; (9838 <eeprom_initialize+0x64>)
    97e4:	785a      	ldrb	r2, [r3, #1]
    97e6:	0791      	lsls	r1, r2, #30
    97e8:	d517      	bpl.n	981a <eeprom_initialize+0x46>
		uint8_t stat = FTFL_FSTAT & 0x70;
    97ea:	781a      	ldrb	r2, [r3, #0]
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    97ec:	4c12      	ldr	r4, [pc, #72]	; (9838 <eeprom_initialize+0x64>)
		if (stat) FTFL_FSTAT = stat;
    97ee:	f012 0270 	ands.w	r2, r2, #112	; 0x70
    97f2:	bf18      	it	ne
    97f4:	701a      	strbne	r2, [r3, #0]
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    97f6:	2180      	movs	r1, #128	; 0x80
		FTFL_FCCOB3 = 0;
    97f8:	2300      	movs	r3, #0
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    97fa:	71e1      	strb	r1, [r4, #7]
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    97fc:	2233      	movs	r2, #51	; 0x33
		FTFL_FCCOB3 = 0;
    97fe:	7123      	strb	r3, [r4, #4]
		FTFL_FCCOB5 = EEPARTITION;
    9800:	2303      	movs	r3, #3
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    9802:	72e2      	strb	r2, [r4, #11]
		FTFL_FCCOB5 = EEPARTITION;
    9804:	72a3      	strb	r3, [r4, #10]
		__disable_irq();
    9806:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    9808:	f04c 0301 	orr.w	r3, ip, #1
    980c:	4620      	mov	r0, r4
    980e:	4798      	blx	r3
		__enable_irq();
    9810:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    9812:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    9814:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    9818:	d109      	bne.n	982e <eeprom_initialize+0x5a>
{
    981a:	4b08      	ldr	r3, [pc, #32]	; (983c <eeprom_initialize+0x68>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    981c:	4906      	ldr	r1, [pc, #24]	; (9838 <eeprom_initialize+0x64>)
    981e:	e001      	b.n	9824 <eeprom_initialize+0x50>
		if (++count > 200000) break;
    9820:	3b01      	subs	r3, #1
    9822:	d002      	beq.n	982a <eeprom_initialize+0x56>
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9824:	784a      	ldrb	r2, [r1, #1]
    9826:	07d2      	lsls	r2, r2, #31
    9828:	d5fa      	bpl.n	9820 <eeprom_initialize+0x4c>
	}
}
    982a:	b004      	add	sp, #16
    982c:	bd10      	pop	{r4, pc}
			FTFL_FSTAT = (status & 0x70);
    982e:	7023      	strb	r3, [r4, #0]
}
    9830:	b004      	add	sp, #16
    9832:	bd10      	pop	{r4, pc}
    9834:	000152a4 	.word	0x000152a4
    9838:	40020000 	.word	0x40020000
    983c:	00030d41 	.word	0x00030d41

00009840 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    9840:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9844:	d211      	bcs.n	986a <eeprom_read_byte+0x2a>
{
    9846:	b510      	push	{r4, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9848:	4b09      	ldr	r3, [pc, #36]	; (9870 <eeprom_read_byte+0x30>)
    984a:	785b      	ldrb	r3, [r3, #1]
    984c:	07db      	lsls	r3, r3, #31
    984e:	4604      	mov	r4, r0
    9850:	d504      	bpl.n	985c <eeprom_read_byte+0x1c>
	return FlexRAM[offset];
    9852:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    9856:	7820      	ldrb	r0, [r4, #0]
    9858:	b2c0      	uxtb	r0, r0
}
    985a:	bd10      	pop	{r4, pc}
	return FlexRAM[offset];
    985c:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9860:	f7ff ffb8 	bl	97d4 <eeprom_initialize>
	return FlexRAM[offset];
    9864:	7820      	ldrb	r0, [r4, #0]
    9866:	b2c0      	uxtb	r0, r0
}
    9868:	bd10      	pop	{r4, pc}
	if (offset >= EEPROM_SIZE) return 0;
    986a:	2000      	movs	r0, #0
}
    986c:	4770      	bx	lr
    986e:	bf00      	nop
    9870:	40020000 	.word	0x40020000

00009874 <eeprom_write_byte>:

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    9874:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9878:	d21f      	bcs.n	98ba <eeprom_write_byte+0x46>
{
    987a:	b538      	push	{r3, r4, r5, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    987c:	4b0f      	ldr	r3, [pc, #60]	; (98bc <eeprom_write_byte+0x48>)
    987e:	785b      	ldrb	r3, [r3, #1]
    9880:	07da      	lsls	r2, r3, #31
    9882:	4604      	mov	r4, r0
    9884:	460d      	mov	r5, r1
    9886:	d510      	bpl.n	98aa <eeprom_write_byte+0x36>
	if (FlexRAM[offset] != value) {
    9888:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    988c:	7823      	ldrb	r3, [r4, #0]
    988e:	42ab      	cmp	r3, r5
    9890:	d00a      	beq.n	98a8 <eeprom_write_byte+0x34>
		kinetis_hsrun_disable();
		uint8_t stat = FTFL_FSTAT & 0x70;
    9892:	4a0a      	ldr	r2, [pc, #40]	; (98bc <eeprom_write_byte+0x48>)
    9894:	7813      	ldrb	r3, [r2, #0]
		if (stat) FTFL_FSTAT = stat;
    9896:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    989a:	bf18      	it	ne
    989c:	7013      	strbne	r3, [r2, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    989e:	4a07      	ldr	r2, [pc, #28]	; (98bc <eeprom_write_byte+0x48>)
		FlexRAM[offset] = value;
    98a0:	7025      	strb	r5, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    98a2:	7853      	ldrb	r3, [r2, #1]
    98a4:	07db      	lsls	r3, r3, #31
    98a6:	d5fc      	bpl.n	98a2 <eeprom_write_byte+0x2e>
		flexram_wait();
		kinetis_hsrun_enable();
	}
}
    98a8:	bd38      	pop	{r3, r4, r5, pc}
	if (FlexRAM[offset] != value) {
    98aa:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    98ae:	f7ff ff91 	bl	97d4 <eeprom_initialize>
	if (FlexRAM[offset] != value) {
    98b2:	7823      	ldrb	r3, [r4, #0]
    98b4:	42ab      	cmp	r3, r5
    98b6:	d1ec      	bne.n	9892 <eeprom_write_byte+0x1e>
    98b8:	e7f6      	b.n	98a8 <eeprom_write_byte+0x34>
    98ba:	4770      	bx	lr
    98bc:	40020000 	.word	0x40020000

000098c0 <eeprom_write_block>:
void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint32_t offset = (uint32_t)addr;
	const uint8_t *src = (const uint8_t *)buf;

	if (offset >= EEPROM_SIZE) return;
    98c0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    98c4:	d276      	bcs.n	99b4 <eeprom_write_block+0xf4>
{
    98c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    98c8:	4b3b      	ldr	r3, [pc, #236]	; (99b8 <eeprom_write_block+0xf8>)
    98ca:	785b      	ldrb	r3, [r3, #1]
    98cc:	07db      	lsls	r3, r3, #31
    98ce:	460e      	mov	r6, r1
    98d0:	4604      	mov	r4, r0
    98d2:	4617      	mov	r7, r2
    98d4:	460d      	mov	r5, r1
    98d6:	d51f      	bpl.n	9918 <eeprom_write_block+0x58>
	if (len >= EEPROM_SIZE) len = EEPROM_SIZE;
    98d8:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
    98dc:	4638      	mov	r0, r7
    98de:	bf28      	it	cs
    98e0:	f44f 6000 	movcs.w	r0, #2048	; 0x800
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    98e4:	1833      	adds	r3, r6, r0
    98e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    98ea:	d212      	bcs.n	9912 <eeprom_write_block+0x52>
	while (len > 0) {
    98ec:	b187      	cbz	r7, 9910 <eeprom_write_block+0x50>
		} else {
			// write 8 bits
			uint8_t val8 = *src++;
			if (FlexRAM[offset] != val8) {
				kinetis_hsrun_disable();
				uint8_t stat = FTFL_FSTAT & 0x70;
    98ee:	4a32      	ldr	r2, [pc, #200]	; (99b8 <eeprom_write_block+0xf8>)
		if (lsb == 0 && len >= 4) {
    98f0:	f015 0303 	ands.w	r3, r5, #3
    98f4:	d026      	beq.n	9944 <eeprom_write_block+0x84>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    98f6:	2b02      	cmp	r3, #2
    98f8:	d011      	beq.n	991e <eeprom_write_block+0x5e>
			if (FlexRAM[offset] != val8) {
    98fa:	f105 53a0 	add.w	r3, r5, #335544320	; 0x14000000
			uint8_t val8 = *src++;
    98fe:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (FlexRAM[offset] != val8) {
    9902:	781e      	ldrb	r6, [r3, #0]
    9904:	428e      	cmp	r6, r1
    9906:	d137      	bne.n	9978 <eeprom_write_block+0xb8>
				FlexRAM[offset] = val8;
				flexram_wait();
				kinetis_hsrun_enable();
			}
			offset++;
			len--;
    9908:	3801      	subs	r0, #1
			offset++;
    990a:	3501      	adds	r5, #1
	while (len > 0) {
    990c:	2800      	cmp	r0, #0
    990e:	d1ef      	bne.n	98f0 <eeprom_write_block+0x30>
		}
	}
}
    9910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    9912:	f5c6 6000 	rsb	r0, r6, #2048	; 0x800
	while (len > 0) {
    9916:	e7ea      	b.n	98ee <eeprom_write_block+0x2e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9918:	f7ff ff5c 	bl	97d4 <eeprom_initialize>
    991c:	e7dc      	b.n	98d8 <eeprom_write_block+0x18>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    991e:	2801      	cmp	r0, #1
    9920:	d0eb      	beq.n	98fa <eeprom_write_block+0x3a>
			val16 |= (*src++ << 8);
    9922:	4621      	mov	r1, r4
			if (*(uint16_t *)(&FlexRAM[offset]) != val16) {
    9924:	f105 56a0 	add.w	r6, r5, #335544320	; 0x14000000
    9928:	7867      	ldrb	r7, [r4, #1]
    992a:	f811 3b02 	ldrb.w	r3, [r1], #2
    992e:	8834      	ldrh	r4, [r6, #0]
    9930:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    9934:	429c      	cmp	r4, r3
    9936:	d129      	bne.n	998c <eeprom_write_block+0xcc>
			len -= 2;
    9938:	3802      	subs	r0, #2
			offset += 2;
    993a:	3502      	adds	r5, #2
			val16 |= (*src++ << 8);
    993c:	460c      	mov	r4, r1
	while (len > 0) {
    993e:	2800      	cmp	r0, #0
    9940:	d1d6      	bne.n	98f0 <eeprom_write_block+0x30>
    9942:	e7e5      	b.n	9910 <eeprom_write_block+0x50>
		if (lsb == 0 && len >= 4) {
    9944:	2803      	cmp	r0, #3
    9946:	d9ea      	bls.n	991e <eeprom_write_block+0x5e>
			val32 |= (*src++ << 24);
    9948:	4621      	mov	r1, r4
    994a:	f894 c001 	ldrb.w	ip, [r4, #1]
    994e:	f811 3b04 	ldrb.w	r3, [r1], #4
    9952:	78a7      	ldrb	r7, [r4, #2]
    9954:	78e6      	ldrb	r6, [r4, #3]
    9956:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    995a:	f105 54a0 	add.w	r4, r5, #335544320	; 0x14000000
			val32 |= (*src++ << 24);
    995e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    9962:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    9966:	6826      	ldr	r6, [r4, #0]
    9968:	429e      	cmp	r6, r3
    996a:	d119      	bne.n	99a0 <eeprom_write_block+0xe0>
			len -= 4;
    996c:	3804      	subs	r0, #4
			offset += 4;
    996e:	3504      	adds	r5, #4
			val32 |= (*src++ << 24);
    9970:	460c      	mov	r4, r1
	while (len > 0) {
    9972:	2800      	cmp	r0, #0
    9974:	d1bc      	bne.n	98f0 <eeprom_write_block+0x30>
    9976:	e7cb      	b.n	9910 <eeprom_write_block+0x50>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9978:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    997a:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    997e:	bf18      	it	ne
    9980:	7016      	strbne	r6, [r2, #0]
				FlexRAM[offset] = val8;
    9982:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9984:	7853      	ldrb	r3, [r2, #1]
    9986:	07db      	lsls	r3, r3, #31
    9988:	d5fc      	bpl.n	9984 <eeprom_write_block+0xc4>
    998a:	e7bd      	b.n	9908 <eeprom_write_block+0x48>
				uint8_t stat = FTFL_FSTAT & 0x70;
    998c:	7814      	ldrb	r4, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    998e:	f014 0470 	ands.w	r4, r4, #112	; 0x70
    9992:	bf18      	it	ne
    9994:	7014      	strbne	r4, [r2, #0]
				*(uint16_t *)(&FlexRAM[offset]) = val16;
    9996:	8033      	strh	r3, [r6, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9998:	7853      	ldrb	r3, [r2, #1]
    999a:	07dc      	lsls	r4, r3, #31
    999c:	d5fc      	bpl.n	9998 <eeprom_write_block+0xd8>
    999e:	e7cb      	b.n	9938 <eeprom_write_block+0x78>
				uint8_t stat = FTFL_FSTAT & 0x70;
    99a0:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    99a2:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    99a6:	bf18      	it	ne
    99a8:	7016      	strbne	r6, [r2, #0]
				*(uint32_t *)(&FlexRAM[offset]) = val32;
    99aa:	6023      	str	r3, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    99ac:	7853      	ldrb	r3, [r2, #1]
    99ae:	07de      	lsls	r6, r3, #31
    99b0:	d5fc      	bpl.n	99ac <eeprom_write_block+0xec>
    99b2:	e7db      	b.n	996c <eeprom_write_block+0xac>
    99b4:	4770      	bx	lr
    99b6:	bf00      	nop
    99b8:	40020000 	.word	0x40020000

000099bc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    99bc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    99be:	f7fd fd15 	bl	73ec <setup>
	while (1) {
		loop();
    99c2:	f7fc fe0b 	bl	65dc <loop>
		yield();
    99c6:	f002 fb6b 	bl	c0a0 <yield>
	while (1) {
    99ca:	e7fa      	b.n	99c2 <main+0x6>

000099cc <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    99cc:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    99ce:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    99d2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    99d6:	d16f      	bne.n	9ab8 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    99d8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    99da:	d341      	bcc.n	9a60 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    99dc:	f851 3b04 	ldr.w	r3, [r1], #4
    99e0:	f840 3b04 	str.w	r3, [r0], #4
    99e4:	f851 3b04 	ldr.w	r3, [r1], #4
    99e8:	f840 3b04 	str.w	r3, [r0], #4
    99ec:	f851 3b04 	ldr.w	r3, [r1], #4
    99f0:	f840 3b04 	str.w	r3, [r0], #4
    99f4:	f851 3b04 	ldr.w	r3, [r1], #4
    99f8:	f840 3b04 	str.w	r3, [r0], #4
    99fc:	f851 3b04 	ldr.w	r3, [r1], #4
    9a00:	f840 3b04 	str.w	r3, [r0], #4
    9a04:	f851 3b04 	ldr.w	r3, [r1], #4
    9a08:	f840 3b04 	str.w	r3, [r0], #4
    9a0c:	f851 3b04 	ldr.w	r3, [r1], #4
    9a10:	f840 3b04 	str.w	r3, [r0], #4
    9a14:	f851 3b04 	ldr.w	r3, [r1], #4
    9a18:	f840 3b04 	str.w	r3, [r0], #4
    9a1c:	f851 3b04 	ldr.w	r3, [r1], #4
    9a20:	f840 3b04 	str.w	r3, [r0], #4
    9a24:	f851 3b04 	ldr.w	r3, [r1], #4
    9a28:	f840 3b04 	str.w	r3, [r0], #4
    9a2c:	f851 3b04 	ldr.w	r3, [r1], #4
    9a30:	f840 3b04 	str.w	r3, [r0], #4
    9a34:	f851 3b04 	ldr.w	r3, [r1], #4
    9a38:	f840 3b04 	str.w	r3, [r0], #4
    9a3c:	f851 3b04 	ldr.w	r3, [r1], #4
    9a40:	f840 3b04 	str.w	r3, [r0], #4
    9a44:	f851 3b04 	ldr.w	r3, [r1], #4
    9a48:	f840 3b04 	str.w	r3, [r0], #4
    9a4c:	f851 3b04 	ldr.w	r3, [r1], #4
    9a50:	f840 3b04 	str.w	r3, [r0], #4
    9a54:	f851 3b04 	ldr.w	r3, [r1], #4
    9a58:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9a5c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9a5e:	d2bd      	bcs.n	99dc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9a60:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9a62:	d311      	bcc.n	9a88 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9a64:	f851 3b04 	ldr.w	r3, [r1], #4
    9a68:	f840 3b04 	str.w	r3, [r0], #4
    9a6c:	f851 3b04 	ldr.w	r3, [r1], #4
    9a70:	f840 3b04 	str.w	r3, [r0], #4
    9a74:	f851 3b04 	ldr.w	r3, [r1], #4
    9a78:	f840 3b04 	str.w	r3, [r0], #4
    9a7c:	f851 3b04 	ldr.w	r3, [r1], #4
    9a80:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9a84:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    9a86:	d2ed      	bcs.n	9a64 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9a88:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    9a8a:	d305      	bcc.n	9a98 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9a8c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9a90:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    9a94:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9a96:	d2f9      	bcs.n	9a8c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9a98:	3204      	adds	r2, #4
	beq	.Ldone
    9a9a:	d00a      	beq.n	9ab2 <memcpy+0xe6>

	lsls	r2, r2, #31
    9a9c:	07d2      	lsls	r2, r2, #31
	itt ne
    9a9e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9aa0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9aa4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9aa8:	d303      	bcc.n	9ab2 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    9aaa:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9aac:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9aae:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9ab0:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9ab2:	bc01      	pop	{r0}
#endif
	bx	lr
    9ab4:	4770      	bx	lr
    9ab6:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    9ab8:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    9aba:	d34a      	bcc.n	9b52 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9abc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9ac0:	d011      	beq.n	9ae6 <memcpy+0x11a>

	rsb	r3, #4
    9ac2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    9ac6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    9ac8:	07db      	lsls	r3, r3, #31
	itt ne
    9aca:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9acc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9ad0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9ad4:	d307      	bcc.n	9ae6 <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    9ad6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9ada:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    9ade:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9ae2:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    9ae6:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    9aea:	f43f af75 	beq.w	99d8 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    9aee:	b430      	push	{r4, r5}
	subs	r2, #4
    9af0:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    9af2:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    9af4:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    9af8:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    9afc:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    9afe:	d019      	beq.n	9b34 <memcpy+0x168>
	cmp	r3, #3
    9b00:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    9b02:	d00b      	beq.n	9b1c <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    9b04:	0a24      	lsrs	r4, r4, #8
    9b06:	f851 3b04 	ldr.w	r3, [r1], #4
    9b0a:	061d      	lsls	r5, r3, #24
    9b0c:	ea44 0405 	orr.w	r4, r4, r5
    9b10:	f840 4b04 	str.w	r4, [r0], #4
    9b14:	461c      	mov	r4, r3
    9b16:	3a04      	subs	r2, #4
    9b18:	d2f4      	bcs.n	9b04 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    9b1a:	e016      	b.n	9b4a <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    9b1c:	0e24      	lsrs	r4, r4, #24
    9b1e:	f851 3b04 	ldr.w	r3, [r1], #4
    9b22:	021d      	lsls	r5, r3, #8
    9b24:	ea44 0405 	orr.w	r4, r4, r5
    9b28:	f840 4b04 	str.w	r4, [r0], #4
    9b2c:	461c      	mov	r4, r3
    9b2e:	3a04      	subs	r2, #4
    9b30:	d2f4      	bcs.n	9b1c <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    9b32:	e00a      	b.n	9b4a <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    9b34:	0c24      	lsrs	r4, r4, #16
    9b36:	f851 3b04 	ldr.w	r3, [r1], #4
    9b3a:	041d      	lsls	r5, r3, #16
    9b3c:	ea44 0405 	orr.w	r4, r4, r5
    9b40:	f840 4b04 	str.w	r4, [r0], #4
    9b44:	461c      	mov	r4, r3
    9b46:	3a04      	subs	r2, #4
    9b48:	d2f4      	bcs.n	9b34 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    9b4a:	3204      	adds	r2, #4
	subs	r1, ip
    9b4c:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    9b50:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9b52:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    9b54:	d3a0      	bcc.n	9a98 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9b56:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    9b58:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9b5c:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9b60:	d2f9      	bcs.n	9b56 <memcpy+0x18a>

	ldrb	r3, [r1]
    9b62:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9b64:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9b66:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9b68:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9b6a:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9b6c:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9b6e:	bc01      	pop	{r0}
#endif
	bx	lr
    9b70:	4770      	bx	lr
    9b72:	bf00      	nop

00009b74 <fault_isr>:
{
    9b74:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9b76:	4c0f      	ldr	r4, [pc, #60]	; (9bb4 <fault_isr+0x40>)
    9b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9b7a:	0358      	lsls	r0, r3, #13
    9b7c:	d40d      	bmi.n	9b9a <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9b80:	0559      	lsls	r1, r3, #21
    9b82:	d40f      	bmi.n	9ba4 <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9b84:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9b86:	051a      	lsls	r2, r3, #20
    9b88:	d411      	bmi.n	9bae <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9b8c:	04db      	lsls	r3, r3, #19
    9b8e:	d5f3      	bpl.n	9b78 <fault_isr+0x4>
    9b90:	f001 fb38 	bl	b204 <uart2_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9b94:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9b96:	0358      	lsls	r0, r3, #13
    9b98:	d5f1      	bpl.n	9b7e <fault_isr+0xa>
    9b9a:	f001 fcb3 	bl	b504 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9b9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9ba0:	0559      	lsls	r1, r3, #21
    9ba2:	d5ef      	bpl.n	9b84 <fault_isr+0x10>
    9ba4:	f000 f808 	bl	9bb8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9ba8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9baa:	051a      	lsls	r2, r3, #20
    9bac:	d5ed      	bpl.n	9b8a <fault_isr+0x16>
    9bae:	f000 ff95 	bl	aadc <uart1_status_isr>
    9bb2:	e7ea      	b.n	9b8a <fault_isr+0x16>
    9bb4:	40048000 	.word	0x40048000

00009bb8 <unused_isr>:
{
    9bb8:	b508      	push	{r3, lr}
	fault_isr();
    9bba:	f7ff ffdb 	bl	9b74 <fault_isr>
    9bbe:	bf00      	nop

00009bc0 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9bc0:	4b01      	ldr	r3, [pc, #4]	; (9bc8 <startup_early_hook+0x8>)
    9bc2:	2210      	movs	r2, #16
    9bc4:	801a      	strh	r2, [r3, #0]
}
    9bc6:	4770      	bx	lr
    9bc8:	40052000 	.word	0x40052000

00009bcc <startup_late_hook>:
static void startup_default_late_hook(void) {}
    9bcc:	4770      	bx	lr
    9bce:	bf00      	nop

00009bd0 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    9bd0:	4a09      	ldr	r2, [pc, #36]	; (9bf8 <_sbrk+0x28>)
{
    9bd2:	b508      	push	{r3, lr}
    9bd4:	4603      	mov	r3, r0
	prev = __brkval;
    9bd6:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
    9bd8:	b133      	cbz	r3, 9be8 <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    9bda:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    9bdc:	4403      	add	r3, r0
    9bde:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    9be2:	428b      	cmp	r3, r1
    9be4:	d201      	bcs.n	9bea <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9be6:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
    9be8:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    9bea:	f004 f9a5 	bl	df38 <__errno>
    9bee:	230c      	movs	r3, #12
    9bf0:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    9bf2:	f04f 30ff 	mov.w	r0, #4294967295
}
    9bf6:	bd08      	pop	{r3, pc}
    9bf8:	1fff88e8 	.word	0x1fff88e8

00009bfc <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    9bfc:	2000      	movs	r0, #0
    9bfe:	4770      	bx	lr

00009c00 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    9c00:	f04f 30ff 	mov.w	r0, #4294967295
    9c04:	4770      	bx	lr
    9c06:	bf00      	nop

00009c08 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    9c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9c0c:	604b      	str	r3, [r1, #4]
	return 0;
}
    9c0e:	2000      	movs	r0, #0
    9c10:	4770      	bx	lr
    9c12:	bf00      	nop

00009c14 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    9c14:	2001      	movs	r0, #1
    9c16:	4770      	bx	lr

00009c18 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    9c18:	f04f 30ff 	mov.w	r0, #4294967295
    9c1c:	4770      	bx	lr
    9c1e:	bf00      	nop

00009c20 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    9c20:	e7fe      	b.n	9c20 <abort>
    9c22:	Address 0x00009c22 is out of bounds.


00009c24 <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    9c24:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    9c28:	b9cb      	cbnz	r3, 9c5e <nvic_execution_priority+0x3a>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9c2a:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    9c2e:	b9a0      	cbnz	r0, 9c5a <nvic_execution_priority+0x36>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9c30:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    9c34:	b943      	cbnz	r3, 9c48 <nvic_execution_priority+0x24>
	uint32_t priority=256;
    9c36:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    9c3a:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9c3e:	b15b      	cbz	r3, 9c58 <nvic_execution_priority+0x34>
    9c40:	4298      	cmp	r0, r3
    9c42:	bf28      	it	cs
    9c44:	4618      	movcs	r0, r3
	return priority;
    9c46:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    9c48:	2b0f      	cmp	r3, #15
    9c4a:	d9f6      	bls.n	9c3a <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    9c4c:	4a05      	ldr	r2, [pc, #20]	; (9c64 <nvic_execution_priority+0x40>)
    9c4e:	5cd0      	ldrb	r0, [r2, r3]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    9c50:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9c54:	2b00      	cmp	r3, #0
    9c56:	d1f3      	bne.n	9c40 <nvic_execution_priority+0x1c>
}
    9c58:	4770      	bx	lr
	if (primask) return 0;
    9c5a:	4618      	mov	r0, r3
}
    9c5c:	4770      	bx	lr
	if (faultmask) return -1;
    9c5e:	f04f 30ff 	mov.w	r0, #4294967295
    9c62:	4770      	bx	lr
    9c64:	e000e3f0 	.word	0xe000e3f0

00009c68 <operator new(unsigned int)>:

#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    9c68:	f003 ba00 	b.w	d06c <malloc>

00009c6c <operator new[](unsigned int)>:
    9c6c:	f003 b9fe 	b.w	d06c <malloc>

00009c70 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    9c70:	f101 3cff 	add.w	ip, r1, #4294967295
{
    9c74:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    9c76:	4665      	mov	r5, ip
	int i=0, j;
    9c78:	2400      	movs	r4, #0
    9c7a:	e001      	b.n	9c80 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    9c7c:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    9c7e:	3401      	adds	r4, #1
		digit = val % radix;
    9c80:	fbb0 fef2 	udiv	lr, r0, r2
    9c84:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9c88:	2b09      	cmp	r3, #9
    9c8a:	f103 0630 	add.w	r6, r3, #48	; 0x30
    9c8e:	bf8a      	itet	hi
    9c90:	3337      	addhi	r3, #55	; 0x37
    9c92:	b2f3      	uxtbls	r3, r6
    9c94:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    9c96:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9c98:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    9c9c:	d2ee      	bcs.n	9c7c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    9c9e:	1c63      	adds	r3, r4, #1
    9ca0:	2200      	movs	r2, #0
    9ca2:	54ca      	strb	r2, [r1, r3]
    9ca4:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    9ca6:	b17c      	cbz	r4, 9cc8 <ultoa+0x58>
		t = buf[j];
    9ca8:	4662      	mov	r2, ip
    9caa:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    9cae:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    9cb2:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    9cb6:	eba1 030c 	sub.w	r3, r1, ip
    9cba:	3202      	adds	r2, #2
    9cbc:	3b01      	subs	r3, #1
    9cbe:	1a52      	subs	r2, r2, r1
    9cc0:	4423      	add	r3, r4
    9cc2:	429a      	cmp	r2, r3
		buf[i] = t;
    9cc4:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    9cc6:	dbef      	blt.n	9ca8 <ultoa+0x38>
	}
	return buf;
}
    9cc8:	4608      	mov	r0, r1
    9cca:	bd70      	pop	{r4, r5, r6, pc}

00009ccc <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    9ccc:	4770      	bx	lr
    9cce:	bf00      	nop

00009cd0 <digitalWrite.part.0>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9cd0:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9cd2:	4b0f      	ldr	r3, [pc, #60]	; (9d10 <digitalWrite.part.0+0x40>)
    9cd4:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    9cd8:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    9cdc:	b12c      	cbz	r4, 9cea <digitalWrite.part.0+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    9cde:	2301      	movs	r3, #1
		if (val) {
    9ce0:	b191      	cbz	r1, 9d08 <digitalWrite.part.0+0x38>
			*portSetRegister(pin) = 1;
    9ce2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9ce6:	bc10      	pop	{r4}
    9ce8:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    9cea:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    9cee:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9cf0:	681a      	ldr	r2, [r3, #0]
		if (val) {
    9cf2:	b921      	cbnz	r1, 9cfe <digitalWrite.part.0+0x2e>
			*config &= ~(PORT_PCR_PE);
    9cf4:	f022 0202 	bic.w	r2, r2, #2
}
    9cf8:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    9cfa:	601a      	str	r2, [r3, #0]
}
    9cfc:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9cfe:	f042 0203 	orr.w	r2, r2, #3
}
    9d02:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9d04:	601a      	str	r2, [r3, #0]
}
    9d06:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    9d08:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    9d0c:	bc10      	pop	{r4}
    9d0e:	4770      	bx	lr
    9d10:	000152c8 	.word	0x000152c8

00009d14 <attachInterrupt>:
	if (pin >= CORE_NUM_DIGITAL) return;
    9d14:	2821      	cmp	r0, #33	; 0x21
    9d16:	d835      	bhi.n	9d84 <attachInterrupt+0x70>
	switch (mode) {
    9d18:	2a04      	cmp	r2, #4
    9d1a:	d833      	bhi.n	9d84 <attachInterrupt+0x70>
{
    9d1c:	b430      	push	{r4, r5}
	mask = (mask << 16) | 0x01000000;
    9d1e:	4b2a      	ldr	r3, [pc, #168]	; (9dc8 <attachInterrupt+0xb4>)
	config = portConfigRegister(pin);
    9d20:	4d2a      	ldr	r5, [pc, #168]	; (9dcc <attachInterrupt+0xb8>)
	mask = (mask << 16) | 0x01000000;
    9d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	config = portConfigRegister(pin);
    9d26:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
	mask = (mask << 16) | 0x01000000;
    9d2a:	041b      	lsls	r3, r3, #16
	config = portConfigRegister(pin);
    9d2c:	6854      	ldr	r4, [r2, #4]
	if ((*config & 0x00000700) == 0) {
    9d2e:	6822      	ldr	r2, [r4, #0]
    9d30:	f412 62e0 	ands.w	r2, r2, #1792	; 0x700
    9d34:	d039      	beq.n	9daa <attachInterrupt+0x96>
	_VectorsRam[irq + 16] = function;
    9d36:	4a26      	ldr	r2, [pc, #152]	; (9dd0 <attachInterrupt+0xbc>)
    9d38:	4826      	ldr	r0, [pc, #152]	; (9dd4 <attachInterrupt+0xc0>)
    9d3a:	f8c2 019c 	str.w	r0, [r2, #412]	; 0x19c
    9d3e:	4826      	ldr	r0, [pc, #152]	; (9dd8 <attachInterrupt+0xc4>)
    9d40:	f8c2 01a0 	str.w	r0, [r2, #416]	; 0x1a0
    9d44:	4825      	ldr	r0, [pc, #148]	; (9ddc <attachInterrupt+0xc8>)
    9d46:	f8c2 01a4 	str.w	r0, [r2, #420]	; 0x1a4
    9d4a:	4825      	ldr	r0, [pc, #148]	; (9de0 <attachInterrupt+0xcc>)
    9d4c:	f8c2 01a8 	str.w	r0, [r2, #424]	; 0x1a8
    9d50:	4824      	ldr	r0, [pc, #144]	; (9de4 <attachInterrupt+0xd0>)
    9d52:	f8c2 01ac 	str.w	r0, [r2, #428]	; 0x1ac
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    9d56:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
    9d5a:	f5a2 2092 	sub.w	r0, r2, #299008	; 0x49000
    9d5e:	287c      	cmp	r0, #124	; 0x7c
    9d60:	d811      	bhi.n	9d86 <attachInterrupt+0x72>
    9d62:	4821      	ldr	r0, [pc, #132]	; (9de8 <attachInterrupt+0xd4>)
	__disable_irq();
    9d64:	b672      	cpsid	i
	cfg = *config;
    9d66:	6822      	ldr	r2, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    9d68:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
	*config = cfg;
    9d6c:	6022      	str	r2, [r4, #0]
    9d6e:	4313      	orrs	r3, r2
	return (v % 128) / 4;
    9d70:	f3c4 0284 	ubfx	r2, r4, #2, #5
	cfg |= mask;
    9d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	isr_table[pin_index] = function;	// set the function pointer
    9d78:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	*config = cfg;			// enable the new interrupt
    9d7c:	6023      	str	r3, [r4, #0]
	__enable_irq();
    9d7e:	b662      	cpsie	i
}
    9d80:	bc30      	pop	{r4, r5}
    9d82:	4770      	bx	lr
    9d84:	4770      	bx	lr
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    9d86:	f5a2 2094 	sub.w	r0, r2, #303104	; 0x4a000
    9d8a:	287c      	cmp	r0, #124	; 0x7c
    9d8c:	d915      	bls.n	9dba <attachInterrupt+0xa6>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9d8e:	f5a2 2096 	sub.w	r0, r2, #307200	; 0x4b000
    9d92:	287c      	cmp	r0, #124	; 0x7c
    9d94:	d913      	bls.n	9dbe <attachInterrupt+0xaa>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    9d96:	f5a2 2098 	sub.w	r0, r2, #311296	; 0x4c000
    9d9a:	287c      	cmp	r0, #124	; 0x7c
    9d9c:	d911      	bls.n	9dc2 <attachInterrupt+0xae>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    9d9e:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    9da2:	2a7c      	cmp	r2, #124	; 0x7c
    9da4:	d8ec      	bhi.n	9d80 <attachInterrupt+0x6c>
    9da6:	4811      	ldr	r0, [pc, #68]	; (9dec <attachInterrupt+0xd8>)
    9da8:	e7dc      	b.n	9d64 <attachInterrupt+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    9daa:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
    9dae:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    9db2:	f44f 7280 	mov.w	r2, #256	; 0x100
    9db6:	6022      	str	r2, [r4, #0]
    9db8:	e7bd      	b.n	9d36 <attachInterrupt+0x22>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    9dba:	480d      	ldr	r0, [pc, #52]	; (9df0 <attachInterrupt+0xdc>)
    9dbc:	e7d2      	b.n	9d64 <attachInterrupt+0x50>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9dbe:	480d      	ldr	r0, [pc, #52]	; (9df4 <attachInterrupt+0xe0>)
    9dc0:	e7d0      	b.n	9d64 <attachInterrupt+0x50>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    9dc2:	480d      	ldr	r0, [pc, #52]	; (9df8 <attachInterrupt+0xe4>)
    9dc4:	e7ce      	b.n	9d64 <attachInterrupt+0x50>
    9dc6:	bf00      	nop
    9dc8:	000152b4 	.word	0x000152b4
    9dcc:	000152c8 	.word	0x000152c8
    9dd0:	1fff8200 	.word	0x1fff8200
    9dd4:	1fff87f1 	.word	0x1fff87f1
    9dd8:	1fff87bd 	.word	0x1fff87bd
    9ddc:	1fff8789 	.word	0x1fff8789
    9de0:	1fff8755 	.word	0x1fff8755
    9de4:	1fff8721 	.word	0x1fff8721
    9de8:	1fff88f0 	.word	0x1fff88f0
    9dec:	1fff89c8 	.word	0x1fff89c8
    9df0:	1fff8928 	.word	0x1fff8928
    9df4:	1fff8978 	.word	0x1fff8978
    9df8:	1fff89a8 	.word	0x1fff89a8

00009dfc <rtc_set>:
	RTC_SR = 0;
    9dfc:	4b03      	ldr	r3, [pc, #12]	; (9e0c <rtc_set+0x10>)
    9dfe:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    9e00:	2110      	movs	r1, #16
	RTC_SR = 0;
    9e02:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    9e04:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    9e06:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    9e08:	6159      	str	r1, [r3, #20]
}
    9e0a:	4770      	bx	lr
    9e0c:	4003d000 	.word	0x4003d000

00009e10 <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    9e10:	4770      	bx	lr
    9e12:	bf00      	nop

00009e14 <_init_Teensyduino_internal_>:
{
    9e14:	b5f0      	push	{r4, r5, r6, r7, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9e16:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    9e1a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    9e1e:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9e22:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    9e26:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    9e2a:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    9e2e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_CNT = 0;
    9e32:	4a1d      	ldr	r2, [pc, #116]	; (9ea8 <_init_Teensyduino_internal_+0x94>)
	FTM1_CNT = 0;
    9e34:	481d      	ldr	r0, [pc, #116]	; (9eac <_init_Teensyduino_internal_+0x98>)
	FTM2_CNT = 0;
    9e36:	491e      	ldr	r1, [pc, #120]	; (9eb0 <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    9e38:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
    9e3c:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9e40:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    9e42:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    9e44:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9e48:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    9e4a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    9e4e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
    9e52:	b083      	sub	sp, #12
	FTM0_CNT = 0;
    9e54:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    9e56:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9e58:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
    9e5a:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
    9e5c:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
    9e5e:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
    9e60:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    9e62:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
    9e64:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    9e66:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9e68:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
    9e6a:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9e6c:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
    9e6e:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
    9e70:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9e72:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    9e74:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    9e76:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
    9e78:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
    9e7a:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9e7c:	600d      	str	r5, [r1, #0]
	analog_init();
    9e7e:	f7ff fc27 	bl	96d0 <analog_init>
	startup_middle_hook();
    9e82:	f7ff ffc5 	bl	9e10 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    9e86:	4c0b      	ldr	r4, [pc, #44]	; (9eb4 <_init_Teensyduino_internal_+0xa0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9e88:	6823      	ldr	r3, [r4, #0]
    9e8a:	9300      	str	r3, [sp, #0]
	return ret;
    9e8c:	9b00      	ldr	r3, [sp, #0]
    9e8e:	2b13      	cmp	r3, #19
    9e90:	d9fa      	bls.n	9e88 <_init_Teensyduino_internal_+0x74>
	usb_init();
    9e92:	f001 fef1 	bl	bc78 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9e96:	6823      	ldr	r3, [r4, #0]
    9e98:	9301      	str	r3, [sp, #4]
	return ret;
    9e9a:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    9e9c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    9ea0:	d3f9      	bcc.n	9e96 <_init_Teensyduino_internal_+0x82>
}
    9ea2:	b003      	add	sp, #12
    9ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ea6:	bf00      	nop
    9ea8:	40038000 	.word	0x40038000
    9eac:	40039000 	.word	0x40039000
    9eb0:	400b8000 	.word	0x400b8000
    9eb4:	1fffdcc4 	.word	0x1fffdcc4

00009eb8 <analogWrite>:
	if (pin == A14) {
    9eb8:	2828      	cmp	r0, #40	; 0x28
		uint8_t res = analog_write_res;
    9eba:	4b7f      	ldr	r3, [pc, #508]	; (a0b8 <analogWrite+0x200>)
	if (pin == A14) {
    9ebc:	d036      	beq.n	9f2c <analogWrite+0x74>
	if (val <= 0) {
    9ebe:	2900      	cmp	r1, #0
	max = 1 << analog_write_res;
    9ec0:	781b      	ldrb	r3, [r3, #0]
	if (val <= 0) {
    9ec2:	dd3f      	ble.n	9f44 <analogWrite+0x8c>
	max = 1 << analog_write_res;
    9ec4:	2201      	movs	r2, #1
    9ec6:	fa02 fc03 	lsl.w	ip, r2, r3
	} else if (val >= max) {
    9eca:	4561      	cmp	r1, ip
{
    9ecc:	b510      	push	{r4, lr}
	} else if (val >= max) {
    9ece:	d254      	bcs.n	9f7a <analogWrite+0xc2>
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    9ed0:	1ec2      	subs	r2, r0, #3
    9ed2:	2a01      	cmp	r2, #1
    9ed4:	d970      	bls.n	9fb8 <analogWrite+0x100>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    9ed6:	2820      	cmp	r0, #32
    9ed8:	d067      	beq.n	9faa <analogWrite+0xf2>
    9eda:	2819      	cmp	r0, #25
    9edc:	d065      	beq.n	9faa <analogWrite+0xf2>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    9ede:	4a77      	ldr	r2, [pc, #476]	; (a0bc <analogWrite+0x204>)
    9ee0:	6892      	ldr	r2, [r2, #8]
    9ee2:	fb02 1201 	mla	r2, r2, r1, r1
    9ee6:	fa22 f303 	lsr.w	r3, r2, r3
	switch (pin) {
    9eea:	1f42      	subs	r2, r0, #5
    9eec:	2a1b      	cmp	r2, #27
    9eee:	d87d      	bhi.n	9fec <analogWrite+0x134>
    9ef0:	e8df f012 	tbh	[pc, r2, lsl #1]
    9ef4:	00bf00c6 	.word	0x00bf00c6
    9ef8:	007c007c 	.word	0x007c007c
    9efc:	00b100b8 	.word	0x00b100b8
    9f00:	007c007c 	.word	0x007c007c
    9f04:	007c007c 	.word	0x007c007c
    9f08:	007c007c 	.word	0x007c007c
    9f0c:	007c007c 	.word	0x007c007c
    9f10:	00aa007c 	.word	0x00aa007c
    9f14:	009c00a3 	.word	0x009c00a3
    9f18:	007c0095 	.word	0x007c0095
    9f1c:	007c00cd 	.word	0x007c00cd
    9f20:	007c007c 	.word	0x007c007c
    9f24:	007c007c 	.word	0x007c007c
    9f28:	00d4007c 	.word	0x00d4007c
		uint8_t res = analog_write_res;
    9f2c:	7818      	ldrb	r0, [r3, #0]
		if (res < 12) {
    9f2e:	280b      	cmp	r0, #11
			val <<= 12 - res;
    9f30:	bf95      	itete	ls
    9f32:	f1c0 000c 	rsbls	r0, r0, #12
			val >>= res - 12;
    9f36:	380c      	subhi	r0, #12
			val <<= 12 - res;
    9f38:	fa01 f000 	lslls.w	r0, r1, r0
			val >>= res - 12;
    9f3c:	fa41 f000 	asrhi.w	r0, r1, r0
		analogWriteDAC0(val);
    9f40:	f7ff bc2a 	b.w	9798 <analogWriteDAC0>
	if (pin >= CORE_NUM_DIGITAL) return;
    9f44:	2821      	cmp	r0, #33	; 0x21
    9f46:	d817      	bhi.n	9f78 <analogWrite+0xc0>
	if (*portModeRegister(pin)) {
    9f48:	4b5d      	ldr	r3, [pc, #372]	; (a0c0 <analogWrite+0x208>)
    9f4a:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    9f4e:	f892 1280 	ldrb.w	r1, [r2, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    9f52:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    9f56:	2900      	cmp	r1, #0
    9f58:	d03c      	beq.n	9fd4 <analogWrite+0x11c>
			*portClearRegister(pin) = 1;
    9f5a:	2101      	movs	r1, #1
		volatile uint32_t *config = portConfigRegister(pin);
    9f5c:	685b      	ldr	r3, [r3, #4]
			*portClearRegister(pin) = 1;
    9f5e:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		*portModeRegister(pin) = 1;
    9f62:	2001      	movs	r0, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9f64:	f44f 71a2 	mov.w	r1, #324	; 0x144
		*portModeRegister(pin) = 1;
    9f68:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9f6c:	6019      	str	r1, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    9f6e:	681a      	ldr	r2, [r3, #0]
    9f70:	f022 0220 	bic.w	r2, r2, #32
    9f74:	601a      	str	r2, [r3, #0]
    9f76:	4770      	bx	lr
    9f78:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
    9f7a:	2821      	cmp	r0, #33	; 0x21
    9f7c:	d814      	bhi.n	9fa8 <analogWrite+0xf0>
	if (*portModeRegister(pin)) {
    9f7e:	4b50      	ldr	r3, [pc, #320]	; (a0c0 <analogWrite+0x208>)
    9f80:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
    9f84:	f891 4280 	ldrb.w	r4, [r1, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    9f88:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    9f8c:	b344      	cbz	r4, 9fe0 <analogWrite+0x128>
		volatile uint32_t *config = portConfigRegister(pin);
    9f8e:	685b      	ldr	r3, [r3, #4]
			*portSetRegister(pin) = 1;
    9f90:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9f94:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    9f98:	2001      	movs	r0, #1
    9f9a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9f9e:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    9fa0:	681a      	ldr	r2, [r3, #0]
    9fa2:	f022 0220 	bic.w	r2, r2, #32
    9fa6:	601a      	str	r2, [r3, #0]
}
    9fa8:	bd10      	pop	{r4, pc}
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    9faa:	4a46      	ldr	r2, [pc, #280]	; (a0c4 <analogWrite+0x20c>)
    9fac:	6892      	ldr	r2, [r2, #8]
    9fae:	fb02 1201 	mla	r2, r2, r1, r1
    9fb2:	fa22 f303 	lsr.w	r3, r2, r3
    9fb6:	e798      	b.n	9eea <analogWrite+0x32>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    9fb8:	4c43      	ldr	r4, [pc, #268]	; (a0c8 <analogWrite+0x210>)
    9fba:	68a2      	ldr	r2, [r4, #8]
	switch (pin) {
    9fbc:	2804      	cmp	r0, #4
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    9fbe:	fb02 1201 	mla	r2, r2, r1, r1
    9fc2:	fa22 f203 	lsr.w	r2, r2, r3
	switch (pin) {
    9fc6:	d170      	bne.n	a0aa <analogWrite+0x1f2>
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9fc8:	4b40      	ldr	r3, [pc, #256]	; (a0cc <analogWrite+0x214>)
		FTM1_C1V = cval;
    9fca:	61a2      	str	r2, [r4, #24]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9fcc:	f44f 7151 	mov.w	r1, #836	; 0x344
    9fd0:	6359      	str	r1, [r3, #52]	; 0x34
}
    9fd2:	bd10      	pop	{r4, pc}
		volatile uint32_t *config = portConfigRegister(pin);
    9fd4:	685b      	ldr	r3, [r3, #4]
			*config &= ~(PORT_PCR_PE);
    9fd6:	6819      	ldr	r1, [r3, #0]
    9fd8:	f021 0102 	bic.w	r1, r1, #2
    9fdc:	6019      	str	r1, [r3, #0]
    9fde:	e7c0      	b.n	9f62 <analogWrite+0xaa>
		volatile uint32_t *config = portConfigRegister(pin);
    9fe0:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9fe2:	681a      	ldr	r2, [r3, #0]
    9fe4:	f042 0203 	orr.w	r2, r2, #3
    9fe8:	601a      	str	r2, [r3, #0]
    9fea:	e7d3      	b.n	9f94 <analogWrite+0xdc>
	if (pin >= CORE_NUM_DIGITAL) return;
    9fec:	2821      	cmp	r0, #33	; 0x21
    9fee:	d8db      	bhi.n	9fa8 <analogWrite+0xf0>
    9ff0:	297f      	cmp	r1, #127	; 0x7f
    9ff2:	bfd4      	ite	le
    9ff4:	2100      	movle	r1, #0
    9ff6:	2101      	movgt	r1, #1
    9ff8:	f7ff fe6a 	bl	9cd0 <digitalWrite.part.0>
	config = portConfigRegister(pin);
    9ffc:	4b30      	ldr	r3, [pc, #192]	; (a0c0 <analogWrite+0x208>)
    9ffe:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
		*portModeRegister(pin) = 1;
    a002:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
	config = portConfigRegister(pin);
    a006:	6853      	ldr	r3, [r2, #4]
		*portModeRegister(pin) = 1;
    a008:	2401      	movs	r4, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a00a:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a00e:	f881 4280 	strb.w	r4, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a012:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a014:	681a      	ldr	r2, [r3, #0]
    a016:	f022 0220 	bic.w	r2, r2, #32
    a01a:	601a      	str	r2, [r3, #0]
}
    a01c:	bd10      	pop	{r4, pc}
		FTM0_C1V = cval;
    a01e:	4827      	ldr	r0, [pc, #156]	; (a0bc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a020:	4a2b      	ldr	r2, [pc, #172]	; (a0d0 <analogWrite+0x218>)
		FTM0_C1V = cval;
    a022:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a024:	f240 4144 	movw	r1, #1092	; 0x444
    a028:	6091      	str	r1, [r2, #8]
}
    a02a:	bd10      	pop	{r4, pc}
		FTM0_C0V = cval;
    a02c:	4823      	ldr	r0, [pc, #140]	; (a0bc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a02e:	4a28      	ldr	r2, [pc, #160]	; (a0d0 <analogWrite+0x218>)
		FTM0_C0V = cval;
    a030:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a032:	f240 4144 	movw	r1, #1092	; 0x444
    a036:	6051      	str	r1, [r2, #4]
}
    a038:	bd10      	pop	{r4, pc}
		FTM0_C6V = cval;
    a03a:	4820      	ldr	r0, [pc, #128]	; (a0bc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a03c:	4a25      	ldr	r2, [pc, #148]	; (a0d4 <analogWrite+0x21c>)
		FTM0_C6V = cval;
    a03e:	6403      	str	r3, [r0, #64]	; 0x40
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a040:	f240 4144 	movw	r1, #1092	; 0x444
    a044:	6191      	str	r1, [r2, #24]
}
    a046:	bd10      	pop	{r4, pc}
		FTM0_C5V = cval;
    a048:	481c      	ldr	r0, [pc, #112]	; (a0bc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a04a:	4a22      	ldr	r2, [pc, #136]	; (a0d4 <analogWrite+0x21c>)
		FTM0_C5V = cval;
    a04c:	6383      	str	r3, [r0, #56]	; 0x38
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a04e:	f240 4144 	movw	r1, #1092	; 0x444
    a052:	6151      	str	r1, [r2, #20]
}
    a054:	bd10      	pop	{r4, pc}
		FTM0_C3V = cval;
    a056:	4819      	ldr	r0, [pc, #100]	; (a0bc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a058:	4a1d      	ldr	r2, [pc, #116]	; (a0d0 <analogWrite+0x218>)
		FTM0_C3V = cval;
    a05a:	6283      	str	r3, [r0, #40]	; 0x28
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a05c:	f240 4144 	movw	r1, #1092	; 0x444
    a060:	6111      	str	r1, [r2, #16]
}
    a062:	bd10      	pop	{r4, pc}
		FTM0_C2V = cval;
    a064:	4815      	ldr	r0, [pc, #84]	; (a0bc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a066:	4a1a      	ldr	r2, [pc, #104]	; (a0d0 <analogWrite+0x218>)
		FTM0_C2V = cval;
    a068:	6203      	str	r3, [r0, #32]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a06a:	f240 4144 	movw	r1, #1092	; 0x444
    a06e:	60d1      	str	r1, [r2, #12]
}
    a070:	bd10      	pop	{r4, pc}
		FTM0_C4V = cval;
    a072:	4812      	ldr	r0, [pc, #72]	; (a0bc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a074:	4a17      	ldr	r2, [pc, #92]	; (a0d4 <analogWrite+0x21c>)
		FTM0_C4V = cval;
    a076:	6303      	str	r3, [r0, #48]	; 0x30
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a078:	f240 4144 	movw	r1, #1092	; 0x444
    a07c:	6111      	str	r1, [r2, #16]
}
    a07e:	bd10      	pop	{r4, pc}
		FTM0_C7V = cval;
    a080:	480e      	ldr	r0, [pc, #56]	; (a0bc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a082:	4a14      	ldr	r2, [pc, #80]	; (a0d4 <analogWrite+0x21c>)
		FTM0_C7V = cval;
    a084:	6483      	str	r3, [r0, #72]	; 0x48
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a086:	f240 4144 	movw	r1, #1092	; 0x444
    a08a:	61d1      	str	r1, [r2, #28]
}
    a08c:	bd10      	pop	{r4, pc}
		FTM2_C1V = cval;
    a08e:	480d      	ldr	r0, [pc, #52]	; (a0c4 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a090:	4a11      	ldr	r2, [pc, #68]	; (a0d8 <analogWrite+0x220>)
		FTM2_C1V = cval;
    a092:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a094:	f44f 7151 	mov.w	r1, #836	; 0x344
    a098:	64d1      	str	r1, [r2, #76]	; 0x4c
}
    a09a:	bd10      	pop	{r4, pc}
		FTM2_C0V = cval;
    a09c:	4809      	ldr	r0, [pc, #36]	; (a0c4 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a09e:	4a0e      	ldr	r2, [pc, #56]	; (a0d8 <analogWrite+0x220>)
		FTM2_C0V = cval;
    a0a0:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a0a2:	f44f 7151 	mov.w	r1, #836	; 0x344
    a0a6:	6491      	str	r1, [r2, #72]	; 0x48
}
    a0a8:	bd10      	pop	{r4, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a0aa:	4b08      	ldr	r3, [pc, #32]	; (a0cc <analogWrite+0x214>)
		FTM1_C0V = cval;
    a0ac:	6122      	str	r2, [r4, #16]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a0ae:	f44f 7151 	mov.w	r1, #836	; 0x344
    a0b2:	6319      	str	r1, [r3, #48]	; 0x30
}
    a0b4:	bd10      	pop	{r4, pc}
    a0b6:	bf00      	nop
    a0b8:	1fff88ec 	.word	0x1fff88ec
    a0bc:	40038000 	.word	0x40038000
    a0c0:	000152c8 	.word	0x000152c8
    a0c4:	400b8000 	.word	0x400b8000
    a0c8:	40039000 	.word	0x40039000
    a0cc:	40049000 	.word	0x40049000
    a0d0:	4004b000 	.word	0x4004b000
    a0d4:	4004c000 	.word	0x4004c000
    a0d8:	4004a000 	.word	0x4004a000

0000a0dc <analogWriteFrequency>:
{
    a0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a0e0:	460e      	mov	r6, r1
    a0e2:	4680      	mov	r8, r0
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    a0e4:	492c      	ldr	r1, [pc, #176]	; (a198 <analogWriteFrequency+0xbc>)
    a0e6:	4630      	mov	r0, r6
    a0e8:	f002 ff52 	bl	cf90 <__aeabi_fcmplt>
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    a0ec:	4b2b      	ldr	r3, [pc, #172]	; (a19c <analogWriteFrequency+0xc0>)
    a0ee:	2800      	cmp	r0, #0
    a0f0:	f647 2712 	movw	r7, #31250	; 0x7a12
    a0f4:	bf12      	itee	ne
    a0f6:	f04f 0a02 	movne.w	sl, #2
    a0fa:	f04f 0a01 	moveq.w	sl, #1
    a0fe:	461f      	moveq	r7, r3
	for (prescale = 0; prescale < 7; prescale++) {
    a100:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    a102:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
    a106:	fa27 f004 	lsr.w	r0, r7, r4
    a10a:	f002 fd4b 	bl	cba4 <__aeabi_ui2f>
    a10e:	4649      	mov	r1, r9
    a110:	4605      	mov	r5, r0
    a112:	f002 fd9f 	bl	cc54 <__aeabi_fmul>
    a116:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
    a118:	4630      	mov	r0, r6
    a11a:	f002 ff4d 	bl	cfb8 <__aeabi_fcmpge>
    a11e:	b930      	cbnz	r0, a12e <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
    a120:	3401      	adds	r4, #1
    a122:	2c07      	cmp	r4, #7
    a124:	d1ef      	bne.n	a106 <analogWriteFrequency+0x2a>
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    a126:	09f8      	lsrs	r0, r7, #7
    a128:	f002 fd3c 	bl	cba4 <__aeabi_ui2f>
    a12c:	4605      	mov	r5, r0
    a12e:	4631      	mov	r1, r6
    a130:	4628      	mov	r0, r5
    a132:	f002 fe43 	bl	cdbc <__aeabi_fdiv>
    a136:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    a13a:	f002 fc81 	bl	ca40 <__aeabi_fsub>
    a13e:	f002 ff75 	bl	d02c <__aeabi_f2uiz>
    a142:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a146:	4298      	cmp	r0, r3
    a148:	bf28      	it	cs
    a14a:	4618      	movcs	r0, r3
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    a14c:	f1a8 0303 	sub.w	r3, r8, #3
    a150:	2b01      	cmp	r3, #1
    a152:	d911      	bls.n	a178 <analogWriteFrequency+0x9c>
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    a154:	f1a8 0805 	sub.w	r8, r8, #5
    a158:	fa5f f888 	uxtb.w	r8, r8
    a15c:	f1b8 0f1b 	cmp.w	r8, #27
    a160:	d808      	bhi.n	a174 <analogWriteFrequency+0x98>
    a162:	4a0f      	ldr	r2, [pc, #60]	; (a1a0 <analogWriteFrequency+0xc4>)
    a164:	2301      	movs	r3, #1
    a166:	fa03 f308 	lsl.w	r3, r3, r8
    a16a:	401a      	ands	r2, r3
    a16c:	d110      	bne.n	a190 <analogWriteFrequency+0xb4>
    a16e:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    a172:	d10b      	bne.n	a18c <analogWriteFrequency+0xb0>
}
    a174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    a178:	4b0a      	ldr	r3, [pc, #40]	; (a1a4 <analogWriteFrequency+0xc8>)
    a17a:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    a17c:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    a180:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    a182:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    a184:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    a186:	601c      	str	r4, [r3, #0]
}
    a188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    a18c:	4b06      	ldr	r3, [pc, #24]	; (a1a8 <analogWriteFrequency+0xcc>)
    a18e:	e7f5      	b.n	a17c <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    a190:	4b06      	ldr	r3, [pc, #24]	; (a1ac <analogWriteFrequency+0xd0>)
    a192:	2200      	movs	r2, #0
    a194:	e7f2      	b.n	a17c <analogWriteFrequency+0xa0>
    a196:	bf00      	nop
    a198:	40b71b00 	.word	0x40b71b00
    a19c:	02dc6c00 	.word	0x02dc6c00
    a1a0:	00078033 	.word	0x00078033
    a1a4:	40039000 	.word	0x40039000
    a1a8:	400b8000 	.word	0x400b8000
    a1ac:	40038000 	.word	0x40038000

0000a1b0 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    a1b0:	2821      	cmp	r0, #33	; 0x21
    a1b2:	d816      	bhi.n	a1e2 <digitalWrite+0x32>
{
    a1b4:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    a1b6:	4b10      	ldr	r3, [pc, #64]	; (a1f8 <digitalWrite+0x48>)
    a1b8:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    a1bc:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    a1c0:	b12c      	cbz	r4, a1ce <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    a1c2:	2301      	movs	r3, #1
		if (val) {
    a1c4:	b971      	cbnz	r1, a1e4 <digitalWrite+0x34>
			*portClearRegister(pin) = 1;
    a1c6:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    a1ca:	bc10      	pop	{r4}
    a1cc:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    a1ce:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    a1d2:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a1d4:	681a      	ldr	r2, [r3, #0]
		if (val) {
    a1d6:	b149      	cbz	r1, a1ec <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a1d8:	f042 0203 	orr.w	r2, r2, #3
}
    a1dc:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a1de:	601a      	str	r2, [r3, #0]
}
    a1e0:	4770      	bx	lr
    a1e2:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    a1e4:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    a1e8:	bc10      	pop	{r4}
    a1ea:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    a1ec:	f022 0202 	bic.w	r2, r2, #2
}
    a1f0:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    a1f2:	601a      	str	r2, [r3, #0]
}
    a1f4:	4770      	bx	lr
    a1f6:	bf00      	nop
    a1f8:	000152c8 	.word	0x000152c8

0000a1fc <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    a1fc:	2821      	cmp	r0, #33	; 0x21
    a1fe:	d806      	bhi.n	a20e <digitalRead+0x12>
	return *portInputRegister(pin);
    a200:	4b04      	ldr	r3, [pc, #16]	; (a214 <digitalRead+0x18>)
    a202:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    a206:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    a20a:	b2c0      	uxtb	r0, r0
    a20c:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    a20e:	2000      	movs	r0, #0
}
    a210:	4770      	bx	lr
    a212:	bf00      	nop
    a214:	000152c8 	.word	0x000152c8

0000a218 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    a218:	2821      	cmp	r0, #33	; 0x21
    a21a:	d820      	bhi.n	a25e <pinMode+0x46>
	config = portConfigRegister(pin);
    a21c:	4a1b      	ldr	r2, [pc, #108]	; (a28c <pinMode+0x74>)
    a21e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a222:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    a224:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a226:	d00f      	beq.n	a248 <pinMode+0x30>
    a228:	2904      	cmp	r1, #4
    a22a:	d01d      	beq.n	a268 <pinMode+0x50>
		*portModeRegister(pin) = 0;
    a22c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    a230:	2200      	movs	r2, #0
    a232:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
		if (mode == INPUT) {
    a236:	b199      	cbz	r1, a260 <pinMode+0x48>
		} else if (mode == INPUT_PULLUP) {
    a238:	2902      	cmp	r1, #2
    a23a:	d022      	beq.n	a282 <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    a23c:	2903      	cmp	r1, #3
    a23e:	d10d      	bne.n	a25c <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    a240:	f44f 7281 	mov.w	r2, #258	; 0x102
    a244:	601a      	str	r2, [r3, #0]
    a246:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    a248:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a24c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a250:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a254:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a256:	681a      	ldr	r2, [r3, #0]
    a258:	f022 0220 	bic.w	r2, r2, #32
    a25c:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    a25e:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    a260:	f44f 7280 	mov.w	r2, #256	; 0x100
    a264:	601a      	str	r2, [r3, #0]
    a266:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    a268:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a26c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a270:	2001      	movs	r0, #1
    a272:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a276:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    a278:	681a      	ldr	r2, [r3, #0]
    a27a:	f042 0220 	orr.w	r2, r2, #32
    a27e:	601a      	str	r2, [r3, #0]
    a280:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    a282:	f240 1203 	movw	r2, #259	; 0x103
    a286:	601a      	str	r2, [r3, #0]
    a288:	4770      	bx	lr
    a28a:	bf00      	nop
    a28c:	000152c8 	.word	0x000152c8

0000a290 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    a290:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    a292:	490d      	ldr	r1, [pc, #52]	; (a2c8 <micros+0x38>)
	current = SYST_CVR;
    a294:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a298:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    a29a:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a29c:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    a2a0:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a2a2:	0152      	lsls	r2, r2, #5
    a2a4:	d502      	bpl.n	a2ac <micros+0x1c>
    a2a6:	2b32      	cmp	r3, #50	; 0x32
    a2a8:	bf88      	it	hi
    a2aa:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    a2ac:	4a07      	ldr	r2, [pc, #28]	; (a2cc <micros+0x3c>)
	current = ((F_CPU / 1000) - 1) - current;
    a2ae:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
	return count * 1000 + current / (F_CPU / 1000000);
    a2b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	current = ((F_CPU / 1000) - 1) - current;
    a2b6:	33ff      	adds	r3, #255	; 0xff
	return count * 1000 + current / (F_CPU / 1000000);
    a2b8:	fba2 2303 	umull	r2, r3, r2, r3
    a2bc:	fb01 f000 	mul.w	r0, r1, r0
}
    a2c0:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    a2c4:	4770      	bx	lr
    a2c6:	bf00      	nop
    a2c8:	1fffdcc4 	.word	0x1fffdcc4
    a2cc:	aaaaaaab 	.word	0xaaaaaaab

0000a2d0 <delay>:

void delay(uint32_t ms)
{
    a2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a2d4:	4604      	mov	r4, r0
	__disable_irq();
    a2d6:	b672      	cpsid	i
	count = systick_millis_count;
    a2d8:	4f20      	ldr	r7, [pc, #128]	; (a35c <delay+0x8c>)
	current = SYST_CVR;
    a2da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a2de:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    a2e0:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a2e2:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    a2e6:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a2e8:	0152      	lsls	r2, r2, #5
    a2ea:	d502      	bpl.n	a2f2 <delay+0x22>
    a2ec:	2b32      	cmp	r3, #50	; 0x32
    a2ee:	bf88      	it	hi
    a2f0:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    a2f2:	b90c      	cbnz	r4, a2f8 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    a2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    a2f8:	f8df 9064 	ldr.w	r9, [pc, #100]	; a360 <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    a2fc:	f8df 8064 	ldr.w	r8, [pc, #100]	; a364 <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    a300:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    a304:	fba8 2303 	umull	r2, r3, r8, r3
    a308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a30c:	fb02 f505 	mul.w	r5, r2, r5
    a310:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    a314:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    a318:	b672      	cpsid	i
	current = SYST_CVR;
    a31a:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    a31c:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a31e:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    a322:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    a324:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    a328:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a32c:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    a330:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    a334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a338:	d002      	beq.n	a340 <delay+0x70>
    a33a:	2932      	cmp	r1, #50	; 0x32
    a33c:	bf88      	it	hi
    a33e:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    a340:	fb00 3302 	mla	r3, r0, r2, r3
    a344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    a348:	d304      	bcc.n	a354 <delay+0x84>
				if (ms == 0) return;
    a34a:	3c01      	subs	r4, #1
    a34c:	d0d2      	beq.n	a2f4 <delay+0x24>
				start += 1000;
    a34e:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    a352:	e7e1      	b.n	a318 <delay+0x48>
			yield();
    a354:	f001 fea4 	bl	c0a0 <yield>
			while ((micros() - start) >= 1000) {
    a358:	e7de      	b.n	a318 <delay+0x48>
    a35a:	bf00      	nop
    a35c:	1fffdcc4 	.word	0x1fffdcc4
    a360:	000176ff 	.word	0x000176ff
    a364:	aaaaaaab 	.word	0xaaaaaaab

0000a368 <serial2_begin>:
#define GPIO_BITBAND_PTR(reg, bit) ((uint32_t *)GPIO_BITBAND_ADDR((reg), (bit)))
#define C3_TXDIR_BIT 5

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a368:	4a2a      	ldr	r2, [pc, #168]	; (a414 <serial2_begin+0xac>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    a36a:	492b      	ldr	r1, [pc, #172]	; (a418 <serial2_begin+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a36c:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    a36e:	b470      	push	{r4, r5, r6}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	rx_buffer_head = 0;
    a374:	4d29      	ldr	r5, [pc, #164]	; (a41c <serial2_begin+0xb4>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a376:	6353      	str	r3, [r2, #52]	; 0x34
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    a378:	4e29      	ldr	r6, [pc, #164]	; (a420 <serial2_begin+0xb8>)
	tx_buffer_head = 0;
    a37a:	4c2a      	ldr	r4, [pc, #168]	; (a424 <serial2_begin+0xbc>)
	switch (rx_pin_num) {
    a37c:	7832      	ldrb	r2, [r6, #0]
	rx_buffer_head = 0;
    a37e:	2300      	movs	r3, #0
    a380:	702b      	strb	r3, [r5, #0]
	rx_buffer_tail = 0;
    a382:	700b      	strb	r3, [r1, #0]
	tx_buffer_tail = 0;
    a384:	4928      	ldr	r1, [pc, #160]	; (a428 <serial2_begin+0xc0>)
	tx_buffer_head = 0;
    a386:	7023      	strb	r3, [r4, #0]
	tx_buffer_tail = 0;
    a388:	700b      	strb	r3, [r1, #0]
	transmitting = 0;
    a38a:	4928      	ldr	r1, [pc, #160]	; (a42c <serial2_begin+0xc4>)
	switch (rx_pin_num) {
    a38c:	2a09      	cmp	r2, #9
	transmitting = 0;
    a38e:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    a390:	d033      	beq.n	a3fa <serial2_begin+0x92>
    a392:	2a1a      	cmp	r2, #26
    a394:	d103      	bne.n	a39e <serial2_begin+0x36>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a396:	4b26      	ldr	r3, [pc, #152]	; (a430 <serial2_begin+0xc8>)
    a398:	f240 3213 	movw	r2, #787	; 0x313
    a39c:	605a      	str	r2, [r3, #4]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    a39e:	4b25      	ldr	r3, [pc, #148]	; (a434 <serial2_begin+0xcc>)
    a3a0:	781b      	ldrb	r3, [r3, #0]
    a3a2:	2b0a      	cmp	r3, #10
    a3a4:	d031      	beq.n	a40a <serial2_begin+0xa2>
    a3a6:	2b1f      	cmp	r3, #31
    a3a8:	d103      	bne.n	a3b2 <serial2_begin+0x4a>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    a3aa:	4b21      	ldr	r3, [pc, #132]	; (a430 <serial2_begin+0xc8>)
    a3ac:	f44f 7251 	mov.w	r2, #836	; 0x344
    a3b0:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	if (divisor < 32) divisor = 32;
    a3b2:	2820      	cmp	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    a3b4:	4b20      	ldr	r3, [pc, #128]	; (a438 <serial2_begin+0xd0>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a3b6:	4c21      	ldr	r4, [pc, #132]	; (a43c <serial2_begin+0xd4>)
    a3b8:	bf38      	it	cc
    a3ba:	2020      	movcc	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    a3bc:	f3c0 3c44 	ubfx	ip, r0, #13, #5
    a3c0:	f883 c000 	strb.w	ip, [r3]
	UART1_BDL = (divisor >> 5) & 0xFF;
    a3c4:	f3c0 1c47 	ubfx	ip, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    a3c8:	f000 001f 	and.w	r0, r0, #31
	UART1_BDL = (divisor >> 5) & 0xFF;
    a3cc:	f883 c001 	strb.w	ip, [r3, #1]
	UART1_C1 = UART_C1_ILT;
    a3d0:	2204      	movs	r2, #4
	UART1_C4 = divisor & 0x1F;
    a3d2:	7298      	strb	r0, [r3, #10]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    a3d4:	2002      	movs	r0, #2
	UART1_C1 = UART_C1_ILT;
    a3d6:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    a3d8:	74d8      	strb	r0, [r3, #19]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    a3da:	2088      	movs	r0, #136	; 0x88
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    a3dc:	755a      	strb	r2, [r3, #21]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a3de:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    a3e2:	7418      	strb	r0, [r3, #16]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a3e4:	2240      	movs	r2, #64	; 0x40
	UART1_C2 = C2_TX_INACTIVE;
    a3e6:	203c      	movs	r0, #60	; 0x3c
    a3e8:	70d8      	strb	r0, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a3ea:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a3ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    a3f2:	bc70      	pop	{r4, r5, r6}
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a3f4:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
}
    a3f8:	4770      	bx	lr
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a3fa:	4b11      	ldr	r3, [pc, #68]	; (a440 <serial2_begin+0xd8>)
    a3fc:	f240 3213 	movw	r2, #787	; 0x313
    a400:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num) {
    a402:	4b0c      	ldr	r3, [pc, #48]	; (a434 <serial2_begin+0xcc>)
    a404:	781b      	ldrb	r3, [r3, #0]
    a406:	2b0a      	cmp	r3, #10
    a408:	d1cd      	bne.n	a3a6 <serial2_begin+0x3e>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    a40a:	4b0d      	ldr	r3, [pc, #52]	; (a440 <serial2_begin+0xd8>)
    a40c:	f44f 7251 	mov.w	r2, #836	; 0x344
    a410:	611a      	str	r2, [r3, #16]
    a412:	e7ce      	b.n	a3b2 <serial2_begin+0x4a>
    a414:	40048000 	.word	0x40048000
    a418:	1fffdd14 	.word	0x1fffdd14
    a41c:	1fffdd0c 	.word	0x1fffdd0c
    a420:	1fff89dc 	.word	0x1fff89dc
    a424:	1fffdd48 	.word	0x1fffdd48
    a428:	1fffdd50 	.word	0x1fffdd50
    a42c:	1fffdd1c 	.word	0x1fffdd1c
    a430:	4004d000 	.word	0x4004d000
    a434:	1fff89e4 	.word	0x1fff89e4
    a438:	4006b000 	.word	0x4006b000
    a43c:	e000e400 	.word	0xe000e400
    a440:	4004b000 	.word	0x4004b000

0000a444 <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    a444:	4b21      	ldr	r3, [pc, #132]	; (a4cc <serial2_format+0x88>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    a446:	4921      	ldr	r1, [pc, #132]	; (a4cc <serial2_format+0x88>)
	c = UART1_C1;
    a448:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    a44a:	f000 0203 	and.w	r2, r0, #3
    a44e:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    a452:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a454:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a456:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a45a:	bf48      	it	mi
    a45c:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a460:	2a04      	cmp	r2, #4
	UART1_C1 = c;
    a462:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a464:	d103      	bne.n	a46e <serial2_format+0x2a>
    a466:	798b      	ldrb	r3, [r1, #6]
    a468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a46c:	718b      	strb	r3, [r1, #6]
	c = UART1_S2 & ~0x10;
    a46e:	4b17      	ldr	r3, [pc, #92]	; (a4cc <serial2_format+0x88>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    a470:	4a16      	ldr	r2, [pc, #88]	; (a4cc <serial2_format+0x88>)
	c = UART1_S2 & ~0x10;
    a472:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    a474:	06c1      	lsls	r1, r0, #27
	c = UART1_S2 & ~0x10;
    a476:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    a47a:	bf48      	it	mi
    a47c:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_S2 = c;
    a480:	7153      	strb	r3, [r2, #5]
	c = UART1_C3 & ~0x10;
    a482:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    a484:	0682      	lsls	r2, r0, #26
	c = UART1_C3 & ~0x10;
    a486:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART1_C3 = c;
    a48a:	4a10      	ldr	r2, [pc, #64]	; (a4cc <serial2_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    a48c:	bf48      	it	mi
    a48e:	f043 0310 	orrmi.w	r3, r3, #16
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
	}
#endif
	// process request for half duplex.
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a492:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART1_C3 = c;
    a496:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a498:	d010      	beq.n	a4bc <serial2_format+0x78>
		c = UART1_C1;
    a49a:	7893      	ldrb	r3, [r2, #2]
		#if defined(KINETISL)
		//CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
		half_duplex_mode = 1;
		#else
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a49c:	490c      	ldr	r1, [pc, #48]	; (a4d0 <serial2_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    a49e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART1_C1 = c;
    a4a2:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a4a4:	7809      	ldrb	r1, [r1, #0]
    a4a6:	4b0b      	ldr	r3, [pc, #44]	; (a4d4 <serial2_format+0x90>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a4a8:	4a0b      	ldr	r2, [pc, #44]	; (a4d8 <serial2_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a4aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a4ae:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a4b2:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a4b4:	4909      	ldr	r1, [pc, #36]	; (a4dc <serial2_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a4b6:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a4b8:	6011      	str	r1, [r2, #0]
    a4ba:	4770      	bx	lr

	} else {
		#if defined(KINETISL)
		half_duplex_mode = 0;
		#else
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    a4bc:	4b06      	ldr	r3, [pc, #24]	; (a4d8 <serial2_format+0x94>)
    a4be:	4a07      	ldr	r2, [pc, #28]	; (a4dc <serial2_format+0x98>)
    a4c0:	6819      	ldr	r1, [r3, #0]
    a4c2:	4291      	cmp	r1, r2
    a4c4:	bf08      	it	eq
    a4c6:	6018      	streq	r0, [r3, #0]
		#endif
	}
}
    a4c8:	4770      	bx	lr
    a4ca:	bf00      	nop
    a4cc:	4006b000 	.word	0x4006b000
    a4d0:	1fff89e4 	.word	0x1fff89e4
    a4d4:	000152c8 	.word	0x000152c8
    a4d8:	1fffdd18 	.word	0x1fffdd18
    a4dc:	42d600d4 	.word	0x42d600d4

0000a4e0 <serial2_end>:

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a4e0:	4b29      	ldr	r3, [pc, #164]	; (a588 <serial2_end+0xa8>)
    a4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a4e4:	051b      	lsls	r3, r3, #20
    a4e6:	d54d      	bpl.n	a584 <serial2_end+0xa4>
{
    a4e8:	b510      	push	{r4, lr}
	while (transmitting) yield();  // wait for buffered data to send
    a4ea:	4c28      	ldr	r4, [pc, #160]	; (a58c <serial2_end+0xac>)
    a4ec:	7823      	ldrb	r3, [r4, #0]
    a4ee:	b123      	cbz	r3, a4fa <serial2_end+0x1a>
    a4f0:	f001 fdd6 	bl	c0a0 <yield>
    a4f4:	7823      	ldrb	r3, [r4, #0]
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	d1fa      	bne.n	a4f0 <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    a4fa:	4a25      	ldr	r2, [pc, #148]	; (a590 <serial2_end+0xb0>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    a4fc:	4b25      	ldr	r3, [pc, #148]	; (a594 <serial2_end+0xb4>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    a4fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    a502:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    a506:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    a508:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
	UART1_C2 = 0;
    a50c:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    a50e:	781b      	ldrb	r3, [r3, #0]
    a510:	2b09      	cmp	r3, #9
    a512:	d02c      	beq.n	a56e <serial2_end+0x8e>
    a514:	2b1a      	cmp	r3, #26
    a516:	d01b      	beq.n	a550 <serial2_end+0x70>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    a518:	4b1f      	ldr	r3, [pc, #124]	; (a598 <serial2_end+0xb8>)
    a51a:	781b      	ldrb	r3, [r3, #0]
    a51c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a520:	2b0a      	cmp	r3, #10
    a522:	d01f      	beq.n	a564 <serial2_end+0x84>
    a524:	2b1f      	cmp	r3, #31
    a526:	d00e      	beq.n	a546 <serial2_end+0x66>
#endif
	UART1_S1;
	UART1_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    a528:	4b1c      	ldr	r3, [pc, #112]	; (a59c <serial2_end+0xbc>)
	UART1_S1;
    a52a:	4a19      	ldr	r2, [pc, #100]	; (a590 <serial2_end+0xb0>)
	rx_buffer_head = 0;
    a52c:	4c1c      	ldr	r4, [pc, #112]	; (a5a0 <serial2_end+0xc0>)
	rx_buffer_tail = 0;
    a52e:	481d      	ldr	r0, [pc, #116]	; (a5a4 <serial2_end+0xc4>)
	if (rts_pin) rts_deassert();
    a530:	6819      	ldr	r1, [r3, #0]
	UART1_S1;
    a532:	f892 c004 	ldrb.w	ip, [r2, #4]
	UART1_D; // clear leftover error status
    a536:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    a538:	2300      	movs	r3, #0
    a53a:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    a53c:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    a53e:	b109      	cbz	r1, a544 <serial2_end+0x64>
    a540:	2301      	movs	r3, #1
    a542:	700b      	strb	r3, [r1, #0]
}
    a544:	bd10      	pop	{r4, pc}
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    a546:	4b18      	ldr	r3, [pc, #96]	; (a5a8 <serial2_end+0xc8>)
    a548:	f240 1203 	movw	r2, #259	; 0x103
    a54c:	601a      	str	r2, [r3, #0]
    a54e:	e7eb      	b.n	a528 <serial2_end+0x48>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    a550:	4b15      	ldr	r3, [pc, #84]	; (a5a8 <serial2_end+0xc8>)
    a552:	f240 1203 	movw	r2, #259	; 0x103
    a556:	605a      	str	r2, [r3, #4]
	switch (tx_pin_num & 127) {
    a558:	4b0f      	ldr	r3, [pc, #60]	; (a598 <serial2_end+0xb8>)
    a55a:	781b      	ldrb	r3, [r3, #0]
    a55c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a560:	2b0a      	cmp	r3, #10
    a562:	d1df      	bne.n	a524 <serial2_end+0x44>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    a564:	4b11      	ldr	r3, [pc, #68]	; (a5ac <serial2_end+0xcc>)
    a566:	f240 1203 	movw	r2, #259	; 0x103
    a56a:	611a      	str	r2, [r3, #16]
    a56c:	e7dc      	b.n	a528 <serial2_end+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    a56e:	4b0f      	ldr	r3, [pc, #60]	; (a5ac <serial2_end+0xcc>)
    a570:	f240 1203 	movw	r2, #259	; 0x103
    a574:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num & 127) {
    a576:	4b08      	ldr	r3, [pc, #32]	; (a598 <serial2_end+0xb8>)
    a578:	781b      	ldrb	r3, [r3, #0]
    a57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a57e:	2b0a      	cmp	r3, #10
    a580:	d1d0      	bne.n	a524 <serial2_end+0x44>
    a582:	e7ef      	b.n	a564 <serial2_end+0x84>
    a584:	4770      	bx	lr
    a586:	bf00      	nop
    a588:	40048000 	.word	0x40048000
    a58c:	1fffdd1c 	.word	0x1fffdd1c
    a590:	4006b000 	.word	0x4006b000
    a594:	1fff89dc 	.word	0x1fff89dc
    a598:	1fff89e4 	.word	0x1fff89e4
    a59c:	1fffdcc8 	.word	0x1fffdcc8
    a5a0:	1fffdd0c 	.word	0x1fffdd0c
    a5a4:	1fffdd14 	.word	0x1fffdd14
    a5a8:	4004d000 	.word	0x4004d000
    a5ac:	4004b000 	.word	0x4004b000

0000a5b0 <serial2_set_transmit_pin>:

void serial2_set_transmit_pin(uint8_t pin)
{
	while (transmitting) ;
    a5b0:	4a0a      	ldr	r2, [pc, #40]	; (a5dc <serial2_set_transmit_pin+0x2c>)
{
    a5b2:	b538      	push	{r3, r4, r5, lr}
    a5b4:	4605      	mov	r5, r0
	while (transmitting) ;
    a5b6:	7813      	ldrb	r3, [r2, #0]
    a5b8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    a5bc:	2b00      	cmp	r3, #0
    a5be:	d1fa      	bne.n	a5b6 <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    a5c0:	2101      	movs	r1, #1
    a5c2:	4628      	mov	r0, r5
    a5c4:	f7ff fe28 	bl	a218 <pinMode>
	digitalWrite(pin, LOW);
    a5c8:	4621      	mov	r1, r4
    a5ca:	4628      	mov	r0, r5
    a5cc:	f7ff fdf0 	bl	a1b0 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    a5d0:	4a03      	ldr	r2, [pc, #12]	; (a5e0 <serial2_set_transmit_pin+0x30>)
    a5d2:	4b04      	ldr	r3, [pc, #16]	; (a5e4 <serial2_set_transmit_pin+0x34>)
    a5d4:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    a5d8:	601a      	str	r2, [r3, #0]
	#if defined(KINETISL)
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}
    a5da:	bd38      	pop	{r3, r4, r5, pc}
    a5dc:	1fffdd1c 	.word	0x1fffdd1c
    a5e0:	000152c8 	.word	0x000152c8
    a5e4:	1fffdd18 	.word	0x1fffdd18

0000a5e8 <serial2_set_tx>:
void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    a5e8:	b109      	cbz	r1, a5ee <serial2_set_tx+0x6>
    a5ea:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    a5ee:	4a19      	ldr	r2, [pc, #100]	; (a654 <serial2_set_tx+0x6c>)
    a5f0:	7813      	ldrb	r3, [r2, #0]
    a5f2:	4283      	cmp	r3, r0
    a5f4:	d017      	beq.n	a626 <serial2_set_tx+0x3e>
{
    a5f6:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    a5f8:	4c17      	ldr	r4, [pc, #92]	; (a658 <serial2_set_tx+0x70>)
    a5fa:	6b64      	ldr	r4, [r4, #52]	; 0x34
    a5fc:	0524      	lsls	r4, r4, #20
    a5fe:	d50f      	bpl.n	a620 <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    a600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a604:	2b0a      	cmp	r3, #10
    a606:	d021      	beq.n	a64c <serial2_set_tx+0x64>
    a608:	2b1f      	cmp	r3, #31
    a60a:	d014      	beq.n	a636 <serial2_set_tx+0x4e>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    a60c:	2900      	cmp	r1, #0
    a60e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    a612:	bf14      	ite	ne
    a614:	2160      	movne	r1, #96	; 0x60
    a616:	2144      	moveq	r1, #68	; 0x44
		}
		switch (pin & 127) {
    a618:	2b0a      	cmp	r3, #10
    a61a:	d010      	beq.n	a63e <serial2_set_tx+0x56>
    a61c:	2b1f      	cmp	r3, #31
    a61e:	d003      	beq.n	a628 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    a620:	7010      	strb	r0, [r2, #0]
	#endif
}
    a622:	bc10      	pop	{r4}
    a624:	4770      	bx	lr
    a626:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a628:	4b0c      	ldr	r3, [pc, #48]	; (a65c <serial2_set_tx+0x74>)
    a62a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a62e:	6019      	str	r1, [r3, #0]
	tx_pin_num = pin;
    a630:	7010      	strb	r0, [r2, #0]
}
    a632:	bc10      	pop	{r4}
    a634:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    a636:	4b09      	ldr	r3, [pc, #36]	; (a65c <serial2_set_tx+0x74>)
    a638:	2400      	movs	r4, #0
    a63a:	601c      	str	r4, [r3, #0]
    a63c:	e7e6      	b.n	a60c <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a63e:	4b08      	ldr	r3, [pc, #32]	; (a660 <serial2_set_tx+0x78>)
    a640:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a644:	6119      	str	r1, [r3, #16]
	tx_pin_num = pin;
    a646:	7010      	strb	r0, [r2, #0]
}
    a648:	bc10      	pop	{r4}
    a64a:	4770      	bx	lr
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    a64c:	4b04      	ldr	r3, [pc, #16]	; (a660 <serial2_set_tx+0x78>)
    a64e:	2400      	movs	r4, #0
    a650:	611c      	str	r4, [r3, #16]
    a652:	e7db      	b.n	a60c <serial2_set_tx+0x24>
    a654:	1fff89e4 	.word	0x1fff89e4
    a658:	40048000 	.word	0x40048000
    a65c:	4004d000 	.word	0x4004d000
    a660:	4004b000 	.word	0x4004b000

0000a664 <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    a664:	4b12      	ldr	r3, [pc, #72]	; (a6b0 <serial2_set_rx+0x4c>)
    a666:	781a      	ldrb	r2, [r3, #0]
    a668:	4282      	cmp	r2, r0
    a66a:	d00c      	beq.n	a686 <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    a66c:	4911      	ldr	r1, [pc, #68]	; (a6b4 <serial2_set_rx+0x50>)
    a66e:	6b49      	ldr	r1, [r1, #52]	; 0x34
    a670:	0509      	lsls	r1, r1, #20
    a672:	d507      	bpl.n	a684 <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    a674:	2a09      	cmp	r2, #9
    a676:	d016      	beq.n	a6a6 <serial2_set_rx+0x42>
    a678:	2a1a      	cmp	r2, #26
    a67a:	d00a      	beq.n	a692 <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    a67c:	2809      	cmp	r0, #9
    a67e:	d00d      	beq.n	a69c <serial2_set_rx+0x38>
    a680:	281a      	cmp	r0, #26
    a682:	d001      	beq.n	a688 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    a684:	7018      	strb	r0, [r3, #0]
	#endif
}
    a686:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a688:	4a0b      	ldr	r2, [pc, #44]	; (a6b8 <serial2_set_rx+0x54>)
    a68a:	f240 3113 	movw	r1, #787	; 0x313
    a68e:	6051      	str	r1, [r2, #4]
    a690:	e7f8      	b.n	a684 <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    a692:	4a09      	ldr	r2, [pc, #36]	; (a6b8 <serial2_set_rx+0x54>)
    a694:	2100      	movs	r1, #0
		switch (pin) {
    a696:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    a698:	6051      	str	r1, [r2, #4]
		switch (pin) {
    a69a:	d1f1      	bne.n	a680 <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a69c:	4a07      	ldr	r2, [pc, #28]	; (a6bc <serial2_set_rx+0x58>)
    a69e:	f240 3113 	movw	r1, #787	; 0x313
    a6a2:	60d1      	str	r1, [r2, #12]
    a6a4:	e7ee      	b.n	a684 <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    a6a6:	4a05      	ldr	r2, [pc, #20]	; (a6bc <serial2_set_rx+0x58>)
    a6a8:	2100      	movs	r1, #0
    a6aa:	60d1      	str	r1, [r2, #12]
    a6ac:	e7e6      	b.n	a67c <serial2_set_rx+0x18>
    a6ae:	bf00      	nop
    a6b0:	1fff89dc 	.word	0x1fff89dc
    a6b4:	40048000 	.word	0x40048000
    a6b8:	4004d000 	.word	0x4004d000
    a6bc:	4004b000 	.word	0x4004b000

0000a6c0 <serial2_set_rts>:

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a6c0:	4b0d      	ldr	r3, [pc, #52]	; (a6f8 <serial2_set_rts+0x38>)
    a6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a6c4:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    a6c8:	d013      	beq.n	a6f2 <serial2_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    a6ca:	2821      	cmp	r0, #33	; 0x21
    a6cc:	d903      	bls.n	a6d6 <serial2_set_rts+0x16>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    a6ce:	4b0b      	ldr	r3, [pc, #44]	; (a6fc <serial2_set_rts+0x3c>)
    a6d0:	2000      	movs	r0, #0
    a6d2:	6018      	str	r0, [r3, #0]
		return 0;
    a6d4:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    a6d6:	4b0a      	ldr	r3, [pc, #40]	; (a700 <serial2_set_rts+0x40>)
{
    a6d8:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    a6da:	4c08      	ldr	r4, [pc, #32]	; (a6fc <serial2_set_rts+0x3c>)
    a6dc:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    a6e0:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    a6e2:	2101      	movs	r1, #1
    a6e4:	f7ff fd98 	bl	a218 <pinMode>
		rts_assert();
    a6e8:	6823      	ldr	r3, [r4, #0]
    a6ea:	2200      	movs	r2, #0
    a6ec:	701a      	strb	r2, [r3, #0]
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    a6ee:	2001      	movs	r0, #1
}
    a6f0:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a6f2:	4618      	mov	r0, r3
}
    a6f4:	4770      	bx	lr
    a6f6:	bf00      	nop
    a6f8:	40048000 	.word	0x40048000
    a6fc:	1fffdcc8 	.word	0x1fffdcc8
    a700:	000152c8 	.word	0x000152c8

0000a704 <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a704:	4b0c      	ldr	r3, [pc, #48]	; (a738 <serial2_set_cts+0x34>)
    a706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a708:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    a70c:	d012      	beq.n	a734 <serial2_set_cts+0x30>
	if (pin == 23) {
    a70e:	2817      	cmp	r0, #23
    a710:	d109      	bne.n	a726 <serial2_set_cts+0x22>
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    a712:	4b0a      	ldr	r3, [pc, #40]	; (a73c <serial2_set_cts+0x38>)
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    a714:	4a0a      	ldr	r2, [pc, #40]	; (a740 <serial2_set_cts+0x3c>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    a716:	f240 3102 	movw	r1, #770	; 0x302
    a71a:	6099      	str	r1, [r3, #8]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    a71c:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    a71e:	2001      	movs	r0, #1
	UART1_MODEM |= UART_MODEM_TXCTSE;
    a720:	4303      	orrs	r3, r0
    a722:	7353      	strb	r3, [r2, #13]
	return 1;
    a724:	4770      	bx	lr
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    a726:	4a06      	ldr	r2, [pc, #24]	; (a740 <serial2_set_cts+0x3c>)
    a728:	7b53      	ldrb	r3, [r2, #13]
    a72a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    a72e:	2000      	movs	r0, #0
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    a730:	7353      	strb	r3, [r2, #13]
		return 0;
    a732:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a734:	4618      	mov	r0, r3
#else
	return 0;
#endif
}
    a736:	4770      	bx	lr
    a738:	40048000 	.word	0x40048000
    a73c:	4004b000 	.word	0x4004b000
    a740:	4006b000 	.word	0x4006b000

0000a744 <serial2_putchar>:

void serial2_putchar(uint32_t c)
{
    a744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a748:	4b33      	ldr	r3, [pc, #204]	; (a818 <serial2_putchar+0xd4>)
    a74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a74c:	051a      	lsls	r2, r3, #20
    a74e:	d53a      	bpl.n	a7c6 <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    a750:	4b32      	ldr	r3, [pc, #200]	; (a81c <serial2_putchar+0xd8>)
    a752:	681b      	ldr	r3, [r3, #0]
    a754:	4606      	mov	r6, r0
    a756:	b10b      	cbz	r3, a75c <serial2_putchar+0x18>
    a758:	2201      	movs	r2, #1
    a75a:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART1_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    a75c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; a820 <serial2_putchar+0xdc>
	if (++head >= tx_buffer_total_size_) head = 0;
    a760:	f8df 80c0 	ldr.w	r8, [pc, #192]	; a824 <serial2_putchar+0xe0>
	head = tx_buffer_head;
    a764:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    a768:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    a76c:	4d2e      	ldr	r5, [pc, #184]	; (a828 <serial2_putchar+0xe4>)
	if (++head >= tx_buffer_total_size_) head = 0;
    a76e:	3401      	adds	r4, #1
    a770:	42a3      	cmp	r3, r4
	while (tx_buffer_tail == head) {
    a772:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    a774:	d929      	bls.n	a7ca <serial2_putchar+0x86>
	while (tx_buffer_tail == head) {
    a776:	429c      	cmp	r4, r3
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
	}
	transmitting = 1;
	tx_buffer_head = head;
    a778:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    a77c:	d114      	bne.n	a7a8 <serial2_putchar+0x64>
			if ((UART1_S1 & UART_S1_TDRE)) {
    a77e:	4f2b      	ldr	r7, [pc, #172]	; (a82c <serial2_putchar+0xe8>)
					n = tx_buffer[tail];
    a780:	f8df b0ac 	ldr.w	fp, [pc, #172]	; a830 <serial2_putchar+0xec>
    a784:	e005      	b.n	a792 <serial2_putchar+0x4e>
			if ((UART1_S1 & UART_S1_TDRE)) {
    a786:	793b      	ldrb	r3, [r7, #4]
    a788:	061b      	lsls	r3, r3, #24
    a78a:	d423      	bmi.n	a7d4 <serial2_putchar+0x90>
	while (tx_buffer_tail == head) {
    a78c:	782b      	ldrb	r3, [r5, #0]
    a78e:	42a3      	cmp	r3, r4
    a790:	d10a      	bne.n	a7a8 <serial2_putchar+0x64>
		int priority = nvic_execution_priority();
    a792:	f7ff fa47 	bl	9c24 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    a796:	2840      	cmp	r0, #64	; 0x40
    a798:	ddf5      	ble.n	a786 <serial2_putchar+0x42>
		} else if (priority >= 256) {
    a79a:	28ff      	cmp	r0, #255	; 0xff
    a79c:	ddf6      	ble.n	a78c <serial2_putchar+0x48>
			yield(); // wait
    a79e:	f001 fc7f 	bl	c0a0 <yield>
	while (tx_buffer_tail == head) {
    a7a2:	782b      	ldrb	r3, [r5, #0]
    a7a4:	42a3      	cmp	r3, r4
    a7a6:	d0f4      	beq.n	a792 <serial2_putchar+0x4e>
	if (head < SERIAL2_TX_BUFFER_SIZE) {
    a7a8:	2c27      	cmp	r4, #39	; 0x27
    a7aa:	d929      	bls.n	a800 <serial2_putchar+0xbc>
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
    a7ac:	4b21      	ldr	r3, [pc, #132]	; (a834 <serial2_putchar+0xf0>)
    a7ae:	3c28      	subs	r4, #40	; 0x28
    a7b0:	681b      	ldr	r3, [r3, #0]
    a7b2:	b2f6      	uxtb	r6, r6
    a7b4:	551e      	strb	r6, [r3, r4]
	transmitting = 1;
    a7b6:	4a20      	ldr	r2, [pc, #128]	; (a838 <serial2_putchar+0xf4>)
	UART1_C2 = C2_TX_ACTIVE;
    a7b8:	4b1c      	ldr	r3, [pc, #112]	; (a82c <serial2_putchar+0xe8>)
	transmitting = 1;
    a7ba:	2101      	movs	r1, #1
    a7bc:	7011      	strb	r1, [r2, #0]
	UART1_C2 = C2_TX_ACTIVE;
    a7be:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer_head = head;
    a7c0:	f889 a000 	strb.w	sl, [r9]
	UART1_C2 = C2_TX_ACTIVE;
    a7c4:	70da      	strb	r2, [r3, #3]
}
    a7c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    a7ca:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    a7ce:	b9a3      	cbnz	r3, a7fa <serial2_putchar+0xb6>
	if (++head >= tx_buffer_total_size_) head = 0;
    a7d0:	4654      	mov	r4, sl
    a7d2:	e7d4      	b.n	a77e <serial2_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    a7d4:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a7d6:	f8d8 1000 	ldr.w	r1, [r8]
    a7da:	1c5a      	adds	r2, r3, #1
    a7dc:	4291      	cmp	r1, r2
				uint32_t tail = tx_buffer_tail;
    a7de:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a7e0:	d908      	bls.n	a7f4 <serial2_putchar+0xb0>
				if (tail < SERIAL2_TX_BUFFER_SIZE) {
    a7e2:	2a27      	cmp	r2, #39	; 0x27
    a7e4:	d810      	bhi.n	a808 <serial2_putchar+0xc4>
				tx_buffer_tail = tail;
    a7e6:	b2d1      	uxtb	r1, r2
					n = tx_buffer[tail];
    a7e8:	f81b 3002 	ldrb.w	r3, [fp, r2]
    a7ec:	b2db      	uxtb	r3, r3
				UART1_D = n;
    a7ee:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    a7f0:	7029      	strb	r1, [r5, #0]
    a7f2:	e7cb      	b.n	a78c <serial2_putchar+0x48>
    a7f4:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a7f6:	460a      	mov	r2, r1
    a7f8:	e7f6      	b.n	a7e8 <serial2_putchar+0xa4>
	while (tx_buffer_tail == head) {
    a7fa:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    a7fe:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    a800:	4b0b      	ldr	r3, [pc, #44]	; (a830 <serial2_putchar+0xec>)
    a802:	b2f6      	uxtb	r6, r6
    a804:	551e      	strb	r6, [r3, r4]
    a806:	e7d6      	b.n	a7b6 <serial2_putchar+0x72>
				tx_buffer_tail = tail;
    a808:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a80a:	4a0a      	ldr	r2, [pc, #40]	; (a834 <serial2_putchar+0xf0>)
    a80c:	3b27      	subs	r3, #39	; 0x27
    a80e:	6812      	ldr	r2, [r2, #0]
    a810:	5cd3      	ldrb	r3, [r2, r3]
    a812:	b2db      	uxtb	r3, r3
    a814:	e7eb      	b.n	a7ee <serial2_putchar+0xaa>
    a816:	bf00      	nop
    a818:	40048000 	.word	0x40048000
    a81c:	1fffdd18 	.word	0x1fffdd18
    a820:	1fffdd48 	.word	0x1fffdd48
    a824:	1fff89e0 	.word	0x1fff89e0
    a828:	1fffdd50 	.word	0x1fffdd50
    a82c:	4006b000 	.word	0x4006b000
    a830:	1fffdd20 	.word	0x1fffdd20
    a834:	1fffdd4c 	.word	0x1fffdd4c
    a838:	1fffdd1c 	.word	0x1fffdd1c

0000a83c <serial2_write>:

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    a83c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a840:	4b39      	ldr	r3, [pc, #228]	; (a928 <serial2_write+0xec>)
    a842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a844:	051a      	lsls	r2, r3, #20
    a846:	d53c      	bpl.n	a8c2 <serial2_write+0x86>
	if (transmit_pin) transmit_assert();
    a848:	4b38      	ldr	r3, [pc, #224]	; (a92c <serial2_write+0xf0>)
    a84a:	681b      	ldr	r3, [r3, #0]
    a84c:	b10b      	cbz	r3, a852 <serial2_write+0x16>
    a84e:	2201      	movs	r2, #1
    a850:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    a852:	1847      	adds	r7, r0, r1
	while (p < end) {
    a854:	42b8      	cmp	r0, r7
    a856:	d231      	bcs.n	a8bc <serial2_write+0x80>
    a858:	4e35      	ldr	r6, [pc, #212]	; (a930 <serial2_write+0xf4>)
    a85a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; a934 <serial2_write+0xf8>
    a85e:	4c36      	ldr	r4, [pc, #216]	; (a938 <serial2_write+0xfc>)
		head = tx_buffer_head;
		if (++head >= tx_buffer_total_size_) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    a860:	f8df 90d8 	ldr.w	r9, [pc, #216]	; a93c <serial2_write+0x100>
    a864:	f100 0a01 	add.w	sl, r0, #1
    a868:	e013      	b.n	a892 <serial2_write+0x56>
		if (tx_buffer_tail == head) {
    a86a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    a86e:	b353      	cbz	r3, a8c6 <serial2_write+0x8a>
    a870:	f04f 0b00 	mov.w	fp, #0
    a874:	465d      	mov	r5, fp
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		if (head < SERIAL2_TX_BUFFER_SIZE) {
			tx_buffer[head] = *p++;
    a876:	4a32      	ldr	r2, [pc, #200]	; (a940 <serial2_write+0x104>)
    a878:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a87c:	5553      	strb	r3, [r2, r5]
    a87e:	4652      	mov	r2, sl
		} else {
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
		}
		transmitting = 1;
    a880:	4930      	ldr	r1, [pc, #192]	; (a944 <serial2_write+0x108>)
    a882:	2301      	movs	r3, #1
	while (p < end) {
    a884:	42ba      	cmp	r2, r7
		transmitting = 1;
    a886:	700b      	strb	r3, [r1, #0]
	while (p < end) {
    a888:	f10a 0a01 	add.w	sl, sl, #1
		tx_buffer_head = head;
    a88c:	f886 b000 	strb.w	fp, [r6]
	while (p < end) {
    a890:	d214      	bcs.n	a8bc <serial2_write+0x80>
		head = tx_buffer_head;
    a892:	7835      	ldrb	r5, [r6, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    a894:	f8d8 3000 	ldr.w	r3, [r8]
    a898:	3501      	adds	r5, #1
    a89a:	42ab      	cmp	r3, r5
		if (tx_buffer_tail == head) {
    a89c:	7823      	ldrb	r3, [r4, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    a89e:	d9e4      	bls.n	a86a <serial2_write+0x2e>
		if (tx_buffer_tail == head) {
    a8a0:	42ab      	cmp	r3, r5
		tx_buffer_head = head;
    a8a2:	fa5f fb85 	uxtb.w	fp, r5
		if (tx_buffer_tail == head) {
    a8a6:	d00f      	beq.n	a8c8 <serial2_write+0x8c>
		if (head < SERIAL2_TX_BUFFER_SIZE) {
    a8a8:	2d27      	cmp	r5, #39	; 0x27
    a8aa:	d9e4      	bls.n	a876 <serial2_write+0x3a>
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
    a8ac:	4b26      	ldr	r3, [pc, #152]	; (a948 <serial2_write+0x10c>)
    a8ae:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    a8b2:	681b      	ldr	r3, [r3, #0]
    a8b4:	3d28      	subs	r5, #40	; 0x28
    a8b6:	555a      	strb	r2, [r3, r5]
    a8b8:	4652      	mov	r2, sl
    a8ba:	e7e1      	b.n	a880 <serial2_write+0x44>
	}
	UART1_C2 = C2_TX_ACTIVE;
    a8bc:	4b1f      	ldr	r3, [pc, #124]	; (a93c <serial2_write+0x100>)
    a8be:	22bc      	movs	r2, #188	; 0xbc
    a8c0:	70da      	strb	r2, [r3, #3]
}
    a8c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tx_buffer_tail == head) {
    a8c6:	465d      	mov	r5, fp
			UART1_C2 = C2_TX_ACTIVE;
    a8c8:	f06f 0343 	mvn.w	r3, #67	; 0x43
    a8cc:	f889 3003 	strb.w	r3, [r9, #3]
    a8d0:	e006      	b.n	a8e0 <serial2_write+0xa4>
					if ((UART1_S1 & UART_S1_TDRE)) {
    a8d2:	f899 3004 	ldrb.w	r3, [r9, #4]
    a8d6:	061b      	lsls	r3, r3, #24
    a8d8:	d40b      	bmi.n	a8f2 <serial2_write+0xb6>
			} while (tx_buffer_tail == head);
    a8da:	7823      	ldrb	r3, [r4, #0]
    a8dc:	42ab      	cmp	r3, r5
    a8de:	d1e3      	bne.n	a8a8 <serial2_write+0x6c>
				int priority = nvic_execution_priority();
    a8e0:	f7ff f9a0 	bl	9c24 <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    a8e4:	2840      	cmp	r0, #64	; 0x40
    a8e6:	ddf4      	ble.n	a8d2 <serial2_write+0x96>
				} else if (priority >= 256) {
    a8e8:	28ff      	cmp	r0, #255	; 0xff
    a8ea:	ddf6      	ble.n	a8da <serial2_write+0x9e>
					yield();
    a8ec:	f001 fbd8 	bl	c0a0 <yield>
    a8f0:	e7f3      	b.n	a8da <serial2_write+0x9e>
						uint32_t tail = tx_buffer_tail;
    a8f2:	7823      	ldrb	r3, [r4, #0]
						if (++tail >= tx_buffer_total_size_) tail = 0;
    a8f4:	f8d8 1000 	ldr.w	r1, [r8]
    a8f8:	1c5a      	adds	r2, r3, #1
    a8fa:	4291      	cmp	r1, r2
						uint32_t tail = tx_buffer_tail;
    a8fc:	b2db      	uxtb	r3, r3
						if (++tail >= tx_buffer_total_size_) tail = 0;
    a8fe:	d903      	bls.n	a908 <serial2_write+0xcc>
						if (tail < SERIAL2_TX_BUFFER_SIZE) {
    a900:	2a27      	cmp	r2, #39	; 0x27
    a902:	d80a      	bhi.n	a91a <serial2_write+0xde>
						tx_buffer_tail = tail;
    a904:	b2d1      	uxtb	r1, r2
    a906:	e001      	b.n	a90c <serial2_write+0xd0>
    a908:	2100      	movs	r1, #0
						if (++tail >= tx_buffer_total_size_) tail = 0;
    a90a:	460a      	mov	r2, r1
							n = tx_buffer[tail];
    a90c:	4b0c      	ldr	r3, [pc, #48]	; (a940 <serial2_write+0x104>)
    a90e:	5c9b      	ldrb	r3, [r3, r2]
    a910:	b2db      	uxtb	r3, r3
						UART1_D = n;
    a912:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    a916:	7021      	strb	r1, [r4, #0]
    a918:	e7df      	b.n	a8da <serial2_write+0x9e>
    a91a:	b2d1      	uxtb	r1, r2
							n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a91c:	4a0a      	ldr	r2, [pc, #40]	; (a948 <serial2_write+0x10c>)
    a91e:	3b27      	subs	r3, #39	; 0x27
    a920:	6812      	ldr	r2, [r2, #0]
    a922:	5cd3      	ldrb	r3, [r2, r3]
    a924:	b2db      	uxtb	r3, r3
    a926:	e7f4      	b.n	a912 <serial2_write+0xd6>
    a928:	40048000 	.word	0x40048000
    a92c:	1fffdd18 	.word	0x1fffdd18
    a930:	1fffdd48 	.word	0x1fffdd48
    a934:	1fff89e0 	.word	0x1fff89e0
    a938:	1fffdd50 	.word	0x1fffdd50
    a93c:	4006b000 	.word	0x4006b000
    a940:	1fffdd20 	.word	0x1fffdd20
    a944:	1fffdd1c 	.word	0x1fffdd1c
    a948:	1fffdd4c 	.word	0x1fffdd4c

0000a94c <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    a94c:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    a94e:	4c04      	ldr	r4, [pc, #16]	; (a960 <serial2_flush+0x14>)
    a950:	7823      	ldrb	r3, [r4, #0]
    a952:	b123      	cbz	r3, a95e <serial2_flush+0x12>
    a954:	f001 fba4 	bl	c0a0 <yield>
    a958:	7823      	ldrb	r3, [r4, #0]
    a95a:	2b00      	cmp	r3, #0
    a95c:	d1fa      	bne.n	a954 <serial2_flush+0x8>
}
    a95e:	bd10      	pop	{r4, pc}
    a960:	1fffdd1c 	.word	0x1fffdd1c

0000a964 <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    a964:	4a08      	ldr	r2, [pc, #32]	; (a988 <serial2_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    a966:	4b09      	ldr	r3, [pc, #36]	; (a98c <serial2_write_buffer_free+0x28>)
	head = tx_buffer_head;
    a968:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    a96a:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a96c:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    a96e:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    a970:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a972:	d202      	bcs.n	a97a <serial2_write_buffer_free+0x16>
	return tail - head - 1;
    a974:	3b01      	subs	r3, #1
    a976:	1a18      	subs	r0, r3, r0
}
    a978:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a97a:	4a05      	ldr	r2, [pc, #20]	; (a990 <serial2_write_buffer_free+0x2c>)
    a97c:	6812      	ldr	r2, [r2, #0]
    a97e:	3a01      	subs	r2, #1
    a980:	4413      	add	r3, r2
    a982:	1a18      	subs	r0, r3, r0
    a984:	4770      	bx	lr
    a986:	bf00      	nop
    a988:	1fffdd48 	.word	0x1fffdd48
    a98c:	1fffdd50 	.word	0x1fffdd50
    a990:	1fff89e0 	.word	0x1fff89e0

0000a994 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a994:	4a06      	ldr	r2, [pc, #24]	; (a9b0 <serial2_available+0x1c>)
	tail = rx_buffer_tail;
    a996:	4b07      	ldr	r3, [pc, #28]	; (a9b4 <serial2_available+0x20>)
	head = rx_buffer_head;
    a998:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    a99a:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    a99c:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    a99e:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    a9a0:	bf3c      	itt	cc
    a9a2:	4a05      	ldrcc	r2, [pc, #20]	; (a9b8 <serial2_available+0x24>)
    a9a4:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    a9a6:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    a9a8:	bf38      	it	cc
    a9aa:	189b      	addcc	r3, r3, r2
    a9ac:	1a18      	subs	r0, r3, r0
}
    a9ae:	4770      	bx	lr
    a9b0:	1fffdd0c 	.word	0x1fffdd0c
    a9b4:	1fffdd14 	.word	0x1fffdd14
    a9b8:	1fff89d8 	.word	0x1fff89d8

0000a9bc <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    a9bc:	4b1b      	ldr	r3, [pc, #108]	; (aa2c <serial2_getchar+0x70>)
	tail = rx_buffer_tail;
    a9be:	491c      	ldr	r1, [pc, #112]	; (aa30 <serial2_getchar+0x74>)
	head = rx_buffer_head;
    a9c0:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    a9c2:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    a9c4:	429a      	cmp	r2, r3
    a9c6:	d02e      	beq.n	aa26 <serial2_getchar+0x6a>
{
    a9c8:	b510      	push	{r4, lr}
    a9ca:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a9ce:	4a19      	ldr	r2, [pc, #100]	; (aa34 <serial2_getchar+0x78>)
    a9d0:	b2d8      	uxtb	r0, r3
    a9d2:	6812      	ldr	r2, [r2, #0]
    a9d4:	1c43      	adds	r3, r0, #1
    a9d6:	429a      	cmp	r2, r3
    a9d8:	d919      	bls.n	aa0e <serial2_getchar+0x52>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    a9da:	2b3f      	cmp	r3, #63	; 0x3f
    a9dc:	d81b      	bhi.n	aa16 <serial2_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    a9de:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    a9e2:	4815      	ldr	r0, [pc, #84]	; (aa38 <serial2_getchar+0x7c>)
    a9e4:	5cc0      	ldrb	r0, [r0, r3]
    a9e6:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    a9e8:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    a9ec:	4913      	ldr	r1, [pc, #76]	; (aa3c <serial2_getchar+0x80>)
    a9ee:	6809      	ldr	r1, [r1, #0]
    a9f0:	b161      	cbz	r1, aa0c <serial2_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    a9f2:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    a9f4:	bf3c      	itt	cc
    a9f6:	4472      	addcc	r2, lr
    a9f8:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    a9fa:	4a11      	ldr	r2, [pc, #68]	; (aa40 <serial2_getchar+0x84>)
    a9fc:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    a9fe:	bf28      	it	cs
    aa00:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    aa04:	429a      	cmp	r2, r3
    aa06:	d301      	bcc.n	aa0c <serial2_getchar+0x50>
    aa08:	2300      	movs	r3, #0
    aa0a:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    aa0c:	bd10      	pop	{r4, pc}
    aa0e:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    aa12:	4663      	mov	r3, ip
    aa14:	e7e5      	b.n	a9e2 <serial2_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    aa16:	4c0b      	ldr	r4, [pc, #44]	; (aa44 <serial2_getchar+0x88>)
    aa18:	383f      	subs	r0, #63	; 0x3f
    aa1a:	6824      	ldr	r4, [r4, #0]
    aa1c:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    aa1e:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    aa22:	b2c0      	uxtb	r0, r0
    aa24:	e7e0      	b.n	a9e8 <serial2_getchar+0x2c>
	if (head == tail) return -1;
    aa26:	f04f 30ff 	mov.w	r0, #4294967295
}
    aa2a:	4770      	bx	lr
    aa2c:	1fffdd0c 	.word	0x1fffdd0c
    aa30:	1fffdd14 	.word	0x1fffdd14
    aa34:	1fff89d8 	.word	0x1fff89d8
    aa38:	1fffdccc 	.word	0x1fffdccc
    aa3c:	1fffdcc8 	.word	0x1fffdcc8
    aa40:	1fff89d4 	.word	0x1fff89d4
    aa44:	1fffdd10 	.word	0x1fffdd10

0000aa48 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    aa48:	4a0d      	ldr	r2, [pc, #52]	; (aa80 <serial2_peek+0x38>)
	tail = rx_buffer_tail;
    aa4a:	4b0e      	ldr	r3, [pc, #56]	; (aa84 <serial2_peek+0x3c>)
	head = rx_buffer_head;
    aa4c:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    aa4e:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    aa50:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    aa52:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    aa54:	d011      	beq.n	aa7a <serial2_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    aa56:	490c      	ldr	r1, [pc, #48]	; (aa88 <serial2_peek+0x40>)
    aa58:	6809      	ldr	r1, [r1, #0]
    aa5a:	1c53      	adds	r3, r2, #1
    aa5c:	4299      	cmp	r1, r3
    aa5e:	d907      	bls.n	aa70 <serial2_peek+0x28>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    aa60:	2b3f      	cmp	r3, #63	; 0x3f
    aa62:	d906      	bls.n	aa72 <serial2_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    aa64:	4b09      	ldr	r3, [pc, #36]	; (aa8c <serial2_peek+0x44>)
    aa66:	3a3f      	subs	r2, #63	; 0x3f
    aa68:	681b      	ldr	r3, [r3, #0]
    aa6a:	5c98      	ldrb	r0, [r3, r2]
    aa6c:	b2c0      	uxtb	r0, r0
    aa6e:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    aa70:	2300      	movs	r3, #0
		return rx_buffer[tail];
    aa72:	4a07      	ldr	r2, [pc, #28]	; (aa90 <serial2_peek+0x48>)
    aa74:	5cd0      	ldrb	r0, [r2, r3]
    aa76:	b2c0      	uxtb	r0, r0
    aa78:	4770      	bx	lr
	if (head == tail) return -1;
    aa7a:	f04f 30ff 	mov.w	r0, #4294967295
}
    aa7e:	4770      	bx	lr
    aa80:	1fffdd0c 	.word	0x1fffdd0c
    aa84:	1fffdd14 	.word	0x1fffdd14
    aa88:	1fff89d8 	.word	0x1fff89d8
    aa8c:	1fffdd10 	.word	0x1fffdd10
    aa90:	1fffdccc 	.word	0x1fffdccc

0000aa94 <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    aa94:	4b0c      	ldr	r3, [pc, #48]	; (aac8 <serial2_clear+0x34>)
    aa96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aa98:	051b      	lsls	r3, r3, #20
    aa9a:	d514      	bpl.n	aac6 <serial2_clear+0x32>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    aa9c:	4b0b      	ldr	r3, [pc, #44]	; (aacc <serial2_clear+0x38>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    aa9e:	480c      	ldr	r0, [pc, #48]	; (aad0 <serial2_clear+0x3c>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    aaa0:	78da      	ldrb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    aaa2:	2140      	movs	r1, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    aaa4:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    aaa8:	70da      	strb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    aaaa:	7459      	strb	r1, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    aaac:	78da      	ldrb	r2, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    aaae:	4909      	ldr	r1, [pc, #36]	; (aad4 <serial2_clear+0x40>)
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    aab0:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    aab4:	70da      	strb	r2, [r3, #3]
	if (rts_pin) rts_assert();
    aab6:	4a08      	ldr	r2, [pc, #32]	; (aad8 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    aab8:	7803      	ldrb	r3, [r0, #0]
	if (rts_pin) rts_assert();
    aaba:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    aabc:	b2db      	uxtb	r3, r3
    aabe:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    aac0:	b10a      	cbz	r2, aac6 <serial2_clear+0x32>
    aac2:	2300      	movs	r3, #0
    aac4:	7013      	strb	r3, [r2, #0]
}
    aac6:	4770      	bx	lr
    aac8:	40048000 	.word	0x40048000
    aacc:	4006b000 	.word	0x4006b000
    aad0:	1fffdd14 	.word	0x1fffdd14
    aad4:	1fffdd0c 	.word	0x1fffdd0c
    aad8:	1fffdcc8 	.word	0x1fffdcc8

0000aadc <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    aadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    aae0:	4c50      	ldr	r4, [pc, #320]	; (ac24 <uart1_status_isr+0x148>)
    aae2:	7923      	ldrb	r3, [r4, #4]
    aae4:	f013 0f30 	tst.w	r3, #48	; 0x30
    aae8:	d047      	beq.n	ab7a <uart1_status_isr+0x9e>
		__disable_irq();
    aaea:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    aaec:	7da3      	ldrb	r3, [r4, #22]
		if (avail == 0) {
    aaee:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    aaf2:	2b00      	cmp	r3, #0
    aaf4:	d058      	beq.n	aba8 <uart1_status_isr+0xcc>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    aaf6:	b662      	cpsie	i
			head = rx_buffer_head;
    aaf8:	f8df 812c 	ldr.w	r8, [pc, #300]	; ac28 <uart1_status_isr+0x14c>
			tail = rx_buffer_tail;
    aafc:	484b      	ldr	r0, [pc, #300]	; (ac2c <uart1_status_isr+0x150>)
			head = rx_buffer_head;
    aafe:	f898 3000 	ldrb.w	r3, [r8]
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ab02:	4a4b      	ldr	r2, [pc, #300]	; (ac30 <uart1_status_isr+0x154>)
			tail = rx_buffer_tail;
    ab04:	7805      	ldrb	r5, [r0, #0]
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ab06:	6816      	ldr	r6, [r2, #0]
				if (newhead != tail) {
					head = newhead;
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
						rx_buffer[head] = n;
    ab08:	4f4a      	ldr	r7, [pc, #296]	; (ac34 <uart1_status_isr+0x158>)
			head = rx_buffer_head;
    ab0a:	fa5f fc83 	uxtb.w	ip, r3
					} else {
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ab0e:	4b4a      	ldr	r3, [pc, #296]	; (ac38 <uart1_status_isr+0x15c>)
			tail = rx_buffer_tail;
    ab10:	b2ed      	uxtb	r5, r5
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ab12:	f8d3 e000 	ldr.w	lr, [r3]
    ab16:	e008      	b.n	ab2a <uart1_status_isr+0x4e>
				if (newhead != tail) {
    ab18:	b11d      	cbz	r5, ab22 <uart1_status_isr+0x46>
    ab1a:	f04f 0c00 	mov.w	ip, #0
						rx_buffer[head] = n;
    ab1e:	f807 300c 	strb.w	r3, [r7, ip]
					}
				}
			} while (--avail > 0);
    ab22:	1e4a      	subs	r2, r1, #1
    ab24:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    ab28:	d012      	beq.n	ab50 <uart1_status_isr+0x74>
					n = UART1_D;
    ab2a:	79e3      	ldrb	r3, [r4, #7]
				newhead = head + 1;
    ab2c:	f10c 0201 	add.w	r2, ip, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ab30:	4296      	cmp	r6, r2
					n = UART1_D;
    ab32:	b2db      	uxtb	r3, r3
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ab34:	d9f0      	bls.n	ab18 <uart1_status_isr+0x3c>
				if (newhead != tail) {
    ab36:	4295      	cmp	r5, r2
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ab38:	f1ac 003f 	sub.w	r0, ip, #63	; 0x3f
				if (newhead != tail) {
    ab3c:	d0f1      	beq.n	ab22 <uart1_status_isr+0x46>
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
    ab3e:	2a3f      	cmp	r2, #63	; 0x3f
    ab40:	d96d      	bls.n	ac1e <uart1_status_isr+0x142>
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ab42:	4694      	mov	ip, r2
			} while (--avail > 0);
    ab44:	1e4a      	subs	r2, r1, #1
    ab46:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ab4a:	f80e 3000 	strb.w	r3, [lr, r0]
			} while (--avail > 0);
    ab4e:	d1ec      	bne.n	ab2a <uart1_status_isr+0x4e>
			rx_buffer_head = head;
    ab50:	fa5f f38c 	uxtb.w	r3, ip
    ab54:	f888 3000 	strb.w	r3, [r8]
			if (rts_pin) {
    ab58:	4b38      	ldr	r3, [pc, #224]	; (ac3c <uart1_status_isr+0x160>)
    ab5a:	6819      	ldr	r1, [r3, #0]
    ab5c:	b169      	cbz	r1, ab7a <uart1_status_isr+0x9e>
				int avail;
				if (head >= tail) avail = head - tail;
    ab5e:	45ac      	cmp	ip, r5
				else avail = rx_buffer_total_size_ + head - tail;
    ab60:	bf3c      	itt	cc
    ab62:	1b72      	subcc	r2, r6, r5
    ab64:	eb02 030c 	addcc.w	r3, r2, ip
				if (avail >= rts_high_watermark_) rts_deassert();
    ab68:	4a35      	ldr	r2, [pc, #212]	; (ac40 <uart1_status_isr+0x164>)
    ab6a:	6812      	ldr	r2, [r2, #0]
				if (head >= tail) avail = head - tail;
    ab6c:	bf28      	it	cs
    ab6e:	ebac 0305 	subcs.w	r3, ip, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    ab72:	429a      	cmp	r2, r3
    ab74:	bf9c      	itt	ls
    ab76:	2301      	movls	r3, #1
    ab78:	700b      	strbls	r3, [r1, #0]
			}
		}
	}
	c = UART1_C2;
    ab7a:	482a      	ldr	r0, [pc, #168]	; (ac24 <uart1_status_isr+0x148>)
    ab7c:	78c3      	ldrb	r3, [r0, #3]
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    ab7e:	061e      	lsls	r6, r3, #24
	c = UART1_C2;
    ab80:	b2dd      	uxtb	r5, r3
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    ab82:	d416      	bmi.n	abb2 <uart1_status_isr+0xd6>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    ab84:	066a      	lsls	r2, r5, #25
    ab86:	d50d      	bpl.n	aba4 <uart1_status_isr+0xc8>
    ab88:	4b26      	ldr	r3, [pc, #152]	; (ac24 <uart1_status_isr+0x148>)
    ab8a:	791b      	ldrb	r3, [r3, #4]
    ab8c:	065b      	lsls	r3, r3, #25
    ab8e:	d509      	bpl.n	aba4 <uart1_status_isr+0xc8>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    ab90:	4b2c      	ldr	r3, [pc, #176]	; (ac44 <uart1_status_isr+0x168>)
		transmitting = 0;
    ab92:	492d      	ldr	r1, [pc, #180]	; (ac48 <uart1_status_isr+0x16c>)
		if (transmit_pin) transmit_deassert();
    ab94:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    ab96:	2200      	movs	r2, #0
    ab98:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    ab9a:	b103      	cbz	r3, ab9e <uart1_status_isr+0xc2>
    ab9c:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART1_C3 = reg;
			__enable_irq();
		}
		#endif		
		UART1_C2 = C2_TX_INACTIVE;
    ab9e:	4b21      	ldr	r3, [pc, #132]	; (ac24 <uart1_status_isr+0x148>)
    aba0:	223c      	movs	r2, #60	; 0x3c
    aba2:	70da      	strb	r2, [r3, #3]
	}
}
    aba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    aba8:	2340      	movs	r3, #64	; 0x40
			c = UART1_D;
    abaa:	79e2      	ldrb	r2, [r4, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    abac:	7463      	strb	r3, [r4, #17]
			__enable_irq();
    abae:	b662      	cpsie	i
    abb0:	e7e3      	b.n	ab7a <uart1_status_isr+0x9e>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    abb2:	7903      	ldrb	r3, [r0, #4]
    abb4:	061c      	lsls	r4, r3, #24
    abb6:	d5e5      	bpl.n	ab84 <uart1_status_isr+0xa8>
		head = tx_buffer_head;
    abb8:	4b24      	ldr	r3, [pc, #144]	; (ac4c <uart1_status_isr+0x170>)
			if (++tail >= tx_buffer_total_size_) tail = 0;
    abba:	4a25      	ldr	r2, [pc, #148]	; (ac50 <uart1_status_isr+0x174>)
		tail = tx_buffer_tail;
    abbc:	f8df e094 	ldr.w	lr, [pc, #148]	; ac54 <uart1_status_isr+0x178>
		head = tx_buffer_head;
    abc0:	781c      	ldrb	r4, [r3, #0]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    abc2:	6816      	ldr	r6, [r2, #0]
		tail = tx_buffer_tail;
    abc4:	f89e 3000 	ldrb.w	r3, [lr]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    abc8:	4a23      	ldr	r2, [pc, #140]	; (ac58 <uart1_status_isr+0x17c>)
				n = tx_buffer[tail];
    abca:	4f24      	ldr	r7, [pc, #144]	; (ac5c <uart1_status_isr+0x180>)
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    abcc:	f8d2 c000 	ldr.w	ip, [r2]
		head = tx_buffer_head;
    abd0:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    abd2:	b2db      	uxtb	r3, r3
    abd4:	e007      	b.n	abe6 <uart1_status_isr+0x10a>
			avail = UART1_S1;
    abd6:	7903      	ldrb	r3, [r0, #4]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    abd8:	2300      	movs	r3, #0
				n = tx_buffer[tail];
    abda:	5cfa      	ldrb	r2, [r7, r3]
    abdc:	b2d2      	uxtb	r2, r2
			UART1_D = n;
    abde:	71c2      	strb	r2, [r0, #7]
		} while (UART1_TCFIFO < 8);
    abe0:	7d02      	ldrb	r2, [r0, #20]
    abe2:	2a07      	cmp	r2, #7
    abe4:	d811      	bhi.n	ac0a <uart1_status_isr+0x12e>
			if (tail == head) break;
    abe6:	42a3      	cmp	r3, r4
			if (++tail >= tx_buffer_total_size_) tail = 0;
    abe8:	f103 0101 	add.w	r1, r3, #1
			if (tail == head) break;
    abec:	d00e      	beq.n	ac0c <uart1_status_isr+0x130>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    abee:	428e      	cmp	r6, r1
    abf0:	d9f1      	bls.n	abd6 <uart1_status_isr+0xfa>
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    abf2:	2927      	cmp	r1, #39	; 0x27
			avail = UART1_S1;
    abf4:	7902      	ldrb	r2, [r0, #4]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    abf6:	f1a3 0327 	sub.w	r3, r3, #39	; 0x27
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    abfa:	d801      	bhi.n	ac00 <uart1_status_isr+0x124>
    abfc:	460b      	mov	r3, r1
    abfe:	e7ec      	b.n	abda <uart1_status_isr+0xfe>
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    ac00:	f81c 2003 	ldrb.w	r2, [ip, r3]
    ac04:	460b      	mov	r3, r1
    ac06:	b2d2      	uxtb	r2, r2
    ac08:	e7e9      	b.n	abde <uart1_status_isr+0x102>
		tx_buffer_tail = tail;
    ac0a:	b2dc      	uxtb	r4, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    ac0c:	4b05      	ldr	r3, [pc, #20]	; (ac24 <uart1_status_isr+0x148>)
		tx_buffer_tail = tail;
    ac0e:	f88e 4000 	strb.w	r4, [lr]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    ac12:	791a      	ldrb	r2, [r3, #4]
    ac14:	0611      	lsls	r1, r2, #24
    ac16:	bf44      	itt	mi
    ac18:	227c      	movmi	r2, #124	; 0x7c
    ac1a:	70da      	strbmi	r2, [r3, #3]
    ac1c:	e7b2      	b.n	ab84 <uart1_status_isr+0xa8>
    ac1e:	4694      	mov	ip, r2
    ac20:	e77d      	b.n	ab1e <uart1_status_isr+0x42>
    ac22:	bf00      	nop
    ac24:	4006b000 	.word	0x4006b000
    ac28:	1fffdd0c 	.word	0x1fffdd0c
    ac2c:	1fffdd14 	.word	0x1fffdd14
    ac30:	1fff89d8 	.word	0x1fff89d8
    ac34:	1fffdccc 	.word	0x1fffdccc
    ac38:	1fffdd10 	.word	0x1fffdd10
    ac3c:	1fffdcc8 	.word	0x1fffdcc8
    ac40:	1fff89d0 	.word	0x1fff89d0
    ac44:	1fffdd18 	.word	0x1fffdd18
    ac48:	1fffdd1c 	.word	0x1fffdd1c
    ac4c:	1fffdd48 	.word	0x1fffdd48
    ac50:	1fff89e0 	.word	0x1fff89e0
    ac54:	1fffdd50 	.word	0x1fffdd50
    ac58:	1fffdd4c 	.word	0x1fffdd4c
    ac5c:	1fffdd20 	.word	0x1fffdd20

0000ac60 <serial2_add_memory_for_read>:

void serial2_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    ac60:	4b09      	ldr	r3, [pc, #36]	; (ac88 <serial2_add_memory_for_read+0x28>)
{
    ac62:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    ac64:	6018      	str	r0, [r3, #0]
	if (buffer) {
    ac66:	b160      	cbz	r0, ac82 <serial2_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE + length;
    ac68:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    ac6c:	4b07      	ldr	r3, [pc, #28]	; (ac8c <serial2_add_memory_for_read+0x2c>)
    ac6e:	4808      	ldr	r0, [pc, #32]	; (ac90 <serial2_add_memory_for_read+0x30>)
    ac70:	f101 021a 	add.w	r2, r1, #26
    ac74:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    ac76:	4b07      	ldr	r3, [pc, #28]	; (ac94 <serial2_add_memory_for_read+0x34>)
    ac78:	6004      	str	r4, [r0, #0]
    ac7a:	3128      	adds	r1, #40	; 0x28
}
    ac7c:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    ac7e:	6019      	str	r1, [r3, #0]
}
    ac80:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
    ac82:	2440      	movs	r4, #64	; 0x40
    ac84:	e7f2      	b.n	ac6c <serial2_add_memory_for_read+0xc>
    ac86:	bf00      	nop
    ac88:	1fffdd10 	.word	0x1fffdd10
    ac8c:	1fff89d4 	.word	0x1fff89d4
    ac90:	1fff89d8 	.word	0x1fff89d8
    ac94:	1fff89d0 	.word	0x1fff89d0

0000ac98 <serial2_add_memory_for_write>:

void serial2_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    ac98:	4b05      	ldr	r3, [pc, #20]	; (acb0 <serial2_add_memory_for_write+0x18>)
    ac9a:	6018      	str	r0, [r3, #0]
	if (buffer) {
    ac9c:	b118      	cbz	r0, aca6 <serial2_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE + length;
    ac9e:	4b05      	ldr	r3, [pc, #20]	; (acb4 <serial2_add_memory_for_write+0x1c>)
    aca0:	3128      	adds	r1, #40	; 0x28
    aca2:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
	} 
}
    aca4:	4770      	bx	lr
    aca6:	4b03      	ldr	r3, [pc, #12]	; (acb4 <serial2_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
    aca8:	2128      	movs	r1, #40	; 0x28
    acaa:	6019      	str	r1, [r3, #0]
}
    acac:	4770      	bx	lr
    acae:	bf00      	nop
    acb0:	1fffdd4c 	.word	0x1fffdd4c
    acb4:	1fff89e0 	.word	0x1fff89e0

0000acb8 <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    acb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    acbc:	4b31      	ldr	r3, [pc, #196]	; (ad84 <serial3_putchar.part.0+0xcc>)
    acbe:	681b      	ldr	r3, [r3, #0]
void serial3_putchar(uint32_t c)
    acc0:	4607      	mov	r7, r0
	if (transmit_pin) transmit_assert();
    acc2:	b10b      	cbz	r3, acc8 <serial3_putchar.part.0+0x10>
    acc4:	2201      	movs	r2, #1
    acc6:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART2_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    acc8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; ad88 <serial3_putchar.part.0+0xd0>
	if (++head >= tx_buffer_total_size_) head = 0;
    accc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; ad8c <serial3_putchar.part.0+0xd4>
	head = tx_buffer_head;
    acd0:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    acd4:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    acd8:	4d2d      	ldr	r5, [pc, #180]	; (ad90 <serial3_putchar.part.0+0xd8>)
	if (++head >= tx_buffer_total_size_) head = 0;
    acda:	3401      	adds	r4, #1
    acdc:	429c      	cmp	r4, r3
	while (tx_buffer_tail == head) {
    acde:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    ace0:	d32a      	bcc.n	ad38 <serial3_putchar.part.0+0x80>
	while (tx_buffer_tail == head) {
    ace2:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    ace6:	2b00      	cmp	r3, #0
    ace8:	d13e      	bne.n	ad68 <serial3_putchar.part.0+0xb0>
	if (++head >= tx_buffer_total_size_) head = 0;
    acea:	4654      	mov	r4, sl
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    acec:	4e29      	ldr	r6, [pc, #164]	; (ad94 <serial3_putchar.part.0+0xdc>)
				uint32_t tail = tx_buffer_tail;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
					n = tx_buffer[tail];
    acee:	f8df b0a8 	ldr.w	fp, [pc, #168]	; ad98 <serial3_putchar.part.0+0xe0>
    acf2:	e005      	b.n	ad00 <serial3_putchar.part.0+0x48>
			if ((UART2_S1 & UART_S1_TDRE)) {
    acf4:	7933      	ldrb	r3, [r6, #4]
    acf6:	061b      	lsls	r3, r3, #24
    acf8:	d423      	bmi.n	ad42 <serial3_putchar.part.0+0x8a>
	while (tx_buffer_tail == head) {
    acfa:	782b      	ldrb	r3, [r5, #0]
    acfc:	42a3      	cmp	r3, r4
    acfe:	d10a      	bne.n	ad16 <serial3_putchar.part.0+0x5e>
		int priority = nvic_execution_priority();
    ad00:	f7fe ff90 	bl	9c24 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    ad04:	2840      	cmp	r0, #64	; 0x40
    ad06:	ddf5      	ble.n	acf4 <serial3_putchar.part.0+0x3c>
				}
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    ad08:	28ff      	cmp	r0, #255	; 0xff
    ad0a:	ddf6      	ble.n	acfa <serial3_putchar.part.0+0x42>
			yield(); // wait
    ad0c:	f001 f9c8 	bl	c0a0 <yield>
	while (tx_buffer_tail == head) {
    ad10:	782b      	ldrb	r3, [r5, #0]
    ad12:	42a3      	cmp	r3, r4
    ad14:	d0f4      	beq.n	ad00 <serial3_putchar.part.0+0x48>
		}
	}
	if (head < SERIAL3_TX_BUFFER_SIZE) {
    ad16:	2c27      	cmp	r4, #39	; 0x27
    ad18:	d929      	bls.n	ad6e <serial3_putchar.part.0+0xb6>
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL3_TX_BUFFER_SIZE] = c;
    ad1a:	4b20      	ldr	r3, [pc, #128]	; (ad9c <serial3_putchar.part.0+0xe4>)
    ad1c:	3c28      	subs	r4, #40	; 0x28
    ad1e:	681b      	ldr	r3, [r3, #0]
    ad20:	b2ff      	uxtb	r7, r7
    ad22:	551f      	strb	r7, [r3, r4]
	}
	transmitting = 1;
    ad24:	4a1e      	ldr	r2, [pc, #120]	; (ada0 <serial3_putchar.part.0+0xe8>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    ad26:	4b1b      	ldr	r3, [pc, #108]	; (ad94 <serial3_putchar.part.0+0xdc>)
	transmitting = 1;
    ad28:	2101      	movs	r1, #1
    ad2a:	7011      	strb	r1, [r2, #0]
	UART2_C2 = C2_TX_ACTIVE;
    ad2c:	22ac      	movs	r2, #172	; 0xac
	tx_buffer_head = head;
    ad2e:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    ad32:	70da      	strb	r2, [r3, #3]
}
    ad34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    ad38:	429c      	cmp	r4, r3
	tx_buffer_head = head;
    ad3a:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    ad3e:	d0d5      	beq.n	acec <serial3_putchar.part.0+0x34>
    ad40:	e7e9      	b.n	ad16 <serial3_putchar.part.0+0x5e>
				uint32_t tail = tx_buffer_tail;
    ad42:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ad44:	f8d8 1000 	ldr.w	r1, [r8]
    ad48:	1c5a      	adds	r2, r3, #1
    ad4a:	428a      	cmp	r2, r1
				uint32_t tail = tx_buffer_tail;
    ad4c:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ad4e:	d203      	bcs.n	ad58 <serial3_putchar.part.0+0xa0>
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
    ad50:	2a27      	cmp	r2, #39	; 0x27
    ad52:	d810      	bhi.n	ad76 <serial3_putchar.part.0+0xbe>
				tx_buffer_tail = tail;
    ad54:	b2d1      	uxtb	r1, r2
    ad56:	e001      	b.n	ad5c <serial3_putchar.part.0+0xa4>
    ad58:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ad5a:	460a      	mov	r2, r1
					n = tx_buffer[tail];
    ad5c:	f81b 3002 	ldrb.w	r3, [fp, r2]
    ad60:	b2db      	uxtb	r3, r3
				UART2_D = n;
    ad62:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    ad64:	7029      	strb	r1, [r5, #0]
    ad66:	e7c8      	b.n	acfa <serial3_putchar.part.0+0x42>
	while (tx_buffer_tail == head) {
    ad68:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    ad6c:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    ad6e:	4b0a      	ldr	r3, [pc, #40]	; (ad98 <serial3_putchar.part.0+0xe0>)
    ad70:	b2ff      	uxtb	r7, r7
    ad72:	551f      	strb	r7, [r3, r4]
    ad74:	e7d6      	b.n	ad24 <serial3_putchar.part.0+0x6c>
				tx_buffer_tail = tail;
    ad76:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    ad78:	4a08      	ldr	r2, [pc, #32]	; (ad9c <serial3_putchar.part.0+0xe4>)
    ad7a:	3b27      	subs	r3, #39	; 0x27
    ad7c:	6812      	ldr	r2, [r2, #0]
    ad7e:	5cd3      	ldrb	r3, [r2, r3]
    ad80:	b2db      	uxtb	r3, r3
    ad82:	e7ee      	b.n	ad62 <serial3_putchar.part.0+0xaa>
    ad84:	1fffdda4 	.word	0x1fffdda4
    ad88:	1fffddd4 	.word	0x1fffddd4
    ad8c:	1fff89f4 	.word	0x1fff89f4
    ad90:	1fffdddc 	.word	0x1fffdddc
    ad94:	4006c000 	.word	0x4006c000
    ad98:	1fffddac 	.word	0x1fffddac
    ad9c:	1fffddd8 	.word	0x1fffddd8
    ada0:	1fffdda8 	.word	0x1fffdda8

0000ada4 <serial3_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    ada4:	4a1d      	ldr	r2, [pc, #116]	; (ae1c <serial3_begin+0x78>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    ada6:	491e      	ldr	r1, [pc, #120]	; (ae20 <serial3_begin+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    ada8:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    adaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    adae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	transmitting = 0;
    adb2:	4d1c      	ldr	r5, [pc, #112]	; (ae24 <serial3_begin+0x80>)
	rx_buffer_head = 0;
    adb4:	f8df 8070 	ldr.w	r8, [pc, #112]	; ae28 <serial3_begin+0x84>
	rx_buffer_tail = 0;
    adb8:	f8df 9070 	ldr.w	r9, [pc, #112]	; ae2c <serial3_begin+0x88>
	tx_buffer_head = 0;
    adbc:	4f1c      	ldr	r7, [pc, #112]	; (ae30 <serial3_begin+0x8c>)
	tx_buffer_tail = 0;
    adbe:	4e1d      	ldr	r6, [pc, #116]	; (ae34 <serial3_begin+0x90>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    adc0:	6353      	str	r3, [r2, #52]	; 0x34
	rx_buffer_head = 0;
    adc2:	2300      	movs	r3, #0
    adc4:	f888 3000 	strb.w	r3, [r8]
	rx_buffer_tail = 0;
    adc8:	2820      	cmp	r0, #32
    adca:	f889 3000 	strb.w	r3, [r9]
	tx_buffer_head = 0;
    adce:	703b      	strb	r3, [r7, #0]
	tx_buffer_tail = 0;
    add0:	7033      	strb	r3, [r6, #0]
	transmitting = 0;
    add2:	702b      	strb	r3, [r5, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    add4:	f240 3513 	movw	r5, #787	; 0x313
    add8:	608d      	str	r5, [r1, #8]
	UART2_BDH = (divisor >> 13) & 0x1F;
    adda:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    adde:	bf38      	it	cc
    ade0:	2020      	movcc	r0, #32
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    ade2:	f44f 7551 	mov.w	r5, #836	; 0x344
    ade6:	60cd      	str	r5, [r1, #12]
	UART2_BDH = (divisor >> 13) & 0x1F;
    ade8:	f3c0 3144 	ubfx	r1, r0, #13, #5
    adec:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    adee:	f3c0 1e47 	ubfx	lr, r0, #5, #8
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    adf2:	4c11      	ldr	r4, [pc, #68]	; (ae38 <serial3_begin+0x94>)
	UART2_BDL = (divisor >> 5) & 0xFF;
    adf4:	f882 e001 	strb.w	lr, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    adf8:	f000 001f 	and.w	r0, r0, #31
	UART2_C2 = C2_TX_INACTIVE;
    adfc:	212c      	movs	r1, #44	; 0x2c
	UART2_C4 = divisor & 0x1F;
    adfe:	7290      	strb	r0, [r2, #10]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    ae00:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	UART2_C1 = 0;
    ae04:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    ae06:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    ae08:	70d1      	strb	r1, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    ae0a:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    ae0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    ae10:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    ae14:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
}
    ae18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ae1c:	40048000 	.word	0x40048000
    ae20:	4004c000 	.word	0x4004c000
    ae24:	1fffdda8 	.word	0x1fffdda8
    ae28:	1fffdd98 	.word	0x1fffdd98
    ae2c:	1fffdda0 	.word	0x1fffdda0
    ae30:	1fffddd4 	.word	0x1fffddd4
    ae34:	1fffdddc 	.word	0x1fffdddc
    ae38:	e000e400 	.word	0xe000e400

0000ae3c <serial3_format>:
	c = UART2_C1;
    ae3c:	4b21      	ldr	r3, [pc, #132]	; (aec4 <serial3_format+0x88>)
	UART2_C1 = c;
    ae3e:	4921      	ldr	r1, [pc, #132]	; (aec4 <serial3_format+0x88>)
	c = UART2_C1;
    ae40:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    ae42:	f000 0203 	and.w	r2, r0, #3
    ae46:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    ae4a:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    ae4c:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    ae4e:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    ae52:	bf48      	it	mi
    ae54:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    ae58:	2a04      	cmp	r2, #4
	UART2_C1 = c;
    ae5a:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    ae5c:	d103      	bne.n	ae66 <serial3_format+0x2a>
    ae5e:	798b      	ldrb	r3, [r1, #6]
    ae60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ae64:	718b      	strb	r3, [r1, #6]
	c = UART2_S2 & ~0x10;
    ae66:	4b17      	ldr	r3, [pc, #92]	; (aec4 <serial3_format+0x88>)
	UART2_S2 = c;
    ae68:	4a16      	ldr	r2, [pc, #88]	; (aec4 <serial3_format+0x88>)
	c = UART2_S2 & ~0x10;
    ae6a:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    ae6c:	06c1      	lsls	r1, r0, #27
	c = UART2_S2 & ~0x10;
    ae6e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    ae72:	bf48      	it	mi
    ae74:	f043 0310 	orrmi.w	r3, r3, #16
	UART2_S2 = c;
    ae78:	7153      	strb	r3, [r2, #5]
	c = UART2_C3 & ~0x10;
    ae7a:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    ae7c:	0682      	lsls	r2, r0, #26
	c = UART2_C3 & ~0x10;
    ae7e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART2_C3 = c;
    ae82:	4a10      	ldr	r2, [pc, #64]	; (aec4 <serial3_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    ae84:	bf48      	it	mi
    ae86:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    ae8a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART2_C3 = c;
    ae8e:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    ae90:	d010      	beq.n	aeb4 <serial3_format+0x78>
		c = UART2_C1;
    ae92:	7893      	ldrb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    ae94:	490c      	ldr	r1, [pc, #48]	; (aec8 <serial3_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    ae96:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART2_C1 = c;
    ae9a:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    ae9c:	7809      	ldrb	r1, [r1, #0]
    ae9e:	4b0b      	ldr	r3, [pc, #44]	; (aecc <serial3_format+0x90>)
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    aea0:	4a0b      	ldr	r2, [pc, #44]	; (aed0 <serial3_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    aea2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    aea6:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    aeaa:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    aeac:	4909      	ldr	r1, [pc, #36]	; (aed4 <serial3_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    aeae:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    aeb0:	6011      	str	r1, [r2, #0]
    aeb2:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    aeb4:	4b06      	ldr	r3, [pc, #24]	; (aed0 <serial3_format+0x94>)
    aeb6:	4a07      	ldr	r2, [pc, #28]	; (aed4 <serial3_format+0x98>)
    aeb8:	6819      	ldr	r1, [r3, #0]
    aeba:	4291      	cmp	r1, r2
    aebc:	bf08      	it	eq
    aebe:	6018      	streq	r0, [r3, #0]
}
    aec0:	4770      	bx	lr
    aec2:	bf00      	nop
    aec4:	4006c000 	.word	0x4006c000
    aec8:	1fff89f8 	.word	0x1fff89f8
    aecc:	000152c8 	.word	0x000152c8
    aed0:	1fffdda4 	.word	0x1fffdda4
    aed4:	42d800d4 	.word	0x42d800d4

0000aed8 <serial3_end>:
{
    aed8:	b538      	push	{r3, r4, r5, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    aeda:	4b13      	ldr	r3, [pc, #76]	; (af28 <serial3_end+0x50>)
    aedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aede:	04db      	lsls	r3, r3, #19
    aee0:	d520      	bpl.n	af24 <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    aee2:	4c12      	ldr	r4, [pc, #72]	; (af2c <serial3_end+0x54>)
    aee4:	7823      	ldrb	r3, [r4, #0]
    aee6:	b123      	cbz	r3, aef2 <serial3_end+0x1a>
    aee8:	f001 f8da 	bl	c0a0 <yield>
    aeec:	7823      	ldrb	r3, [r4, #0]
    aeee:	2b00      	cmp	r3, #0
    aef0:	d1fa      	bne.n	aee8 <serial3_end+0x10>
	UART2_C2 = 0;
    aef2:	4a0f      	ldr	r2, [pc, #60]	; (af30 <serial3_end+0x58>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    aef4:	490f      	ldr	r1, [pc, #60]	; (af34 <serial3_end+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    aef6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	UART2_C2 = 0;
    aefa:	2300      	movs	r3, #0
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    aefc:	f240 1003 	movw	r0, #259	; 0x103
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    af00:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    af04:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	UART2_C2 = 0;
    af08:	70d3      	strb	r3, [r2, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    af0a:	6088      	str	r0, [r1, #8]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    af0c:	60c8      	str	r0, [r1, #12]
	if (rts_pin) rts_deassert();
    af0e:	490a      	ldr	r1, [pc, #40]	; (af38 <serial3_end+0x60>)
	rx_buffer_head = 0;
    af10:	4c0a      	ldr	r4, [pc, #40]	; (af3c <serial3_end+0x64>)
	rx_buffer_tail = 0;
    af12:	480b      	ldr	r0, [pc, #44]	; (af40 <serial3_end+0x68>)
	if (rts_pin) rts_deassert();
    af14:	6809      	ldr	r1, [r1, #0]
	UART2_S1;
    af16:	7915      	ldrb	r5, [r2, #4]
	UART2_D; // clear leftover error status
    af18:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    af1a:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    af1c:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    af1e:	b109      	cbz	r1, af24 <serial3_end+0x4c>
    af20:	2301      	movs	r3, #1
    af22:	700b      	strb	r3, [r1, #0]
}
    af24:	bd38      	pop	{r3, r4, r5, pc}
    af26:	bf00      	nop
    af28:	40048000 	.word	0x40048000
    af2c:	1fffdda8 	.word	0x1fffdda8
    af30:	4006c000 	.word	0x4006c000
    af34:	4004c000 	.word	0x4004c000
    af38:	1fffdd54 	.word	0x1fffdd54
    af3c:	1fffdd98 	.word	0x1fffdd98
    af40:	1fffdda0 	.word	0x1fffdda0

0000af44 <serial3_set_transmit_pin>:
	while (transmitting) ;
    af44:	4a0a      	ldr	r2, [pc, #40]	; (af70 <serial3_set_transmit_pin+0x2c>)
{
    af46:	b538      	push	{r3, r4, r5, lr}
    af48:	4605      	mov	r5, r0
	while (transmitting) ;
    af4a:	7813      	ldrb	r3, [r2, #0]
    af4c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    af50:	2b00      	cmp	r3, #0
    af52:	d1fa      	bne.n	af4a <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    af54:	2101      	movs	r1, #1
    af56:	4628      	mov	r0, r5
    af58:	f7ff f95e 	bl	a218 <pinMode>
	digitalWrite(pin, LOW);
    af5c:	4621      	mov	r1, r4
    af5e:	4628      	mov	r0, r5
    af60:	f7ff f926 	bl	a1b0 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    af64:	4a03      	ldr	r2, [pc, #12]	; (af74 <serial3_set_transmit_pin+0x30>)
    af66:	4b04      	ldr	r3, [pc, #16]	; (af78 <serial3_set_transmit_pin+0x34>)
    af68:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    af6c:	601a      	str	r2, [r3, #0]
}
    af6e:	bd38      	pop	{r3, r4, r5, pc}
    af70:	1fffdda8 	.word	0x1fffdda8
    af74:	000152c8 	.word	0x000152c8
    af78:	1fffdda4 	.word	0x1fffdda4

0000af7c <serial3_set_tx>:
	if (opendrain) pin |= 128;
    af7c:	b109      	cbz	r1, af82 <serial3_set_tx+0x6>
    af7e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    af82:	4a11      	ldr	r2, [pc, #68]	; (afc8 <serial3_set_tx+0x4c>)
    af84:	7813      	ldrb	r3, [r2, #0]
    af86:	4283      	cmp	r3, r0
    af88:	d016      	beq.n	afb8 <serial3_set_tx+0x3c>
{
    af8a:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    af8c:	4c0f      	ldr	r4, [pc, #60]	; (afcc <serial3_set_tx+0x50>)
    af8e:	6b64      	ldr	r4, [r4, #52]	; 0x34
    af90:	04e4      	lsls	r4, r4, #19
    af92:	d50e      	bpl.n	afb2 <serial3_set_tx+0x36>
		switch (tx_pin_num & 127) {
    af94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    af98:	2b08      	cmp	r3, #8
    af9a:	d102      	bne.n	afa2 <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    af9c:	4b0c      	ldr	r3, [pc, #48]	; (afd0 <serial3_set_tx+0x54>)
    af9e:	2400      	movs	r4, #0
    afa0:	60dc      	str	r4, [r3, #12]
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    afa2:	2900      	cmp	r1, #0
		switch (pin & 127) {
    afa4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    afa8:	bf14      	ite	ne
    afaa:	2160      	movne	r1, #96	; 0x60
    afac:	2144      	moveq	r1, #68	; 0x44
		switch (pin & 127) {
    afae:	2b08      	cmp	r3, #8
    afb0:	d003      	beq.n	afba <serial3_set_tx+0x3e>
	tx_pin_num = pin;
    afb2:	7010      	strb	r0, [r2, #0]
}
    afb4:	bc10      	pop	{r4}
    afb6:	4770      	bx	lr
    afb8:	4770      	bx	lr
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    afba:	4b05      	ldr	r3, [pc, #20]	; (afd0 <serial3_set_tx+0x54>)
    afbc:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    afc0:	60d9      	str	r1, [r3, #12]
	tx_pin_num = pin;
    afc2:	7010      	strb	r0, [r2, #0]
}
    afc4:	bc10      	pop	{r4}
    afc6:	4770      	bx	lr
    afc8:	1fff89f8 	.word	0x1fff89f8
    afcc:	40048000 	.word	0x40048000
    afd0:	4004c000 	.word	0x4004c000

0000afd4 <serial3_set_rx>:
}
    afd4:	4770      	bx	lr
    afd6:	bf00      	nop

0000afd8 <serial3_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    afd8:	4b0d      	ldr	r3, [pc, #52]	; (b010 <serial3_set_rts+0x38>)
    afda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    afdc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    afe0:	d013      	beq.n	b00a <serial3_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    afe2:	2821      	cmp	r0, #33	; 0x21
    afe4:	d903      	bls.n	afee <serial3_set_rts+0x16>
		rts_pin = NULL;
    afe6:	4b0b      	ldr	r3, [pc, #44]	; (b014 <serial3_set_rts+0x3c>)
    afe8:	2000      	movs	r0, #0
    afea:	6018      	str	r0, [r3, #0]
		return 0;
    afec:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    afee:	4b0a      	ldr	r3, [pc, #40]	; (b018 <serial3_set_rts+0x40>)
{
    aff0:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    aff2:	4c08      	ldr	r4, [pc, #32]	; (b014 <serial3_set_rts+0x3c>)
    aff4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    aff8:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    affa:	2101      	movs	r1, #1
    affc:	f7ff f90c 	bl	a218 <pinMode>
		rts_assert();
    b000:	6823      	ldr	r3, [r4, #0]
    b002:	2200      	movs	r2, #0
    b004:	701a      	strb	r2, [r3, #0]
	return 1;
    b006:	2001      	movs	r0, #1
}
    b008:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b00a:	4618      	mov	r0, r3
}
    b00c:	4770      	bx	lr
    b00e:	bf00      	nop
    b010:	40048000 	.word	0x40048000
    b014:	1fffdd54 	.word	0x1fffdd54
    b018:	000152c8 	.word	0x000152c8

0000b01c <serial3_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b01c:	4b0c      	ldr	r3, [pc, #48]	; (b050 <serial3_set_cts+0x34>)
    b01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b020:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    b024:	d012      	beq.n	b04c <serial3_set_cts+0x30>
	if (pin == 14) {
    b026:	280e      	cmp	r0, #14
    b028:	d109      	bne.n	b03e <serial3_set_cts+0x22>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b02a:	4b0a      	ldr	r3, [pc, #40]	; (b054 <serial3_set_cts+0x38>)
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b02c:	4a0a      	ldr	r2, [pc, #40]	; (b058 <serial3_set_cts+0x3c>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b02e:	f240 3102 	movw	r1, #770	; 0x302
    b032:	6059      	str	r1, [r3, #4]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b034:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    b036:	2001      	movs	r0, #1
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b038:	4303      	orrs	r3, r0
    b03a:	7353      	strb	r3, [r2, #13]
	return 1;
    b03c:	4770      	bx	lr
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    b03e:	4a06      	ldr	r2, [pc, #24]	; (b058 <serial3_set_cts+0x3c>)
    b040:	7b53      	ldrb	r3, [r2, #13]
    b042:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    b046:	2000      	movs	r0, #0
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    b048:	7353      	strb	r3, [r2, #13]
		return 0;
    b04a:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b04c:	4618      	mov	r0, r3
}
    b04e:	4770      	bx	lr
    b050:	40048000 	.word	0x40048000
    b054:	4004c000 	.word	0x4004c000
    b058:	4006c000 	.word	0x4006c000

0000b05c <serial3_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b05c:	4b03      	ldr	r3, [pc, #12]	; (b06c <serial3_putchar+0x10>)
    b05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b060:	04db      	lsls	r3, r3, #19
    b062:	d501      	bpl.n	b068 <serial3_putchar+0xc>
    b064:	f7ff be28 	b.w	acb8 <serial3_putchar.part.0>
}
    b068:	4770      	bx	lr
    b06a:	bf00      	nop
    b06c:	40048000 	.word	0x40048000

0000b070 <serial3_write>:

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    b070:	b179      	cbz	r1, b092 <serial3_write+0x22>
{
    b072:	b570      	push	{r4, r5, r6, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b074:	4e07      	ldr	r6, [pc, #28]	; (b094 <serial3_write+0x24>)
    b076:	4604      	mov	r4, r0
    b078:	1845      	adds	r5, r0, r1
    b07a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    b07c:	04db      	lsls	r3, r3, #19
	while (count-- > 0) serial3_putchar(*p++);
    b07e:	f104 0401 	add.w	r4, r4, #1
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b082:	d503      	bpl.n	b08c <serial3_write+0x1c>
    b084:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    b088:	f7ff fe16 	bl	acb8 <serial3_putchar.part.0>
	while (count-- > 0) serial3_putchar(*p++);
    b08c:	42ac      	cmp	r4, r5
    b08e:	d1f4      	bne.n	b07a <serial3_write+0xa>
}
    b090:	bd70      	pop	{r4, r5, r6, pc}
    b092:	4770      	bx	lr
    b094:	40048000 	.word	0x40048000

0000b098 <serial3_flush>:

void serial3_flush(void)
{
    b098:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    b09a:	4c04      	ldr	r4, [pc, #16]	; (b0ac <serial3_flush+0x14>)
    b09c:	7823      	ldrb	r3, [r4, #0]
    b09e:	b123      	cbz	r3, b0aa <serial3_flush+0x12>
    b0a0:	f000 fffe 	bl	c0a0 <yield>
    b0a4:	7823      	ldrb	r3, [r4, #0]
    b0a6:	2b00      	cmp	r3, #0
    b0a8:	d1fa      	bne.n	b0a0 <serial3_flush+0x8>
}
    b0aa:	bd10      	pop	{r4, pc}
    b0ac:	1fffdda8 	.word	0x1fffdda8

0000b0b0 <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    b0b0:	4a08      	ldr	r2, [pc, #32]	; (b0d4 <serial3_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    b0b2:	4b09      	ldr	r3, [pc, #36]	; (b0d8 <serial3_write_buffer_free+0x28>)
	head = tx_buffer_head;
    b0b4:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    b0b6:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b0b8:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    b0ba:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    b0bc:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b0be:	d202      	bcs.n	b0c6 <serial3_write_buffer_free+0x16>
	return tail - head - 1;
    b0c0:	3b01      	subs	r3, #1
    b0c2:	1a18      	subs	r0, r3, r0
}
    b0c4:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b0c6:	4a05      	ldr	r2, [pc, #20]	; (b0dc <serial3_write_buffer_free+0x2c>)
    b0c8:	6812      	ldr	r2, [r2, #0]
    b0ca:	3a01      	subs	r2, #1
    b0cc:	4413      	add	r3, r2
    b0ce:	1a18      	subs	r0, r3, r0
    b0d0:	4770      	bx	lr
    b0d2:	bf00      	nop
    b0d4:	1fffddd4 	.word	0x1fffddd4
    b0d8:	1fffdddc 	.word	0x1fffdddc
    b0dc:	1fff89f4 	.word	0x1fff89f4

0000b0e0 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b0e0:	4a06      	ldr	r2, [pc, #24]	; (b0fc <serial3_available+0x1c>)
	tail = rx_buffer_tail;
    b0e2:	4b07      	ldr	r3, [pc, #28]	; (b100 <serial3_available+0x20>)
	head = rx_buffer_head;
    b0e4:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b0e6:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    b0e8:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    b0ea:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    b0ec:	bf3c      	itt	cc
    b0ee:	4a05      	ldrcc	r2, [pc, #20]	; (b104 <serial3_available+0x24>)
    b0f0:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    b0f2:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    b0f4:	bf38      	it	cc
    b0f6:	189b      	addcc	r3, r3, r2
    b0f8:	1a18      	subs	r0, r3, r0
}
    b0fa:	4770      	bx	lr
    b0fc:	1fffdd98 	.word	0x1fffdd98
    b100:	1fffdda0 	.word	0x1fffdda0
    b104:	1fff89f0 	.word	0x1fff89f0

0000b108 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    b108:	4b1b      	ldr	r3, [pc, #108]	; (b178 <serial3_getchar+0x70>)
	tail = rx_buffer_tail;
    b10a:	491c      	ldr	r1, [pc, #112]	; (b17c <serial3_getchar+0x74>)
	head = rx_buffer_head;
    b10c:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    b10e:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    b110:	429a      	cmp	r2, r3
    b112:	d02e      	beq.n	b172 <serial3_getchar+0x6a>
{
    b114:	b510      	push	{r4, lr}
    b116:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b11a:	4a19      	ldr	r2, [pc, #100]	; (b180 <serial3_getchar+0x78>)
    b11c:	b2d8      	uxtb	r0, r3
    b11e:	6812      	ldr	r2, [r2, #0]
    b120:	1c43      	adds	r3, r0, #1
    b122:	429a      	cmp	r2, r3
    b124:	d919      	bls.n	b15a <serial3_getchar+0x52>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    b126:	2b3f      	cmp	r3, #63	; 0x3f
    b128:	d81b      	bhi.n	b162 <serial3_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    b12a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    b12e:	4815      	ldr	r0, [pc, #84]	; (b184 <serial3_getchar+0x7c>)
    b130:	5cc0      	ldrb	r0, [r0, r3]
    b132:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    b134:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    b138:	4913      	ldr	r1, [pc, #76]	; (b188 <serial3_getchar+0x80>)
    b13a:	6809      	ldr	r1, [r1, #0]
    b13c:	b161      	cbz	r1, b158 <serial3_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    b13e:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    b140:	bf3c      	itt	cc
    b142:	4472      	addcc	r2, lr
    b144:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b146:	4a11      	ldr	r2, [pc, #68]	; (b18c <serial3_getchar+0x84>)
    b148:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    b14a:	bf28      	it	cs
    b14c:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b150:	429a      	cmp	r2, r3
    b152:	d301      	bcc.n	b158 <serial3_getchar+0x50>
    b154:	2300      	movs	r3, #0
    b156:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    b158:	bd10      	pop	{r4, pc}
    b15a:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b15e:	4663      	mov	r3, ip
    b160:	e7e5      	b.n	b12e <serial3_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b162:	4c0b      	ldr	r4, [pc, #44]	; (b190 <serial3_getchar+0x88>)
    b164:	383f      	subs	r0, #63	; 0x3f
    b166:	6824      	ldr	r4, [r4, #0]
    b168:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    b16a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b16e:	b2c0      	uxtb	r0, r0
    b170:	e7e0      	b.n	b134 <serial3_getchar+0x2c>
	if (head == tail) return -1;
    b172:	f04f 30ff 	mov.w	r0, #4294967295
}
    b176:	4770      	bx	lr
    b178:	1fffdd98 	.word	0x1fffdd98
    b17c:	1fffdda0 	.word	0x1fffdda0
    b180:	1fff89f0 	.word	0x1fff89f0
    b184:	1fffdd58 	.word	0x1fffdd58
    b188:	1fffdd54 	.word	0x1fffdd54
    b18c:	1fff89ec 	.word	0x1fff89ec
    b190:	1fffdd9c 	.word	0x1fffdd9c

0000b194 <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b194:	4a0d      	ldr	r2, [pc, #52]	; (b1cc <serial3_peek+0x38>)
	tail = rx_buffer_tail;
    b196:	4b0e      	ldr	r3, [pc, #56]	; (b1d0 <serial3_peek+0x3c>)
	head = rx_buffer_head;
    b198:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b19a:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    b19c:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    b19e:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    b1a0:	d011      	beq.n	b1c6 <serial3_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b1a2:	490c      	ldr	r1, [pc, #48]	; (b1d4 <serial3_peek+0x40>)
    b1a4:	6809      	ldr	r1, [r1, #0]
    b1a6:	1c53      	adds	r3, r2, #1
    b1a8:	4299      	cmp	r1, r3
    b1aa:	d907      	bls.n	b1bc <serial3_peek+0x28>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    b1ac:	2b3f      	cmp	r3, #63	; 0x3f
    b1ae:	d906      	bls.n	b1be <serial3_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b1b0:	4b09      	ldr	r3, [pc, #36]	; (b1d8 <serial3_peek+0x44>)
    b1b2:	3a3f      	subs	r2, #63	; 0x3f
    b1b4:	681b      	ldr	r3, [r3, #0]
    b1b6:	5c98      	ldrb	r0, [r3, r2]
    b1b8:	b2c0      	uxtb	r0, r0
    b1ba:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b1bc:	2300      	movs	r3, #0
		return rx_buffer[tail];
    b1be:	4a07      	ldr	r2, [pc, #28]	; (b1dc <serial3_peek+0x48>)
    b1c0:	5cd0      	ldrb	r0, [r2, r3]
    b1c2:	b2c0      	uxtb	r0, r0
    b1c4:	4770      	bx	lr
	if (head == tail) return -1;
    b1c6:	f04f 30ff 	mov.w	r0, #4294967295
}
    b1ca:	4770      	bx	lr
    b1cc:	1fffdd98 	.word	0x1fffdd98
    b1d0:	1fffdda0 	.word	0x1fffdda0
    b1d4:	1fff89f0 	.word	0x1fff89f0
    b1d8:	1fffdd9c 	.word	0x1fffdd9c
    b1dc:	1fffdd58 	.word	0x1fffdd58

0000b1e0 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    b1e0:	4b05      	ldr	r3, [pc, #20]	; (b1f8 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    b1e2:	4a06      	ldr	r2, [pc, #24]	; (b1fc <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    b1e4:	781b      	ldrb	r3, [r3, #0]
    b1e6:	4906      	ldr	r1, [pc, #24]	; (b200 <serial3_clear+0x20>)
	if (rts_pin) rts_assert();
    b1e8:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    b1ea:	b2db      	uxtb	r3, r3
    b1ec:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    b1ee:	b10a      	cbz	r2, b1f4 <serial3_clear+0x14>
    b1f0:	2300      	movs	r3, #0
    b1f2:	7013      	strb	r3, [r2, #0]
}
    b1f4:	4770      	bx	lr
    b1f6:	bf00      	nop
    b1f8:	1fffdda0 	.word	0x1fffdda0
    b1fc:	1fffdd54 	.word	0x1fffdd54
    b200:	1fffdd98 	.word	0x1fffdd98

0000b204 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    b204:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    b206:	4b3a      	ldr	r3, [pc, #232]	; (b2f0 <uart2_status_isr+0xec>)
    b208:	791a      	ldrb	r2, [r3, #4]
    b20a:	0695      	lsls	r5, r2, #26
    b20c:	d524      	bpl.n	b258 <uart2_status_isr+0x54>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    b20e:	4d39      	ldr	r5, [pc, #228]	; (b2f4 <uart2_status_isr+0xf0>)
		if (head >= rx_buffer_total_size_) head = 0;
    b210:	4939      	ldr	r1, [pc, #228]	; (b2f8 <uart2_status_isr+0xf4>)
			n = UART2_D;
    b212:	79db      	ldrb	r3, [r3, #7]
		head = rx_buffer_head + 1;
    b214:	782a      	ldrb	r2, [r5, #0]
		if (head >= rx_buffer_total_size_) head = 0;
    b216:	680c      	ldr	r4, [r1, #0]
			n = UART2_D;
    b218:	b2d8      	uxtb	r0, r3
		head = rx_buffer_head + 1;
    b21a:	1c53      	adds	r3, r2, #1
		if (head >= rx_buffer_total_size_) head = 0;
    b21c:	429c      	cmp	r4, r3
		head = rx_buffer_head + 1;
    b21e:	b2d2      	uxtb	r2, r2
		if (head >= rx_buffer_total_size_) head = 0;
    b220:	d831      	bhi.n	b286 <uart2_status_isr+0x82>
		if (head != rx_buffer_tail) {
    b222:	4b36      	ldr	r3, [pc, #216]	; (b2fc <uart2_status_isr+0xf8>)
    b224:	781a      	ldrb	r2, [r3, #0]
    b226:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b22a:	b122      	cbz	r2, b236 <uart2_status_isr+0x32>
    b22c:	2200      	movs	r2, #0
    b22e:	4613      	mov	r3, r2
			if (head < SERIAL3_RX_BUFFER_SIZE) {
				rx_buffer[head] = n;
    b230:	4933      	ldr	r1, [pc, #204]	; (b300 <uart2_status_isr+0xfc>)
    b232:	54c8      	strb	r0, [r1, r3]
			} else {
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
			}

			rx_buffer_head = head;
    b234:	702a      	strb	r2, [r5, #0]
		}
		if (rts_pin) {
    b236:	4933      	ldr	r1, [pc, #204]	; (b304 <uart2_status_isr+0x100>)
    b238:	6809      	ldr	r1, [r1, #0]
    b23a:	b169      	cbz	r1, b258 <uart2_status_isr+0x54>
			int avail;
			tail = tx_buffer_tail;
    b23c:	4a32      	ldr	r2, [pc, #200]	; (b308 <uart2_status_isr+0x104>)
    b23e:	7810      	ldrb	r0, [r2, #0]
			if (head >= tail) avail = head - tail;
    b240:	4298      	cmp	r0, r3
			tail = tx_buffer_tail;
    b242:	b2c2      	uxtb	r2, r0
			else avail = rx_buffer_total_size_ + head - tail;
    b244:	bf8a      	itet	hi
    b246:	1aa2      	subhi	r2, r4, r2
			if (head >= tail) avail = head - tail;
    b248:	1a9b      	subls	r3, r3, r2
			else avail = rx_buffer_total_size_ + head - tail;
    b24a:	189b      	addhi	r3, r3, r2
			if (avail >= rts_high_watermark_) rts_deassert();
    b24c:	4a2f      	ldr	r2, [pc, #188]	; (b30c <uart2_status_isr+0x108>)
    b24e:	6812      	ldr	r2, [r2, #0]
    b250:	429a      	cmp	r2, r3
    b252:	bf9c      	itt	ls
    b254:	2301      	movls	r3, #1
    b256:	700b      	strbls	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    b258:	4a25      	ldr	r2, [pc, #148]	; (b2f0 <uart2_status_isr+0xec>)
    b25a:	78d3      	ldrb	r3, [r2, #3]
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b25c:	061c      	lsls	r4, r3, #24
	c = UART2_C2;
    b25e:	b2d9      	uxtb	r1, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b260:	d41e      	bmi.n	b2a0 <uart2_status_isr+0x9c>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    b262:	064a      	lsls	r2, r1, #25
    b264:	d50d      	bpl.n	b282 <uart2_status_isr+0x7e>
    b266:	4b22      	ldr	r3, [pc, #136]	; (b2f0 <uart2_status_isr+0xec>)
    b268:	791b      	ldrb	r3, [r3, #4]
    b26a:	065b      	lsls	r3, r3, #25
    b26c:	d509      	bpl.n	b282 <uart2_status_isr+0x7e>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    b26e:	4b28      	ldr	r3, [pc, #160]	; (b310 <uart2_status_isr+0x10c>)
		transmitting = 0;
    b270:	4928      	ldr	r1, [pc, #160]	; (b314 <uart2_status_isr+0x110>)
		if (transmit_pin) transmit_deassert();
    b272:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    b274:	2200      	movs	r2, #0
    b276:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    b278:	b103      	cbz	r3, b27c <uart2_status_isr+0x78>
    b27a:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART2_C3 = reg;
			__enable_irq();
		}
		#endif
		UART2_C2 = C2_TX_INACTIVE;
    b27c:	4b1c      	ldr	r3, [pc, #112]	; (b2f0 <uart2_status_isr+0xec>)
    b27e:	222c      	movs	r2, #44	; 0x2c
    b280:	70da      	strb	r2, [r3, #3]
	}
}
    b282:	bc30      	pop	{r4, r5}
    b284:	4770      	bx	lr
		if (head != rx_buffer_tail) {
    b286:	491d      	ldr	r1, [pc, #116]	; (b2fc <uart2_status_isr+0xf8>)
    b288:	7809      	ldrb	r1, [r1, #0]
    b28a:	4299      	cmp	r1, r3
    b28c:	d0d3      	beq.n	b236 <uart2_status_isr+0x32>
			if (head < SERIAL3_RX_BUFFER_SIZE) {
    b28e:	2b3f      	cmp	r3, #63	; 0x3f
    b290:	d92c      	bls.n	b2ec <uart2_status_isr+0xe8>
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
    b292:	4921      	ldr	r1, [pc, #132]	; (b318 <uart2_status_isr+0x114>)
    b294:	3a3f      	subs	r2, #63	; 0x3f
    b296:	6809      	ldr	r1, [r1, #0]
    b298:	5488      	strb	r0, [r1, r2]
			rx_buffer_head = head;
    b29a:	b2da      	uxtb	r2, r3
    b29c:	702a      	strb	r2, [r5, #0]
    b29e:	e7ca      	b.n	b236 <uart2_status_isr+0x32>
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b2a0:	7913      	ldrb	r3, [r2, #4]
    b2a2:	0618      	lsls	r0, r3, #24
    b2a4:	d5dd      	bpl.n	b262 <uart2_status_isr+0x5e>
		head = tx_buffer_head;
    b2a6:	4b1d      	ldr	r3, [pc, #116]	; (b31c <uart2_status_isr+0x118>)
		tail = tx_buffer_tail;
    b2a8:	4817      	ldr	r0, [pc, #92]	; (b308 <uart2_status_isr+0x104>)
		head = tx_buffer_head;
    b2aa:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    b2ac:	7803      	ldrb	r3, [r0, #0]
		if (head == tail) {
    b2ae:	429d      	cmp	r5, r3
		tail = tx_buffer_tail;
    b2b0:	b2dc      	uxtb	r4, r3
		if (head == tail) {
    b2b2:	d008      	beq.n	b2c6 <uart2_status_isr+0xc2>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b2b4:	4a1a      	ldr	r2, [pc, #104]	; (b320 <uart2_status_isr+0x11c>)
    b2b6:	6812      	ldr	r2, [r2, #0]
    b2b8:	1c63      	adds	r3, r4, #1
    b2ba:	429a      	cmp	r2, r3
    b2bc:	d906      	bls.n	b2cc <uart2_status_isr+0xc8>
			if (tail < SERIAL3_TX_BUFFER_SIZE) {
    b2be:	2b27      	cmp	r3, #39	; 0x27
    b2c0:	d80d      	bhi.n	b2de <uart2_status_isr+0xda>
			tx_buffer_tail = tail;
    b2c2:	b2da      	uxtb	r2, r3
    b2c4:	e004      	b.n	b2d0 <uart2_status_isr+0xcc>
			UART2_C2 = C2_TX_COMPLETING;
    b2c6:	236c      	movs	r3, #108	; 0x6c
    b2c8:	70d3      	strb	r3, [r2, #3]
    b2ca:	e7ca      	b.n	b262 <uart2_status_isr+0x5e>
    b2cc:	2200      	movs	r2, #0
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b2ce:	4613      	mov	r3, r2
				n = tx_buffer[tail];
    b2d0:	4c14      	ldr	r4, [pc, #80]	; (b324 <uart2_status_isr+0x120>)
    b2d2:	5ce3      	ldrb	r3, [r4, r3]
    b2d4:	b2db      	uxtb	r3, r3
			UART2_D = n;
    b2d6:	4c06      	ldr	r4, [pc, #24]	; (b2f0 <uart2_status_isr+0xec>)
    b2d8:	71e3      	strb	r3, [r4, #7]
			tx_buffer_tail = tail;
    b2da:	7002      	strb	r2, [r0, #0]
    b2dc:	e7c1      	b.n	b262 <uart2_status_isr+0x5e>
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b2de:	4a12      	ldr	r2, [pc, #72]	; (b328 <uart2_status_isr+0x124>)
    b2e0:	3c27      	subs	r4, #39	; 0x27
    b2e2:	6815      	ldr	r5, [r2, #0]
			tx_buffer_tail = tail;
    b2e4:	b2da      	uxtb	r2, r3
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b2e6:	5d2b      	ldrb	r3, [r5, r4]
    b2e8:	b2db      	uxtb	r3, r3
    b2ea:	e7f4      	b.n	b2d6 <uart2_status_isr+0xd2>
			rx_buffer_head = head;
    b2ec:	b2da      	uxtb	r2, r3
    b2ee:	e79f      	b.n	b230 <uart2_status_isr+0x2c>
    b2f0:	4006c000 	.word	0x4006c000
    b2f4:	1fffdd98 	.word	0x1fffdd98
    b2f8:	1fff89f0 	.word	0x1fff89f0
    b2fc:	1fffdda0 	.word	0x1fffdda0
    b300:	1fffdd58 	.word	0x1fffdd58
    b304:	1fffdd54 	.word	0x1fffdd54
    b308:	1fffdddc 	.word	0x1fffdddc
    b30c:	1fff89e8 	.word	0x1fff89e8
    b310:	1fffdda4 	.word	0x1fffdda4
    b314:	1fffdda8 	.word	0x1fffdda8
    b318:	1fffdd9c 	.word	0x1fffdd9c
    b31c:	1fffddd4 	.word	0x1fffddd4
    b320:	1fff89f4 	.word	0x1fff89f4
    b324:	1fffddac 	.word	0x1fffddac
    b328:	1fffddd8 	.word	0x1fffddd8

0000b32c <serial3_add_memory_for_read>:

void serial3_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b32c:	4b09      	ldr	r3, [pc, #36]	; (b354 <serial3_add_memory_for_read+0x28>)
{
    b32e:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b330:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b332:	b160      	cbz	r0, b34e <serial3_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE + length;
    b334:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    b338:	4b07      	ldr	r3, [pc, #28]	; (b358 <serial3_add_memory_for_read+0x2c>)
    b33a:	4808      	ldr	r0, [pc, #32]	; (b35c <serial3_add_memory_for_read+0x30>)
    b33c:	f101 021a 	add.w	r2, r1, #26
    b340:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b342:	4b07      	ldr	r3, [pc, #28]	; (b360 <serial3_add_memory_for_read+0x34>)
    b344:	6004      	str	r4, [r0, #0]
    b346:	3128      	adds	r1, #40	; 0x28
}
    b348:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b34a:	6019      	str	r1, [r3, #0]
}
    b34c:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
    b34e:	2440      	movs	r4, #64	; 0x40
    b350:	e7f2      	b.n	b338 <serial3_add_memory_for_read+0xc>
    b352:	bf00      	nop
    b354:	1fffdd9c 	.word	0x1fffdd9c
    b358:	1fff89ec 	.word	0x1fff89ec
    b35c:	1fff89f0 	.word	0x1fff89f0
    b360:	1fff89e8 	.word	0x1fff89e8

0000b364 <serial3_add_memory_for_write>:

void serial3_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    b364:	4b05      	ldr	r3, [pc, #20]	; (b37c <serial3_add_memory_for_write+0x18>)
    b366:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b368:	b118      	cbz	r0, b372 <serial3_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE + length;
    b36a:	4b05      	ldr	r3, [pc, #20]	; (b380 <serial3_add_memory_for_write+0x1c>)
    b36c:	3128      	adds	r1, #40	; 0x28
    b36e:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
	} 
}
    b370:	4770      	bx	lr
    b372:	4b03      	ldr	r3, [pc, #12]	; (b380 <serial3_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
    b374:	2128      	movs	r1, #40	; 0x28
    b376:	6019      	str	r1, [r3, #0]
}
    b378:	4770      	bx	lr
    b37a:	bf00      	nop
    b37c:	1fffddd8 	.word	0x1fffddd8
    b380:	1fff89f4 	.word	0x1fff89f4

0000b384 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    b384:	4770      	bx	lr
    b386:	bf00      	nop

0000b388 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    b388:	4770      	bx	lr
    b38a:	bf00      	nop

0000b38c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    b38c:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b38e:	2b03      	cmp	r3, #3
    b390:	d817      	bhi.n	b3c2 <usb_rx+0x36>
	__disable_irq();
    b392:	b672      	cpsid	i
	ret = rx_first[endpoint];
    b394:	490c      	ldr	r1, [pc, #48]	; (b3c8 <usb_rx+0x3c>)
    b396:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    b39a:	b180      	cbz	r0, b3be <usb_rx+0x32>
{
    b39c:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b39e:	4c0b      	ldr	r4, [pc, #44]	; (b3cc <usb_rx+0x40>)
    b3a0:	f8b0 c000 	ldrh.w	ip, [r0]
    b3a4:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    b3a8:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    b3ac:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b3b0:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b3b4:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    b3b8:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    b3ba:	bc10      	pop	{r4}
    b3bc:	4770      	bx	lr
	__enable_irq();
    b3be:	b662      	cpsie	i
}
    b3c0:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b3c2:	2000      	movs	r0, #0
    b3c4:	4770      	bx	lr
    b3c6:	bf00      	nop
    b3c8:	1fffde70 	.word	0x1fffde70
    b3cc:	1fffdec0 	.word	0x1fffdec0

0000b3d0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    b3d0:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b3d2:	2803      	cmp	r0, #3
    b3d4:	d80b      	bhi.n	b3ee <usb_tx_packet_count+0x1e>
	__disable_irq();
    b3d6:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b3d8:	4b07      	ldr	r3, [pc, #28]	; (b3f8 <usb_tx_packet_count+0x28>)
    b3da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    b3de:	b143      	cbz	r3, b3f2 <usb_tx_packet_count+0x22>
	uint32_t count=0;
    b3e0:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b3e2:	685b      	ldr	r3, [r3, #4]
    b3e4:	3001      	adds	r0, #1
    b3e6:	2b00      	cmp	r3, #0
    b3e8:	d1fb      	bne.n	b3e2 <usb_tx_packet_count+0x12>
	__enable_irq();
    b3ea:	b662      	cpsie	i
	return count;
    b3ec:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b3ee:	2000      	movs	r0, #0
}
    b3f0:	4770      	bx	lr
	uint32_t count=0;
    b3f2:	4618      	mov	r0, r3
    b3f4:	e7f9      	b.n	b3ea <usb_tx_packet_count+0x1a>
    b3f6:	bf00      	nop
    b3f8:	1fffde98 	.word	0x1fffde98

0000b3fc <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    b3fc:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    b3fe:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    b400:	4a19      	ldr	r2, [pc, #100]	; (b468 <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    b402:	4c1a      	ldr	r4, [pc, #104]	; (b46c <usb_rx_memory+0x70>)
	__disable_irq();
    b404:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b406:	f812 1b01 	ldrb.w	r1, [r2], #1
    b40a:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b40c:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b410:	d505      	bpl.n	b41e <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b412:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    b416:	b161      	cbz	r1, b432 <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
    b418:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    b41c:	b1b9      	cbz	r1, b44e <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    b41e:	3304      	adds	r3, #4
    b420:	2b14      	cmp	r3, #20
    b422:	d1f0      	bne.n	b406 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    b424:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    b426:	4b12      	ldr	r3, [pc, #72]	; (b470 <usb_rx_memory+0x74>)
    b428:	2200      	movs	r2, #0
    b42a:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    b42c:	bc10      	pop	{r4}
	usb_free(packet);
    b42e:	f000 bc9b 	b.w	bd68 <usb_free>
				usb_rx_memory_needed--;
    b432:	490f      	ldr	r1, [pc, #60]	; (b470 <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    b434:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    b438:	3008      	adds	r0, #8
    b43a:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    b43c:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b43e:	480d      	ldr	r0, [pc, #52]	; (b474 <usb_rx_memory+0x78>)
    b440:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    b444:	3a01      	subs	r2, #1
    b446:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    b448:	b662      	cpsie	i
}
    b44a:	bc10      	pop	{r4}
    b44c:	4770      	bx	lr
				usb_rx_memory_needed--;
    b44e:	4a08      	ldr	r2, [pc, #32]	; (b470 <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b450:	4909      	ldr	r1, [pc, #36]	; (b478 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
    b452:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    b456:	3008      	adds	r0, #8
    b458:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    b45a:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b45c:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    b460:	3b01      	subs	r3, #1
    b462:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    b464:	b662      	cpsie	i
				return;
    b466:	e7f0      	b.n	b44a <usb_rx_memory+0x4e>
    b468:	00015454 	.word	0x00015454
    b46c:	1fff8000 	.word	0x1fff8000
    b470:	1fffdec8 	.word	0x1fffdec8
    b474:	00400088 	.word	0x00400088
    b478:	004000c8 	.word	0x004000c8

0000b47c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    b47c:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    b47e:	2a03      	cmp	r2, #3
    b480:	d80e      	bhi.n	b4a0 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b482:	4b1c      	ldr	r3, [pc, #112]	; (b4f4 <usb_tx+0x78>)
    b484:	0140      	lsls	r0, r0, #5
    b486:	f040 0010 	orr.w	r0, r0, #16
{
    b48a:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b48c:	4403      	add	r3, r0
	__disable_irq();
    b48e:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    b490:	4c19      	ldr	r4, [pc, #100]	; (b4f8 <usb_tx+0x7c>)
    b492:	5ca0      	ldrb	r0, [r4, r2]
    b494:	2803      	cmp	r0, #3
    b496:	d81c      	bhi.n	b4d2 <usb_tx+0x56>
    b498:	e8df f000 	tbb	[pc, r0]
    b49c:	18031513 	.word	0x18031513
    b4a0:	4770      	bx	lr
    b4a2:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    b4a4:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b4a6:	f013 0f08 	tst.w	r3, #8
    b4aa:	8808      	ldrh	r0, [r1, #0]
    b4ac:	bf14      	ite	ne
    b4ae:	22c8      	movne	r2, #200	; 0xc8
    b4b0:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    b4b2:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b4b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    b4b8:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b4ba:	601a      	str	r2, [r3, #0]
	__enable_irq();
    b4bc:	b662      	cpsie	i
}
    b4be:	bc10      	pop	{r4}
    b4c0:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    b4c2:	2003      	movs	r0, #3
    b4c4:	e7ee      	b.n	b4a4 <usb_tx+0x28>
		b++;
    b4c6:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    b4c8:	2002      	movs	r0, #2
		break;
    b4ca:	e7eb      	b.n	b4a4 <usb_tx+0x28>
		b++;
    b4cc:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    b4ce:	2004      	movs	r0, #4
		break;
    b4d0:	e7e8      	b.n	b4a4 <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    b4d2:	4b0a      	ldr	r3, [pc, #40]	; (b4fc <usb_tx+0x80>)
    b4d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b4d8:	b138      	cbz	r0, b4ea <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
    b4da:	4b09      	ldr	r3, [pc, #36]	; (b500 <usb_tx+0x84>)
    b4dc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b4e0:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    b4e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    b4e6:	b662      	cpsie	i
		return;
    b4e8:	e7e9      	b.n	b4be <usb_tx+0x42>
			tx_first[endpoint] = packet;
    b4ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    b4ee:	4b04      	ldr	r3, [pc, #16]	; (b500 <usb_tx+0x84>)
    b4f0:	e7f7      	b.n	b4e2 <usb_tx+0x66>
    b4f2:	bf00      	nop
    b4f4:	1fff8000 	.word	0x1fff8000
    b4f8:	1fffdeb8 	.word	0x1fffdeb8
    b4fc:	1fffde98 	.word	0x1fffde98
    b500:	1fffdea8 	.word	0x1fffdea8

0000b504 <usb_isr>:
}



void usb_isr(void)
{
    b504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    b508:	f8df a2cc 	ldr.w	sl, [pc, #716]	; b7d8 <usb_isr+0x2d4>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b50c:	f8df b2cc 	ldr.w	fp, [pc, #716]	; b7dc <usb_isr+0x2d8>
{
    b510:	b085      	sub	sp, #20
    b512:	e03d      	b.n	b590 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    b514:	4db2      	ldr	r5, [pc, #712]	; (b7e0 <usb_isr+0x2dc>)
    b516:	089e      	lsrs	r6, r3, #2
    b518:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    b51c:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b51e:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    b520:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    b524:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b526:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    b52a:	f040 80b8 	bne.w	b69e <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    b52e:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    b532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    b536:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    b538:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    b53c:	f000 80a7 	beq.w	b68e <usb_isr+0x18a>
					packet->index = 0;
    b540:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    b544:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    b548:	4ba6      	ldr	r3, [pc, #664]	; (b7e4 <usb_isr+0x2e0>)
    b54a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    b54e:	2a00      	cmp	r2, #0
    b550:	f000 8201 	beq.w	b956 <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    b554:	4ba4      	ldr	r3, [pc, #656]	; (b7e8 <usb_isr+0x2e4>)
    b556:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    b55a:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    b55c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    b560:	4ba2      	ldr	r3, [pc, #648]	; (b7ec <usb_isr+0x2e8>)
    b562:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    b566:	4494      	add	ip, r2
    b568:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    b56c:	f000 fbdc 	bl	bd28 <usb_malloc>
					if (packet) {
    b570:	2800      	cmp	r0, #0
    b572:	f000 81e9 	beq.w	b948 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    b576:	f017 0f08 	tst.w	r7, #8
    b57a:	4b9d      	ldr	r3, [pc, #628]	; (b7f0 <usb_isr+0x2ec>)
						b->addr = packet->buf;
    b57c:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    b580:	bf18      	it	ne
    b582:	465b      	movne	r3, fp
						b->addr = packet->buf;
    b584:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    b586:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    b58a:	2308      	movs	r3, #8
    b58c:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    b590:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b594:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    b596:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b598:	d51b      	bpl.n	b5d2 <usb_isr+0xce>
		if (usb_configuration) {
    b59a:	4b96      	ldr	r3, [pc, #600]	; (b7f4 <usb_isr+0x2f0>)
    b59c:	781b      	ldrb	r3, [r3, #0]
    b59e:	b1ab      	cbz	r3, b5cc <usb_isr+0xc8>
			t = usb_reboot_timer;
    b5a0:	4995      	ldr	r1, [pc, #596]	; (b7f8 <usb_isr+0x2f4>)
    b5a2:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b5a4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b5a8:	b12a      	cbz	r2, b5b6 <usb_isr+0xb2>
				usb_reboot_timer = --t;
    b5aa:	3b01      	subs	r3, #1
    b5ac:	b2db      	uxtb	r3, r3
    b5ae:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    b5b0:	2b00      	cmp	r3, #0
    b5b2:	f000 8346 	beq.w	bc42 <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    b5b6:	4991      	ldr	r1, [pc, #580]	; (b7fc <usb_isr+0x2f8>)
    b5b8:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b5ba:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b5be:	b12a      	cbz	r2, b5cc <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    b5c0:	3b01      	subs	r3, #1
    b5c2:	b2db      	uxtb	r3, r3
    b5c4:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    b5c6:	2b00      	cmp	r3, #0
    b5c8:	f000 81eb 	beq.w	b9a2 <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    b5cc:	2304      	movs	r3, #4
    b5ce:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    b5d2:	f014 0208 	ands.w	r2, r4, #8
    b5d6:	f000 81cc 	beq.w	b972 <usb_isr+0x46e>
		stat = USB0_STAT;
    b5da:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    b5de:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    b5e0:	0912      	lsrs	r2, r2, #4
    b5e2:	d197      	bne.n	b514 <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    b5e4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; b7e0 <usb_isr+0x2dc>
    b5e8:	089b      	lsrs	r3, r3, #2
    b5ea:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    b5ee:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    b5f2:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    b5f4:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    b5f8:	2809      	cmp	r0, #9
    b5fa:	d07c      	beq.n	b6f6 <usb_isr+0x1f2>
    b5fc:	d80f      	bhi.n	b61e <usb_isr+0x11a>
    b5fe:	3801      	subs	r0, #1
    b600:	2801      	cmp	r0, #1
    b602:	d808      	bhi.n	b616 <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b604:	4a7e      	ldr	r2, [pc, #504]	; (b800 <usb_isr+0x2fc>)
    b606:	8815      	ldrh	r5, [r2, #0]
    b608:	f242 0021 	movw	r0, #8225	; 0x2021
    b60c:	4285      	cmp	r5, r0
    b60e:	f000 81fb 	beq.w	ba08 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b612:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b616:	2301      	movs	r3, #1
    b618:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    b61c:	e7b5      	b.n	b58a <usb_isr+0x86>
	switch (pid) {
    b61e:	280d      	cmp	r0, #13
    b620:	d1f9      	bne.n	b616 <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    b622:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    b626:	4d77      	ldr	r5, [pc, #476]	; (b804 <usb_isr+0x300>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b628:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    b62c:	4e74      	ldr	r6, [pc, #464]	; (b800 <usb_isr+0x2fc>)
		ep0_tx_data_toggle = 1;
    b62e:	4c76      	ldr	r4, [pc, #472]	; (b808 <usb_isr+0x304>)
		table[index(0, TX, EVEN)].desc = 0;
    b630:	f8c9 2010 	str.w	r2, [r9, #16]
    b634:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    b636:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    b63a:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    b63e:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    b640:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    b642:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    b646:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    b64a:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    b64c:	f200 80ff 	bhi.w	b84e <usb_isr+0x34a>
    b650:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    b654:	f080 82cb 	bcs.w	bbee <usb_isr+0x6ea>
    b658:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    b65c:	f000 8226 	beq.w	baac <usb_isr+0x5a8>
    b660:	f240 80de 	bls.w	b820 <usb_isr+0x31c>
    b664:	f240 3202 	movw	r2, #770	; 0x302
    b668:	4293      	cmp	r3, r2
    b66a:	d17b      	bne.n	b764 <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    b66c:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    b670:	2f04      	cmp	r7, #4
    b672:	f200 8108 	bhi.w	b886 <usb_isr+0x382>
    b676:	0c02      	lsrs	r2, r0, #16
    b678:	f040 8105 	bne.w	b886 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    b67c:	4963      	ldr	r1, [pc, #396]	; (b80c <usb_isr+0x308>)
    b67e:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    b682:	f043 0302 	orr.w	r3, r3, #2
    b686:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    b68a:	4613      	mov	r3, r2
		break;
    b68c:	e070      	b.n	b770 <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b68e:	f017 0f08 	tst.w	r7, #8
    b692:	4b57      	ldr	r3, [pc, #348]	; (b7f0 <usb_isr+0x2ec>)
    b694:	bf18      	it	ne
    b696:	465b      	movne	r3, fp
    b698:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    b69c:	e775      	b.n	b58a <usb_isr+0x86>
				usb_free(packet);
    b69e:	f000 fb63 	bl	bd68 <usb_free>
				packet = tx_first[endpoint];
    b6a2:	495b      	ldr	r1, [pc, #364]	; (b810 <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    b6a4:	4a5b      	ldr	r2, [pc, #364]	; (b814 <usb_isr+0x310>)
				packet = tx_first[endpoint];
    b6a6:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    b6aa:	2b00      	cmp	r3, #0
    b6ac:	f000 8157 	beq.w	b95e <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    b6b0:	6858      	ldr	r0, [r3, #4]
    b6b2:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    b6b6:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    b6b8:	f103 0008 	add.w	r0, r3, #8
    b6bc:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    b6be:	2903      	cmp	r1, #3
    b6c0:	d805      	bhi.n	b6ce <usb_isr+0x1ca>
    b6c2:	e8df f001 	tbb	[pc, r1]
    b6c6:	0f12      	.short	0x0f12
    b6c8:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    b6ca:	2104      	movs	r1, #4
    b6cc:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    b6ce:	881a      	ldrh	r2, [r3, #0]
    b6d0:	f017 0f08 	tst.w	r7, #8
    b6d4:	bf14      	ite	ne
    b6d6:	23c8      	movne	r3, #200	; 0xc8
    b6d8:	2388      	moveq	r3, #136	; 0x88
    b6da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    b6de:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    b6e2:	e752      	b.n	b58a <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    b6e4:	2102      	movs	r1, #2
    b6e6:	5511      	strb	r1, [r2, r4]
						break;
    b6e8:	e7f1      	b.n	b6ce <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    b6ea:	2103      	movs	r1, #3
    b6ec:	5511      	strb	r1, [r2, r4]
						break;
    b6ee:	e7ee      	b.n	b6ce <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    b6f0:	2105      	movs	r1, #5
    b6f2:	5511      	strb	r1, [r2, r4]
						break;
    b6f4:	e7eb      	b.n	b6ce <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    b6f6:	4d43      	ldr	r5, [pc, #268]	; (b804 <usb_isr+0x300>)
    b6f8:	682a      	ldr	r2, [r5, #0]
		if (data) {
    b6fa:	b33a      	cbz	r2, b74c <usb_isr+0x248>
			size = ep0_tx_len;
    b6fc:	4946      	ldr	r1, [pc, #280]	; (b818 <usb_isr+0x314>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b6fe:	4c42      	ldr	r4, [pc, #264]	; (b808 <usb_isr+0x304>)
			size = ep0_tx_len;
    b700:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b702:	4846      	ldr	r0, [pc, #280]	; (b81c <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b704:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b708:	7806      	ldrb	r6, [r0, #0]
    b70a:	2f40      	cmp	r7, #64	; 0x40
    b70c:	463b      	mov	r3, r7
    b70e:	bf28      	it	cs
    b710:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b712:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    b716:	f08e 0e01 	eor.w	lr, lr, #1
    b71a:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b71e:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    b722:	f086 0601 	eor.w	r6, r6, #1
    b726:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b728:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    b72c:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b72e:	bf14      	ite	ne
    b730:	20c8      	movne	r0, #200	; 0xc8
    b732:	2088      	moveq	r0, #136	; 0x88
    b734:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    b738:	441a      	add	r2, r3
			ep0_tx_len -= size;
    b73a:	1afb      	subs	r3, r7, r3
    b73c:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b73e:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    b742:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    b744:	2b00      	cmp	r3, #0
    b746:	f000 8136 	beq.w	b9b6 <usb_isr+0x4b2>
    b74a:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    b74c:	4b2c      	ldr	r3, [pc, #176]	; (b800 <usb_isr+0x2fc>)
    b74e:	881a      	ldrh	r2, [r3, #0]
    b750:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    b754:	f47f af5f 	bne.w	b616 <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    b758:	789a      	ldrb	r2, [r3, #2]
    b75a:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    b75e:	2200      	movs	r2, #0
    b760:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    b762:	e758      	b.n	b616 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    b764:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    b768:	f040 808d 	bne.w	b886 <usb_isr+0x382>
	uint32_t datalen = 0;
    b76c:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    b76e:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    b770:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b774:	4829      	ldr	r0, [pc, #164]	; (b81c <usb_isr+0x318>)
    b776:	4594      	cmp	ip, r2
    b778:	bf28      	it	cs
    b77a:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    b77c:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b77e:	7802      	ldrb	r2, [r0, #0]
    b780:	2f40      	cmp	r7, #64	; 0x40
    b782:	bf28      	it	cs
    b784:	2740      	movcs	r7, #64	; 0x40
    b786:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b78a:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b78c:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b790:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b794:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b798:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    b79c:	2600      	movs	r6, #0
	data += size;
    b79e:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    b7a0:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    b7a2:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    b7a6:	f082 0601 	eor.w	r6, r2, #1
    b7aa:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    b7ac:	f040 8111 	bne.w	b9d2 <usb_isr+0x4ce>
    b7b0:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    b7b4:	f04f 0501 	mov.w	r5, #1
    b7b8:	d909      	bls.n	b7ce <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b7ba:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    b7be:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b7c0:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    b7c4:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b7c6:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b7c8:	2388      	movs	r3, #136	; 0x88
    b7ca:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b7ce:	2301      	movs	r3, #1
    b7d0:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    b7d4:	e71f      	b.n	b616 <usb_isr+0x112>
    b7d6:	bf00      	nop
    b7d8:	40072000 	.word	0x40072000
    b7dc:	004000c8 	.word	0x004000c8
    b7e0:	1fff8000 	.word	0x1fff8000
    b7e4:	1fffde70 	.word	0x1fffde70
    b7e8:	1fffde80 	.word	0x1fffde80
    b7ec:	1fffdec0 	.word	0x1fffdec0
    b7f0:	00400088 	.word	0x00400088
    b7f4:	1fffdebc 	.word	0x1fffdebc
    b7f8:	1fffdebd 	.word	0x1fffdebd
    b7fc:	1fffdee8 	.word	0x1fffdee8
    b800:	1fffde90 	.word	0x1fffde90
    b804:	1fffde64 	.word	0x1fffde64
    b808:	1fffde61 	.word	0x1fffde61
    b80c:	400720c0 	.word	0x400720c0
    b810:	1fffde98 	.word	0x1fffde98
    b814:	1fffdeb8 	.word	0x1fffdeb8
    b818:	1fffde62 	.word	0x1fffde62
    b81c:	1fffde60 	.word	0x1fffde60
	switch (setup.wRequestAndType) {
    b820:	2b80      	cmp	r3, #128	; 0x80
    b822:	f000 818b 	beq.w	bb3c <usb_isr+0x638>
    b826:	2b82      	cmp	r3, #130	; 0x82
    b828:	d12d      	bne.n	b886 <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    b82a:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    b82e:	2f04      	cmp	r7, #4
    b830:	d829      	bhi.n	b886 <usb_isr+0x382>
		reply_buffer[0] = 0;
    b832:	4aa7      	ldr	r2, [pc, #668]	; (bad0 <usb_isr+0x5cc>)
    b834:	2300      	movs	r3, #0
    b836:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    b838:	4ba6      	ldr	r3, [pc, #664]	; (bad4 <usb_isr+0x5d0>)
    b83a:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    b83e:	079f      	lsls	r7, r3, #30
    b840:	f140 81fc 	bpl.w	bc3c <usb_isr+0x738>
    b844:	2301      	movs	r3, #1
    b846:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    b848:	4ba1      	ldr	r3, [pc, #644]	; (bad0 <usb_isr+0x5cc>)
		datalen = 2;
    b84a:	2202      	movs	r2, #2
    b84c:	e790      	b.n	b770 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    b84e:	f242 0c21 	movw	ip, #8225	; 0x2021
    b852:	4563      	cmp	r3, ip
    b854:	d0bb      	beq.n	b7ce <usb_isr+0x2ca>
    b856:	d91d      	bls.n	b894 <usb_isr+0x390>
    b858:	f242 2221 	movw	r2, #8737	; 0x2221
    b85c:	4293      	cmp	r3, r2
    b85e:	d10d      	bne.n	b87c <usb_isr+0x378>
		switch (setup.wIndex) {
    b860:	b2bf      	uxth	r7, r7
    b862:	2f00      	cmp	r7, #0
    b864:	d182      	bne.n	b76c <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b866:	4b9c      	ldr	r3, [pc, #624]	; (bad8 <usb_isr+0x5d4>)
    b868:	681a      	ldr	r2, [r3, #0]
    b86a:	4b9c      	ldr	r3, [pc, #624]	; (badc <usb_isr+0x5d8>)
    b86c:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b86e:	4b9c      	ldr	r3, [pc, #624]	; (bae0 <usb_isr+0x5dc>)
    b870:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    b874:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    b876:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    b878:	4613      	mov	r3, r2
			break;
    b87a:	e779      	b.n	b770 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    b87c:	f242 3221 	movw	r2, #8993	; 0x2321
    b880:	4293      	cmp	r3, r2
    b882:	f43f af73 	beq.w	b76c <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    b886:	230f      	movs	r3, #15
    b888:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b88c:	2301      	movs	r3, #1
    b88e:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    b892:	e6c0      	b.n	b616 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    b894:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    b898:	f000 814a 	beq.w	bb30 <usb_isr+0x62c>
    b89c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    b8a0:	d1f1      	bne.n	b886 <usb_isr+0x382>
		usb_configuration = setup.wValue;
    b8a2:	4b90      	ldr	r3, [pc, #576]	; (bae4 <usb_isr+0x5e0>)
    b8a4:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    b8a8:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    b8aa:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    b8ac:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    b8b0:	061a      	lsls	r2, r3, #24
    b8b2:	d406      	bmi.n	b8c2 <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    b8b4:	3501      	adds	r5, #1
    b8b6:	2d14      	cmp	r5, #20
    b8b8:	d00c      	beq.n	b8d4 <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    b8ba:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    b8be:	061a      	lsls	r2, r3, #24
    b8c0:	d5f8      	bpl.n	b8b4 <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    b8c2:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    b8c6:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    b8c8:	6858      	ldr	r0, [r3, #4]
    b8ca:	3808      	subs	r0, #8
    b8cc:	f000 fa4c 	bl	bd68 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    b8d0:	2d14      	cmp	r5, #20
    b8d2:	d1f2      	bne.n	b8ba <usb_isr+0x3b6>
    b8d4:	4a84      	ldr	r2, [pc, #528]	; (bae8 <usb_isr+0x5e4>)
    b8d6:	4b85      	ldr	r3, [pc, #532]	; (baec <usb_isr+0x5e8>)
    b8d8:	9202      	str	r2, [sp, #8]
    b8da:	4a85      	ldr	r2, [pc, #532]	; (baf0 <usb_isr+0x5ec>)
    b8dc:	9201      	str	r2, [sp, #4]
    b8de:	4e85      	ldr	r6, [pc, #532]	; (baf4 <usb_isr+0x5f0>)
    b8e0:	4a85      	ldr	r2, [pc, #532]	; (baf8 <usb_isr+0x5f4>)
    b8e2:	f8df 8218 	ldr.w	r8, [pc, #536]	; bafc <usb_isr+0x5f8>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    b8e6:	9403      	str	r4, [sp, #12]
    b8e8:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    b8ea:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    b8ec:	461c      	mov	r4, r3
			p = rx_first[i];
    b8ee:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    b8f2:	b12f      	cbz	r7, b900 <usb_isr+0x3fc>
				n = p->next;
    b8f4:	4638      	mov	r0, r7
    b8f6:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    b8f8:	f000 fa36 	bl	bd68 <usb_free>
			while (p) {
    b8fc:	2f00      	cmp	r7, #0
    b8fe:	d1f9      	bne.n	b8f4 <usb_isr+0x3f0>
			rx_last[i] = NULL;
    b900:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    b902:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    b906:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    b90a:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    b90e:	9300      	str	r3, [sp, #0]
			while (p) {
    b910:	b12f      	cbz	r7, b91e <usb_isr+0x41a>
				n = p->next;
    b912:	4638      	mov	r0, r7
    b914:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    b916:	f000 fa27 	bl	bd68 <usb_free>
			while (p) {
    b91a:	2f00      	cmp	r7, #0
    b91c:	d1f9      	bne.n	b912 <usb_isr+0x40e>
			tx_last[i] = NULL;
    b91e:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    b920:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    b924:	f843 5b04 	str.w	r5, [r3], #4
    b928:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    b92a:	9b01      	ldr	r3, [sp, #4]
    b92c:	f823 5b02 	strh.w	r5, [r3], #2
    b930:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    b932:	7823      	ldrb	r3, [r4, #0]
    b934:	3b02      	subs	r3, #2
    b936:	2b03      	cmp	r3, #3
    b938:	f200 8109 	bhi.w	bb4e <usb_isr+0x64a>
    b93c:	e8df f013 	tbh	[pc, r3, lsl #1]
    b940:	0104013f 	.word	0x0104013f
    b944:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    b948:	4a6d      	ldr	r2, [pc, #436]	; (bb00 <usb_isr+0x5fc>)
						b->desc = 0;
    b94a:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    b94e:	7813      	ldrb	r3, [r2, #0]
    b950:	3301      	adds	r3, #1
    b952:	7013      	strb	r3, [r2, #0]
    b954:	e619      	b.n	b58a <usb_isr+0x86>
						rx_first[endpoint] = packet;
    b956:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    b95a:	4b67      	ldr	r3, [pc, #412]	; (baf8 <usb_isr+0x5f4>)
    b95c:	e5fe      	b.n	b55c <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    b95e:	5d11      	ldrb	r1, [r2, r4]
    b960:	2902      	cmp	r1, #2
    b962:	d026      	beq.n	b9b2 <usb_isr+0x4ae>
    b964:	f67f ae11 	bls.w	b58a <usb_isr+0x86>
    b968:	2903      	cmp	r1, #3
    b96a:	d11d      	bne.n	b9a8 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    b96c:	2301      	movs	r3, #1
    b96e:	5513      	strb	r3, [r2, r4]
						break;
    b970:	e60b      	b.n	b58a <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    b972:	07e0      	lsls	r0, r4, #31
    b974:	d46e      	bmi.n	ba54 <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    b976:	0621      	lsls	r1, r4, #24
    b978:	d421      	bmi.n	b9be <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    b97a:	07a2      	lsls	r2, r4, #30
    b97c:	d508      	bpl.n	b990 <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    b97e:	4b61      	ldr	r3, [pc, #388]	; (bb04 <usb_isr+0x600>)
    b980:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    b984:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    b986:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    b988:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    b98c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    b990:	06e3      	lsls	r3, r4, #27
    b992:	d503      	bpl.n	b99c <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    b994:	4b5b      	ldr	r3, [pc, #364]	; (bb04 <usb_isr+0x600>)
    b996:	2210      	movs	r2, #16
    b998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    b99c:	b005      	add	sp, #20
    b99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    b9a2:	f000 fb59 	bl	c058 <usb_serial_flush_callback>
    b9a6:	e611      	b.n	b5cc <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    b9a8:	f017 0f08 	tst.w	r7, #8
    b9ac:	bf14      	ite	ne
    b9ae:	2303      	movne	r3, #3
    b9b0:	2302      	moveq	r3, #2
    b9b2:	5513      	strb	r3, [r2, r4]
						break;
    b9b4:	e5e9      	b.n	b58a <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    b9b6:	2f3f      	cmp	r7, #63	; 0x3f
    b9b8:	bf98      	it	ls
    b9ba:	2200      	movls	r2, #0
    b9bc:	e6c5      	b.n	b74a <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    b9be:	4b51      	ldr	r3, [pc, #324]	; (bb04 <usb_isr+0x600>)
		USB0_ISTAT = USB_ISTAT_STALL;
    b9c0:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    b9c2:	210d      	movs	r1, #13
    b9c4:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    b9c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    b9cc:	07a2      	lsls	r2, r4, #30
    b9ce:	d5df      	bpl.n	b990 <usb_isr+0x48c>
    b9d0:	e7d5      	b.n	b97e <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b9d2:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    b9d6:	7002      	strb	r2, [r0, #0]
    b9d8:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b9da:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    b9de:	463a      	mov	r2, r7
    b9e0:	bf28      	it	cs
    b9e2:	2240      	movcs	r2, #64	; 0x40
    b9e4:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b9e6:	0410      	lsls	r0, r2, #16
	data += size;
    b9e8:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b9ea:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    b9ee:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    b9f0:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b9f2:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    b9f6:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    b9f8:	d055      	beq.n	baa6 <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    b9fa:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    b9fc:	4b42      	ldr	r3, [pc, #264]	; (bb08 <usb_isr+0x604>)
    b9fe:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    ba00:	2301      	movs	r3, #1
    ba02:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    ba06:	e606      	b.n	b616 <usb_isr+0x112>
			switch (setup.wIndex) {
    ba08:	8892      	ldrh	r2, [r2, #4]
    ba0a:	b95a      	cbnz	r2, ba24 <usb_isr+0x520>
    ba0c:	4a3f      	ldr	r2, [pc, #252]	; (bb0c <usb_isr+0x608>)
    ba0e:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    ba10:	f814 1b01 	ldrb.w	r1, [r4], #1
    ba14:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    ba18:	42ac      	cmp	r4, r5
    ba1a:	d1f9      	bne.n	ba10 <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    ba1c:	4a3c      	ldr	r2, [pc, #240]	; (bb10 <usb_isr+0x60c>)
    ba1e:	6812      	ldr	r2, [r2, #0]
    ba20:	2a86      	cmp	r2, #134	; 0x86
    ba22:	d03c      	beq.n	ba9e <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba24:	4c3b      	ldr	r4, [pc, #236]	; (bb14 <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba26:	483c      	ldr	r0, [pc, #240]	; (bb18 <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba28:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba2a:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba2c:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    ba2e:	f085 0501 	eor.w	r5, r5, #1
    ba32:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba34:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    ba38:	f082 0201 	eor.w	r2, r2, #1
    ba3c:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba3e:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    ba42:	f04f 0000 	mov.w	r0, #0
    ba46:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba48:	bf14      	ite	ne
    ba4a:	22c8      	movne	r2, #200	; 0xc8
    ba4c:	2288      	moveq	r2, #136	; 0x88
    ba4e:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    ba52:	e5de      	b.n	b612 <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    ba54:	4b2b      	ldr	r3, [pc, #172]	; (bb04 <usb_isr+0x600>)
		ep0_tx_bdt_bank = 0;
    ba56:	4830      	ldr	r0, [pc, #192]	; (bb18 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    ba58:	4930      	ldr	r1, [pc, #192]	; (bb1c <usb_isr+0x618>)
    ba5a:	4c31      	ldr	r4, [pc, #196]	; (bb20 <usb_isr+0x61c>)
		USB0_CTL = USB_CTL_ODDRST;
    ba5c:	2502      	movs	r5, #2
    ba5e:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    ba62:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    ba64:	482f      	ldr	r0, [pc, #188]	; (bb24 <usb_isr+0x620>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    ba66:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    ba68:	4d2f      	ldr	r5, [pc, #188]	; (bb28 <usb_isr+0x624>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    ba6a:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    ba6c:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    ba6e:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    ba70:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    ba72:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    ba74:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    ba76:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    ba78:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    ba7c:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    ba7e:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    ba80:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    ba84:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    ba88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    ba8c:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    ba90:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    ba94:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    ba98:	b005      	add	sp, #20
    ba9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    ba9e:	4a23      	ldr	r2, [pc, #140]	; (bb2c <usb_isr+0x628>)
    baa0:	200f      	movs	r0, #15
    baa2:	7010      	strb	r0, [r2, #0]
    baa4:	e7be      	b.n	ba24 <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    baa6:	2f3f      	cmp	r7, #63	; 0x3f
    baa8:	d8a7      	bhi.n	b9fa <usb_isr+0x4f6>
    baaa:	e690      	b.n	b7ce <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    baac:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    bab0:	2f04      	cmp	r7, #4
    bab2:	f63f aee8 	bhi.w	b886 <usb_isr+0x382>
    bab6:	0c00      	lsrs	r0, r0, #16
    bab8:	f47f aee5 	bne.w	b886 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    babc:	4a05      	ldr	r2, [pc, #20]	; (bad4 <usb_isr+0x5d0>)
    babe:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    bac2:	f023 0302 	bic.w	r3, r3, #2
    bac6:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    baca:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    bacc:	4613      	mov	r3, r2
		break;
    bace:	e64f      	b.n	b770 <usb_isr+0x26c>
    bad0:	1fffde68 	.word	0x1fffde68
    bad4:	400720c0 	.word	0x400720c0
    bad8:	1fffdcc4 	.word	0x1fffdcc4
    badc:	1fffdee4 	.word	0x1fffdee4
    bae0:	1fffdee0 	.word	0x1fffdee0
    bae4:	1fffdebc 	.word	0x1fffdebc
    bae8:	1fffdea8 	.word	0x1fffdea8
    baec:	1fffdeb8 	.word	0x1fffdeb8
    baf0:	1fffdec0 	.word	0x1fffdec0
    baf4:	1fffde70 	.word	0x1fffde70
    baf8:	1fffde80 	.word	0x1fffde80
    bafc:	1fffde98 	.word	0x1fffde98
    bb00:	1fffdec8 	.word	0x1fffdec8
    bb04:	40072000 	.word	0x40072000
    bb08:	1fffde62 	.word	0x1fffde62
    bb0c:	1fffded7 	.word	0x1fffded7
    bb10:	1fffded8 	.word	0x1fffded8
    bb14:	1fffde61 	.word	0x1fffde61
    bb18:	1fffde60 	.word	0x1fffde60
    bb1c:	1fff8000 	.word	0x1fff8000
    bb20:	00400088 	.word	0x00400088
    bb24:	1fffdde0 	.word	0x1fffdde0
    bb28:	1fffde20 	.word	0x1fffde20
    bb2c:	1fffdebd 	.word	0x1fffdebd
		reply_buffer[0] = usb_configuration;
    bb30:	4b48      	ldr	r3, [pc, #288]	; (bc54 <usb_isr+0x750>)
    bb32:	4949      	ldr	r1, [pc, #292]	; (bc58 <usb_isr+0x754>)
    bb34:	781b      	ldrb	r3, [r3, #0]
    bb36:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    bb38:	460b      	mov	r3, r1
		break;
    bb3a:	e619      	b.n	b770 <usb_isr+0x26c>
		reply_buffer[0] = 0;
    bb3c:	4a46      	ldr	r2, [pc, #280]	; (bc58 <usb_isr+0x754>)
    bb3e:	2300      	movs	r3, #0
    bb40:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    bb42:	4b45      	ldr	r3, [pc, #276]	; (bc58 <usb_isr+0x754>)
		datalen = 2;
    bb44:	2202      	movs	r2, #2
		break;
    bb46:	e613      	b.n	b770 <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bb48:	f04f 0301 	mov.w	r3, #1
    bb4c:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    bb4e:	4b43      	ldr	r3, [pc, #268]	; (bc5c <usb_isr+0x758>)
    bb50:	42b3      	cmp	r3, r6
    bb52:	f104 0401 	add.w	r4, r4, #1
    bb56:	f47f aeca 	bne.w	b8ee <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    bb5a:	4e41      	ldr	r6, [pc, #260]	; (bc60 <usb_isr+0x75c>)
    bb5c:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    bb5e:	f8df 8104 	ldr.w	r8, [pc, #260]	; bc64 <usb_isr+0x760>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bb62:	4f41      	ldr	r7, [pc, #260]	; (bc68 <usb_isr+0x764>)
		usb_rx_memory_needed = 0;
    bb64:	2300      	movs	r3, #0
    bb66:	7033      	strb	r3, [r6, #0]
    bb68:	2504      	movs	r5, #4
			epconf = *cfg++;
    bb6a:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    bb6e:	4a3f      	ldr	r2, [pc, #252]	; (bc6c <usb_isr+0x768>)
    bb70:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    bb72:	071b      	lsls	r3, r3, #28
    bb74:	d425      	bmi.n	bbc2 <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    bb76:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    bb7a:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    bb7e:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    bb80:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    bb82:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    bb84:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    bb88:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    bb8c:	d1ed      	bne.n	bb6a <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bb8e:	4f38      	ldr	r7, [pc, #224]	; (bc70 <usb_isr+0x76c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bb90:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bb92:	783a      	ldrb	r2, [r7, #0]
    bb94:	f042 0002 	orr.w	r0, r2, #2
    bb98:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    bb9c:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bba0:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bba4:	2d00      	cmp	r5, #0
    bba6:	d14d      	bne.n	bc44 <usb_isr+0x740>
    bba8:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    bbaa:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    bbae:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    bbb0:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bbb2:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bbb6:	2301      	movs	r3, #1
    bbb8:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    bbbc:	e52b      	b.n	b616 <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    bbbe:	7025      	strb	r5, [r4, #0]
				break;
    bbc0:	e7c5      	b.n	bb4e <usb_isr+0x64a>
				p = usb_malloc();
    bbc2:	f000 f8b1 	bl	bd28 <usb_malloc>
				if (p) {
    bbc6:	2800      	cmp	r0, #0
    bbc8:	d032      	beq.n	bc30 <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    bbca:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    bbce:	3008      	adds	r0, #8
    bbd0:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bbd2:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    bbd6:	f000 f8a7 	bl	bd28 <usb_malloc>
				if (p) {
    bbda:	b308      	cbz	r0, bc20 <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    bbdc:	f045 0301 	orr.w	r3, r5, #1
    bbe0:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    bbe4:	3008      	adds	r0, #8
    bbe6:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bbe8:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    bbec:	e7c3      	b.n	bb76 <usb_isr+0x672>
			if (list->addr == NULL) break;
    bbee:	4a21      	ldr	r2, [pc, #132]	; (bc74 <usb_isr+0x770>)
    bbf0:	6853      	ldr	r3, [r2, #4]
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	f43f ae47 	beq.w	b886 <usb_isr+0x382>
    bbf8:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bbfa:	b2bf      	uxth	r7, r7
    bbfc:	e004      	b.n	bc08 <usb_isr+0x704>
			if (list->addr == NULL) break;
    bbfe:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    bc00:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    bc02:	2b00      	cmp	r3, #0
    bc04:	f43f ae3f 	beq.w	b886 <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bc08:	8811      	ldrh	r1, [r2, #0]
    bc0a:	4281      	cmp	r1, r0
    bc0c:	d1f7      	bne.n	bbfe <usb_isr+0x6fa>
    bc0e:	8851      	ldrh	r1, [r2, #2]
    bc10:	42b9      	cmp	r1, r7
    bc12:	d1f4      	bne.n	bbfe <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    bc14:	0a00      	lsrs	r0, r0, #8
    bc16:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    bc18:	bf0c      	ite	eq
    bc1a:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    bc1c:	8912      	ldrhne	r2, [r2, #8]
    bc1e:	e5a7      	b.n	b770 <usb_isr+0x26c>
					usb_rx_memory_needed++;
    bc20:	7833      	ldrb	r3, [r6, #0]
    bc22:	3301      	adds	r3, #1
    bc24:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    bc26:	f045 0301 	orr.w	r3, r5, #1
    bc2a:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    bc2e:	e7a2      	b.n	bb76 <usb_isr+0x672>
					usb_rx_memory_needed++;
    bc30:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    bc32:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    bc36:	3301      	adds	r3, #1
    bc38:	7033      	strb	r3, [r6, #0]
    bc3a:	e7cc      	b.n	bbd6 <usb_isr+0x6d2>
		data = reply_buffer;
    bc3c:	4b06      	ldr	r3, [pc, #24]	; (bc58 <usb_isr+0x754>)
		datalen = 2;
    bc3e:	2202      	movs	r2, #2
    bc40:	e596      	b.n	b770 <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    bc42:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    bc44:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc46:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    bc48:	f082 0601 	eor.w	r6, r2, #1
    bc4c:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc4e:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    bc52:	e5bc      	b.n	b7ce <usb_isr+0x2ca>
    bc54:	1fffdebc 	.word	0x1fffdebc
    bc58:	1fffde68 	.word	0x1fffde68
    bc5c:	1fffde80 	.word	0x1fffde80
    bc60:	1fffdec8 	.word	0x1fffdec8
    bc64:	00015454 	.word	0x00015454
    bc68:	00400088 	.word	0x00400088
    bc6c:	400720c0 	.word	0x400720c0
    bc70:	1fffde60 	.word	0x1fffde60
    bc74:	00015400 	.word	0x00015400

0000bc78 <usb_init>:



void usb_init(void)
{
    bc78:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    bc7a:	f000 fab3 	bl	c1e4 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    bc7e:	2300      	movs	r3, #0
    bc80:	4a1a      	ldr	r2, [pc, #104]	; (bcec <usb_init+0x74>)
		table[i].desc = 0;
    bc82:	4619      	mov	r1, r3
    bc84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    bc88:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    bc8c:	3301      	adds	r3, #1
    bc8e:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    bc90:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    bc92:	d1f7      	bne.n	bc84 <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    bc94:	4c16      	ldr	r4, [pc, #88]	; (bcf0 <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    bc96:	4b17      	ldr	r3, [pc, #92]	; (bcf4 <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    bc98:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    bc9a:	4d17      	ldr	r5, [pc, #92]	; (bcf8 <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    bc9c:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    bca0:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    bca2:	f3c2 2407 	ubfx	r4, r2, #8, #8
    bca6:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
    bcaa:	4c14      	ldr	r4, [pc, #80]	; (bcfc <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
    bcac:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
    bcae:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    bcb2:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    bcb6:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    bcb8:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    bcbc:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    bcc0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
    bcc4:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
    bcc8:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    bccc:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    bcce:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    bcd2:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    bcd4:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    bcd8:	2370      	movs	r3, #112	; 0x70
    bcda:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    bcde:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    bce2:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    bce4:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    bce8:	7223      	strb	r3, [r4, #8]
}
    bcea:	bd70      	pop	{r4, r5, r6, pc}
    bcec:	1fff8000 	.word	0x1fff8000
    bcf0:	40048000 	.word	0x40048000
    bcf4:	40072000 	.word	0x40072000
    bcf8:	e000e400 	.word	0xe000e400
    bcfc:	40072100 	.word	0x40072100

0000bd00 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    bd00:	f000 b8ac 	b.w	be5c <usb_serial_flush_input>

0000bd04 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    bd04:	f000 b87c 	b.w	be00 <usb_serial_peekchar>

0000bd08 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    bd08:	f000 b856 	b.w	bdb8 <usb_serial_getchar>

0000bd0c <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    bd0c:	f000 b890 	b.w	be30 <usb_serial_available>

0000bd10 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    bd10:	f000 b976 	b.w	c000 <usb_serial_flush_output>

0000bd14 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    bd14:	f000 b950 	b.w	bfb8 <usb_serial_write_buffer_free>

0000bd18 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bd18:	4608      	mov	r0, r1
    bd1a:	4611      	mov	r1, r2
    bd1c:	f000 b8ba 	b.w	be94 <usb_serial_write>

0000bd20 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bd20:	4608      	mov	r0, r1
    bd22:	f000 b93b 	b.w	bf9c <usb_serial_putchar>
    bd26:	bf00      	nop

0000bd28 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    bd28:	b672      	cpsid	i
	avail = usb_buffer_available;
    bd2a:	490d      	ldr	r1, [pc, #52]	; (bd60 <usb_malloc+0x38>)
    bd2c:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    bd2e:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    bd32:	280b      	cmp	r0, #11
    bd34:	dc10      	bgt.n	bd58 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    bd36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bd3a:	40c2      	lsrs	r2, r0
    bd3c:	ea23 0302 	bic.w	r3, r3, r2
    bd40:	600b      	str	r3, [r1, #0]
	__enable_irq();
    bd42:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    bd44:	4a07      	ldr	r2, [pc, #28]	; (bd64 <usb_malloc+0x3c>)
    bd46:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    bd4a:	00c1      	lsls	r1, r0, #3
    bd4c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    bd50:	2300      	movs	r3, #0
    bd52:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    bd54:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    bd56:	4770      	bx	lr
		__enable_irq();
    bd58:	b662      	cpsie	i
		return NULL;
    bd5a:	2000      	movs	r0, #0
    bd5c:	4770      	bx	lr
    bd5e:	bf00      	nop
    bd60:	1fff8a0c 	.word	0x1fff8a0c
    bd64:	1fff83bc 	.word	0x1fff83bc

0000bd68 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bd68:	4b0e      	ldr	r3, [pc, #56]	; (bda4 <usb_free+0x3c>)
    bd6a:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    bd6c:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    bd70:	d210      	bcs.n	bd94 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    bd72:	4a0d      	ldr	r2, [pc, #52]	; (bda8 <usb_free+0x40>)
    bd74:	7812      	ldrb	r2, [r2, #0]
    bd76:	b972      	cbnz	r2, bd96 <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    bd78:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bd7a:	4a0c      	ldr	r2, [pc, #48]	; (bdac <usb_free+0x44>)
	usb_buffer_available |= mask;
    bd7c:	490c      	ldr	r1, [pc, #48]	; (bdb0 <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bd7e:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    bd82:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    bd84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bd88:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    bd8a:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    bd8e:	4303      	orrs	r3, r0
    bd90:	600b      	str	r3, [r1, #0]
	__enable_irq();
    bd92:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    bd94:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    bd96:	4a07      	ldr	r2, [pc, #28]	; (bdb4 <usb_free+0x4c>)
    bd98:	7812      	ldrb	r2, [r2, #0]
    bd9a:	2a00      	cmp	r2, #0
    bd9c:	d0ec      	beq.n	bd78 <usb_free+0x10>
		usb_rx_memory(p);
    bd9e:	f7ff bb2d 	b.w	b3fc <usb_rx_memory>
    bda2:	bf00      	nop
    bda4:	1fff83bc 	.word	0x1fff83bc
    bda8:	1fffdec8 	.word	0x1fffdec8
    bdac:	38e38e39 	.word	0x38e38e39
    bdb0:	1fff8a0c 	.word	0x1fff8a0c
    bdb4:	1fffdebc 	.word	0x1fffdebc

0000bdb8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    bdb8:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    bdba:	4c0f      	ldr	r4, [pc, #60]	; (bdf8 <usb_serial_getchar+0x40>)
    bdbc:	6820      	ldr	r0, [r4, #0]
    bdbe:	b178      	cbz	r0, bde0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    bdc0:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    bdc2:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    bdc4:	18c1      	adds	r1, r0, r3
    bdc6:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    bdc8:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    bdca:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    bdcc:	d902      	bls.n	bdd4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    bdce:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    bdd0:	4628      	mov	r0, r5
    bdd2:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    bdd4:	f7ff ffc8 	bl	bd68 <usb_free>
		rx_packet = NULL;
    bdd8:	2300      	movs	r3, #0
    bdda:	6023      	str	r3, [r4, #0]
}
    bddc:	4628      	mov	r0, r5
    bdde:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    bde0:	4b06      	ldr	r3, [pc, #24]	; (bdfc <usb_serial_getchar+0x44>)
    bde2:	781b      	ldrb	r3, [r3, #0]
    bde4:	b12b      	cbz	r3, bdf2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    bde6:	2003      	movs	r0, #3
    bde8:	f7ff fad0 	bl	b38c <usb_rx>
    bdec:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    bdee:	2800      	cmp	r0, #0
    bdf0:	d1e6      	bne.n	bdc0 <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    bdf2:	f04f 35ff 	mov.w	r5, #4294967295
    bdf6:	e7eb      	b.n	bdd0 <usb_serial_getchar+0x18>
    bdf8:	1fffdecc 	.word	0x1fffdecc
    bdfc:	1fffdebc 	.word	0x1fffdebc

0000be00 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    be00:	b510      	push	{r4, lr}
	if (!rx_packet) {
    be02:	4c09      	ldr	r4, [pc, #36]	; (be28 <usb_serial_peekchar+0x28>)
    be04:	6820      	ldr	r0, [r4, #0]
    be06:	b118      	cbz	r0, be10 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    be08:	8843      	ldrh	r3, [r0, #2]
    be0a:	4418      	add	r0, r3
    be0c:	7a00      	ldrb	r0, [r0, #8]
}
    be0e:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    be10:	4b06      	ldr	r3, [pc, #24]	; (be2c <usb_serial_peekchar+0x2c>)
    be12:	781b      	ldrb	r3, [r3, #0]
    be14:	b12b      	cbz	r3, be22 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    be16:	2003      	movs	r0, #3
    be18:	f7ff fab8 	bl	b38c <usb_rx>
    be1c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    be1e:	2800      	cmp	r0, #0
    be20:	d1f2      	bne.n	be08 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    be22:	f04f 30ff 	mov.w	r0, #4294967295
}
    be26:	bd10      	pop	{r4, pc}
    be28:	1fffdecc 	.word	0x1fffdecc
    be2c:	1fffdebc 	.word	0x1fffdebc

0000be30 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    be30:	4b08      	ldr	r3, [pc, #32]	; (be54 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    be32:	4a09      	ldr	r2, [pc, #36]	; (be58 <usb_serial_available+0x28>)
    be34:	681b      	ldr	r3, [r3, #0]
{
    be36:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    be38:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    be3a:	b11b      	cbz	r3, be44 <usb_serial_available+0x14>
    be3c:	881a      	ldrh	r2, [r3, #0]
    be3e:	885b      	ldrh	r3, [r3, #2]
    be40:	1ad3      	subs	r3, r2, r3
    be42:	441c      	add	r4, r3
	if (count == 0) yield();
    be44:	b10c      	cbz	r4, be4a <usb_serial_available+0x1a>
	return count;
}
    be46:	4620      	mov	r0, r4
    be48:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    be4a:	f000 f929 	bl	c0a0 <yield>
}
    be4e:	4620      	mov	r0, r4
    be50:	bd10      	pop	{r4, pc}
    be52:	bf00      	nop
    be54:	1fffdecc 	.word	0x1fffdecc
    be58:	1fffdec0 	.word	0x1fffdec0

0000be5c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    be5c:	4b0b      	ldr	r3, [pc, #44]	; (be8c <usb_serial_flush_input+0x30>)
    be5e:	781b      	ldrb	r3, [r3, #0]
    be60:	b19b      	cbz	r3, be8a <usb_serial_flush_input+0x2e>
{
    be62:	b510      	push	{r4, lr}
	if (rx_packet) {
    be64:	4c0a      	ldr	r4, [pc, #40]	; (be90 <usb_serial_flush_input+0x34>)
    be66:	6820      	ldr	r0, [r4, #0]
    be68:	b148      	cbz	r0, be7e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    be6a:	f7ff ff7d 	bl	bd68 <usb_free>
		rx_packet = NULL;
    be6e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    be70:	2003      	movs	r0, #3
		rx_packet = NULL;
    be72:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    be74:	f7ff fa8a 	bl	b38c <usb_rx>
		if (!rx) break;
    be78:	b130      	cbz	r0, be88 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    be7a:	f7ff ff75 	bl	bd68 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    be7e:	2003      	movs	r0, #3
    be80:	f7ff fa84 	bl	b38c <usb_rx>
		if (!rx) break;
    be84:	2800      	cmp	r0, #0
    be86:	d1f8      	bne.n	be7a <usb_serial_flush_input+0x1e>
	}
}
    be88:	bd10      	pop	{r4, pc}
    be8a:	4770      	bx	lr
    be8c:	1fffdebc 	.word	0x1fffdebc
    be90:	1fffdecc 	.word	0x1fffdecc

0000be94 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    be94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    be98:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bf88 <usb_serial_write+0xf4>
{
    be9c:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    be9e:	2201      	movs	r2, #1
    bea0:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    bea4:	9101      	str	r1, [sp, #4]
    bea6:	b379      	cbz	r1, bf08 <usb_serial_write+0x74>
    bea8:	4f38      	ldr	r7, [pc, #224]	; (bf8c <usb_serial_write+0xf8>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    beaa:	f8df 80e4 	ldr.w	r8, [pc, #228]	; bf90 <usb_serial_write+0xfc>
	while (size > 0) {
    beae:	9d01      	ldr	r5, [sp, #4]
    beb0:	4e38      	ldr	r6, [pc, #224]	; (bf94 <usb_serial_write+0x100>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    beb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; bf98 <usb_serial_write+0x104>
    beb6:	4683      	mov	fp, r0
		if (!tx_packet) {
    beb8:	6839      	ldr	r1, [r7, #0]
    beba:	b3a1      	cbz	r1, bf26 <usb_serial_write+0x92>
		len = CDC_TX_SIZE - tx_packet->index;
    bebc:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    bec0:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    bec4:	45ac      	cmp	ip, r5
    bec6:	bf28      	it	cs
    bec8:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    beca:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    bece:	2200      	movs	r2, #0
		tx_packet->index += len;
    bed0:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    bed2:	7032      	strb	r2, [r6, #0]
		size -= len;
    bed4:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    bed8:	804c      	strh	r4, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    beda:	f101 0208 	add.w	r2, r1, #8
		while (len-- > 0) *dest++ = *src++;
    bede:	f1bc 0f00 	cmp.w	ip, #0
    bee2:	d00a      	beq.n	befa <usb_serial_write+0x66>
    bee4:	f10e 3eff 	add.w	lr, lr, #4294967295
    bee8:	4472      	add	r2, lr
    beea:	44dc      	add	ip, fp
    beec:	f81b 4b01 	ldrb.w	r4, [fp], #1
    bef0:	f802 4f01 	strb.w	r4, [r2, #1]!
    bef4:	45dc      	cmp	ip, fp
    bef6:	d1f9      	bne.n	beec <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    bef8:	884c      	ldrh	r4, [r1, #2]
    befa:	2c3f      	cmp	r4, #63	; 0x3f
    befc:	d80b      	bhi.n	bf16 <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    befe:	2205      	movs	r2, #5
    bf00:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    bf04:	2d00      	cmp	r5, #0
    bf06:	d1d7      	bne.n	beb8 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    bf08:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    bf0a:	2300      	movs	r3, #0
    bf0c:	f889 3000 	strb.w	r3, [r9]
}
    bf10:	b003      	add	sp, #12
    bf12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    bf16:	2240      	movs	r2, #64	; 0x40
    bf18:	800a      	strh	r2, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    bf1a:	2004      	movs	r0, #4
    bf1c:	f7ff faae 	bl	b47c <usb_tx>
			tx_packet = NULL;
    bf20:	2200      	movs	r2, #0
    bf22:	603a      	str	r2, [r7, #0]
    bf24:	e7eb      	b.n	befe <usb_serial_write+0x6a>
				if (!usb_configuration) {
    bf26:	f898 2000 	ldrb.w	r2, [r8]
    bf2a:	b32a      	cbz	r2, bf78 <usb_serial_write+0xe4>
    bf2c:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
    bf30:	e008      	b.n	bf44 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    bf32:	3c01      	subs	r4, #1
    bf34:	d019      	beq.n	bf6a <usb_serial_write+0xd6>
    bf36:	7832      	ldrb	r2, [r6, #0]
    bf38:	b9ba      	cbnz	r2, bf6a <usb_serial_write+0xd6>
				yield();
    bf3a:	f000 f8b1 	bl	c0a0 <yield>
				if (!usb_configuration) {
    bf3e:	f898 2000 	ldrb.w	r2, [r8]
    bf42:	b1ca      	cbz	r2, bf78 <usb_serial_write+0xe4>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    bf44:	2004      	movs	r0, #4
    bf46:	f7ff fa43 	bl	b3d0 <usb_tx_packet_count>
    bf4a:	2807      	cmp	r0, #7
    bf4c:	d8f1      	bhi.n	bf32 <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    bf4e:	f04f 0301 	mov.w	r3, #1
    bf52:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    bf56:	f7ff fee7 	bl	bd28 <usb_malloc>
    bf5a:	4601      	mov	r1, r0
    bf5c:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    bf5e:	2800      	cmp	r0, #0
    bf60:	d1ac      	bne.n	bebc <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    bf62:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    bf64:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    bf68:	d1e5      	bne.n	bf36 <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    bf6a:	2301      	movs	r3, #1
					return -1;
    bf6c:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    bf70:	7033      	strb	r3, [r6, #0]
}
    bf72:	b003      	add	sp, #12
    bf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    bf78:	2300      	movs	r3, #0
					return -1;
    bf7a:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    bf7e:	f889 3000 	strb.w	r3, [r9]
}
    bf82:	b003      	add	sp, #12
    bf84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf88:	1fffded1 	.word	0x1fffded1
    bf8c:	1fffded4 	.word	0x1fffded4
    bf90:	1fffdebc 	.word	0x1fffdebc
    bf94:	1fffded0 	.word	0x1fffded0
    bf98:	1fffdee8 	.word	0x1fffdee8

0000bf9c <usb_serial_putchar>:
{
    bf9c:	b500      	push	{lr}
    bf9e:	b083      	sub	sp, #12
    bfa0:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    bfa2:	2101      	movs	r1, #1
    bfa4:	f10d 0007 	add.w	r0, sp, #7
{
    bfa8:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    bfac:	f7ff ff72 	bl	be94 <usb_serial_write>
}
    bfb0:	b003      	add	sp, #12
    bfb2:	f85d fb04 	ldr.w	pc, [sp], #4
    bfb6:	bf00      	nop

0000bfb8 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    bfb8:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    bfba:	4d0e      	ldr	r5, [pc, #56]	; (bff4 <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    bfbc:	4c0e      	ldr	r4, [pc, #56]	; (bff8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    bfbe:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    bfc0:	2301      	movs	r3, #1
    bfc2:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    bfc4:	b128      	cbz	r0, bfd2 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    bfc6:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    bfc8:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    bfca:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    bfce:	7023      	strb	r3, [r4, #0]
	return len;
}
    bfd0:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    bfd2:	4b0a      	ldr	r3, [pc, #40]	; (bffc <usb_serial_write_buffer_free+0x44>)
    bfd4:	781b      	ldrb	r3, [r3, #0]
    bfd6:	b913      	cbnz	r3, bfde <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    bfd8:	2000      	movs	r0, #0
    bfda:	7020      	strb	r0, [r4, #0]
}
    bfdc:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    bfde:	2004      	movs	r0, #4
    bfe0:	f7ff f9f6 	bl	b3d0 <usb_tx_packet_count>
		if (!usb_configuration ||
    bfe4:	2807      	cmp	r0, #7
    bfe6:	d8f7      	bhi.n	bfd8 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    bfe8:	f7ff fe9e 	bl	bd28 <usb_malloc>
    bfec:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    bfee:	2800      	cmp	r0, #0
    bff0:	d1e9      	bne.n	bfc6 <usb_serial_write_buffer_free+0xe>
    bff2:	e7f1      	b.n	bfd8 <usb_serial_write_buffer_free+0x20>
    bff4:	1fffded4 	.word	0x1fffded4
    bff8:	1fffded1 	.word	0x1fffded1
    bffc:	1fffdebc 	.word	0x1fffdebc

0000c000 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    c002:	4b11      	ldr	r3, [pc, #68]	; (c048 <usb_serial_flush_output+0x48>)
    c004:	781b      	ldrb	r3, [r3, #0]
    c006:	b18b      	cbz	r3, c02c <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    c008:	4e10      	ldr	r6, [pc, #64]	; (c04c <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    c00a:	4d11      	ldr	r5, [pc, #68]	; (c050 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    c00c:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    c00e:	2701      	movs	r7, #1
    c010:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    c012:	b164      	cbz	r4, c02e <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    c014:	4b0f      	ldr	r3, [pc, #60]	; (c054 <usb_serial_flush_output+0x54>)
    c016:	2700      	movs	r7, #0
    c018:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    c01a:	8863      	ldrh	r3, [r4, #2]
    c01c:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c01e:	4621      	mov	r1, r4
    c020:	2004      	movs	r0, #4
    c022:	f7ff fa2b 	bl	b47c <usb_tx>
		tx_packet = NULL;
    c026:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    c028:	2300      	movs	r3, #0
    c02a:	702b      	strb	r3, [r5, #0]
}
    c02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    c02e:	f7ff fe7b 	bl	bd28 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    c032:	4b08      	ldr	r3, [pc, #32]	; (c054 <usb_serial_flush_output+0x54>)
		if (tx) {
    c034:	4601      	mov	r1, r0
    c036:	b120      	cbz	r0, c042 <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    c038:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    c03a:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    c03c:	f7ff fa1e 	bl	b47c <usb_tx>
    c040:	e7f2      	b.n	c028 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    c042:	701f      	strb	r7, [r3, #0]
    c044:	e7f0      	b.n	c028 <usb_serial_flush_output+0x28>
    c046:	bf00      	nop
    c048:	1fffdebc 	.word	0x1fffdebc
    c04c:	1fffded4 	.word	0x1fffded4
    c050:	1fffded1 	.word	0x1fffded1
    c054:	1fffdee8 	.word	0x1fffdee8

0000c058 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    c058:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    c05a:	4b0e      	ldr	r3, [pc, #56]	; (c094 <usb_serial_flush_callback+0x3c>)
    c05c:	781b      	ldrb	r3, [r3, #0]
    c05e:	b953      	cbnz	r3, c076 <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    c060:	4c0d      	ldr	r4, [pc, #52]	; (c098 <usb_serial_flush_callback+0x40>)
    c062:	6821      	ldr	r1, [r4, #0]
    c064:	b141      	cbz	r1, c078 <usb_serial_flush_callback+0x20>
    c066:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    c06a:	884b      	ldrh	r3, [r1, #2]
    c06c:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c06e:	2004      	movs	r0, #4
    c070:	f7ff fa04 	bl	b47c <usb_tx>
		tx_packet = NULL;
    c074:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    c076:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    c078:	f7ff fe56 	bl	bd28 <usb_malloc>
		if (tx) {
    c07c:	4601      	mov	r1, r0
    c07e:	b120      	cbz	r0, c08a <usb_serial_flush_callback+0x32>
}
    c080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    c084:	2004      	movs	r0, #4
    c086:	f7ff b9f9 	b.w	b47c <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    c08a:	4b04      	ldr	r3, [pc, #16]	; (c09c <usb_serial_flush_callback+0x44>)
    c08c:	2201      	movs	r2, #1
    c08e:	701a      	strb	r2, [r3, #0]
}
    c090:	bd38      	pop	{r3, r4, r5, pc}
    c092:	bf00      	nop
    c094:	1fffded1 	.word	0x1fffded1
    c098:	1fffded4 	.word	0x1fffded4
    c09c:	1fffdee8 	.word	0x1fffdee8

0000c0a0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    c0a4:	4e32      	ldr	r6, [pc, #200]	; (c170 <yield+0xd0>)
    c0a6:	7833      	ldrb	r3, [r6, #0]
    c0a8:	b163      	cbz	r3, c0c4 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    c0aa:	4f32      	ldr	r7, [pc, #200]	; (c174 <yield+0xd4>)
    c0ac:	783a      	ldrb	r2, [r7, #0]
    c0ae:	b94a      	cbnz	r2, c0c4 <yield+0x24>
	running = 1;
    c0b0:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c0b2:	07d9      	lsls	r1, r3, #31
	running = 1;
    c0b4:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c0b6:	d443      	bmi.n	c140 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c0b8:	079a      	lsls	r2, r3, #30
    c0ba:	d426      	bmi.n	c10a <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    c0bc:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c0be:	075b      	lsls	r3, r3, #29
	running = 0;
    c0c0:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c0c2:	d401      	bmi.n	c0c8 <yield+0x28>
	
};
    c0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    c0c8:	4b2b      	ldr	r3, [pc, #172]	; (c178 <yield+0xd8>)
    c0ca:	681a      	ldr	r2, [r3, #0]
    c0cc:	2a00      	cmp	r2, #0
    c0ce:	d0f9      	beq.n	c0c4 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c0d0:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    c0d4:	2a00      	cmp	r2, #0
    c0d6:	d1f5      	bne.n	c0c4 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c0d8:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    c0dc:	b672      	cpsid	i
		EventResponder *first = firstYield;
    c0de:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c0e0:	2800      	cmp	r0, #0
    c0e2:	d03a      	beq.n	c15a <yield+0xba>
		if (runningFromYield) {
    c0e4:	4c25      	ldr	r4, [pc, #148]	; (c17c <yield+0xdc>)
    c0e6:	7821      	ldrb	r1, [r4, #0]
    c0e8:	2900      	cmp	r1, #0
    c0ea:	d136      	bne.n	c15a <yield+0xba>
		firstYield = first->_next;
    c0ec:	6942      	ldr	r2, [r0, #20]
    c0ee:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    c0f0:	2301      	movs	r3, #1
    c0f2:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    c0f4:	2a00      	cmp	r2, #0
    c0f6:	d037      	beq.n	c168 <yield+0xc8>
			firstYield->_prev = nullptr;
    c0f8:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    c0fa:	b905      	cbnz	r5, c0fe <yield+0x5e>
    c0fc:	b662      	cpsie	i
		first->_triggered = false;
    c0fe:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    c100:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    c102:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c104:	4798      	blx	r3
		runningFromYield = false;
    c106:	7025      	strb	r5, [r4, #0]
    c108:	e7dc      	b.n	c0c4 <yield+0x24>
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c10a:	f8df 8074 	ldr.w	r8, [pc, #116]	; c180 <yield+0xe0>
    c10e:	f898 2000 	ldrb.w	r2, [r8]
    c112:	2a00      	cmp	r2, #0
    c114:	d0d2      	beq.n	c0bc <yield+0x1c>
    c116:	2500      	movs	r5, #0
    c118:	f8df 9068 	ldr.w	r9, [pc, #104]	; c184 <yield+0xe4>
    c11c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    c11e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		if (available()) (*_serialEvent)();
    c122:	6823      	ldr	r3, [r4, #0]
    c124:	4620      	mov	r0, r4
    c126:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c128:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    c12a:	4798      	blx	r3
    c12c:	b108      	cbz	r0, c132 <yield+0x92>
    c12e:	6923      	ldr	r3, [r4, #16]
    c130:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c132:	f898 2000 	ldrb.w	r2, [r8]
    c136:	b2eb      	uxtb	r3, r5
    c138:	429a      	cmp	r2, r3
    c13a:	d8f0      	bhi.n	c11e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c13c:	7833      	ldrb	r3, [r6, #0]
    c13e:	e7bd      	b.n	c0bc <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    c140:	f7ff fe76 	bl	be30 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c144:	b968      	cbnz	r0, c162 <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    c146:	4b10      	ldr	r3, [pc, #64]	; (c188 <yield+0xe8>)
    c148:	781b      	ldrb	r3, [r3, #0]
    c14a:	b90b      	cbnz	r3, c150 <yield+0xb0>
    c14c:	7833      	ldrb	r3, [r6, #0]
    c14e:	e7b3      	b.n	c0b8 <yield+0x18>
    c150:	7833      	ldrb	r3, [r6, #0]
    c152:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    c156:	7033      	strb	r3, [r6, #0]
    c158:	e7ae      	b.n	c0b8 <yield+0x18>
		if (doit) __enable_irq();
    c15a:	2d00      	cmp	r5, #0
    c15c:	d1b2      	bne.n	c0c4 <yield+0x24>
    c15e:	b662      	cpsie	i
    c160:	e7b0      	b.n	c0c4 <yield+0x24>
		if (Serial.available()) serialEvent();
    c162:	f000 f83d 	bl	c1e0 <serialEvent()>
    c166:	e7ee      	b.n	c146 <yield+0xa6>
			lastYield = nullptr;
    c168:	4b08      	ldr	r3, [pc, #32]	; (c18c <yield+0xec>)
    c16a:	601a      	str	r2, [r3, #0]
    c16c:	e7c5      	b.n	c0fa <yield+0x5a>
    c16e:	bf00      	nop
    c170:	1fff8a10 	.word	0x1fff8a10
    c174:	1fffdee9 	.word	0x1fffdee9
    c178:	1fffdcac 	.word	0x1fffdcac
    c17c:	1fffdcb8 	.word	0x1fffdcb8
    c180:	1fffdef8 	.word	0x1fffdef8
    c184:	1fffdeec 	.word	0x1fffdeec
    c188:	000151c4 	.word	0x000151c4
    c18c:	1fffdcbc 	.word	0x1fffdcbc

0000c190 <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
    c190:	b470      	push	{r4, r5, r6}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c192:	4e10      	ldr	r6, [pc, #64]	; (c1d4 <HardwareSerial::addToSerialEventsList()+0x44>)
    c194:	4d10      	ldr	r5, [pc, #64]	; (c1d8 <HardwareSerial::addToSerialEventsList()+0x48>)
    c196:	7834      	ldrb	r4, [r6, #0]
    c198:	b1d4      	cbz	r4, c1d0 <HardwareSerial::addToSerialEventsList()+0x40>
    c19a:	1e62      	subs	r2, r4, #1
    c19c:	b2d2      	uxtb	r2, r2
    c19e:	1d29      	adds	r1, r5, #4
    c1a0:	462b      	mov	r3, r5
    c1a2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    c1a6:	e001      	b.n	c1ac <HardwareSerial::addToSerialEventsList()+0x1c>
    c1a8:	428b      	cmp	r3, r1
    c1aa:	d005      	beq.n	c1b8 <HardwareSerial::addToSerialEventsList()+0x28>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    c1ac:	f853 2b04 	ldr.w	r2, [r3], #4
    c1b0:	4282      	cmp	r2, r0
    c1b2:	d1f9      	bne.n	c1a8 <HardwareSerial::addToSerialEventsList()+0x18>
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
    c1b4:	bc70      	pop	{r4, r5, r6}
    c1b6:	4770      	bx	lr
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c1b8:	1c63      	adds	r3, r4, #1
    c1ba:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c1bc:	4a07      	ldr	r2, [pc, #28]	; (c1dc <HardwareSerial::addToSerialEventsList()+0x4c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c1be:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c1c0:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c1c2:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c1c6:	f043 0302 	orr.w	r3, r3, #2
    c1ca:	7013      	strb	r3, [r2, #0]
}
    c1cc:	bc70      	pop	{r4, r5, r6}
    c1ce:	4770      	bx	lr
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c1d0:	2301      	movs	r3, #1
    c1d2:	e7f3      	b.n	c1bc <HardwareSerial::addToSerialEventsList()+0x2c>
    c1d4:	1fffdef8 	.word	0x1fffdef8
    c1d8:	1fffdeec 	.word	0x1fffdeec
    c1dc:	1fff8a10 	.word	0x1fff8a10

0000c1e0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    c1e0:	4770      	bx	lr
    c1e2:	bf00      	nop

0000c1e4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    c1e4:	b510      	push	{r4, lr}
    c1e6:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    c1e8:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c1ea:	4a17      	ldr	r2, [pc, #92]	; (c248 <usb_init_serialnumber+0x64>)
    c1ec:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    c1ee:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
    c1f0:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    c1f2:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c1f4:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
    c1f6:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
    c1f8:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    c1fa:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    c1fc:	7813      	ldrb	r3, [r2, #0]
    c1fe:	061b      	lsls	r3, r3, #24
    c200:	d5fc      	bpl.n	c1fc <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
    c202:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    c204:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c206:	4b11      	ldr	r3, [pc, #68]	; (c24c <usb_init_serialnumber+0x68>)
    c208:	4c11      	ldr	r4, [pc, #68]	; (c250 <usb_init_serialnumber+0x6c>)
    c20a:	4298      	cmp	r0, r3
    c20c:	bf38      	it	cc
    c20e:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    c212:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
    c214:	bf38      	it	cc
    c216:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
    c218:	220a      	movs	r2, #10
    c21a:	f7fd fd29 	bl	9c70 <ultoa>
	for (i=0; i<10; i++) {
    c21e:	a901      	add	r1, sp, #4
    c220:	4620      	mov	r0, r4
    c222:	2300      	movs	r3, #0
		char c = buf[i];
    c224:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    c228:	3301      	adds	r3, #1
		if (!c) break;
    c22a:	b13a      	cbz	r2, c23c <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
    c22c:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    c22e:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    c232:	d1f7      	bne.n	c224 <usb_init_serialnumber+0x40>
    c234:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c236:	7023      	strb	r3, [r4, #0]
}
    c238:	b004      	add	sp, #16
    c23a:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c23c:	005b      	lsls	r3, r3, #1
    c23e:	b2db      	uxtb	r3, r3
    c240:	7023      	strb	r3, [r4, #0]
}
    c242:	b004      	add	sp, #16
    c244:	bd10      	pop	{r4, pc}
    c246:	bf00      	nop
    c248:	40020000 	.word	0x40020000
    c24c:	00989680 	.word	0x00989680
    c250:	1fff8aa0 	.word	0x1fff8aa0

0000c254 <expf>:
    c254:	b538      	push	{r3, r4, r5, lr}
    c256:	4604      	mov	r4, r0
    c258:	f000 f82c 	bl	c2b4 <__ieee754_expf>
    c25c:	4605      	mov	r5, r0
    c25e:	4620      	mov	r0, r4
    c260:	f000 f820 	bl	c2a4 <finitef>
    c264:	b148      	cbz	r0, c27a <expf+0x26>
    c266:	490d      	ldr	r1, [pc, #52]	; (c29c <expf+0x48>)
    c268:	4620      	mov	r0, r4
    c26a:	f000 feaf 	bl	cfcc <__aeabi_fcmpgt>
    c26e:	b930      	cbnz	r0, c27e <expf+0x2a>
    c270:	490b      	ldr	r1, [pc, #44]	; (c2a0 <expf+0x4c>)
    c272:	4620      	mov	r0, r4
    c274:	f000 fe8c 	bl	cf90 <__aeabi_fcmplt>
    c278:	b948      	cbnz	r0, c28e <expf+0x3a>
    c27a:	4628      	mov	r0, r5
    c27c:	bd38      	pop	{r3, r4, r5, pc}
    c27e:	f001 fe5b 	bl	df38 <__errno>
    c282:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
    c286:	2322      	movs	r3, #34	; 0x22
    c288:	6003      	str	r3, [r0, #0]
    c28a:	4628      	mov	r0, r5
    c28c:	bd38      	pop	{r3, r4, r5, pc}
    c28e:	f001 fe53 	bl	df38 <__errno>
    c292:	2322      	movs	r3, #34	; 0x22
    c294:	2500      	movs	r5, #0
    c296:	6003      	str	r3, [r0, #0]
    c298:	e7ef      	b.n	c27a <expf+0x26>
    c29a:	bf00      	nop
    c29c:	42b17217 	.word	0x42b17217
    c2a0:	c2cff1b5 	.word	0xc2cff1b5

0000c2a4 <finitef>:
    c2a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    c2a8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    c2ac:	bfac      	ite	ge
    c2ae:	2000      	movge	r0, #0
    c2b0:	2001      	movlt	r0, #1
    c2b2:	4770      	bx	lr

0000c2b4 <__ieee754_expf>:
    c2b4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    c2b8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    c2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c2c0:	4604      	mov	r4, r0
    c2c2:	d86c      	bhi.n	c39e <__ieee754_expf+0xea>
    c2c4:	ea4f 75d0 	mov.w	r5, r0, lsr #31
    c2c8:	f000 80c6 	beq.w	c458 <__ieee754_expf+0x1a4>
    c2cc:	497a      	ldr	r1, [pc, #488]	; (c4b8 <__ieee754_expf+0x204>)
    c2ce:	4288      	cmp	r0, r1
    c2d0:	f300 80b4 	bgt.w	c43c <__ieee754_expf+0x188>
    c2d4:	2800      	cmp	r0, #0
    c2d6:	f2c0 80b6 	blt.w	c446 <__ieee754_expf+0x192>
    c2da:	4b78      	ldr	r3, [pc, #480]	; (c4bc <__ieee754_expf+0x208>)
    c2dc:	429a      	cmp	r2, r3
    c2de:	d963      	bls.n	c3a8 <__ieee754_expf+0xf4>
    c2e0:	4b77      	ldr	r3, [pc, #476]	; (c4c0 <__ieee754_expf+0x20c>)
    c2e2:	429a      	cmp	r2, r3
    c2e4:	f200 80c5 	bhi.w	c472 <__ieee754_expf+0x1be>
    c2e8:	4b76      	ldr	r3, [pc, #472]	; (c4c4 <__ieee754_expf+0x210>)
    c2ea:	4620      	mov	r0, r4
    c2ec:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    c2f0:	f000 fba6 	bl	ca40 <__aeabi_fsub>
    c2f4:	4b74      	ldr	r3, [pc, #464]	; (c4c8 <__ieee754_expf+0x214>)
    c2f6:	f1c5 0601 	rsb	r6, r5, #1
    c2fa:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    c2fe:	4680      	mov	r8, r0
    c300:	1b76      	subs	r6, r6, r5
    c302:	4649      	mov	r1, r9
    c304:	4640      	mov	r0, r8
    c306:	f000 fb9b 	bl	ca40 <__aeabi_fsub>
    c30a:	4601      	mov	r1, r0
    c30c:	4605      	mov	r5, r0
    c30e:	f000 fca1 	bl	cc54 <__aeabi_fmul>
    c312:	496e      	ldr	r1, [pc, #440]	; (c4cc <__ieee754_expf+0x218>)
    c314:	4604      	mov	r4, r0
    c316:	f000 fc9d 	bl	cc54 <__aeabi_fmul>
    c31a:	496d      	ldr	r1, [pc, #436]	; (c4d0 <__ieee754_expf+0x21c>)
    c31c:	f000 fb90 	bl	ca40 <__aeabi_fsub>
    c320:	4621      	mov	r1, r4
    c322:	f000 fc97 	bl	cc54 <__aeabi_fmul>
    c326:	496b      	ldr	r1, [pc, #428]	; (c4d4 <__ieee754_expf+0x220>)
    c328:	f000 fb8c 	bl	ca44 <__addsf3>
    c32c:	4621      	mov	r1, r4
    c32e:	f000 fc91 	bl	cc54 <__aeabi_fmul>
    c332:	4969      	ldr	r1, [pc, #420]	; (c4d8 <__ieee754_expf+0x224>)
    c334:	f000 fb84 	bl	ca40 <__aeabi_fsub>
    c338:	4621      	mov	r1, r4
    c33a:	f000 fc8b 	bl	cc54 <__aeabi_fmul>
    c33e:	4967      	ldr	r1, [pc, #412]	; (c4dc <__ieee754_expf+0x228>)
    c340:	f000 fb80 	bl	ca44 <__addsf3>
    c344:	4621      	mov	r1, r4
    c346:	f000 fc85 	bl	cc54 <__aeabi_fmul>
    c34a:	4601      	mov	r1, r0
    c34c:	4628      	mov	r0, r5
    c34e:	f000 fb77 	bl	ca40 <__aeabi_fsub>
    c352:	462c      	mov	r4, r5
    c354:	4607      	mov	r7, r0
    c356:	4682      	mov	sl, r0
    c358:	2e00      	cmp	r6, #0
    c35a:	d057      	beq.n	c40c <__ieee754_expf+0x158>
    c35c:	4639      	mov	r1, r7
    c35e:	4628      	mov	r0, r5
    c360:	f000 fc78 	bl	cc54 <__aeabi_fmul>
    c364:	4639      	mov	r1, r7
    c366:	4604      	mov	r4, r0
    c368:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c36c:	f000 fb68 	bl	ca40 <__aeabi_fsub>
    c370:	4601      	mov	r1, r0
    c372:	4620      	mov	r0, r4
    c374:	f000 fd22 	bl	cdbc <__aeabi_fdiv>
    c378:	4601      	mov	r1, r0
    c37a:	4648      	mov	r0, r9
    c37c:	f000 fb60 	bl	ca40 <__aeabi_fsub>
    c380:	4641      	mov	r1, r8
    c382:	f000 fb5d 	bl	ca40 <__aeabi_fsub>
    c386:	4601      	mov	r1, r0
    c388:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c38c:	f000 fb58 	bl	ca40 <__aeabi_fsub>
    c390:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
    c394:	db64      	blt.n	c460 <__ieee754_expf+0x1ac>
    c396:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    c39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c39e:	4601      	mov	r1, r0
    c3a0:	f000 fb50 	bl	ca44 <__addsf3>
    c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3a8:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
    c3ac:	d209      	bcs.n	c3c2 <__ieee754_expf+0x10e>
    c3ae:	494c      	ldr	r1, [pc, #304]	; (c4e0 <__ieee754_expf+0x22c>)
    c3b0:	4620      	mov	r0, r4
    c3b2:	f000 fb47 	bl	ca44 <__addsf3>
    c3b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c3ba:	f000 fe07 	bl	cfcc <__aeabi_fcmpgt>
    c3be:	2800      	cmp	r0, #0
    c3c0:	d174      	bne.n	c4ac <__ieee754_expf+0x1f8>
    c3c2:	4621      	mov	r1, r4
    c3c4:	4620      	mov	r0, r4
    c3c6:	f000 fc45 	bl	cc54 <__aeabi_fmul>
    c3ca:	4940      	ldr	r1, [pc, #256]	; (c4cc <__ieee754_expf+0x218>)
    c3cc:	4605      	mov	r5, r0
    c3ce:	f000 fc41 	bl	cc54 <__aeabi_fmul>
    c3d2:	493f      	ldr	r1, [pc, #252]	; (c4d0 <__ieee754_expf+0x21c>)
    c3d4:	f000 fb34 	bl	ca40 <__aeabi_fsub>
    c3d8:	4629      	mov	r1, r5
    c3da:	f000 fc3b 	bl	cc54 <__aeabi_fmul>
    c3de:	493d      	ldr	r1, [pc, #244]	; (c4d4 <__ieee754_expf+0x220>)
    c3e0:	f000 fb30 	bl	ca44 <__addsf3>
    c3e4:	4629      	mov	r1, r5
    c3e6:	f000 fc35 	bl	cc54 <__aeabi_fmul>
    c3ea:	493b      	ldr	r1, [pc, #236]	; (c4d8 <__ieee754_expf+0x224>)
    c3ec:	f000 fb28 	bl	ca40 <__aeabi_fsub>
    c3f0:	4629      	mov	r1, r5
    c3f2:	f000 fc2f 	bl	cc54 <__aeabi_fmul>
    c3f6:	4939      	ldr	r1, [pc, #228]	; (c4dc <__ieee754_expf+0x228>)
    c3f8:	f000 fb24 	bl	ca44 <__addsf3>
    c3fc:	4629      	mov	r1, r5
    c3fe:	f000 fc29 	bl	cc54 <__aeabi_fmul>
    c402:	4601      	mov	r1, r0
    c404:	4620      	mov	r0, r4
    c406:	f000 fb1b 	bl	ca40 <__aeabi_fsub>
    c40a:	4682      	mov	sl, r0
    c40c:	4651      	mov	r1, sl
    c40e:	4620      	mov	r0, r4
    c410:	f000 fc20 	bl	cc54 <__aeabi_fmul>
    c414:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c418:	4605      	mov	r5, r0
    c41a:	4650      	mov	r0, sl
    c41c:	f000 fb10 	bl	ca40 <__aeabi_fsub>
    c420:	4601      	mov	r1, r0
    c422:	4628      	mov	r0, r5
    c424:	f000 fcca 	bl	cdbc <__aeabi_fdiv>
    c428:	4621      	mov	r1, r4
    c42a:	f000 fb09 	bl	ca40 <__aeabi_fsub>
    c42e:	4601      	mov	r1, r0
    c430:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c434:	f000 fb04 	bl	ca40 <__aeabi_fsub>
    c438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c43c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c440:	2000      	movs	r0, #0
    c442:	f000 b87b 	b.w	c53c <__math_oflowf>
    c446:	4b27      	ldr	r3, [pc, #156]	; (c4e4 <__ieee754_expf+0x230>)
    c448:	429a      	cmp	r2, r3
    c44a:	f67f af46 	bls.w	c2da <__ieee754_expf+0x26>
    c44e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c452:	2000      	movs	r0, #0
    c454:	f000 b86e 	b.w	c534 <__math_uflowf>
    c458:	2d00      	cmp	r5, #0
    c45a:	d0a3      	beq.n	c3a4 <__ieee754_expf+0xf0>
    c45c:	2000      	movs	r0, #0
    c45e:	e7a1      	b.n	c3a4 <__ieee754_expf+0xf0>
    c460:	3664      	adds	r6, #100	; 0x64
    c462:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
    c466:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    c46a:	f000 fbf3 	bl	cc54 <__aeabi_fmul>
    c46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c472:	491d      	ldr	r1, [pc, #116]	; (c4e8 <__ieee754_expf+0x234>)
    c474:	4620      	mov	r0, r4
    c476:	f000 fbed 	bl	cc54 <__aeabi_fmul>
    c47a:	4b1c      	ldr	r3, [pc, #112]	; (c4ec <__ieee754_expf+0x238>)
    c47c:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    c480:	f000 fae0 	bl	ca44 <__addsf3>
    c484:	f000 fdac 	bl	cfe0 <__aeabi_f2iz>
    c488:	4606      	mov	r6, r0
    c48a:	f000 fb8f 	bl	cbac <__aeabi_i2f>
    c48e:	4918      	ldr	r1, [pc, #96]	; (c4f0 <__ieee754_expf+0x23c>)
    c490:	4605      	mov	r5, r0
    c492:	f000 fbdf 	bl	cc54 <__aeabi_fmul>
    c496:	4601      	mov	r1, r0
    c498:	4620      	mov	r0, r4
    c49a:	f000 fad1 	bl	ca40 <__aeabi_fsub>
    c49e:	4915      	ldr	r1, [pc, #84]	; (c4f4 <__ieee754_expf+0x240>)
    c4a0:	4680      	mov	r8, r0
    c4a2:	4628      	mov	r0, r5
    c4a4:	f000 fbd6 	bl	cc54 <__aeabi_fmul>
    c4a8:	4681      	mov	r9, r0
    c4aa:	e72a      	b.n	c302 <__ieee754_expf+0x4e>
    c4ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c4b0:	4620      	mov	r0, r4
    c4b2:	f000 fac7 	bl	ca44 <__addsf3>
    c4b6:	e775      	b.n	c3a4 <__ieee754_expf+0xf0>
    c4b8:	42b17217 	.word	0x42b17217
    c4bc:	3eb17218 	.word	0x3eb17218
    c4c0:	3f851591 	.word	0x3f851591
    c4c4:	00015460 	.word	0x00015460
    c4c8:	00015468 	.word	0x00015468
    c4cc:	3331bb4c 	.word	0x3331bb4c
    c4d0:	35ddea0e 	.word	0x35ddea0e
    c4d4:	388ab355 	.word	0x388ab355
    c4d8:	3b360b61 	.word	0x3b360b61
    c4dc:	3e2aaaab 	.word	0x3e2aaaab
    c4e0:	7149f2ca 	.word	0x7149f2ca
    c4e4:	42cff1b5 	.word	0x42cff1b5
    c4e8:	3fb8aa3b 	.word	0x3fb8aa3b
    c4ec:	00015458 	.word	0x00015458
    c4f0:	3f317180 	.word	0x3f317180
    c4f4:	3717f7d1 	.word	0x3717f7d1

0000c4f8 <with_errnof>:
    c4f8:	b538      	push	{r3, r4, r5, lr}
    c4fa:	4605      	mov	r5, r0
    c4fc:	460c      	mov	r4, r1
    c4fe:	f001 fd1b 	bl	df38 <__errno>
    c502:	4603      	mov	r3, r0
    c504:	4628      	mov	r0, r5
    c506:	601c      	str	r4, [r3, #0]
    c508:	bd38      	pop	{r3, r4, r5, pc}
    c50a:	bf00      	nop

0000c50c <xflowf>:
    c50c:	b508      	push	{r3, lr}
    c50e:	b140      	cbz	r0, c522 <xflowf+0x16>
    c510:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    c514:	f000 fb9e 	bl	cc54 <__aeabi_fmul>
    c518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c51c:	2122      	movs	r1, #34	; 0x22
    c51e:	f7ff bfeb 	b.w	c4f8 <with_errnof>
    c522:	4608      	mov	r0, r1
    c524:	f000 fb96 	bl	cc54 <__aeabi_fmul>
    c528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c52c:	2122      	movs	r1, #34	; 0x22
    c52e:	f7ff bfe3 	b.w	c4f8 <with_errnof>
    c532:	bf00      	nop

0000c534 <__math_uflowf>:
    c534:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    c538:	f7ff bfe8 	b.w	c50c <xflowf>

0000c53c <__math_oflowf>:
    c53c:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
    c540:	f7ff bfe4 	b.w	c50c <xflowf>

0000c544 <__aeabi_drsub>:
    c544:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c548:	e002      	b.n	c550 <__adddf3>
    c54a:	bf00      	nop

0000c54c <__aeabi_dsub>:
    c54c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c550 <__adddf3>:
    c550:	b530      	push	{r4, r5, lr}
    c552:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c556:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c55a:	ea94 0f05 	teq	r4, r5
    c55e:	bf08      	it	eq
    c560:	ea90 0f02 	teqeq	r0, r2
    c564:	bf1f      	itttt	ne
    c566:	ea54 0c00 	orrsne.w	ip, r4, r0
    c56a:	ea55 0c02 	orrsne.w	ip, r5, r2
    c56e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c572:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c576:	f000 80e2 	beq.w	c73e <__adddf3+0x1ee>
    c57a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c57e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c582:	bfb8      	it	lt
    c584:	426d      	neglt	r5, r5
    c586:	dd0c      	ble.n	c5a2 <__adddf3+0x52>
    c588:	442c      	add	r4, r5
    c58a:	ea80 0202 	eor.w	r2, r0, r2
    c58e:	ea81 0303 	eor.w	r3, r1, r3
    c592:	ea82 0000 	eor.w	r0, r2, r0
    c596:	ea83 0101 	eor.w	r1, r3, r1
    c59a:	ea80 0202 	eor.w	r2, r0, r2
    c59e:	ea81 0303 	eor.w	r3, r1, r3
    c5a2:	2d36      	cmp	r5, #54	; 0x36
    c5a4:	bf88      	it	hi
    c5a6:	bd30      	pophi	{r4, r5, pc}
    c5a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c5ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c5b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c5b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c5b8:	d002      	beq.n	c5c0 <__adddf3+0x70>
    c5ba:	4240      	negs	r0, r0
    c5bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c5c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c5c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c5c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c5cc:	d002      	beq.n	c5d4 <__adddf3+0x84>
    c5ce:	4252      	negs	r2, r2
    c5d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c5d4:	ea94 0f05 	teq	r4, r5
    c5d8:	f000 80a7 	beq.w	c72a <__adddf3+0x1da>
    c5dc:	f1a4 0401 	sub.w	r4, r4, #1
    c5e0:	f1d5 0e20 	rsbs	lr, r5, #32
    c5e4:	db0d      	blt.n	c602 <__adddf3+0xb2>
    c5e6:	fa02 fc0e 	lsl.w	ip, r2, lr
    c5ea:	fa22 f205 	lsr.w	r2, r2, r5
    c5ee:	1880      	adds	r0, r0, r2
    c5f0:	f141 0100 	adc.w	r1, r1, #0
    c5f4:	fa03 f20e 	lsl.w	r2, r3, lr
    c5f8:	1880      	adds	r0, r0, r2
    c5fa:	fa43 f305 	asr.w	r3, r3, r5
    c5fe:	4159      	adcs	r1, r3
    c600:	e00e      	b.n	c620 <__adddf3+0xd0>
    c602:	f1a5 0520 	sub.w	r5, r5, #32
    c606:	f10e 0e20 	add.w	lr, lr, #32
    c60a:	2a01      	cmp	r2, #1
    c60c:	fa03 fc0e 	lsl.w	ip, r3, lr
    c610:	bf28      	it	cs
    c612:	f04c 0c02 	orrcs.w	ip, ip, #2
    c616:	fa43 f305 	asr.w	r3, r3, r5
    c61a:	18c0      	adds	r0, r0, r3
    c61c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c624:	d507      	bpl.n	c636 <__adddf3+0xe6>
    c626:	f04f 0e00 	mov.w	lr, #0
    c62a:	f1dc 0c00 	rsbs	ip, ip, #0
    c62e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c632:	eb6e 0101 	sbc.w	r1, lr, r1
    c636:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c63a:	d31b      	bcc.n	c674 <__adddf3+0x124>
    c63c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c640:	d30c      	bcc.n	c65c <__adddf3+0x10c>
    c642:	0849      	lsrs	r1, r1, #1
    c644:	ea5f 0030 	movs.w	r0, r0, rrx
    c648:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c64c:	f104 0401 	add.w	r4, r4, #1
    c650:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c654:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c658:	f080 809a 	bcs.w	c790 <__adddf3+0x240>
    c65c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c660:	bf08      	it	eq
    c662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c666:	f150 0000 	adcs.w	r0, r0, #0
    c66a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c66e:	ea41 0105 	orr.w	r1, r1, r5
    c672:	bd30      	pop	{r4, r5, pc}
    c674:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c678:	4140      	adcs	r0, r0
    c67a:	eb41 0101 	adc.w	r1, r1, r1
    c67e:	3c01      	subs	r4, #1
    c680:	bf28      	it	cs
    c682:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c686:	d2e9      	bcs.n	c65c <__adddf3+0x10c>
    c688:	f091 0f00 	teq	r1, #0
    c68c:	bf04      	itt	eq
    c68e:	4601      	moveq	r1, r0
    c690:	2000      	moveq	r0, #0
    c692:	fab1 f381 	clz	r3, r1
    c696:	bf08      	it	eq
    c698:	3320      	addeq	r3, #32
    c69a:	f1a3 030b 	sub.w	r3, r3, #11
    c69e:	f1b3 0220 	subs.w	r2, r3, #32
    c6a2:	da0c      	bge.n	c6be <__adddf3+0x16e>
    c6a4:	320c      	adds	r2, #12
    c6a6:	dd08      	ble.n	c6ba <__adddf3+0x16a>
    c6a8:	f102 0c14 	add.w	ip, r2, #20
    c6ac:	f1c2 020c 	rsb	r2, r2, #12
    c6b0:	fa01 f00c 	lsl.w	r0, r1, ip
    c6b4:	fa21 f102 	lsr.w	r1, r1, r2
    c6b8:	e00c      	b.n	c6d4 <__adddf3+0x184>
    c6ba:	f102 0214 	add.w	r2, r2, #20
    c6be:	bfd8      	it	le
    c6c0:	f1c2 0c20 	rsble	ip, r2, #32
    c6c4:	fa01 f102 	lsl.w	r1, r1, r2
    c6c8:	fa20 fc0c 	lsr.w	ip, r0, ip
    c6cc:	bfdc      	itt	le
    c6ce:	ea41 010c 	orrle.w	r1, r1, ip
    c6d2:	4090      	lslle	r0, r2
    c6d4:	1ae4      	subs	r4, r4, r3
    c6d6:	bfa2      	ittt	ge
    c6d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c6dc:	4329      	orrge	r1, r5
    c6de:	bd30      	popge	{r4, r5, pc}
    c6e0:	ea6f 0404 	mvn.w	r4, r4
    c6e4:	3c1f      	subs	r4, #31
    c6e6:	da1c      	bge.n	c722 <__adddf3+0x1d2>
    c6e8:	340c      	adds	r4, #12
    c6ea:	dc0e      	bgt.n	c70a <__adddf3+0x1ba>
    c6ec:	f104 0414 	add.w	r4, r4, #20
    c6f0:	f1c4 0220 	rsb	r2, r4, #32
    c6f4:	fa20 f004 	lsr.w	r0, r0, r4
    c6f8:	fa01 f302 	lsl.w	r3, r1, r2
    c6fc:	ea40 0003 	orr.w	r0, r0, r3
    c700:	fa21 f304 	lsr.w	r3, r1, r4
    c704:	ea45 0103 	orr.w	r1, r5, r3
    c708:	bd30      	pop	{r4, r5, pc}
    c70a:	f1c4 040c 	rsb	r4, r4, #12
    c70e:	f1c4 0220 	rsb	r2, r4, #32
    c712:	fa20 f002 	lsr.w	r0, r0, r2
    c716:	fa01 f304 	lsl.w	r3, r1, r4
    c71a:	ea40 0003 	orr.w	r0, r0, r3
    c71e:	4629      	mov	r1, r5
    c720:	bd30      	pop	{r4, r5, pc}
    c722:	fa21 f004 	lsr.w	r0, r1, r4
    c726:	4629      	mov	r1, r5
    c728:	bd30      	pop	{r4, r5, pc}
    c72a:	f094 0f00 	teq	r4, #0
    c72e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c732:	bf06      	itte	eq
    c734:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c738:	3401      	addeq	r4, #1
    c73a:	3d01      	subne	r5, #1
    c73c:	e74e      	b.n	c5dc <__adddf3+0x8c>
    c73e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c742:	bf18      	it	ne
    c744:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c748:	d029      	beq.n	c79e <__adddf3+0x24e>
    c74a:	ea94 0f05 	teq	r4, r5
    c74e:	bf08      	it	eq
    c750:	ea90 0f02 	teqeq	r0, r2
    c754:	d005      	beq.n	c762 <__adddf3+0x212>
    c756:	ea54 0c00 	orrs.w	ip, r4, r0
    c75a:	bf04      	itt	eq
    c75c:	4619      	moveq	r1, r3
    c75e:	4610      	moveq	r0, r2
    c760:	bd30      	pop	{r4, r5, pc}
    c762:	ea91 0f03 	teq	r1, r3
    c766:	bf1e      	ittt	ne
    c768:	2100      	movne	r1, #0
    c76a:	2000      	movne	r0, #0
    c76c:	bd30      	popne	{r4, r5, pc}
    c76e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c772:	d105      	bne.n	c780 <__adddf3+0x230>
    c774:	0040      	lsls	r0, r0, #1
    c776:	4149      	adcs	r1, r1
    c778:	bf28      	it	cs
    c77a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c77e:	bd30      	pop	{r4, r5, pc}
    c780:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c784:	bf3c      	itt	cc
    c786:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c78a:	bd30      	popcc	{r4, r5, pc}
    c78c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c790:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c794:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c798:	f04f 0000 	mov.w	r0, #0
    c79c:	bd30      	pop	{r4, r5, pc}
    c79e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c7a2:	bf1a      	itte	ne
    c7a4:	4619      	movne	r1, r3
    c7a6:	4610      	movne	r0, r2
    c7a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c7ac:	bf1c      	itt	ne
    c7ae:	460b      	movne	r3, r1
    c7b0:	4602      	movne	r2, r0
    c7b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c7b6:	bf06      	itte	eq
    c7b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c7bc:	ea91 0f03 	teqeq	r1, r3
    c7c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c7c4:	bd30      	pop	{r4, r5, pc}
    c7c6:	bf00      	nop

0000c7c8 <__aeabi_ui2d>:
    c7c8:	f090 0f00 	teq	r0, #0
    c7cc:	bf04      	itt	eq
    c7ce:	2100      	moveq	r1, #0
    c7d0:	4770      	bxeq	lr
    c7d2:	b530      	push	{r4, r5, lr}
    c7d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c7d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c7dc:	f04f 0500 	mov.w	r5, #0
    c7e0:	f04f 0100 	mov.w	r1, #0
    c7e4:	e750      	b.n	c688 <__adddf3+0x138>
    c7e6:	bf00      	nop

0000c7e8 <__aeabi_i2d>:
    c7e8:	f090 0f00 	teq	r0, #0
    c7ec:	bf04      	itt	eq
    c7ee:	2100      	moveq	r1, #0
    c7f0:	4770      	bxeq	lr
    c7f2:	b530      	push	{r4, r5, lr}
    c7f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c7f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c7fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c800:	bf48      	it	mi
    c802:	4240      	negmi	r0, r0
    c804:	f04f 0100 	mov.w	r1, #0
    c808:	e73e      	b.n	c688 <__adddf3+0x138>
    c80a:	bf00      	nop

0000c80c <__aeabi_f2d>:
    c80c:	0042      	lsls	r2, r0, #1
    c80e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c812:	ea4f 0131 	mov.w	r1, r1, rrx
    c816:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c81a:	bf1f      	itttt	ne
    c81c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c820:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c824:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c828:	4770      	bxne	lr
    c82a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c82e:	bf08      	it	eq
    c830:	4770      	bxeq	lr
    c832:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c836:	bf04      	itt	eq
    c838:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c83c:	4770      	bxeq	lr
    c83e:	b530      	push	{r4, r5, lr}
    c840:	f44f 7460 	mov.w	r4, #896	; 0x380
    c844:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c848:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c84c:	e71c      	b.n	c688 <__adddf3+0x138>
    c84e:	bf00      	nop

0000c850 <__aeabi_ul2d>:
    c850:	ea50 0201 	orrs.w	r2, r0, r1
    c854:	bf08      	it	eq
    c856:	4770      	bxeq	lr
    c858:	b530      	push	{r4, r5, lr}
    c85a:	f04f 0500 	mov.w	r5, #0
    c85e:	e00a      	b.n	c876 <__aeabi_l2d+0x16>

0000c860 <__aeabi_l2d>:
    c860:	ea50 0201 	orrs.w	r2, r0, r1
    c864:	bf08      	it	eq
    c866:	4770      	bxeq	lr
    c868:	b530      	push	{r4, r5, lr}
    c86a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c86e:	d502      	bpl.n	c876 <__aeabi_l2d+0x16>
    c870:	4240      	negs	r0, r0
    c872:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c876:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c87a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c87e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c882:	f43f aed8 	beq.w	c636 <__adddf3+0xe6>
    c886:	f04f 0203 	mov.w	r2, #3
    c88a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c88e:	bf18      	it	ne
    c890:	3203      	addne	r2, #3
    c892:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c896:	bf18      	it	ne
    c898:	3203      	addne	r2, #3
    c89a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c89e:	f1c2 0320 	rsb	r3, r2, #32
    c8a2:	fa00 fc03 	lsl.w	ip, r0, r3
    c8a6:	fa20 f002 	lsr.w	r0, r0, r2
    c8aa:	fa01 fe03 	lsl.w	lr, r1, r3
    c8ae:	ea40 000e 	orr.w	r0, r0, lr
    c8b2:	fa21 f102 	lsr.w	r1, r1, r2
    c8b6:	4414      	add	r4, r2
    c8b8:	e6bd      	b.n	c636 <__adddf3+0xe6>
    c8ba:	bf00      	nop

0000c8bc <__gedf2>:
    c8bc:	f04f 3cff 	mov.w	ip, #4294967295
    c8c0:	e006      	b.n	c8d0 <__cmpdf2+0x4>
    c8c2:	bf00      	nop

0000c8c4 <__ledf2>:
    c8c4:	f04f 0c01 	mov.w	ip, #1
    c8c8:	e002      	b.n	c8d0 <__cmpdf2+0x4>
    c8ca:	bf00      	nop

0000c8cc <__cmpdf2>:
    c8cc:	f04f 0c01 	mov.w	ip, #1
    c8d0:	f84d cd04 	str.w	ip, [sp, #-4]!
    c8d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c8d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c8dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c8e0:	bf18      	it	ne
    c8e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c8e6:	d01b      	beq.n	c920 <__cmpdf2+0x54>
    c8e8:	b001      	add	sp, #4
    c8ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c8ee:	bf0c      	ite	eq
    c8f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c8f4:	ea91 0f03 	teqne	r1, r3
    c8f8:	bf02      	ittt	eq
    c8fa:	ea90 0f02 	teqeq	r0, r2
    c8fe:	2000      	moveq	r0, #0
    c900:	4770      	bxeq	lr
    c902:	f110 0f00 	cmn.w	r0, #0
    c906:	ea91 0f03 	teq	r1, r3
    c90a:	bf58      	it	pl
    c90c:	4299      	cmppl	r1, r3
    c90e:	bf08      	it	eq
    c910:	4290      	cmpeq	r0, r2
    c912:	bf2c      	ite	cs
    c914:	17d8      	asrcs	r0, r3, #31
    c916:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c91a:	f040 0001 	orr.w	r0, r0, #1
    c91e:	4770      	bx	lr
    c920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c928:	d102      	bne.n	c930 <__cmpdf2+0x64>
    c92a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c92e:	d107      	bne.n	c940 <__cmpdf2+0x74>
    c930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c938:	d1d6      	bne.n	c8e8 <__cmpdf2+0x1c>
    c93a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c93e:	d0d3      	beq.n	c8e8 <__cmpdf2+0x1c>
    c940:	f85d 0b04 	ldr.w	r0, [sp], #4
    c944:	4770      	bx	lr
    c946:	bf00      	nop

0000c948 <__aeabi_cdrcmple>:
    c948:	4684      	mov	ip, r0
    c94a:	4610      	mov	r0, r2
    c94c:	4662      	mov	r2, ip
    c94e:	468c      	mov	ip, r1
    c950:	4619      	mov	r1, r3
    c952:	4663      	mov	r3, ip
    c954:	e000      	b.n	c958 <__aeabi_cdcmpeq>
    c956:	bf00      	nop

0000c958 <__aeabi_cdcmpeq>:
    c958:	b501      	push	{r0, lr}
    c95a:	f7ff ffb7 	bl	c8cc <__cmpdf2>
    c95e:	2800      	cmp	r0, #0
    c960:	bf48      	it	mi
    c962:	f110 0f00 	cmnmi.w	r0, #0
    c966:	bd01      	pop	{r0, pc}

0000c968 <__aeabi_dcmpeq>:
    c968:	f84d ed08 	str.w	lr, [sp, #-8]!
    c96c:	f7ff fff4 	bl	c958 <__aeabi_cdcmpeq>
    c970:	bf0c      	ite	eq
    c972:	2001      	moveq	r0, #1
    c974:	2000      	movne	r0, #0
    c976:	f85d fb08 	ldr.w	pc, [sp], #8
    c97a:	bf00      	nop

0000c97c <__aeabi_dcmplt>:
    c97c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c980:	f7ff ffea 	bl	c958 <__aeabi_cdcmpeq>
    c984:	bf34      	ite	cc
    c986:	2001      	movcc	r0, #1
    c988:	2000      	movcs	r0, #0
    c98a:	f85d fb08 	ldr.w	pc, [sp], #8
    c98e:	bf00      	nop

0000c990 <__aeabi_dcmple>:
    c990:	f84d ed08 	str.w	lr, [sp, #-8]!
    c994:	f7ff ffe0 	bl	c958 <__aeabi_cdcmpeq>
    c998:	bf94      	ite	ls
    c99a:	2001      	movls	r0, #1
    c99c:	2000      	movhi	r0, #0
    c99e:	f85d fb08 	ldr.w	pc, [sp], #8
    c9a2:	bf00      	nop

0000c9a4 <__aeabi_dcmpge>:
    c9a4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c9a8:	f7ff ffce 	bl	c948 <__aeabi_cdrcmple>
    c9ac:	bf94      	ite	ls
    c9ae:	2001      	movls	r0, #1
    c9b0:	2000      	movhi	r0, #0
    c9b2:	f85d fb08 	ldr.w	pc, [sp], #8
    c9b6:	bf00      	nop

0000c9b8 <__aeabi_dcmpgt>:
    c9b8:	f84d ed08 	str.w	lr, [sp, #-8]!
    c9bc:	f7ff ffc4 	bl	c948 <__aeabi_cdrcmple>
    c9c0:	bf34      	ite	cc
    c9c2:	2001      	movcc	r0, #1
    c9c4:	2000      	movcs	r0, #0
    c9c6:	f85d fb08 	ldr.w	pc, [sp], #8
    c9ca:	bf00      	nop

0000c9cc <__aeabi_dcmpun>:
    c9cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c9d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c9d4:	d102      	bne.n	c9dc <__aeabi_dcmpun+0x10>
    c9d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c9da:	d10a      	bne.n	c9f2 <__aeabi_dcmpun+0x26>
    c9dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c9e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c9e4:	d102      	bne.n	c9ec <__aeabi_dcmpun+0x20>
    c9e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c9ea:	d102      	bne.n	c9f2 <__aeabi_dcmpun+0x26>
    c9ec:	f04f 0000 	mov.w	r0, #0
    c9f0:	4770      	bx	lr
    c9f2:	f04f 0001 	mov.w	r0, #1
    c9f6:	4770      	bx	lr

0000c9f8 <__aeabi_d2uiz>:
    c9f8:	004a      	lsls	r2, r1, #1
    c9fa:	d211      	bcs.n	ca20 <__aeabi_d2uiz+0x28>
    c9fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    ca00:	d211      	bcs.n	ca26 <__aeabi_d2uiz+0x2e>
    ca02:	d50d      	bpl.n	ca20 <__aeabi_d2uiz+0x28>
    ca04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    ca08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    ca0c:	d40e      	bmi.n	ca2c <__aeabi_d2uiz+0x34>
    ca0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ca12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ca16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    ca1a:	fa23 f002 	lsr.w	r0, r3, r2
    ca1e:	4770      	bx	lr
    ca20:	f04f 0000 	mov.w	r0, #0
    ca24:	4770      	bx	lr
    ca26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    ca2a:	d102      	bne.n	ca32 <__aeabi_d2uiz+0x3a>
    ca2c:	f04f 30ff 	mov.w	r0, #4294967295
    ca30:	4770      	bx	lr
    ca32:	f04f 0000 	mov.w	r0, #0
    ca36:	4770      	bx	lr

0000ca38 <__aeabi_frsub>:
    ca38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    ca3c:	e002      	b.n	ca44 <__addsf3>
    ca3e:	bf00      	nop

0000ca40 <__aeabi_fsub>:
    ca40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000ca44 <__addsf3>:
    ca44:	0042      	lsls	r2, r0, #1
    ca46:	bf1f      	itttt	ne
    ca48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    ca4c:	ea92 0f03 	teqne	r2, r3
    ca50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    ca54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    ca58:	d06a      	beq.n	cb30 <__addsf3+0xec>
    ca5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    ca5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    ca62:	bfc1      	itttt	gt
    ca64:	18d2      	addgt	r2, r2, r3
    ca66:	4041      	eorgt	r1, r0
    ca68:	4048      	eorgt	r0, r1
    ca6a:	4041      	eorgt	r1, r0
    ca6c:	bfb8      	it	lt
    ca6e:	425b      	neglt	r3, r3
    ca70:	2b19      	cmp	r3, #25
    ca72:	bf88      	it	hi
    ca74:	4770      	bxhi	lr
    ca76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    ca7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    ca7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ca82:	bf18      	it	ne
    ca84:	4240      	negne	r0, r0
    ca86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ca8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    ca8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ca92:	bf18      	it	ne
    ca94:	4249      	negne	r1, r1
    ca96:	ea92 0f03 	teq	r2, r3
    ca9a:	d03f      	beq.n	cb1c <__addsf3+0xd8>
    ca9c:	f1a2 0201 	sub.w	r2, r2, #1
    caa0:	fa41 fc03 	asr.w	ip, r1, r3
    caa4:	eb10 000c 	adds.w	r0, r0, ip
    caa8:	f1c3 0320 	rsb	r3, r3, #32
    caac:	fa01 f103 	lsl.w	r1, r1, r3
    cab0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    cab4:	d502      	bpl.n	cabc <__addsf3+0x78>
    cab6:	4249      	negs	r1, r1
    cab8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    cabc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cac0:	d313      	bcc.n	caea <__addsf3+0xa6>
    cac2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    cac6:	d306      	bcc.n	cad6 <__addsf3+0x92>
    cac8:	0840      	lsrs	r0, r0, #1
    caca:	ea4f 0131 	mov.w	r1, r1, rrx
    cace:	f102 0201 	add.w	r2, r2, #1
    cad2:	2afe      	cmp	r2, #254	; 0xfe
    cad4:	d251      	bcs.n	cb7a <__addsf3+0x136>
    cad6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    cada:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    cade:	bf08      	it	eq
    cae0:	f020 0001 	biceq.w	r0, r0, #1
    cae4:	ea40 0003 	orr.w	r0, r0, r3
    cae8:	4770      	bx	lr
    caea:	0049      	lsls	r1, r1, #1
    caec:	eb40 0000 	adc.w	r0, r0, r0
    caf0:	3a01      	subs	r2, #1
    caf2:	bf28      	it	cs
    caf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    caf8:	d2ed      	bcs.n	cad6 <__addsf3+0x92>
    cafa:	fab0 fc80 	clz	ip, r0
    cafe:	f1ac 0c08 	sub.w	ip, ip, #8
    cb02:	ebb2 020c 	subs.w	r2, r2, ip
    cb06:	fa00 f00c 	lsl.w	r0, r0, ip
    cb0a:	bfaa      	itet	ge
    cb0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    cb10:	4252      	neglt	r2, r2
    cb12:	4318      	orrge	r0, r3
    cb14:	bfbc      	itt	lt
    cb16:	40d0      	lsrlt	r0, r2
    cb18:	4318      	orrlt	r0, r3
    cb1a:	4770      	bx	lr
    cb1c:	f092 0f00 	teq	r2, #0
    cb20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    cb24:	bf06      	itte	eq
    cb26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    cb2a:	3201      	addeq	r2, #1
    cb2c:	3b01      	subne	r3, #1
    cb2e:	e7b5      	b.n	ca9c <__addsf3+0x58>
    cb30:	ea4f 0341 	mov.w	r3, r1, lsl #1
    cb34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    cb38:	bf18      	it	ne
    cb3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    cb3e:	d021      	beq.n	cb84 <__addsf3+0x140>
    cb40:	ea92 0f03 	teq	r2, r3
    cb44:	d004      	beq.n	cb50 <__addsf3+0x10c>
    cb46:	f092 0f00 	teq	r2, #0
    cb4a:	bf08      	it	eq
    cb4c:	4608      	moveq	r0, r1
    cb4e:	4770      	bx	lr
    cb50:	ea90 0f01 	teq	r0, r1
    cb54:	bf1c      	itt	ne
    cb56:	2000      	movne	r0, #0
    cb58:	4770      	bxne	lr
    cb5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    cb5e:	d104      	bne.n	cb6a <__addsf3+0x126>
    cb60:	0040      	lsls	r0, r0, #1
    cb62:	bf28      	it	cs
    cb64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    cb68:	4770      	bx	lr
    cb6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    cb6e:	bf3c      	itt	cc
    cb70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    cb74:	4770      	bxcc	lr
    cb76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    cb7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    cb7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cb82:	4770      	bx	lr
    cb84:	ea7f 6222 	mvns.w	r2, r2, asr #24
    cb88:	bf16      	itet	ne
    cb8a:	4608      	movne	r0, r1
    cb8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    cb90:	4601      	movne	r1, r0
    cb92:	0242      	lsls	r2, r0, #9
    cb94:	bf06      	itte	eq
    cb96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    cb9a:	ea90 0f01 	teqeq	r0, r1
    cb9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    cba2:	4770      	bx	lr

0000cba4 <__aeabi_ui2f>:
    cba4:	f04f 0300 	mov.w	r3, #0
    cba8:	e004      	b.n	cbb4 <__aeabi_i2f+0x8>
    cbaa:	bf00      	nop

0000cbac <__aeabi_i2f>:
    cbac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    cbb0:	bf48      	it	mi
    cbb2:	4240      	negmi	r0, r0
    cbb4:	ea5f 0c00 	movs.w	ip, r0
    cbb8:	bf08      	it	eq
    cbba:	4770      	bxeq	lr
    cbbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    cbc0:	4601      	mov	r1, r0
    cbc2:	f04f 0000 	mov.w	r0, #0
    cbc6:	e01c      	b.n	cc02 <__aeabi_l2f+0x2a>

0000cbc8 <__aeabi_ul2f>:
    cbc8:	ea50 0201 	orrs.w	r2, r0, r1
    cbcc:	bf08      	it	eq
    cbce:	4770      	bxeq	lr
    cbd0:	f04f 0300 	mov.w	r3, #0
    cbd4:	e00a      	b.n	cbec <__aeabi_l2f+0x14>
    cbd6:	bf00      	nop

0000cbd8 <__aeabi_l2f>:
    cbd8:	ea50 0201 	orrs.w	r2, r0, r1
    cbdc:	bf08      	it	eq
    cbde:	4770      	bxeq	lr
    cbe0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    cbe4:	d502      	bpl.n	cbec <__aeabi_l2f+0x14>
    cbe6:	4240      	negs	r0, r0
    cbe8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cbec:	ea5f 0c01 	movs.w	ip, r1
    cbf0:	bf02      	ittt	eq
    cbf2:	4684      	moveq	ip, r0
    cbf4:	4601      	moveq	r1, r0
    cbf6:	2000      	moveq	r0, #0
    cbf8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    cbfc:	bf08      	it	eq
    cbfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    cc02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    cc06:	fabc f28c 	clz	r2, ip
    cc0a:	3a08      	subs	r2, #8
    cc0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    cc10:	db10      	blt.n	cc34 <__aeabi_l2f+0x5c>
    cc12:	fa01 fc02 	lsl.w	ip, r1, r2
    cc16:	4463      	add	r3, ip
    cc18:	fa00 fc02 	lsl.w	ip, r0, r2
    cc1c:	f1c2 0220 	rsb	r2, r2, #32
    cc20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    cc24:	fa20 f202 	lsr.w	r2, r0, r2
    cc28:	eb43 0002 	adc.w	r0, r3, r2
    cc2c:	bf08      	it	eq
    cc2e:	f020 0001 	biceq.w	r0, r0, #1
    cc32:	4770      	bx	lr
    cc34:	f102 0220 	add.w	r2, r2, #32
    cc38:	fa01 fc02 	lsl.w	ip, r1, r2
    cc3c:	f1c2 0220 	rsb	r2, r2, #32
    cc40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    cc44:	fa21 f202 	lsr.w	r2, r1, r2
    cc48:	eb43 0002 	adc.w	r0, r3, r2
    cc4c:	bf08      	it	eq
    cc4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    cc52:	4770      	bx	lr

0000cc54 <__aeabi_fmul>:
    cc54:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cc58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    cc5c:	bf1e      	ittt	ne
    cc5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    cc62:	ea92 0f0c 	teqne	r2, ip
    cc66:	ea93 0f0c 	teqne	r3, ip
    cc6a:	d06f      	beq.n	cd4c <__aeabi_fmul+0xf8>
    cc6c:	441a      	add	r2, r3
    cc6e:	ea80 0c01 	eor.w	ip, r0, r1
    cc72:	0240      	lsls	r0, r0, #9
    cc74:	bf18      	it	ne
    cc76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    cc7a:	d01e      	beq.n	ccba <__aeabi_fmul+0x66>
    cc7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    cc80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    cc84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    cc88:	fba0 3101 	umull	r3, r1, r0, r1
    cc8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    cc90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    cc94:	bf3e      	ittt	cc
    cc96:	0049      	lslcc	r1, r1, #1
    cc98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    cc9c:	005b      	lslcc	r3, r3, #1
    cc9e:	ea40 0001 	orr.w	r0, r0, r1
    cca2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    cca6:	2afd      	cmp	r2, #253	; 0xfd
    cca8:	d81d      	bhi.n	cce6 <__aeabi_fmul+0x92>
    ccaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    ccae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ccb2:	bf08      	it	eq
    ccb4:	f020 0001 	biceq.w	r0, r0, #1
    ccb8:	4770      	bx	lr
    ccba:	f090 0f00 	teq	r0, #0
    ccbe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    ccc2:	bf08      	it	eq
    ccc4:	0249      	lsleq	r1, r1, #9
    ccc6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    ccca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    ccce:	3a7f      	subs	r2, #127	; 0x7f
    ccd0:	bfc2      	ittt	gt
    ccd2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    ccd6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    ccda:	4770      	bxgt	lr
    ccdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cce0:	f04f 0300 	mov.w	r3, #0
    cce4:	3a01      	subs	r2, #1
    cce6:	dc5d      	bgt.n	cda4 <__aeabi_fmul+0x150>
    cce8:	f112 0f19 	cmn.w	r2, #25
    ccec:	bfdc      	itt	le
    ccee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    ccf2:	4770      	bxle	lr
    ccf4:	f1c2 0200 	rsb	r2, r2, #0
    ccf8:	0041      	lsls	r1, r0, #1
    ccfa:	fa21 f102 	lsr.w	r1, r1, r2
    ccfe:	f1c2 0220 	rsb	r2, r2, #32
    cd02:	fa00 fc02 	lsl.w	ip, r0, r2
    cd06:	ea5f 0031 	movs.w	r0, r1, rrx
    cd0a:	f140 0000 	adc.w	r0, r0, #0
    cd0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    cd12:	bf08      	it	eq
    cd14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    cd18:	4770      	bx	lr
    cd1a:	f092 0f00 	teq	r2, #0
    cd1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    cd22:	bf02      	ittt	eq
    cd24:	0040      	lsleq	r0, r0, #1
    cd26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    cd2a:	3a01      	subeq	r2, #1
    cd2c:	d0f9      	beq.n	cd22 <__aeabi_fmul+0xce>
    cd2e:	ea40 000c 	orr.w	r0, r0, ip
    cd32:	f093 0f00 	teq	r3, #0
    cd36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    cd3a:	bf02      	ittt	eq
    cd3c:	0049      	lsleq	r1, r1, #1
    cd3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    cd42:	3b01      	subeq	r3, #1
    cd44:	d0f9      	beq.n	cd3a <__aeabi_fmul+0xe6>
    cd46:	ea41 010c 	orr.w	r1, r1, ip
    cd4a:	e78f      	b.n	cc6c <__aeabi_fmul+0x18>
    cd4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    cd50:	ea92 0f0c 	teq	r2, ip
    cd54:	bf18      	it	ne
    cd56:	ea93 0f0c 	teqne	r3, ip
    cd5a:	d00a      	beq.n	cd72 <__aeabi_fmul+0x11e>
    cd5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    cd60:	bf18      	it	ne
    cd62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    cd66:	d1d8      	bne.n	cd1a <__aeabi_fmul+0xc6>
    cd68:	ea80 0001 	eor.w	r0, r0, r1
    cd6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    cd70:	4770      	bx	lr
    cd72:	f090 0f00 	teq	r0, #0
    cd76:	bf17      	itett	ne
    cd78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    cd7c:	4608      	moveq	r0, r1
    cd7e:	f091 0f00 	teqne	r1, #0
    cd82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    cd86:	d014      	beq.n	cdb2 <__aeabi_fmul+0x15e>
    cd88:	ea92 0f0c 	teq	r2, ip
    cd8c:	d101      	bne.n	cd92 <__aeabi_fmul+0x13e>
    cd8e:	0242      	lsls	r2, r0, #9
    cd90:	d10f      	bne.n	cdb2 <__aeabi_fmul+0x15e>
    cd92:	ea93 0f0c 	teq	r3, ip
    cd96:	d103      	bne.n	cda0 <__aeabi_fmul+0x14c>
    cd98:	024b      	lsls	r3, r1, #9
    cd9a:	bf18      	it	ne
    cd9c:	4608      	movne	r0, r1
    cd9e:	d108      	bne.n	cdb2 <__aeabi_fmul+0x15e>
    cda0:	ea80 0001 	eor.w	r0, r0, r1
    cda4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    cda8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cdac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cdb0:	4770      	bx	lr
    cdb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cdb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    cdba:	4770      	bx	lr

0000cdbc <__aeabi_fdiv>:
    cdbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cdc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    cdc4:	bf1e      	ittt	ne
    cdc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    cdca:	ea92 0f0c 	teqne	r2, ip
    cdce:	ea93 0f0c 	teqne	r3, ip
    cdd2:	d069      	beq.n	cea8 <__aeabi_fdiv+0xec>
    cdd4:	eba2 0203 	sub.w	r2, r2, r3
    cdd8:	ea80 0c01 	eor.w	ip, r0, r1
    cddc:	0249      	lsls	r1, r1, #9
    cdde:	ea4f 2040 	mov.w	r0, r0, lsl #9
    cde2:	d037      	beq.n	ce54 <__aeabi_fdiv+0x98>
    cde4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cde8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    cdec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    cdf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    cdf4:	428b      	cmp	r3, r1
    cdf6:	bf38      	it	cc
    cdf8:	005b      	lslcc	r3, r3, #1
    cdfa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    cdfe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    ce02:	428b      	cmp	r3, r1
    ce04:	bf24      	itt	cs
    ce06:	1a5b      	subcs	r3, r3, r1
    ce08:	ea40 000c 	orrcs.w	r0, r0, ip
    ce0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    ce10:	bf24      	itt	cs
    ce12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    ce16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ce1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    ce1e:	bf24      	itt	cs
    ce20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    ce24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ce28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    ce2c:	bf24      	itt	cs
    ce2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    ce32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ce36:	011b      	lsls	r3, r3, #4
    ce38:	bf18      	it	ne
    ce3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    ce3e:	d1e0      	bne.n	ce02 <__aeabi_fdiv+0x46>
    ce40:	2afd      	cmp	r2, #253	; 0xfd
    ce42:	f63f af50 	bhi.w	cce6 <__aeabi_fmul+0x92>
    ce46:	428b      	cmp	r3, r1
    ce48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ce4c:	bf08      	it	eq
    ce4e:	f020 0001 	biceq.w	r0, r0, #1
    ce52:	4770      	bx	lr
    ce54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    ce58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    ce5c:	327f      	adds	r2, #127	; 0x7f
    ce5e:	bfc2      	ittt	gt
    ce60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    ce64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    ce68:	4770      	bxgt	lr
    ce6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    ce6e:	f04f 0300 	mov.w	r3, #0
    ce72:	3a01      	subs	r2, #1
    ce74:	e737      	b.n	cce6 <__aeabi_fmul+0x92>
    ce76:	f092 0f00 	teq	r2, #0
    ce7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    ce7e:	bf02      	ittt	eq
    ce80:	0040      	lsleq	r0, r0, #1
    ce82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    ce86:	3a01      	subeq	r2, #1
    ce88:	d0f9      	beq.n	ce7e <__aeabi_fdiv+0xc2>
    ce8a:	ea40 000c 	orr.w	r0, r0, ip
    ce8e:	f093 0f00 	teq	r3, #0
    ce92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    ce96:	bf02      	ittt	eq
    ce98:	0049      	lsleq	r1, r1, #1
    ce9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    ce9e:	3b01      	subeq	r3, #1
    cea0:	d0f9      	beq.n	ce96 <__aeabi_fdiv+0xda>
    cea2:	ea41 010c 	orr.w	r1, r1, ip
    cea6:	e795      	b.n	cdd4 <__aeabi_fdiv+0x18>
    cea8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    ceac:	ea92 0f0c 	teq	r2, ip
    ceb0:	d108      	bne.n	cec4 <__aeabi_fdiv+0x108>
    ceb2:	0242      	lsls	r2, r0, #9
    ceb4:	f47f af7d 	bne.w	cdb2 <__aeabi_fmul+0x15e>
    ceb8:	ea93 0f0c 	teq	r3, ip
    cebc:	f47f af70 	bne.w	cda0 <__aeabi_fmul+0x14c>
    cec0:	4608      	mov	r0, r1
    cec2:	e776      	b.n	cdb2 <__aeabi_fmul+0x15e>
    cec4:	ea93 0f0c 	teq	r3, ip
    cec8:	d104      	bne.n	ced4 <__aeabi_fdiv+0x118>
    ceca:	024b      	lsls	r3, r1, #9
    cecc:	f43f af4c 	beq.w	cd68 <__aeabi_fmul+0x114>
    ced0:	4608      	mov	r0, r1
    ced2:	e76e      	b.n	cdb2 <__aeabi_fmul+0x15e>
    ced4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    ced8:	bf18      	it	ne
    ceda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    cede:	d1ca      	bne.n	ce76 <__aeabi_fdiv+0xba>
    cee0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    cee4:	f47f af5c 	bne.w	cda0 <__aeabi_fmul+0x14c>
    cee8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    ceec:	f47f af3c 	bne.w	cd68 <__aeabi_fmul+0x114>
    cef0:	e75f      	b.n	cdb2 <__aeabi_fmul+0x15e>
    cef2:	bf00      	nop

0000cef4 <__gesf2>:
    cef4:	f04f 3cff 	mov.w	ip, #4294967295
    cef8:	e006      	b.n	cf08 <__cmpsf2+0x4>
    cefa:	bf00      	nop

0000cefc <__lesf2>:
    cefc:	f04f 0c01 	mov.w	ip, #1
    cf00:	e002      	b.n	cf08 <__cmpsf2+0x4>
    cf02:	bf00      	nop

0000cf04 <__cmpsf2>:
    cf04:	f04f 0c01 	mov.w	ip, #1
    cf08:	f84d cd04 	str.w	ip, [sp, #-4]!
    cf0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    cf10:	ea4f 0341 	mov.w	r3, r1, lsl #1
    cf14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    cf18:	bf18      	it	ne
    cf1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    cf1e:	d011      	beq.n	cf44 <__cmpsf2+0x40>
    cf20:	b001      	add	sp, #4
    cf22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    cf26:	bf18      	it	ne
    cf28:	ea90 0f01 	teqne	r0, r1
    cf2c:	bf58      	it	pl
    cf2e:	ebb2 0003 	subspl.w	r0, r2, r3
    cf32:	bf88      	it	hi
    cf34:	17c8      	asrhi	r0, r1, #31
    cf36:	bf38      	it	cc
    cf38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    cf3c:	bf18      	it	ne
    cf3e:	f040 0001 	orrne.w	r0, r0, #1
    cf42:	4770      	bx	lr
    cf44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    cf48:	d102      	bne.n	cf50 <__cmpsf2+0x4c>
    cf4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    cf4e:	d105      	bne.n	cf5c <__cmpsf2+0x58>
    cf50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    cf54:	d1e4      	bne.n	cf20 <__cmpsf2+0x1c>
    cf56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    cf5a:	d0e1      	beq.n	cf20 <__cmpsf2+0x1c>
    cf5c:	f85d 0b04 	ldr.w	r0, [sp], #4
    cf60:	4770      	bx	lr
    cf62:	bf00      	nop

0000cf64 <__aeabi_cfrcmple>:
    cf64:	4684      	mov	ip, r0
    cf66:	4608      	mov	r0, r1
    cf68:	4661      	mov	r1, ip
    cf6a:	e7ff      	b.n	cf6c <__aeabi_cfcmpeq>

0000cf6c <__aeabi_cfcmpeq>:
    cf6c:	b50f      	push	{r0, r1, r2, r3, lr}
    cf6e:	f7ff ffc9 	bl	cf04 <__cmpsf2>
    cf72:	2800      	cmp	r0, #0
    cf74:	bf48      	it	mi
    cf76:	f110 0f00 	cmnmi.w	r0, #0
    cf7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000cf7c <__aeabi_fcmpeq>:
    cf7c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cf80:	f7ff fff4 	bl	cf6c <__aeabi_cfcmpeq>
    cf84:	bf0c      	ite	eq
    cf86:	2001      	moveq	r0, #1
    cf88:	2000      	movne	r0, #0
    cf8a:	f85d fb08 	ldr.w	pc, [sp], #8
    cf8e:	bf00      	nop

0000cf90 <__aeabi_fcmplt>:
    cf90:	f84d ed08 	str.w	lr, [sp, #-8]!
    cf94:	f7ff ffea 	bl	cf6c <__aeabi_cfcmpeq>
    cf98:	bf34      	ite	cc
    cf9a:	2001      	movcc	r0, #1
    cf9c:	2000      	movcs	r0, #0
    cf9e:	f85d fb08 	ldr.w	pc, [sp], #8
    cfa2:	bf00      	nop

0000cfa4 <__aeabi_fcmple>:
    cfa4:	f84d ed08 	str.w	lr, [sp, #-8]!
    cfa8:	f7ff ffe0 	bl	cf6c <__aeabi_cfcmpeq>
    cfac:	bf94      	ite	ls
    cfae:	2001      	movls	r0, #1
    cfb0:	2000      	movhi	r0, #0
    cfb2:	f85d fb08 	ldr.w	pc, [sp], #8
    cfb6:	bf00      	nop

0000cfb8 <__aeabi_fcmpge>:
    cfb8:	f84d ed08 	str.w	lr, [sp, #-8]!
    cfbc:	f7ff ffd2 	bl	cf64 <__aeabi_cfrcmple>
    cfc0:	bf94      	ite	ls
    cfc2:	2001      	movls	r0, #1
    cfc4:	2000      	movhi	r0, #0
    cfc6:	f85d fb08 	ldr.w	pc, [sp], #8
    cfca:	bf00      	nop

0000cfcc <__aeabi_fcmpgt>:
    cfcc:	f84d ed08 	str.w	lr, [sp, #-8]!
    cfd0:	f7ff ffc8 	bl	cf64 <__aeabi_cfrcmple>
    cfd4:	bf34      	ite	cc
    cfd6:	2001      	movcc	r0, #1
    cfd8:	2000      	movcs	r0, #0
    cfda:	f85d fb08 	ldr.w	pc, [sp], #8
    cfde:	bf00      	nop

0000cfe0 <__aeabi_f2iz>:
    cfe0:	ea4f 0240 	mov.w	r2, r0, lsl #1
    cfe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    cfe8:	d30f      	bcc.n	d00a <__aeabi_f2iz+0x2a>
    cfea:	f04f 039e 	mov.w	r3, #158	; 0x9e
    cfee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    cff2:	d90d      	bls.n	d010 <__aeabi_f2iz+0x30>
    cff4:	ea4f 2300 	mov.w	r3, r0, lsl #8
    cff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cffc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    d000:	fa23 f002 	lsr.w	r0, r3, r2
    d004:	bf18      	it	ne
    d006:	4240      	negne	r0, r0
    d008:	4770      	bx	lr
    d00a:	f04f 0000 	mov.w	r0, #0
    d00e:	4770      	bx	lr
    d010:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d014:	d101      	bne.n	d01a <__aeabi_f2iz+0x3a>
    d016:	0242      	lsls	r2, r0, #9
    d018:	d105      	bne.n	d026 <__aeabi_f2iz+0x46>
    d01a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    d01e:	bf08      	it	eq
    d020:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d024:	4770      	bx	lr
    d026:	f04f 0000 	mov.w	r0, #0
    d02a:	4770      	bx	lr

0000d02c <__aeabi_f2uiz>:
    d02c:	0042      	lsls	r2, r0, #1
    d02e:	d20e      	bcs.n	d04e <__aeabi_f2uiz+0x22>
    d030:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d034:	d30b      	bcc.n	d04e <__aeabi_f2uiz+0x22>
    d036:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d03a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d03e:	d409      	bmi.n	d054 <__aeabi_f2uiz+0x28>
    d040:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d048:	fa23 f002 	lsr.w	r0, r3, r2
    d04c:	4770      	bx	lr
    d04e:	f04f 0000 	mov.w	r0, #0
    d052:	4770      	bx	lr
    d054:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d058:	d101      	bne.n	d05e <__aeabi_f2uiz+0x32>
    d05a:	0242      	lsls	r2, r0, #9
    d05c:	d102      	bne.n	d064 <__aeabi_f2uiz+0x38>
    d05e:	f04f 30ff 	mov.w	r0, #4294967295
    d062:	4770      	bx	lr
    d064:	f04f 0000 	mov.w	r0, #0
    d068:	4770      	bx	lr
    d06a:	bf00      	nop

0000d06c <malloc>:
    d06c:	4b02      	ldr	r3, [pc, #8]	; (d078 <malloc+0xc>)
    d06e:	4601      	mov	r1, r0
    d070:	6818      	ldr	r0, [r3, #0]
    d072:	f000 b803 	b.w	d07c <_malloc_r>
    d076:	bf00      	nop
    d078:	1fff9160 	.word	0x1fff9160

0000d07c <_malloc_r>:
    d07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d080:	f101 060b 	add.w	r6, r1, #11
    d084:	2e16      	cmp	r6, #22
    d086:	b083      	sub	sp, #12
    d088:	4604      	mov	r4, r0
    d08a:	d824      	bhi.n	d0d6 <_malloc_r+0x5a>
    d08c:	2910      	cmp	r1, #16
    d08e:	f200 80ba 	bhi.w	d206 <_malloc_r+0x18a>
    d092:	f000 faa3 	bl	d5dc <__malloc_lock>
    d096:	2610      	movs	r6, #16
    d098:	2218      	movs	r2, #24
    d09a:	2002      	movs	r0, #2
    d09c:	4fb5      	ldr	r7, [pc, #724]	; (d374 <_malloc_r+0x2f8>)
    d09e:	443a      	add	r2, r7
    d0a0:	f1a2 0108 	sub.w	r1, r2, #8
    d0a4:	6853      	ldr	r3, [r2, #4]
    d0a6:	428b      	cmp	r3, r1
    d0a8:	f000 80ba 	beq.w	d220 <_malloc_r+0x1a4>
    d0ac:	685a      	ldr	r2, [r3, #4]
    d0ae:	68d9      	ldr	r1, [r3, #12]
    d0b0:	f022 0203 	bic.w	r2, r2, #3
    d0b4:	441a      	add	r2, r3
    d0b6:	689d      	ldr	r5, [r3, #8]
    d0b8:	60e9      	str	r1, [r5, #12]
    d0ba:	608d      	str	r5, [r1, #8]
    d0bc:	6851      	ldr	r1, [r2, #4]
    d0be:	f041 0101 	orr.w	r1, r1, #1
    d0c2:	4620      	mov	r0, r4
    d0c4:	6051      	str	r1, [r2, #4]
    d0c6:	f103 0508 	add.w	r5, r3, #8
    d0ca:	f000 fa8d 	bl	d5e8 <__malloc_unlock>
    d0ce:	4628      	mov	r0, r5
    d0d0:	b003      	add	sp, #12
    d0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0d6:	f036 0607 	bics.w	r6, r6, #7
    d0da:	f100 8094 	bmi.w	d206 <_malloc_r+0x18a>
    d0de:	42b1      	cmp	r1, r6
    d0e0:	f200 8091 	bhi.w	d206 <_malloc_r+0x18a>
    d0e4:	f000 fa7a 	bl	d5dc <__malloc_lock>
    d0e8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    d0ec:	f0c0 819a 	bcc.w	d424 <_malloc_r+0x3a8>
    d0f0:	0a73      	lsrs	r3, r6, #9
    d0f2:	f000 808f 	beq.w	d214 <_malloc_r+0x198>
    d0f6:	2b04      	cmp	r3, #4
    d0f8:	f200 816f 	bhi.w	d3da <_malloc_r+0x35e>
    d0fc:	09b3      	lsrs	r3, r6, #6
    d0fe:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d102:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    d106:	00c3      	lsls	r3, r0, #3
    d108:	4f9a      	ldr	r7, [pc, #616]	; (d374 <_malloc_r+0x2f8>)
    d10a:	443b      	add	r3, r7
    d10c:	f1a3 0508 	sub.w	r5, r3, #8
    d110:	685b      	ldr	r3, [r3, #4]
    d112:	429d      	cmp	r5, r3
    d114:	d106      	bne.n	d124 <_malloc_r+0xa8>
    d116:	e00c      	b.n	d132 <_malloc_r+0xb6>
    d118:	2900      	cmp	r1, #0
    d11a:	f280 8127 	bge.w	d36c <_malloc_r+0x2f0>
    d11e:	68db      	ldr	r3, [r3, #12]
    d120:	429d      	cmp	r5, r3
    d122:	d006      	beq.n	d132 <_malloc_r+0xb6>
    d124:	685a      	ldr	r2, [r3, #4]
    d126:	f022 0203 	bic.w	r2, r2, #3
    d12a:	1b91      	subs	r1, r2, r6
    d12c:	290f      	cmp	r1, #15
    d12e:	ddf3      	ble.n	d118 <_malloc_r+0x9c>
    d130:	4660      	mov	r0, ip
    d132:	693d      	ldr	r5, [r7, #16]
    d134:	f8df c240 	ldr.w	ip, [pc, #576]	; d378 <_malloc_r+0x2fc>
    d138:	4565      	cmp	r5, ip
    d13a:	d07c      	beq.n	d236 <_malloc_r+0x1ba>
    d13c:	686a      	ldr	r2, [r5, #4]
    d13e:	f022 0203 	bic.w	r2, r2, #3
    d142:	1b93      	subs	r3, r2, r6
    d144:	2b0f      	cmp	r3, #15
    d146:	f300 817b 	bgt.w	d440 <_malloc_r+0x3c4>
    d14a:	2b00      	cmp	r3, #0
    d14c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    d150:	f280 816c 	bge.w	d42c <_malloc_r+0x3b0>
    d154:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    d158:	f080 811a 	bcs.w	d390 <_malloc_r+0x314>
    d15c:	08d3      	lsrs	r3, r2, #3
    d15e:	6879      	ldr	r1, [r7, #4]
    d160:	3301      	adds	r3, #1
    d162:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    d166:	2201      	movs	r2, #1
    d168:	fa02 f20e 	lsl.w	r2, r2, lr
    d16c:	430a      	orrs	r2, r1
    d16e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    d172:	f8c5 e008 	str.w	lr, [r5, #8]
    d176:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    d17a:	3908      	subs	r1, #8
    d17c:	60e9      	str	r1, [r5, #12]
    d17e:	607a      	str	r2, [r7, #4]
    d180:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d184:	f8ce 500c 	str.w	r5, [lr, #12]
    d188:	1083      	asrs	r3, r0, #2
    d18a:	2101      	movs	r1, #1
    d18c:	4099      	lsls	r1, r3
    d18e:	4291      	cmp	r1, r2
    d190:	d857      	bhi.n	d242 <_malloc_r+0x1c6>
    d192:	4211      	tst	r1, r2
    d194:	d106      	bne.n	d1a4 <_malloc_r+0x128>
    d196:	f020 0003 	bic.w	r0, r0, #3
    d19a:	0049      	lsls	r1, r1, #1
    d19c:	4211      	tst	r1, r2
    d19e:	f100 0004 	add.w	r0, r0, #4
    d1a2:	d0fa      	beq.n	d19a <_malloc_r+0x11e>
    d1a4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    d1a8:	464d      	mov	r5, r9
    d1aa:	4686      	mov	lr, r0
    d1ac:	f8d5 800c 	ldr.w	r8, [r5, #12]
    d1b0:	4545      	cmp	r5, r8
    d1b2:	d108      	bne.n	d1c6 <_malloc_r+0x14a>
    d1b4:	e11d      	b.n	d3f2 <_malloc_r+0x376>
    d1b6:	2b00      	cmp	r3, #0
    d1b8:	f280 8124 	bge.w	d404 <_malloc_r+0x388>
    d1bc:	f8d8 800c 	ldr.w	r8, [r8, #12]
    d1c0:	4545      	cmp	r5, r8
    d1c2:	f000 8116 	beq.w	d3f2 <_malloc_r+0x376>
    d1c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d1ca:	f022 0203 	bic.w	r2, r2, #3
    d1ce:	1b93      	subs	r3, r2, r6
    d1d0:	2b0f      	cmp	r3, #15
    d1d2:	ddf0      	ble.n	d1b6 <_malloc_r+0x13a>
    d1d4:	4620      	mov	r0, r4
    d1d6:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    d1da:	eb08 0106 	add.w	r1, r8, r6
    d1de:	f046 0601 	orr.w	r6, r6, #1
    d1e2:	f8c8 6004 	str.w	r6, [r8, #4]
    d1e6:	60ec      	str	r4, [r5, #12]
    d1e8:	60a5      	str	r5, [r4, #8]
    d1ea:	f043 0401 	orr.w	r4, r3, #1
    d1ee:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d1f2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d1f6:	604c      	str	r4, [r1, #4]
    d1f8:	f848 3002 	str.w	r3, [r8, r2]
    d1fc:	f000 f9f4 	bl	d5e8 <__malloc_unlock>
    d200:	f108 0508 	add.w	r5, r8, #8
    d204:	e002      	b.n	d20c <_malloc_r+0x190>
    d206:	230c      	movs	r3, #12
    d208:	6023      	str	r3, [r4, #0]
    d20a:	2500      	movs	r5, #0
    d20c:	4628      	mov	r0, r5
    d20e:	b003      	add	sp, #12
    d210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d214:	f44f 7300 	mov.w	r3, #512	; 0x200
    d218:	2040      	movs	r0, #64	; 0x40
    d21a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    d21e:	e773      	b.n	d108 <_malloc_r+0x8c>
    d220:	68d3      	ldr	r3, [r2, #12]
    d222:	429a      	cmp	r2, r3
    d224:	bf08      	it	eq
    d226:	3002      	addeq	r0, #2
    d228:	f47f af40 	bne.w	d0ac <_malloc_r+0x30>
    d22c:	693d      	ldr	r5, [r7, #16]
    d22e:	f8df c148 	ldr.w	ip, [pc, #328]	; d378 <_malloc_r+0x2fc>
    d232:	4565      	cmp	r5, ip
    d234:	d182      	bne.n	d13c <_malloc_r+0xc0>
    d236:	687a      	ldr	r2, [r7, #4]
    d238:	1083      	asrs	r3, r0, #2
    d23a:	2101      	movs	r1, #1
    d23c:	4099      	lsls	r1, r3
    d23e:	4291      	cmp	r1, r2
    d240:	d9a7      	bls.n	d192 <_malloc_r+0x116>
    d242:	68bd      	ldr	r5, [r7, #8]
    d244:	686b      	ldr	r3, [r5, #4]
    d246:	f023 0903 	bic.w	r9, r3, #3
    d24a:	454e      	cmp	r6, r9
    d24c:	d803      	bhi.n	d256 <_malloc_r+0x1da>
    d24e:	eba9 0306 	sub.w	r3, r9, r6
    d252:	2b0f      	cmp	r3, #15
    d254:	dc7a      	bgt.n	d34c <_malloc_r+0x2d0>
    d256:	f8df b124 	ldr.w	fp, [pc, #292]	; d37c <_malloc_r+0x300>
    d25a:	4b49      	ldr	r3, [pc, #292]	; (d380 <_malloc_r+0x304>)
    d25c:	f8db 2000 	ldr.w	r2, [fp]
    d260:	681b      	ldr	r3, [r3, #0]
    d262:	3201      	adds	r2, #1
    d264:	4433      	add	r3, r6
    d266:	eb05 0a09 	add.w	sl, r5, r9
    d26a:	f000 8133 	beq.w	d4d4 <_malloc_r+0x458>
    d26e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d272:	330f      	adds	r3, #15
    d274:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    d278:	f028 080f 	bic.w	r8, r8, #15
    d27c:	4641      	mov	r1, r8
    d27e:	4620      	mov	r0, r4
    d280:	f000 fe32 	bl	dee8 <_sbrk_r>
    d284:	1c41      	adds	r1, r0, #1
    d286:	4602      	mov	r2, r0
    d288:	f000 80f3 	beq.w	d472 <_malloc_r+0x3f6>
    d28c:	4582      	cmp	sl, r0
    d28e:	f200 80ee 	bhi.w	d46e <_malloc_r+0x3f2>
    d292:	4b3c      	ldr	r3, [pc, #240]	; (d384 <_malloc_r+0x308>)
    d294:	6819      	ldr	r1, [r3, #0]
    d296:	4441      	add	r1, r8
    d298:	6019      	str	r1, [r3, #0]
    d29a:	4608      	mov	r0, r1
    d29c:	f000 814e 	beq.w	d53c <_malloc_r+0x4c0>
    d2a0:	f8db 1000 	ldr.w	r1, [fp]
    d2a4:	9301      	str	r3, [sp, #4]
    d2a6:	3101      	adds	r1, #1
    d2a8:	bf1b      	ittet	ne
    d2aa:	eba2 010a 	subne.w	r1, r2, sl
    d2ae:	1809      	addne	r1, r1, r0
    d2b0:	f8cb 2000 	streq.w	r2, [fp]
    d2b4:	6019      	strne	r1, [r3, #0]
    d2b6:	f012 0b07 	ands.w	fp, r2, #7
    d2ba:	f000 8117 	beq.w	d4ec <_malloc_r+0x470>
    d2be:	f1cb 0108 	rsb	r1, fp, #8
    d2c2:	440a      	add	r2, r1
    d2c4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    d2c8:	4490      	add	r8, r2
    d2ca:	3108      	adds	r1, #8
    d2cc:	eba1 0108 	sub.w	r1, r1, r8
    d2d0:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d2d4:	4651      	mov	r1, sl
    d2d6:	4620      	mov	r0, r4
    d2d8:	9200      	str	r2, [sp, #0]
    d2da:	f000 fe05 	bl	dee8 <_sbrk_r>
    d2de:	1c42      	adds	r2, r0, #1
    d2e0:	e9dd 2300 	ldrd	r2, r3, [sp]
    d2e4:	f000 814f 	beq.w	d586 <_malloc_r+0x50a>
    d2e8:	1a80      	subs	r0, r0, r2
    d2ea:	eb00 080a 	add.w	r8, r0, sl
    d2ee:	6819      	ldr	r1, [r3, #0]
    d2f0:	60ba      	str	r2, [r7, #8]
    d2f2:	f048 0001 	orr.w	r0, r8, #1
    d2f6:	4451      	add	r1, sl
    d2f8:	42bd      	cmp	r5, r7
    d2fa:	6050      	str	r0, [r2, #4]
    d2fc:	6019      	str	r1, [r3, #0]
    d2fe:	f000 8129 	beq.w	d554 <_malloc_r+0x4d8>
    d302:	f1b9 0f0f 	cmp.w	r9, #15
    d306:	f240 8127 	bls.w	d558 <_malloc_r+0x4dc>
    d30a:	6868      	ldr	r0, [r5, #4]
    d30c:	f1a9 0c0c 	sub.w	ip, r9, #12
    d310:	f02c 0c07 	bic.w	ip, ip, #7
    d314:	f000 0001 	and.w	r0, r0, #1
    d318:	ea40 000c 	orr.w	r0, r0, ip
    d31c:	6068      	str	r0, [r5, #4]
    d31e:	f04f 0e05 	mov.w	lr, #5
    d322:	eb05 000c 	add.w	r0, r5, ip
    d326:	f1bc 0f0f 	cmp.w	ip, #15
    d32a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    d32e:	f200 8132 	bhi.w	d596 <_malloc_r+0x51a>
    d332:	6850      	ldr	r0, [r2, #4]
    d334:	4615      	mov	r5, r2
    d336:	4b14      	ldr	r3, [pc, #80]	; (d388 <_malloc_r+0x30c>)
    d338:	681a      	ldr	r2, [r3, #0]
    d33a:	428a      	cmp	r2, r1
    d33c:	bf38      	it	cc
    d33e:	6019      	strcc	r1, [r3, #0]
    d340:	4b12      	ldr	r3, [pc, #72]	; (d38c <_malloc_r+0x310>)
    d342:	681a      	ldr	r2, [r3, #0]
    d344:	428a      	cmp	r2, r1
    d346:	bf38      	it	cc
    d348:	6019      	strcc	r1, [r3, #0]
    d34a:	e094      	b.n	d476 <_malloc_r+0x3fa>
    d34c:	19aa      	adds	r2, r5, r6
    d34e:	f043 0301 	orr.w	r3, r3, #1
    d352:	f046 0601 	orr.w	r6, r6, #1
    d356:	606e      	str	r6, [r5, #4]
    d358:	4620      	mov	r0, r4
    d35a:	60ba      	str	r2, [r7, #8]
    d35c:	6053      	str	r3, [r2, #4]
    d35e:	f000 f943 	bl	d5e8 <__malloc_unlock>
    d362:	3508      	adds	r5, #8
    d364:	4628      	mov	r0, r5
    d366:	b003      	add	sp, #12
    d368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d36c:	68d9      	ldr	r1, [r3, #12]
    d36e:	441a      	add	r2, r3
    d370:	e6a1      	b.n	d0b6 <_malloc_r+0x3a>
    d372:	bf00      	nop
    d374:	1fff8ab8 	.word	0x1fff8ab8
    d378:	1fff8ac0 	.word	0x1fff8ac0
    d37c:	1fff8ec0 	.word	0x1fff8ec0
    d380:	1fffdf2c 	.word	0x1fffdf2c
    d384:	1fffdefc 	.word	0x1fffdefc
    d388:	1fffdf24 	.word	0x1fffdf24
    d38c:	1fffdf28 	.word	0x1fffdf28
    d390:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    d394:	ea4f 2352 	mov.w	r3, r2, lsr #9
    d398:	d363      	bcc.n	d462 <_malloc_r+0x3e6>
    d39a:	2b14      	cmp	r3, #20
    d39c:	f200 80b7 	bhi.w	d50e <_malloc_r+0x492>
    d3a0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    d3a4:	00c9      	lsls	r1, r1, #3
    d3a6:	335b      	adds	r3, #91	; 0x5b
    d3a8:	eb07 0e01 	add.w	lr, r7, r1
    d3ac:	5879      	ldr	r1, [r7, r1]
    d3ae:	f1ae 0e08 	sub.w	lr, lr, #8
    d3b2:	458e      	cmp	lr, r1
    d3b4:	f000 8091 	beq.w	d4da <_malloc_r+0x45e>
    d3b8:	684b      	ldr	r3, [r1, #4]
    d3ba:	f023 0303 	bic.w	r3, r3, #3
    d3be:	4293      	cmp	r3, r2
    d3c0:	d902      	bls.n	d3c8 <_malloc_r+0x34c>
    d3c2:	6889      	ldr	r1, [r1, #8]
    d3c4:	458e      	cmp	lr, r1
    d3c6:	d1f7      	bne.n	d3b8 <_malloc_r+0x33c>
    d3c8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    d3cc:	687a      	ldr	r2, [r7, #4]
    d3ce:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    d3d2:	f8ce 5008 	str.w	r5, [lr, #8]
    d3d6:	60cd      	str	r5, [r1, #12]
    d3d8:	e6d6      	b.n	d188 <_malloc_r+0x10c>
    d3da:	2b14      	cmp	r3, #20
    d3dc:	d959      	bls.n	d492 <_malloc_r+0x416>
    d3de:	2b54      	cmp	r3, #84	; 0x54
    d3e0:	f200 809d 	bhi.w	d51e <_malloc_r+0x4a2>
    d3e4:	0b33      	lsrs	r3, r6, #12
    d3e6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d3ea:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    d3ee:	00c3      	lsls	r3, r0, #3
    d3f0:	e68a      	b.n	d108 <_malloc_r+0x8c>
    d3f2:	f10e 0e01 	add.w	lr, lr, #1
    d3f6:	f01e 0f03 	tst.w	lr, #3
    d3fa:	f105 0508 	add.w	r5, r5, #8
    d3fe:	f47f aed5 	bne.w	d1ac <_malloc_r+0x130>
    d402:	e051      	b.n	d4a8 <_malloc_r+0x42c>
    d404:	4442      	add	r2, r8
    d406:	4645      	mov	r5, r8
    d408:	6853      	ldr	r3, [r2, #4]
    d40a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    d40e:	f043 0301 	orr.w	r3, r3, #1
    d412:	6053      	str	r3, [r2, #4]
    d414:	f855 3f08 	ldr.w	r3, [r5, #8]!
    d418:	4620      	mov	r0, r4
    d41a:	60d9      	str	r1, [r3, #12]
    d41c:	608b      	str	r3, [r1, #8]
    d41e:	f000 f8e3 	bl	d5e8 <__malloc_unlock>
    d422:	e6f3      	b.n	d20c <_malloc_r+0x190>
    d424:	08f0      	lsrs	r0, r6, #3
    d426:	f106 0208 	add.w	r2, r6, #8
    d42a:	e637      	b.n	d09c <_malloc_r+0x20>
    d42c:	442a      	add	r2, r5
    d42e:	4620      	mov	r0, r4
    d430:	6853      	ldr	r3, [r2, #4]
    d432:	f043 0301 	orr.w	r3, r3, #1
    d436:	6053      	str	r3, [r2, #4]
    d438:	3508      	adds	r5, #8
    d43a:	f000 f8d5 	bl	d5e8 <__malloc_unlock>
    d43e:	e6e5      	b.n	d20c <_malloc_r+0x190>
    d440:	19a9      	adds	r1, r5, r6
    d442:	4620      	mov	r0, r4
    d444:	f046 0601 	orr.w	r6, r6, #1
    d448:	f043 0401 	orr.w	r4, r3, #1
    d44c:	606e      	str	r6, [r5, #4]
    d44e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d452:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d456:	604c      	str	r4, [r1, #4]
    d458:	50ab      	str	r3, [r5, r2]
    d45a:	f000 f8c5 	bl	d5e8 <__malloc_unlock>
    d45e:	3508      	adds	r5, #8
    d460:	e6d4      	b.n	d20c <_malloc_r+0x190>
    d462:	0993      	lsrs	r3, r2, #6
    d464:	f103 0139 	add.w	r1, r3, #57	; 0x39
    d468:	00c9      	lsls	r1, r1, #3
    d46a:	3338      	adds	r3, #56	; 0x38
    d46c:	e79c      	b.n	d3a8 <_malloc_r+0x32c>
    d46e:	42bd      	cmp	r5, r7
    d470:	d05f      	beq.n	d532 <_malloc_r+0x4b6>
    d472:	68bd      	ldr	r5, [r7, #8]
    d474:	6868      	ldr	r0, [r5, #4]
    d476:	f020 0803 	bic.w	r8, r0, #3
    d47a:	4546      	cmp	r6, r8
    d47c:	eba8 0306 	sub.w	r3, r8, r6
    d480:	d802      	bhi.n	d488 <_malloc_r+0x40c>
    d482:	2b0f      	cmp	r3, #15
    d484:	f73f af62 	bgt.w	d34c <_malloc_r+0x2d0>
    d488:	4620      	mov	r0, r4
    d48a:	f000 f8ad 	bl	d5e8 <__malloc_unlock>
    d48e:	2500      	movs	r5, #0
    d490:	e6bc      	b.n	d20c <_malloc_r+0x190>
    d492:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d496:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    d49a:	00c3      	lsls	r3, r0, #3
    d49c:	e634      	b.n	d108 <_malloc_r+0x8c>
    d49e:	f859 3908 	ldr.w	r3, [r9], #-8
    d4a2:	454b      	cmp	r3, r9
    d4a4:	f040 8096 	bne.w	d5d4 <_malloc_r+0x558>
    d4a8:	f010 0f03 	tst.w	r0, #3
    d4ac:	f100 30ff 	add.w	r0, r0, #4294967295
    d4b0:	d1f5      	bne.n	d49e <_malloc_r+0x422>
    d4b2:	687b      	ldr	r3, [r7, #4]
    d4b4:	ea23 0301 	bic.w	r3, r3, r1
    d4b8:	607b      	str	r3, [r7, #4]
    d4ba:	0049      	lsls	r1, r1, #1
    d4bc:	4299      	cmp	r1, r3
    d4be:	f63f aec0 	bhi.w	d242 <_malloc_r+0x1c6>
    d4c2:	b919      	cbnz	r1, d4cc <_malloc_r+0x450>
    d4c4:	e6bd      	b.n	d242 <_malloc_r+0x1c6>
    d4c6:	0049      	lsls	r1, r1, #1
    d4c8:	f10e 0e04 	add.w	lr, lr, #4
    d4cc:	4219      	tst	r1, r3
    d4ce:	d0fa      	beq.n	d4c6 <_malloc_r+0x44a>
    d4d0:	4670      	mov	r0, lr
    d4d2:	e667      	b.n	d1a4 <_malloc_r+0x128>
    d4d4:	f103 0810 	add.w	r8, r3, #16
    d4d8:	e6d0      	b.n	d27c <_malloc_r+0x200>
    d4da:	109a      	asrs	r2, r3, #2
    d4dc:	f04f 0801 	mov.w	r8, #1
    d4e0:	687b      	ldr	r3, [r7, #4]
    d4e2:	fa08 f202 	lsl.w	r2, r8, r2
    d4e6:	431a      	orrs	r2, r3
    d4e8:	607a      	str	r2, [r7, #4]
    d4ea:	e770      	b.n	d3ce <_malloc_r+0x352>
    d4ec:	eb02 0108 	add.w	r1, r2, r8
    d4f0:	4249      	negs	r1, r1
    d4f2:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d4f6:	4651      	mov	r1, sl
    d4f8:	4620      	mov	r0, r4
    d4fa:	9200      	str	r2, [sp, #0]
    d4fc:	f000 fcf4 	bl	dee8 <_sbrk_r>
    d500:	1c43      	adds	r3, r0, #1
    d502:	e9dd 2300 	ldrd	r2, r3, [sp]
    d506:	f47f aeef 	bne.w	d2e8 <_malloc_r+0x26c>
    d50a:	46da      	mov	sl, fp
    d50c:	e6ef      	b.n	d2ee <_malloc_r+0x272>
    d50e:	2b54      	cmp	r3, #84	; 0x54
    d510:	d825      	bhi.n	d55e <_malloc_r+0x4e2>
    d512:	0b13      	lsrs	r3, r2, #12
    d514:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    d518:	00c9      	lsls	r1, r1, #3
    d51a:	336e      	adds	r3, #110	; 0x6e
    d51c:	e744      	b.n	d3a8 <_malloc_r+0x32c>
    d51e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d522:	d825      	bhi.n	d570 <_malloc_r+0x4f4>
    d524:	0bf3      	lsrs	r3, r6, #15
    d526:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d52a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    d52e:	00c3      	lsls	r3, r0, #3
    d530:	e5ea      	b.n	d108 <_malloc_r+0x8c>
    d532:	4b29      	ldr	r3, [pc, #164]	; (d5d8 <_malloc_r+0x55c>)
    d534:	6818      	ldr	r0, [r3, #0]
    d536:	4440      	add	r0, r8
    d538:	6018      	str	r0, [r3, #0]
    d53a:	e6b1      	b.n	d2a0 <_malloc_r+0x224>
    d53c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    d540:	f1bc 0f00 	cmp.w	ip, #0
    d544:	f47f aeac 	bne.w	d2a0 <_malloc_r+0x224>
    d548:	68bd      	ldr	r5, [r7, #8]
    d54a:	44c8      	add	r8, r9
    d54c:	f048 0001 	orr.w	r0, r8, #1
    d550:	6068      	str	r0, [r5, #4]
    d552:	e6f0      	b.n	d336 <_malloc_r+0x2ba>
    d554:	4615      	mov	r5, r2
    d556:	e6ee      	b.n	d336 <_malloc_r+0x2ba>
    d558:	2301      	movs	r3, #1
    d55a:	6053      	str	r3, [r2, #4]
    d55c:	e794      	b.n	d488 <_malloc_r+0x40c>
    d55e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d562:	d823      	bhi.n	d5ac <_malloc_r+0x530>
    d564:	0bd3      	lsrs	r3, r2, #15
    d566:	f103 0178 	add.w	r1, r3, #120	; 0x78
    d56a:	00c9      	lsls	r1, r1, #3
    d56c:	3377      	adds	r3, #119	; 0x77
    d56e:	e71b      	b.n	d3a8 <_malloc_r+0x32c>
    d570:	f240 5254 	movw	r2, #1364	; 0x554
    d574:	4293      	cmp	r3, r2
    d576:	d823      	bhi.n	d5c0 <_malloc_r+0x544>
    d578:	0cb3      	lsrs	r3, r6, #18
    d57a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d57e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    d582:	00c3      	lsls	r3, r0, #3
    d584:	e5c0      	b.n	d108 <_malloc_r+0x8c>
    d586:	f1ab 0b08 	sub.w	fp, fp, #8
    d58a:	44d8      	add	r8, fp
    d58c:	eba8 0802 	sub.w	r8, r8, r2
    d590:	f04f 0a00 	mov.w	sl, #0
    d594:	e6ab      	b.n	d2ee <_malloc_r+0x272>
    d596:	f105 0108 	add.w	r1, r5, #8
    d59a:	4620      	mov	r0, r4
    d59c:	9300      	str	r3, [sp, #0]
    d59e:	f000 fddd 	bl	e15c <_free_r>
    d5a2:	68bd      	ldr	r5, [r7, #8]
    d5a4:	9b00      	ldr	r3, [sp, #0]
    d5a6:	6868      	ldr	r0, [r5, #4]
    d5a8:	6819      	ldr	r1, [r3, #0]
    d5aa:	e6c4      	b.n	d336 <_malloc_r+0x2ba>
    d5ac:	f240 5154 	movw	r1, #1364	; 0x554
    d5b0:	428b      	cmp	r3, r1
    d5b2:	d80b      	bhi.n	d5cc <_malloc_r+0x550>
    d5b4:	0c93      	lsrs	r3, r2, #18
    d5b6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    d5ba:	00c9      	lsls	r1, r1, #3
    d5bc:	337c      	adds	r3, #124	; 0x7c
    d5be:	e6f3      	b.n	d3a8 <_malloc_r+0x32c>
    d5c0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d5c4:	207f      	movs	r0, #127	; 0x7f
    d5c6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    d5ca:	e59d      	b.n	d108 <_malloc_r+0x8c>
    d5cc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    d5d0:	237e      	movs	r3, #126	; 0x7e
    d5d2:	e6e9      	b.n	d3a8 <_malloc_r+0x32c>
    d5d4:	687b      	ldr	r3, [r7, #4]
    d5d6:	e770      	b.n	d4ba <_malloc_r+0x43e>
    d5d8:	1fffdefc 	.word	0x1fffdefc

0000d5dc <__malloc_lock>:
    d5dc:	4801      	ldr	r0, [pc, #4]	; (d5e4 <__malloc_lock+0x8>)
    d5de:	f000 bcd9 	b.w	df94 <__retarget_lock_acquire_recursive>
    d5e2:	bf00      	nop
    d5e4:	1fffe074 	.word	0x1fffe074

0000d5e8 <__malloc_unlock>:
    d5e8:	4801      	ldr	r0, [pc, #4]	; (d5f0 <__malloc_unlock+0x8>)
    d5ea:	f000 bcd5 	b.w	df98 <__retarget_lock_release_recursive>
    d5ee:	bf00      	nop
    d5f0:	1fffe074 	.word	0x1fffe074

0000d5f4 <_realloc_r>:
    d5f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5f8:	4617      	mov	r7, r2
    d5fa:	2900      	cmp	r1, #0
    d5fc:	f000 8098 	beq.w	d730 <_realloc_r+0x13c>
    d600:	460c      	mov	r4, r1
    d602:	f107 050b 	add.w	r5, r7, #11
    d606:	4680      	mov	r8, r0
    d608:	f7ff ffe8 	bl	d5dc <__malloc_lock>
    d60c:	2d16      	cmp	r5, #22
    d60e:	f854 1c04 	ldr.w	r1, [r4, #-4]
    d612:	d85b      	bhi.n	d6cc <_realloc_r+0xd8>
    d614:	2510      	movs	r5, #16
    d616:	462a      	mov	r2, r5
    d618:	42af      	cmp	r7, r5
    d61a:	d85c      	bhi.n	d6d6 <_realloc_r+0xe2>
    d61c:	f021 0603 	bic.w	r6, r1, #3
    d620:	4296      	cmp	r6, r2
    d622:	f1a4 0908 	sub.w	r9, r4, #8
    d626:	da62      	bge.n	d6ee <_realloc_r+0xfa>
    d628:	4bbc      	ldr	r3, [pc, #752]	; (d91c <_realloc_r+0x328>)
    d62a:	f8d3 c008 	ldr.w	ip, [r3, #8]
    d62e:	eb09 0006 	add.w	r0, r9, r6
    d632:	4584      	cmp	ip, r0
    d634:	f000 8097 	beq.w	d766 <_realloc_r+0x172>
    d638:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d63c:	f02c 0301 	bic.w	r3, ip, #1
    d640:	4403      	add	r3, r0
    d642:	685b      	ldr	r3, [r3, #4]
    d644:	07db      	lsls	r3, r3, #31
    d646:	d468      	bmi.n	d71a <_realloc_r+0x126>
    d648:	f02c 0c03 	bic.w	ip, ip, #3
    d64c:	eb06 030c 	add.w	r3, r6, ip
    d650:	4293      	cmp	r3, r2
    d652:	da47      	bge.n	d6e4 <_realloc_r+0xf0>
    d654:	07cb      	lsls	r3, r1, #31
    d656:	d410      	bmi.n	d67a <_realloc_r+0x86>
    d658:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d65c:	eba9 0a03 	sub.w	sl, r9, r3
    d660:	f8da 3004 	ldr.w	r3, [sl, #4]
    d664:	f023 0103 	bic.w	r1, r3, #3
    d668:	448c      	add	ip, r1
    d66a:	44b4      	add	ip, r6
    d66c:	4594      	cmp	ip, r2
    d66e:	f280 8111 	bge.w	d894 <_realloc_r+0x2a0>
    d672:	1873      	adds	r3, r6, r1
    d674:	4293      	cmp	r3, r2
    d676:	f280 80e8 	bge.w	d84a <_realloc_r+0x256>
    d67a:	4639      	mov	r1, r7
    d67c:	4640      	mov	r0, r8
    d67e:	f7ff fcfd 	bl	d07c <_malloc_r>
    d682:	4607      	mov	r7, r0
    d684:	b1e0      	cbz	r0, d6c0 <_realloc_r+0xcc>
    d686:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d68a:	f023 0301 	bic.w	r3, r3, #1
    d68e:	444b      	add	r3, r9
    d690:	f1a0 0208 	sub.w	r2, r0, #8
    d694:	4293      	cmp	r3, r2
    d696:	f000 80d2 	beq.w	d83e <_realloc_r+0x24a>
    d69a:	1f32      	subs	r2, r6, #4
    d69c:	2a24      	cmp	r2, #36	; 0x24
    d69e:	f200 80f5 	bhi.w	d88c <_realloc_r+0x298>
    d6a2:	2a13      	cmp	r2, #19
    d6a4:	f200 80ac 	bhi.w	d800 <_realloc_r+0x20c>
    d6a8:	4603      	mov	r3, r0
    d6aa:	4622      	mov	r2, r4
    d6ac:	6811      	ldr	r1, [r2, #0]
    d6ae:	6019      	str	r1, [r3, #0]
    d6b0:	6851      	ldr	r1, [r2, #4]
    d6b2:	6059      	str	r1, [r3, #4]
    d6b4:	6892      	ldr	r2, [r2, #8]
    d6b6:	609a      	str	r2, [r3, #8]
    d6b8:	4621      	mov	r1, r4
    d6ba:	4640      	mov	r0, r8
    d6bc:	f000 fd4e 	bl	e15c <_free_r>
    d6c0:	4640      	mov	r0, r8
    d6c2:	f7ff ff91 	bl	d5e8 <__malloc_unlock>
    d6c6:	4638      	mov	r0, r7
    d6c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6cc:	f025 0507 	bic.w	r5, r5, #7
    d6d0:	2d00      	cmp	r5, #0
    d6d2:	462a      	mov	r2, r5
    d6d4:	daa0      	bge.n	d618 <_realloc_r+0x24>
    d6d6:	230c      	movs	r3, #12
    d6d8:	f8c8 3000 	str.w	r3, [r8]
    d6dc:	2700      	movs	r7, #0
    d6de:	4638      	mov	r0, r7
    d6e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6e4:	461e      	mov	r6, r3
    d6e6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    d6ea:	60d3      	str	r3, [r2, #12]
    d6ec:	609a      	str	r2, [r3, #8]
    d6ee:	1b73      	subs	r3, r6, r5
    d6f0:	2b0f      	cmp	r3, #15
    d6f2:	d822      	bhi.n	d73a <_realloc_r+0x146>
    d6f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    d6f8:	f003 0301 	and.w	r3, r3, #1
    d6fc:	4333      	orrs	r3, r6
    d6fe:	444e      	add	r6, r9
    d700:	f8c9 3004 	str.w	r3, [r9, #4]
    d704:	6873      	ldr	r3, [r6, #4]
    d706:	f043 0301 	orr.w	r3, r3, #1
    d70a:	6073      	str	r3, [r6, #4]
    d70c:	4640      	mov	r0, r8
    d70e:	4627      	mov	r7, r4
    d710:	f7ff ff6a 	bl	d5e8 <__malloc_unlock>
    d714:	4638      	mov	r0, r7
    d716:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d71a:	07c9      	lsls	r1, r1, #31
    d71c:	d4ad      	bmi.n	d67a <_realloc_r+0x86>
    d71e:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d722:	eba9 0a03 	sub.w	sl, r9, r3
    d726:	f8da 1004 	ldr.w	r1, [sl, #4]
    d72a:	f021 0103 	bic.w	r1, r1, #3
    d72e:	e7a0      	b.n	d672 <_realloc_r+0x7e>
    d730:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d734:	4611      	mov	r1, r2
    d736:	f7ff bca1 	b.w	d07c <_malloc_r>
    d73a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d73e:	eb09 0105 	add.w	r1, r9, r5
    d742:	f002 0201 	and.w	r2, r2, #1
    d746:	444e      	add	r6, r9
    d748:	f043 0301 	orr.w	r3, r3, #1
    d74c:	432a      	orrs	r2, r5
    d74e:	f8c9 2004 	str.w	r2, [r9, #4]
    d752:	604b      	str	r3, [r1, #4]
    d754:	6873      	ldr	r3, [r6, #4]
    d756:	f043 0301 	orr.w	r3, r3, #1
    d75a:	3108      	adds	r1, #8
    d75c:	6073      	str	r3, [r6, #4]
    d75e:	4640      	mov	r0, r8
    d760:	f000 fcfc 	bl	e15c <_free_r>
    d764:	e7d2      	b.n	d70c <_realloc_r+0x118>
    d766:	f8dc 0004 	ldr.w	r0, [ip, #4]
    d76a:	f020 0b03 	bic.w	fp, r0, #3
    d76e:	eb06 0c0b 	add.w	ip, r6, fp
    d772:	f105 0010 	add.w	r0, r5, #16
    d776:	4584      	cmp	ip, r0
    d778:	da4d      	bge.n	d816 <_realloc_r+0x222>
    d77a:	07c9      	lsls	r1, r1, #31
    d77c:	f53f af7d 	bmi.w	d67a <_realloc_r+0x86>
    d780:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d784:	eba9 0a01 	sub.w	sl, r9, r1
    d788:	f8da 1004 	ldr.w	r1, [sl, #4]
    d78c:	f021 0103 	bic.w	r1, r1, #3
    d790:	448b      	add	fp, r1
    d792:	44b3      	add	fp, r6
    d794:	4558      	cmp	r0, fp
    d796:	f73f af6c 	bgt.w	d672 <_realloc_r+0x7e>
    d79a:	4657      	mov	r7, sl
    d79c:	f8da 100c 	ldr.w	r1, [sl, #12]
    d7a0:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d7a4:	1f32      	subs	r2, r6, #4
    d7a6:	2a24      	cmp	r2, #36	; 0x24
    d7a8:	60c1      	str	r1, [r0, #12]
    d7aa:	6088      	str	r0, [r1, #8]
    d7ac:	f200 80db 	bhi.w	d966 <_realloc_r+0x372>
    d7b0:	2a13      	cmp	r2, #19
    d7b2:	f240 80d6 	bls.w	d962 <_realloc_r+0x36e>
    d7b6:	6821      	ldr	r1, [r4, #0]
    d7b8:	f8ca 1008 	str.w	r1, [sl, #8]
    d7bc:	6861      	ldr	r1, [r4, #4]
    d7be:	f8ca 100c 	str.w	r1, [sl, #12]
    d7c2:	2a1b      	cmp	r2, #27
    d7c4:	f200 80df 	bhi.w	d986 <_realloc_r+0x392>
    d7c8:	3408      	adds	r4, #8
    d7ca:	f10a 0210 	add.w	r2, sl, #16
    d7ce:	6821      	ldr	r1, [r4, #0]
    d7d0:	6011      	str	r1, [r2, #0]
    d7d2:	6861      	ldr	r1, [r4, #4]
    d7d4:	6051      	str	r1, [r2, #4]
    d7d6:	68a1      	ldr	r1, [r4, #8]
    d7d8:	6091      	str	r1, [r2, #8]
    d7da:	eb0a 0105 	add.w	r1, sl, r5
    d7de:	ebab 0205 	sub.w	r2, fp, r5
    d7e2:	f042 0201 	orr.w	r2, r2, #1
    d7e6:	6099      	str	r1, [r3, #8]
    d7e8:	604a      	str	r2, [r1, #4]
    d7ea:	f8da 3004 	ldr.w	r3, [sl, #4]
    d7ee:	f003 0301 	and.w	r3, r3, #1
    d7f2:	432b      	orrs	r3, r5
    d7f4:	4640      	mov	r0, r8
    d7f6:	f8ca 3004 	str.w	r3, [sl, #4]
    d7fa:	f7ff fef5 	bl	d5e8 <__malloc_unlock>
    d7fe:	e76e      	b.n	d6de <_realloc_r+0xea>
    d800:	6823      	ldr	r3, [r4, #0]
    d802:	6003      	str	r3, [r0, #0]
    d804:	6863      	ldr	r3, [r4, #4]
    d806:	6043      	str	r3, [r0, #4]
    d808:	2a1b      	cmp	r2, #27
    d80a:	d868      	bhi.n	d8de <_realloc_r+0x2ea>
    d80c:	f104 0208 	add.w	r2, r4, #8
    d810:	f100 0308 	add.w	r3, r0, #8
    d814:	e74a      	b.n	d6ac <_realloc_r+0xb8>
    d816:	eb09 0205 	add.w	r2, r9, r5
    d81a:	609a      	str	r2, [r3, #8]
    d81c:	ebac 0305 	sub.w	r3, ip, r5
    d820:	f043 0301 	orr.w	r3, r3, #1
    d824:	6053      	str	r3, [r2, #4]
    d826:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d82a:	f003 0301 	and.w	r3, r3, #1
    d82e:	432b      	orrs	r3, r5
    d830:	4640      	mov	r0, r8
    d832:	f844 3c04 	str.w	r3, [r4, #-4]
    d836:	f7ff fed7 	bl	d5e8 <__malloc_unlock>
    d83a:	4627      	mov	r7, r4
    d83c:	e74f      	b.n	d6de <_realloc_r+0xea>
    d83e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d842:	f023 0303 	bic.w	r3, r3, #3
    d846:	441e      	add	r6, r3
    d848:	e751      	b.n	d6ee <_realloc_r+0xfa>
    d84a:	4657      	mov	r7, sl
    d84c:	f8da 100c 	ldr.w	r1, [sl, #12]
    d850:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d854:	1f32      	subs	r2, r6, #4
    d856:	2a24      	cmp	r2, #36	; 0x24
    d858:	60c1      	str	r1, [r0, #12]
    d85a:	6088      	str	r0, [r1, #8]
    d85c:	d84c      	bhi.n	d8f8 <_realloc_r+0x304>
    d85e:	2a13      	cmp	r2, #19
    d860:	d948      	bls.n	d8f4 <_realloc_r+0x300>
    d862:	6821      	ldr	r1, [r4, #0]
    d864:	f8ca 1008 	str.w	r1, [sl, #8]
    d868:	6861      	ldr	r1, [r4, #4]
    d86a:	f8ca 100c 	str.w	r1, [sl, #12]
    d86e:	2a1b      	cmp	r2, #27
    d870:	d856      	bhi.n	d920 <_realloc_r+0x32c>
    d872:	3408      	adds	r4, #8
    d874:	f10a 0210 	add.w	r2, sl, #16
    d878:	461e      	mov	r6, r3
    d87a:	6823      	ldr	r3, [r4, #0]
    d87c:	6013      	str	r3, [r2, #0]
    d87e:	6863      	ldr	r3, [r4, #4]
    d880:	6053      	str	r3, [r2, #4]
    d882:	68a3      	ldr	r3, [r4, #8]
    d884:	6093      	str	r3, [r2, #8]
    d886:	46d1      	mov	r9, sl
    d888:	463c      	mov	r4, r7
    d88a:	e730      	b.n	d6ee <_realloc_r+0xfa>
    d88c:	4621      	mov	r1, r4
    d88e:	f000 f9e7 	bl	dc60 <memmove>
    d892:	e711      	b.n	d6b8 <_realloc_r+0xc4>
    d894:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    d898:	4657      	mov	r7, sl
    d89a:	60cb      	str	r3, [r1, #12]
    d89c:	6099      	str	r1, [r3, #8]
    d89e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    d8a2:	f8da 300c 	ldr.w	r3, [sl, #12]
    d8a6:	60cb      	str	r3, [r1, #12]
    d8a8:	1f32      	subs	r2, r6, #4
    d8aa:	2a24      	cmp	r2, #36	; 0x24
    d8ac:	6099      	str	r1, [r3, #8]
    d8ae:	d82d      	bhi.n	d90c <_realloc_r+0x318>
    d8b0:	2a13      	cmp	r2, #19
    d8b2:	d929      	bls.n	d908 <_realloc_r+0x314>
    d8b4:	6823      	ldr	r3, [r4, #0]
    d8b6:	f8ca 3008 	str.w	r3, [sl, #8]
    d8ba:	6863      	ldr	r3, [r4, #4]
    d8bc:	f8ca 300c 	str.w	r3, [sl, #12]
    d8c0:	2a1b      	cmp	r2, #27
    d8c2:	d842      	bhi.n	d94a <_realloc_r+0x356>
    d8c4:	3408      	adds	r4, #8
    d8c6:	f10a 0310 	add.w	r3, sl, #16
    d8ca:	6822      	ldr	r2, [r4, #0]
    d8cc:	601a      	str	r2, [r3, #0]
    d8ce:	6862      	ldr	r2, [r4, #4]
    d8d0:	605a      	str	r2, [r3, #4]
    d8d2:	68a2      	ldr	r2, [r4, #8]
    d8d4:	609a      	str	r2, [r3, #8]
    d8d6:	4666      	mov	r6, ip
    d8d8:	46d1      	mov	r9, sl
    d8da:	463c      	mov	r4, r7
    d8dc:	e707      	b.n	d6ee <_realloc_r+0xfa>
    d8de:	68a3      	ldr	r3, [r4, #8]
    d8e0:	6083      	str	r3, [r0, #8]
    d8e2:	68e3      	ldr	r3, [r4, #12]
    d8e4:	60c3      	str	r3, [r0, #12]
    d8e6:	2a24      	cmp	r2, #36	; 0x24
    d8e8:	d026      	beq.n	d938 <_realloc_r+0x344>
    d8ea:	f104 0210 	add.w	r2, r4, #16
    d8ee:	f100 0310 	add.w	r3, r0, #16
    d8f2:	e6db      	b.n	d6ac <_realloc_r+0xb8>
    d8f4:	463a      	mov	r2, r7
    d8f6:	e7bf      	b.n	d878 <_realloc_r+0x284>
    d8f8:	4621      	mov	r1, r4
    d8fa:	4638      	mov	r0, r7
    d8fc:	461e      	mov	r6, r3
    d8fe:	46d1      	mov	r9, sl
    d900:	f000 f9ae 	bl	dc60 <memmove>
    d904:	463c      	mov	r4, r7
    d906:	e6f2      	b.n	d6ee <_realloc_r+0xfa>
    d908:	463b      	mov	r3, r7
    d90a:	e7de      	b.n	d8ca <_realloc_r+0x2d6>
    d90c:	4621      	mov	r1, r4
    d90e:	4638      	mov	r0, r7
    d910:	4666      	mov	r6, ip
    d912:	46d1      	mov	r9, sl
    d914:	f000 f9a4 	bl	dc60 <memmove>
    d918:	463c      	mov	r4, r7
    d91a:	e6e8      	b.n	d6ee <_realloc_r+0xfa>
    d91c:	1fff8ab8 	.word	0x1fff8ab8
    d920:	68a1      	ldr	r1, [r4, #8]
    d922:	f8ca 1010 	str.w	r1, [sl, #16]
    d926:	68e1      	ldr	r1, [r4, #12]
    d928:	f8ca 1014 	str.w	r1, [sl, #20]
    d92c:	2a24      	cmp	r2, #36	; 0x24
    d92e:	d020      	beq.n	d972 <_realloc_r+0x37e>
    d930:	3410      	adds	r4, #16
    d932:	f10a 0218 	add.w	r2, sl, #24
    d936:	e79f      	b.n	d878 <_realloc_r+0x284>
    d938:	6923      	ldr	r3, [r4, #16]
    d93a:	6103      	str	r3, [r0, #16]
    d93c:	6961      	ldr	r1, [r4, #20]
    d93e:	6141      	str	r1, [r0, #20]
    d940:	f104 0218 	add.w	r2, r4, #24
    d944:	f100 0318 	add.w	r3, r0, #24
    d948:	e6b0      	b.n	d6ac <_realloc_r+0xb8>
    d94a:	68a3      	ldr	r3, [r4, #8]
    d94c:	f8ca 3010 	str.w	r3, [sl, #16]
    d950:	68e3      	ldr	r3, [r4, #12]
    d952:	f8ca 3014 	str.w	r3, [sl, #20]
    d956:	2a24      	cmp	r2, #36	; 0x24
    d958:	d021      	beq.n	d99e <_realloc_r+0x3aa>
    d95a:	3410      	adds	r4, #16
    d95c:	f10a 0318 	add.w	r3, sl, #24
    d960:	e7b3      	b.n	d8ca <_realloc_r+0x2d6>
    d962:	463a      	mov	r2, r7
    d964:	e733      	b.n	d7ce <_realloc_r+0x1da>
    d966:	4621      	mov	r1, r4
    d968:	4638      	mov	r0, r7
    d96a:	f000 f979 	bl	dc60 <memmove>
    d96e:	4b16      	ldr	r3, [pc, #88]	; (d9c8 <_realloc_r+0x3d4>)
    d970:	e733      	b.n	d7da <_realloc_r+0x1e6>
    d972:	6922      	ldr	r2, [r4, #16]
    d974:	f8ca 2018 	str.w	r2, [sl, #24]
    d978:	6962      	ldr	r2, [r4, #20]
    d97a:	f8ca 201c 	str.w	r2, [sl, #28]
    d97e:	3418      	adds	r4, #24
    d980:	f10a 0220 	add.w	r2, sl, #32
    d984:	e778      	b.n	d878 <_realloc_r+0x284>
    d986:	68a1      	ldr	r1, [r4, #8]
    d988:	f8ca 1010 	str.w	r1, [sl, #16]
    d98c:	68e1      	ldr	r1, [r4, #12]
    d98e:	f8ca 1014 	str.w	r1, [sl, #20]
    d992:	2a24      	cmp	r2, #36	; 0x24
    d994:	d00d      	beq.n	d9b2 <_realloc_r+0x3be>
    d996:	3410      	adds	r4, #16
    d998:	f10a 0218 	add.w	r2, sl, #24
    d99c:	e717      	b.n	d7ce <_realloc_r+0x1da>
    d99e:	6923      	ldr	r3, [r4, #16]
    d9a0:	f8ca 3018 	str.w	r3, [sl, #24]
    d9a4:	6963      	ldr	r3, [r4, #20]
    d9a6:	f8ca 301c 	str.w	r3, [sl, #28]
    d9aa:	3418      	adds	r4, #24
    d9ac:	f10a 0320 	add.w	r3, sl, #32
    d9b0:	e78b      	b.n	d8ca <_realloc_r+0x2d6>
    d9b2:	6922      	ldr	r2, [r4, #16]
    d9b4:	f8ca 2018 	str.w	r2, [sl, #24]
    d9b8:	6962      	ldr	r2, [r4, #20]
    d9ba:	f8ca 201c 	str.w	r2, [sl, #28]
    d9be:	3418      	adds	r4, #24
    d9c0:	f10a 0220 	add.w	r2, sl, #32
    d9c4:	e703      	b.n	d7ce <_realloc_r+0x1da>
    d9c6:	bf00      	nop
    d9c8:	1fff8ab8 	.word	0x1fff8ab8

0000d9cc <stdio_exit_handler>:
    d9cc:	4a02      	ldr	r2, [pc, #8]	; (d9d8 <stdio_exit_handler+0xc>)
    d9ce:	4903      	ldr	r1, [pc, #12]	; (d9dc <stdio_exit_handler+0x10>)
    d9d0:	4803      	ldr	r0, [pc, #12]	; (d9e0 <stdio_exit_handler+0x14>)
    d9d2:	f000 b8bb 	b.w	db4c <_fwalk_sglue>
    d9d6:	bf00      	nop
    d9d8:	1fff8ec8 	.word	0x1fff8ec8
    d9dc:	000106b1 	.word	0x000106b1
    d9e0:	1fff9040 	.word	0x1fff9040

0000d9e4 <cleanup_stdio>:
    d9e4:	4b0c      	ldr	r3, [pc, #48]	; (da18 <cleanup_stdio+0x34>)
    d9e6:	6841      	ldr	r1, [r0, #4]
    d9e8:	4299      	cmp	r1, r3
    d9ea:	b510      	push	{r4, lr}
    d9ec:	4604      	mov	r4, r0
    d9ee:	d001      	beq.n	d9f4 <cleanup_stdio+0x10>
    d9f0:	f002 fe5e 	bl	106b0 <_fclose_r>
    d9f4:	68a1      	ldr	r1, [r4, #8]
    d9f6:	4b09      	ldr	r3, [pc, #36]	; (da1c <cleanup_stdio+0x38>)
    d9f8:	4299      	cmp	r1, r3
    d9fa:	d002      	beq.n	da02 <cleanup_stdio+0x1e>
    d9fc:	4620      	mov	r0, r4
    d9fe:	f002 fe57 	bl	106b0 <_fclose_r>
    da02:	68e1      	ldr	r1, [r4, #12]
    da04:	4b06      	ldr	r3, [pc, #24]	; (da20 <cleanup_stdio+0x3c>)
    da06:	4299      	cmp	r1, r3
    da08:	d004      	beq.n	da14 <cleanup_stdio+0x30>
    da0a:	4620      	mov	r0, r4
    da0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da10:	f002 be4e 	b.w	106b0 <_fclose_r>
    da14:	bd10      	pop	{r4, pc}
    da16:	bf00      	nop
    da18:	1fffdf30 	.word	0x1fffdf30
    da1c:	1fffdf98 	.word	0x1fffdf98
    da20:	1fffe000 	.word	0x1fffe000

0000da24 <global_stdio_init.part.0>:
    da24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    da28:	4c2a      	ldr	r4, [pc, #168]	; (dad4 <global_stdio_init.part.0+0xb0>)
    da2a:	4b2b      	ldr	r3, [pc, #172]	; (dad8 <global_stdio_init.part.0+0xb4>)
    da2c:	482b      	ldr	r0, [pc, #172]	; (dadc <global_stdio_init.part.0+0xb8>)
    da2e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; dae0 <global_stdio_init.part.0+0xbc>
    da32:	f8df 80b0 	ldr.w	r8, [pc, #176]	; dae4 <global_stdio_init.part.0+0xc0>
    da36:	4f2c      	ldr	r7, [pc, #176]	; (dae8 <global_stdio_init.part.0+0xc4>)
    da38:	6018      	str	r0, [r3, #0]
    da3a:	2500      	movs	r5, #0
    da3c:	2304      	movs	r3, #4
    da3e:	2208      	movs	r2, #8
    da40:	4629      	mov	r1, r5
    da42:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    da46:	4e29      	ldr	r6, [pc, #164]	; (daec <global_stdio_init.part.0+0xc8>)
    da48:	6665      	str	r5, [r4, #100]	; 0x64
    da4a:	e9c4 5302 	strd	r5, r3, [r4, #8]
    da4e:	e9c4 5500 	strd	r5, r5, [r4]
    da52:	e9c4 5504 	strd	r5, r5, [r4, #16]
    da56:	61a5      	str	r5, [r4, #24]
    da58:	f000 f97e 	bl	dd58 <memset>
    da5c:	4b24      	ldr	r3, [pc, #144]	; (daf0 <global_stdio_init.part.0+0xcc>)
    da5e:	6763      	str	r3, [r4, #116]	; 0x74
    da60:	2208      	movs	r2, #8
    da62:	4629      	mov	r1, r5
    da64:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    da68:	e9c4 4907 	strd	r4, r9, [r4, #28]
    da6c:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    da70:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    da74:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    da78:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    da7c:	6725      	str	r5, [r4, #112]	; 0x70
    da7e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    da82:	62e6      	str	r6, [r4, #44]	; 0x2c
    da84:	f000 f968 	bl	dd58 <memset>
    da88:	4b1a      	ldr	r3, [pc, #104]	; (daf4 <global_stdio_init.part.0+0xd0>)
    da8a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    da8e:	4629      	mov	r1, r5
    da90:	f104 0368 	add.w	r3, r4, #104	; 0x68
    da94:	2208      	movs	r2, #8
    da96:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    da9a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    da9e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    daa2:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    daa6:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    daaa:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    daae:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    dab2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    dab6:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    daba:	f000 f94d 	bl	dd58 <memset>
    dabe:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    dac2:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    dac6:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    daca:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    dace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dad2:	bf00      	nop
    dad4:	1fffdf30 	.word	0x1fffdf30
    dad8:	1fffe068 	.word	0x1fffe068
    dadc:	0000d9cd 	.word	0x0000d9cd
    dae0:	0000dbd5 	.word	0x0000dbd5
    dae4:	0000dbf9 	.word	0x0000dbf9
    dae8:	0000dc39 	.word	0x0000dc39
    daec:	0000dc59 	.word	0x0000dc59
    daf0:	00010009 	.word	0x00010009
    daf4:	00020012 	.word	0x00020012

0000daf8 <__sinit>:
    daf8:	b510      	push	{r4, lr}
    dafa:	4604      	mov	r4, r0
    dafc:	480a      	ldr	r0, [pc, #40]	; (db28 <__sinit+0x30>)
    dafe:	f000 fa49 	bl	df94 <__retarget_lock_acquire_recursive>
    db02:	6b63      	ldr	r3, [r4, #52]	; 0x34
    db04:	b923      	cbnz	r3, db10 <__sinit+0x18>
    db06:	4b09      	ldr	r3, [pc, #36]	; (db2c <__sinit+0x34>)
    db08:	4a09      	ldr	r2, [pc, #36]	; (db30 <__sinit+0x38>)
    db0a:	681b      	ldr	r3, [r3, #0]
    db0c:	6362      	str	r2, [r4, #52]	; 0x34
    db0e:	b123      	cbz	r3, db1a <__sinit+0x22>
    db10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db14:	4804      	ldr	r0, [pc, #16]	; (db28 <__sinit+0x30>)
    db16:	f000 ba3f 	b.w	df98 <__retarget_lock_release_recursive>
    db1a:	f7ff ff83 	bl	da24 <global_stdio_init.part.0>
    db1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db22:	4801      	ldr	r0, [pc, #4]	; (db28 <__sinit+0x30>)
    db24:	f000 ba38 	b.w	df98 <__retarget_lock_release_recursive>
    db28:	1fffe078 	.word	0x1fffe078
    db2c:	1fffe068 	.word	0x1fffe068
    db30:	0000d9e5 	.word	0x0000d9e5

0000db34 <__sfp_lock_acquire>:
    db34:	4801      	ldr	r0, [pc, #4]	; (db3c <__sfp_lock_acquire+0x8>)
    db36:	f000 ba2d 	b.w	df94 <__retarget_lock_acquire_recursive>
    db3a:	bf00      	nop
    db3c:	1fffe078 	.word	0x1fffe078

0000db40 <__sfp_lock_release>:
    db40:	4801      	ldr	r0, [pc, #4]	; (db48 <__sfp_lock_release+0x8>)
    db42:	f000 ba29 	b.w	df98 <__retarget_lock_release_recursive>
    db46:	bf00      	nop
    db48:	1fffe078 	.word	0x1fffe078

0000db4c <_fwalk_sglue>:
    db4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    db50:	4680      	mov	r8, r0
    db52:	460f      	mov	r7, r1
    db54:	4616      	mov	r6, r2
    db56:	f04f 0900 	mov.w	r9, #0
    db5a:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    db5e:	3d01      	subs	r5, #1
    db60:	d411      	bmi.n	db86 <_fwalk_sglue+0x3a>
    db62:	89a3      	ldrh	r3, [r4, #12]
    db64:	2b01      	cmp	r3, #1
    db66:	f105 35ff 	add.w	r5, r5, #4294967295
    db6a:	d908      	bls.n	db7e <_fwalk_sglue+0x32>
    db6c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    db70:	3301      	adds	r3, #1
    db72:	4621      	mov	r1, r4
    db74:	d003      	beq.n	db7e <_fwalk_sglue+0x32>
    db76:	4640      	mov	r0, r8
    db78:	47b8      	blx	r7
    db7a:	ea49 0900 	orr.w	r9, r9, r0
    db7e:	1c6b      	adds	r3, r5, #1
    db80:	f104 0468 	add.w	r4, r4, #104	; 0x68
    db84:	d1ed      	bne.n	db62 <_fwalk_sglue+0x16>
    db86:	6836      	ldr	r6, [r6, #0]
    db88:	2e00      	cmp	r6, #0
    db8a:	d1e6      	bne.n	db5a <_fwalk_sglue+0xe>
    db8c:	4648      	mov	r0, r9
    db8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    db92:	bf00      	nop

0000db94 <sprintf>:
    db94:	b40e      	push	{r1, r2, r3}
    db96:	b510      	push	{r4, lr}
    db98:	b09d      	sub	sp, #116	; 0x74
    db9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    db9e:	ab1f      	add	r3, sp, #124	; 0x7c
    dba0:	e9cd 0106 	strd	r0, r1, [sp, #24]
    dba4:	9104      	str	r1, [sp, #16]
    dba6:	4909      	ldr	r1, [pc, #36]	; (dbcc <sprintf+0x38>)
    dba8:	f853 2b04 	ldr.w	r2, [r3], #4
    dbac:	9002      	str	r0, [sp, #8]
    dbae:	4c08      	ldr	r4, [pc, #32]	; (dbd0 <sprintf+0x3c>)
    dbb0:	6808      	ldr	r0, [r1, #0]
    dbb2:	9301      	str	r3, [sp, #4]
    dbb4:	a902      	add	r1, sp, #8
    dbb6:	9405      	str	r4, [sp, #20]
    dbb8:	f000 ffa8 	bl	eb0c <_svfprintf_r>
    dbbc:	9b02      	ldr	r3, [sp, #8]
    dbbe:	2200      	movs	r2, #0
    dbc0:	701a      	strb	r2, [r3, #0]
    dbc2:	b01d      	add	sp, #116	; 0x74
    dbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbc8:	b003      	add	sp, #12
    dbca:	4770      	bx	lr
    dbcc:	1fff9160 	.word	0x1fff9160
    dbd0:	ffff0208 	.word	0xffff0208

0000dbd4 <__sread>:
    dbd4:	b510      	push	{r4, lr}
    dbd6:	460c      	mov	r4, r1
    dbd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dbdc:	f000 f96e 	bl	debc <_read_r>
    dbe0:	2800      	cmp	r0, #0
    dbe2:	db03      	blt.n	dbec <__sread+0x18>
    dbe4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    dbe6:	4403      	add	r3, r0
    dbe8:	6523      	str	r3, [r4, #80]	; 0x50
    dbea:	bd10      	pop	{r4, pc}
    dbec:	89a3      	ldrh	r3, [r4, #12]
    dbee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    dbf2:	81a3      	strh	r3, [r4, #12]
    dbf4:	bd10      	pop	{r4, pc}
    dbf6:	bf00      	nop

0000dbf8 <__swrite>:
    dbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbfc:	460c      	mov	r4, r1
    dbfe:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    dc02:	461f      	mov	r7, r3
    dc04:	05cb      	lsls	r3, r1, #23
    dc06:	4605      	mov	r5, r0
    dc08:	4616      	mov	r6, r2
    dc0a:	d40b      	bmi.n	dc24 <__swrite+0x2c>
    dc0c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    dc10:	81a1      	strh	r1, [r4, #12]
    dc12:	463b      	mov	r3, r7
    dc14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    dc18:	4632      	mov	r2, r6
    dc1a:	4628      	mov	r0, r5
    dc1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dc20:	f000 b974 	b.w	df0c <_write_r>
    dc24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    dc28:	2302      	movs	r3, #2
    dc2a:	2200      	movs	r2, #0
    dc2c:	f000 f930 	bl	de90 <_lseek_r>
    dc30:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    dc34:	e7ea      	b.n	dc0c <__swrite+0x14>
    dc36:	bf00      	nop

0000dc38 <__sseek>:
    dc38:	b510      	push	{r4, lr}
    dc3a:	460c      	mov	r4, r1
    dc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dc40:	f000 f926 	bl	de90 <_lseek_r>
    dc44:	89a3      	ldrh	r3, [r4, #12]
    dc46:	1c42      	adds	r2, r0, #1
    dc48:	bf0e      	itee	eq
    dc4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    dc4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    dc52:	6520      	strne	r0, [r4, #80]	; 0x50
    dc54:	81a3      	strh	r3, [r4, #12]
    dc56:	bd10      	pop	{r4, pc}

0000dc58 <__sclose>:
    dc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dc5c:	f000 b906 	b.w	de6c <_close_r>

0000dc60 <memmove>:
    dc60:	4288      	cmp	r0, r1
    dc62:	d90d      	bls.n	dc80 <memmove+0x20>
    dc64:	188b      	adds	r3, r1, r2
    dc66:	4283      	cmp	r3, r0
    dc68:	d90a      	bls.n	dc80 <memmove+0x20>
    dc6a:	eb00 0c02 	add.w	ip, r0, r2
    dc6e:	b1ba      	cbz	r2, dca0 <memmove+0x40>
    dc70:	4662      	mov	r2, ip
    dc72:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    dc76:	f802 cd01 	strb.w	ip, [r2, #-1]!
    dc7a:	4299      	cmp	r1, r3
    dc7c:	d1f9      	bne.n	dc72 <memmove+0x12>
    dc7e:	4770      	bx	lr
    dc80:	2a0f      	cmp	r2, #15
    dc82:	d80e      	bhi.n	dca2 <memmove+0x42>
    dc84:	4603      	mov	r3, r0
    dc86:	f102 3cff 	add.w	ip, r2, #4294967295
    dc8a:	b14a      	cbz	r2, dca0 <memmove+0x40>
    dc8c:	f10c 0c01 	add.w	ip, ip, #1
    dc90:	3b01      	subs	r3, #1
    dc92:	448c      	add	ip, r1
    dc94:	f811 2b01 	ldrb.w	r2, [r1], #1
    dc98:	f803 2f01 	strb.w	r2, [r3, #1]!
    dc9c:	4561      	cmp	r1, ip
    dc9e:	d1f9      	bne.n	dc94 <memmove+0x34>
    dca0:	4770      	bx	lr
    dca2:	ea40 0301 	orr.w	r3, r0, r1
    dca6:	079b      	lsls	r3, r3, #30
    dca8:	d150      	bne.n	dd4c <memmove+0xec>
    dcaa:	f1a2 0310 	sub.w	r3, r2, #16
    dcae:	b570      	push	{r4, r5, r6, lr}
    dcb0:	f101 0c20 	add.w	ip, r1, #32
    dcb4:	f023 050f 	bic.w	r5, r3, #15
    dcb8:	f101 0e10 	add.w	lr, r1, #16
    dcbc:	f100 0410 	add.w	r4, r0, #16
    dcc0:	44ac      	add	ip, r5
    dcc2:	091b      	lsrs	r3, r3, #4
    dcc4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    dcc8:	f844 5c10 	str.w	r5, [r4, #-16]
    dccc:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    dcd0:	f844 5c0c 	str.w	r5, [r4, #-12]
    dcd4:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    dcd8:	f844 5c08 	str.w	r5, [r4, #-8]
    dcdc:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    dce0:	f844 5c04 	str.w	r5, [r4, #-4]
    dce4:	f10e 0e10 	add.w	lr, lr, #16
    dce8:	45e6      	cmp	lr, ip
    dcea:	f104 0410 	add.w	r4, r4, #16
    dcee:	d1e9      	bne.n	dcc4 <memmove+0x64>
    dcf0:	3301      	adds	r3, #1
    dcf2:	f012 0f0c 	tst.w	r2, #12
    dcf6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    dcfa:	f002 040f 	and.w	r4, r2, #15
    dcfe:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    dd02:	d027      	beq.n	dd54 <memmove+0xf4>
    dd04:	3c04      	subs	r4, #4
    dd06:	f024 0603 	bic.w	r6, r4, #3
    dd0a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    dd0e:	441e      	add	r6, r3
    dd10:	1f1c      	subs	r4, r3, #4
    dd12:	468e      	mov	lr, r1
    dd14:	f85e 5b04 	ldr.w	r5, [lr], #4
    dd18:	f844 5f04 	str.w	r5, [r4, #4]!
    dd1c:	42b4      	cmp	r4, r6
    dd1e:	d1f9      	bne.n	dd14 <memmove+0xb4>
    dd20:	f10c 0401 	add.w	r4, ip, #1
    dd24:	f002 0203 	and.w	r2, r2, #3
    dd28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    dd2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    dd30:	f102 3cff 	add.w	ip, r2, #4294967295
    dd34:	b14a      	cbz	r2, dd4a <memmove+0xea>
    dd36:	f10c 0c01 	add.w	ip, ip, #1
    dd3a:	3b01      	subs	r3, #1
    dd3c:	448c      	add	ip, r1
    dd3e:	f811 2b01 	ldrb.w	r2, [r1], #1
    dd42:	f803 2f01 	strb.w	r2, [r3, #1]!
    dd46:	4561      	cmp	r1, ip
    dd48:	d1f9      	bne.n	dd3e <memmove+0xde>
    dd4a:	bd70      	pop	{r4, r5, r6, pc}
    dd4c:	f102 3cff 	add.w	ip, r2, #4294967295
    dd50:	4603      	mov	r3, r0
    dd52:	e79b      	b.n	dc8c <memmove+0x2c>
    dd54:	4622      	mov	r2, r4
    dd56:	e7eb      	b.n	dd30 <memmove+0xd0>

0000dd58 <memset>:
    dd58:	0783      	lsls	r3, r0, #30
    dd5a:	b530      	push	{r4, r5, lr}
    dd5c:	d048      	beq.n	ddf0 <memset+0x98>
    dd5e:	1e54      	subs	r4, r2, #1
    dd60:	2a00      	cmp	r2, #0
    dd62:	d03f      	beq.n	dde4 <memset+0x8c>
    dd64:	b2ca      	uxtb	r2, r1
    dd66:	4603      	mov	r3, r0
    dd68:	e001      	b.n	dd6e <memset+0x16>
    dd6a:	3c01      	subs	r4, #1
    dd6c:	d33a      	bcc.n	dde4 <memset+0x8c>
    dd6e:	f803 2b01 	strb.w	r2, [r3], #1
    dd72:	079d      	lsls	r5, r3, #30
    dd74:	d1f9      	bne.n	dd6a <memset+0x12>
    dd76:	2c03      	cmp	r4, #3
    dd78:	d92d      	bls.n	ddd6 <memset+0x7e>
    dd7a:	b2cd      	uxtb	r5, r1
    dd7c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    dd80:	2c0f      	cmp	r4, #15
    dd82:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    dd86:	d936      	bls.n	ddf6 <memset+0x9e>
    dd88:	f1a4 0210 	sub.w	r2, r4, #16
    dd8c:	f022 0c0f 	bic.w	ip, r2, #15
    dd90:	f103 0e20 	add.w	lr, r3, #32
    dd94:	44e6      	add	lr, ip
    dd96:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    dd9a:	f103 0210 	add.w	r2, r3, #16
    dd9e:	e942 5504 	strd	r5, r5, [r2, #-16]
    dda2:	e942 5502 	strd	r5, r5, [r2, #-8]
    dda6:	3210      	adds	r2, #16
    dda8:	4572      	cmp	r2, lr
    ddaa:	d1f8      	bne.n	dd9e <memset+0x46>
    ddac:	f10c 0201 	add.w	r2, ip, #1
    ddb0:	f014 0f0c 	tst.w	r4, #12
    ddb4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    ddb8:	f004 0c0f 	and.w	ip, r4, #15
    ddbc:	d013      	beq.n	dde6 <memset+0x8e>
    ddbe:	f1ac 0304 	sub.w	r3, ip, #4
    ddc2:	f023 0303 	bic.w	r3, r3, #3
    ddc6:	3304      	adds	r3, #4
    ddc8:	4413      	add	r3, r2
    ddca:	f842 5b04 	str.w	r5, [r2], #4
    ddce:	4293      	cmp	r3, r2
    ddd0:	d1fb      	bne.n	ddca <memset+0x72>
    ddd2:	f00c 0403 	and.w	r4, ip, #3
    ddd6:	b12c      	cbz	r4, dde4 <memset+0x8c>
    ddd8:	b2c9      	uxtb	r1, r1
    ddda:	441c      	add	r4, r3
    dddc:	f803 1b01 	strb.w	r1, [r3], #1
    dde0:	429c      	cmp	r4, r3
    dde2:	d1fb      	bne.n	dddc <memset+0x84>
    dde4:	bd30      	pop	{r4, r5, pc}
    dde6:	4664      	mov	r4, ip
    dde8:	4613      	mov	r3, r2
    ddea:	2c00      	cmp	r4, #0
    ddec:	d1f4      	bne.n	ddd8 <memset+0x80>
    ddee:	e7f9      	b.n	dde4 <memset+0x8c>
    ddf0:	4603      	mov	r3, r0
    ddf2:	4614      	mov	r4, r2
    ddf4:	e7bf      	b.n	dd76 <memset+0x1e>
    ddf6:	461a      	mov	r2, r3
    ddf8:	46a4      	mov	ip, r4
    ddfa:	e7e0      	b.n	ddbe <memset+0x66>

0000ddfc <strncpy>:
    ddfc:	ea40 0301 	orr.w	r3, r0, r1
    de00:	079b      	lsls	r3, r3, #30
    de02:	b530      	push	{r4, r5, lr}
    de04:	d101      	bne.n	de0a <strncpy+0xe>
    de06:	2a03      	cmp	r2, #3
    de08:	d80f      	bhi.n	de2a <strncpy+0x2e>
    de0a:	4684      	mov	ip, r0
    de0c:	f101 3eff 	add.w	lr, r1, #4294967295
    de10:	e007      	b.n	de22 <strncpy+0x26>
    de12:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    de16:	f803 1b01 	strb.w	r1, [r3], #1
    de1a:	1e54      	subs	r4, r2, #1
    de1c:	b1c1      	cbz	r1, de50 <strncpy+0x54>
    de1e:	469c      	mov	ip, r3
    de20:	4622      	mov	r2, r4
    de22:	4663      	mov	r3, ip
    de24:	2a00      	cmp	r2, #0
    de26:	d1f4      	bne.n	de12 <strncpy+0x16>
    de28:	bd30      	pop	{r4, r5, pc}
    de2a:	460b      	mov	r3, r1
    de2c:	4684      	mov	ip, r0
    de2e:	4619      	mov	r1, r3
    de30:	f853 5b04 	ldr.w	r5, [r3], #4
    de34:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    de38:	ea24 0405 	bic.w	r4, r4, r5
    de3c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    de40:	d1e4      	bne.n	de0c <strncpy+0x10>
    de42:	3a04      	subs	r2, #4
    de44:	2a03      	cmp	r2, #3
    de46:	f84c 5b04 	str.w	r5, [ip], #4
    de4a:	4619      	mov	r1, r3
    de4c:	d8ef      	bhi.n	de2e <strncpy+0x32>
    de4e:	e7dd      	b.n	de0c <strncpy+0x10>
    de50:	4494      	add	ip, r2
    de52:	2c00      	cmp	r4, #0
    de54:	d0e8      	beq.n	de28 <strncpy+0x2c>
    de56:	f803 1b01 	strb.w	r1, [r3], #1
    de5a:	4563      	cmp	r3, ip
    de5c:	d1fb      	bne.n	de56 <strncpy+0x5a>
    de5e:	bd30      	pop	{r4, r5, pc}

0000de60 <__locale_mb_cur_max>:
    de60:	4b01      	ldr	r3, [pc, #4]	; (de68 <__locale_mb_cur_max+0x8>)
    de62:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    de66:	4770      	bx	lr
    de68:	1fff8ed4 	.word	0x1fff8ed4

0000de6c <_close_r>:
    de6c:	b538      	push	{r3, r4, r5, lr}
    de6e:	4d07      	ldr	r5, [pc, #28]	; (de8c <_close_r+0x20>)
    de70:	2200      	movs	r2, #0
    de72:	4604      	mov	r4, r0
    de74:	4608      	mov	r0, r1
    de76:	602a      	str	r2, [r5, #0]
    de78:	f7fb fec2 	bl	9c00 <_close>
    de7c:	1c43      	adds	r3, r0, #1
    de7e:	d000      	beq.n	de82 <_close_r+0x16>
    de80:	bd38      	pop	{r3, r4, r5, pc}
    de82:	682b      	ldr	r3, [r5, #0]
    de84:	2b00      	cmp	r3, #0
    de86:	d0fb      	beq.n	de80 <_close_r+0x14>
    de88:	6023      	str	r3, [r4, #0]
    de8a:	bd38      	pop	{r3, r4, r5, pc}
    de8c:	1fffe06c 	.word	0x1fffe06c

0000de90 <_lseek_r>:
    de90:	b538      	push	{r3, r4, r5, lr}
    de92:	460c      	mov	r4, r1
    de94:	4d08      	ldr	r5, [pc, #32]	; (deb8 <_lseek_r+0x28>)
    de96:	4684      	mov	ip, r0
    de98:	4611      	mov	r1, r2
    de9a:	4620      	mov	r0, r4
    de9c:	461a      	mov	r2, r3
    de9e:	2300      	movs	r3, #0
    dea0:	602b      	str	r3, [r5, #0]
    dea2:	4664      	mov	r4, ip
    dea4:	f7fb feb8 	bl	9c18 <_lseek>
    dea8:	1c43      	adds	r3, r0, #1
    deaa:	d000      	beq.n	deae <_lseek_r+0x1e>
    deac:	bd38      	pop	{r3, r4, r5, pc}
    deae:	682b      	ldr	r3, [r5, #0]
    deb0:	2b00      	cmp	r3, #0
    deb2:	d0fb      	beq.n	deac <_lseek_r+0x1c>
    deb4:	6023      	str	r3, [r4, #0]
    deb6:	bd38      	pop	{r3, r4, r5, pc}
    deb8:	1fffe06c 	.word	0x1fffe06c

0000debc <_read_r>:
    debc:	b538      	push	{r3, r4, r5, lr}
    debe:	460c      	mov	r4, r1
    dec0:	4d08      	ldr	r5, [pc, #32]	; (dee4 <_read_r+0x28>)
    dec2:	4684      	mov	ip, r0
    dec4:	4611      	mov	r1, r2
    dec6:	4620      	mov	r0, r4
    dec8:	461a      	mov	r2, r3
    deca:	2300      	movs	r3, #0
    decc:	602b      	str	r3, [r5, #0]
    dece:	4664      	mov	r4, ip
    ded0:	f7fb fe94 	bl	9bfc <_read>
    ded4:	1c43      	adds	r3, r0, #1
    ded6:	d000      	beq.n	deda <_read_r+0x1e>
    ded8:	bd38      	pop	{r3, r4, r5, pc}
    deda:	682b      	ldr	r3, [r5, #0]
    dedc:	2b00      	cmp	r3, #0
    dede:	d0fb      	beq.n	ded8 <_read_r+0x1c>
    dee0:	6023      	str	r3, [r4, #0]
    dee2:	bd38      	pop	{r3, r4, r5, pc}
    dee4:	1fffe06c 	.word	0x1fffe06c

0000dee8 <_sbrk_r>:
    dee8:	b538      	push	{r3, r4, r5, lr}
    deea:	4d07      	ldr	r5, [pc, #28]	; (df08 <_sbrk_r+0x20>)
    deec:	2200      	movs	r2, #0
    deee:	4604      	mov	r4, r0
    def0:	4608      	mov	r0, r1
    def2:	602a      	str	r2, [r5, #0]
    def4:	f7fb fe6c 	bl	9bd0 <_sbrk>
    def8:	1c43      	adds	r3, r0, #1
    defa:	d000      	beq.n	defe <_sbrk_r+0x16>
    defc:	bd38      	pop	{r3, r4, r5, pc}
    defe:	682b      	ldr	r3, [r5, #0]
    df00:	2b00      	cmp	r3, #0
    df02:	d0fb      	beq.n	defc <_sbrk_r+0x14>
    df04:	6023      	str	r3, [r4, #0]
    df06:	bd38      	pop	{r3, r4, r5, pc}
    df08:	1fffe06c 	.word	0x1fffe06c

0000df0c <_write_r>:
    df0c:	b538      	push	{r3, r4, r5, lr}
    df0e:	460c      	mov	r4, r1
    df10:	4d08      	ldr	r5, [pc, #32]	; (df34 <_write_r+0x28>)
    df12:	4684      	mov	ip, r0
    df14:	4611      	mov	r1, r2
    df16:	4620      	mov	r0, r4
    df18:	461a      	mov	r2, r3
    df1a:	2300      	movs	r3, #0
    df1c:	602b      	str	r3, [r5, #0]
    df1e:	4664      	mov	r4, ip
    df20:	f7fb fa82 	bl	9428 <_write>
    df24:	1c43      	adds	r3, r0, #1
    df26:	d000      	beq.n	df2a <_write_r+0x1e>
    df28:	bd38      	pop	{r3, r4, r5, pc}
    df2a:	682b      	ldr	r3, [r5, #0]
    df2c:	2b00      	cmp	r3, #0
    df2e:	d0fb      	beq.n	df28 <_write_r+0x1c>
    df30:	6023      	str	r3, [r4, #0]
    df32:	bd38      	pop	{r3, r4, r5, pc}
    df34:	1fffe06c 	.word	0x1fffe06c

0000df38 <__errno>:
    df38:	4b01      	ldr	r3, [pc, #4]	; (df40 <__errno+0x8>)
    df3a:	6818      	ldr	r0, [r3, #0]
    df3c:	4770      	bx	lr
    df3e:	bf00      	nop
    df40:	1fff9160 	.word	0x1fff9160

0000df44 <__libc_init_array>:
    df44:	b570      	push	{r4, r5, r6, lr}
    df46:	4e0d      	ldr	r6, [pc, #52]	; (df7c <__libc_init_array+0x38>)
    df48:	4d0d      	ldr	r5, [pc, #52]	; (df80 <__libc_init_array+0x3c>)
    df4a:	1b76      	subs	r6, r6, r5
    df4c:	10b6      	asrs	r6, r6, #2
    df4e:	d006      	beq.n	df5e <__libc_init_array+0x1a>
    df50:	2400      	movs	r4, #0
    df52:	f855 3b04 	ldr.w	r3, [r5], #4
    df56:	3401      	adds	r4, #1
    df58:	4798      	blx	r3
    df5a:	42a6      	cmp	r6, r4
    df5c:	d1f9      	bne.n	df52 <__libc_init_array+0xe>
    df5e:	4e09      	ldr	r6, [pc, #36]	; (df84 <__libc_init_array+0x40>)
    df60:	4d09      	ldr	r5, [pc, #36]	; (df88 <__libc_init_array+0x44>)
    df62:	1b76      	subs	r6, r6, r5
    df64:	f007 fc70 	bl	15848 <_init>
    df68:	10b6      	asrs	r6, r6, #2
    df6a:	d006      	beq.n	df7a <__libc_init_array+0x36>
    df6c:	2400      	movs	r4, #0
    df6e:	f855 3b04 	ldr.w	r3, [r5], #4
    df72:	3401      	adds	r4, #1
    df74:	4798      	blx	r3
    df76:	42a6      	cmp	r6, r4
    df78:	d1f9      	bne.n	df6e <__libc_init_array+0x2a>
    df7a:	bd70      	pop	{r4, r5, r6, pc}
    df7c:	00015854 	.word	0x00015854
    df80:	00015854 	.word	0x00015854
    df84:	00015868 	.word	0x00015868
    df88:	00015854 	.word	0x00015854

0000df8c <__retarget_lock_init_recursive>:
    df8c:	4770      	bx	lr
    df8e:	bf00      	nop

0000df90 <__retarget_lock_close_recursive>:
    df90:	4770      	bx	lr
    df92:	bf00      	nop

0000df94 <__retarget_lock_acquire_recursive>:
    df94:	4770      	bx	lr
    df96:	bf00      	nop

0000df98 <__retarget_lock_release_recursive>:
    df98:	4770      	bx	lr
    df9a:	bf00      	nop
    df9c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dfa0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dfa4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dfa8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dfac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dfb0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dfb4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dfb8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dfbc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000dfc0 <strlen>:
    dfc0:	f890 f000 	pld	[r0]
    dfc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    dfc8:	f020 0107 	bic.w	r1, r0, #7
    dfcc:	f06f 0c00 	mvn.w	ip, #0
    dfd0:	f010 0407 	ands.w	r4, r0, #7
    dfd4:	f891 f020 	pld	[r1, #32]
    dfd8:	f040 8049 	bne.w	e06e <strlen+0xae>
    dfdc:	f04f 0400 	mov.w	r4, #0
    dfe0:	f06f 0007 	mvn.w	r0, #7
    dfe4:	e9d1 2300 	ldrd	r2, r3, [r1]
    dfe8:	f891 f040 	pld	[r1, #64]	; 0x40
    dfec:	f100 0008 	add.w	r0, r0, #8
    dff0:	fa82 f24c 	uadd8	r2, r2, ip
    dff4:	faa4 f28c 	sel	r2, r4, ip
    dff8:	fa83 f34c 	uadd8	r3, r3, ip
    dffc:	faa2 f38c 	sel	r3, r2, ip
    e000:	bb4b      	cbnz	r3, e056 <strlen+0x96>
    e002:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    e006:	fa82 f24c 	uadd8	r2, r2, ip
    e00a:	f100 0008 	add.w	r0, r0, #8
    e00e:	faa4 f28c 	sel	r2, r4, ip
    e012:	fa83 f34c 	uadd8	r3, r3, ip
    e016:	faa2 f38c 	sel	r3, r2, ip
    e01a:	b9e3      	cbnz	r3, e056 <strlen+0x96>
    e01c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    e020:	fa82 f24c 	uadd8	r2, r2, ip
    e024:	f100 0008 	add.w	r0, r0, #8
    e028:	faa4 f28c 	sel	r2, r4, ip
    e02c:	fa83 f34c 	uadd8	r3, r3, ip
    e030:	faa2 f38c 	sel	r3, r2, ip
    e034:	b97b      	cbnz	r3, e056 <strlen+0x96>
    e036:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    e03a:	f101 0120 	add.w	r1, r1, #32
    e03e:	fa82 f24c 	uadd8	r2, r2, ip
    e042:	f100 0008 	add.w	r0, r0, #8
    e046:	faa4 f28c 	sel	r2, r4, ip
    e04a:	fa83 f34c 	uadd8	r3, r3, ip
    e04e:	faa2 f38c 	sel	r3, r2, ip
    e052:	2b00      	cmp	r3, #0
    e054:	d0c6      	beq.n	dfe4 <strlen+0x24>
    e056:	2a00      	cmp	r2, #0
    e058:	bf04      	itt	eq
    e05a:	3004      	addeq	r0, #4
    e05c:	461a      	moveq	r2, r3
    e05e:	ba12      	rev	r2, r2
    e060:	fab2 f282 	clz	r2, r2
    e064:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    e068:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    e06c:	4770      	bx	lr
    e06e:	e9d1 2300 	ldrd	r2, r3, [r1]
    e072:	f004 0503 	and.w	r5, r4, #3
    e076:	f1c4 0000 	rsb	r0, r4, #0
    e07a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e07e:	f014 0f04 	tst.w	r4, #4
    e082:	f891 f040 	pld	[r1, #64]	; 0x40
    e086:	fa0c f505 	lsl.w	r5, ip, r5
    e08a:	ea62 0205 	orn	r2, r2, r5
    e08e:	bf1c      	itt	ne
    e090:	ea63 0305 	ornne	r3, r3, r5
    e094:	4662      	movne	r2, ip
    e096:	f04f 0400 	mov.w	r4, #0
    e09a:	e7a9      	b.n	dff0 <strlen+0x30>

0000e09c <register_fini>:
    e09c:	4b02      	ldr	r3, [pc, #8]	; (e0a8 <register_fini+0xc>)
    e09e:	b113      	cbz	r3, e0a6 <register_fini+0xa>
    e0a0:	4802      	ldr	r0, [pc, #8]	; (e0ac <register_fini+0x10>)
    e0a2:	f000 b805 	b.w	e0b0 <atexit>
    e0a6:	4770      	bx	lr
    e0a8:	00000000 	.word	0x00000000
    e0ac:	000108f5 	.word	0x000108f5

0000e0b0 <atexit>:
    e0b0:	2300      	movs	r3, #0
    e0b2:	4601      	mov	r1, r0
    e0b4:	461a      	mov	r2, r3
    e0b6:	4618      	mov	r0, r3
    e0b8:	f002 bcba 	b.w	10a30 <__register_exitproc>

0000e0bc <_malloc_trim_r>:
    e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0be:	4f24      	ldr	r7, [pc, #144]	; (e150 <_malloc_trim_r+0x94>)
    e0c0:	460c      	mov	r4, r1
    e0c2:	4606      	mov	r6, r0
    e0c4:	f7ff fa8a 	bl	d5dc <__malloc_lock>
    e0c8:	68bb      	ldr	r3, [r7, #8]
    e0ca:	685d      	ldr	r5, [r3, #4]
    e0cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    e0d0:	310f      	adds	r1, #15
    e0d2:	f025 0503 	bic.w	r5, r5, #3
    e0d6:	194b      	adds	r3, r1, r5
    e0d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    e0dc:	f023 030f 	bic.w	r3, r3, #15
    e0e0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    e0e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    e0e8:	db07      	blt.n	e0fa <_malloc_trim_r+0x3e>
    e0ea:	2100      	movs	r1, #0
    e0ec:	4630      	mov	r0, r6
    e0ee:	f7ff fefb 	bl	dee8 <_sbrk_r>
    e0f2:	68bb      	ldr	r3, [r7, #8]
    e0f4:	442b      	add	r3, r5
    e0f6:	4298      	cmp	r0, r3
    e0f8:	d004      	beq.n	e104 <_malloc_trim_r+0x48>
    e0fa:	4630      	mov	r0, r6
    e0fc:	f7ff fa74 	bl	d5e8 <__malloc_unlock>
    e100:	2000      	movs	r0, #0
    e102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e104:	4261      	negs	r1, r4
    e106:	4630      	mov	r0, r6
    e108:	f7ff feee 	bl	dee8 <_sbrk_r>
    e10c:	3001      	adds	r0, #1
    e10e:	d00d      	beq.n	e12c <_malloc_trim_r+0x70>
    e110:	4a10      	ldr	r2, [pc, #64]	; (e154 <_malloc_trim_r+0x98>)
    e112:	68bb      	ldr	r3, [r7, #8]
    e114:	1b2d      	subs	r5, r5, r4
    e116:	f045 0501 	orr.w	r5, r5, #1
    e11a:	605d      	str	r5, [r3, #4]
    e11c:	6813      	ldr	r3, [r2, #0]
    e11e:	4630      	mov	r0, r6
    e120:	1b1b      	subs	r3, r3, r4
    e122:	6013      	str	r3, [r2, #0]
    e124:	f7ff fa60 	bl	d5e8 <__malloc_unlock>
    e128:	2001      	movs	r0, #1
    e12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e12c:	2100      	movs	r1, #0
    e12e:	4630      	mov	r0, r6
    e130:	f7ff feda 	bl	dee8 <_sbrk_r>
    e134:	68ba      	ldr	r2, [r7, #8]
    e136:	1a83      	subs	r3, r0, r2
    e138:	2b0f      	cmp	r3, #15
    e13a:	ddde      	ble.n	e0fa <_malloc_trim_r+0x3e>
    e13c:	f043 0301 	orr.w	r3, r3, #1
    e140:	6053      	str	r3, [r2, #4]
    e142:	4b05      	ldr	r3, [pc, #20]	; (e158 <_malloc_trim_r+0x9c>)
    e144:	4903      	ldr	r1, [pc, #12]	; (e154 <_malloc_trim_r+0x98>)
    e146:	681b      	ldr	r3, [r3, #0]
    e148:	1ac0      	subs	r0, r0, r3
    e14a:	6008      	str	r0, [r1, #0]
    e14c:	e7d5      	b.n	e0fa <_malloc_trim_r+0x3e>
    e14e:	bf00      	nop
    e150:	1fff8ab8 	.word	0x1fff8ab8
    e154:	1fffdefc 	.word	0x1fffdefc
    e158:	1fff8ec0 	.word	0x1fff8ec0

0000e15c <_free_r>:
    e15c:	2900      	cmp	r1, #0
    e15e:	d061      	beq.n	e224 <_free_r+0xc8>
    e160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e162:	460c      	mov	r4, r1
    e164:	4606      	mov	r6, r0
    e166:	f7ff fa39 	bl	d5dc <__malloc_lock>
    e16a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    e16e:	4f7b      	ldr	r7, [pc, #492]	; (e35c <_free_r+0x200>)
    e170:	f1a4 0508 	sub.w	r5, r4, #8
    e174:	f022 0101 	bic.w	r1, r2, #1
    e178:	eb05 0c01 	add.w	ip, r5, r1
    e17c:	68b8      	ldr	r0, [r7, #8]
    e17e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e182:	4560      	cmp	r0, ip
    e184:	f023 0303 	bic.w	r3, r3, #3
    e188:	f000 808b 	beq.w	e2a2 <_free_r+0x146>
    e18c:	07d2      	lsls	r2, r2, #31
    e18e:	f8cc 3004 	str.w	r3, [ip, #4]
    e192:	d432      	bmi.n	e1fa <_free_r+0x9e>
    e194:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e198:	1aad      	subs	r5, r5, r2
    e19a:	4411      	add	r1, r2
    e19c:	68aa      	ldr	r2, [r5, #8]
    e19e:	f107 0008 	add.w	r0, r7, #8
    e1a2:	4282      	cmp	r2, r0
    e1a4:	d06a      	beq.n	e27c <_free_r+0x120>
    e1a6:	eb0c 0403 	add.w	r4, ip, r3
    e1aa:	f8d4 e004 	ldr.w	lr, [r4, #4]
    e1ae:	68ec      	ldr	r4, [r5, #12]
    e1b0:	60d4      	str	r4, [r2, #12]
    e1b2:	f01e 0f01 	tst.w	lr, #1
    e1b6:	60a2      	str	r2, [r4, #8]
    e1b8:	f000 8097 	beq.w	e2ea <_free_r+0x18e>
    e1bc:	f041 0301 	orr.w	r3, r1, #1
    e1c0:	606b      	str	r3, [r5, #4]
    e1c2:	f8cc 1000 	str.w	r1, [ip]
    e1c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e1ca:	d235      	bcs.n	e238 <_free_r+0xdc>
    e1cc:	6878      	ldr	r0, [r7, #4]
    e1ce:	08cb      	lsrs	r3, r1, #3
    e1d0:	2201      	movs	r2, #1
    e1d2:	0949      	lsrs	r1, r1, #5
    e1d4:	3301      	adds	r3, #1
    e1d6:	408a      	lsls	r2, r1
    e1d8:	4302      	orrs	r2, r0
    e1da:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    e1de:	607a      	str	r2, [r7, #4]
    e1e0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    e1e4:	3a08      	subs	r2, #8
    e1e6:	e9c5 1202 	strd	r1, r2, [r5, #8]
    e1ea:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    e1ee:	60cd      	str	r5, [r1, #12]
    e1f0:	4630      	mov	r0, r6
    e1f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e1f6:	f7ff b9f7 	b.w	d5e8 <__malloc_unlock>
    e1fa:	eb0c 0203 	add.w	r2, ip, r3
    e1fe:	6852      	ldr	r2, [r2, #4]
    e200:	07d0      	lsls	r0, r2, #31
    e202:	d410      	bmi.n	e226 <_free_r+0xca>
    e204:	4419      	add	r1, r3
    e206:	f107 0008 	add.w	r0, r7, #8
    e20a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e20e:	4283      	cmp	r3, r0
    e210:	d073      	beq.n	e2fa <_free_r+0x19e>
    e212:	f8dc 200c 	ldr.w	r2, [ip, #12]
    e216:	60da      	str	r2, [r3, #12]
    e218:	6093      	str	r3, [r2, #8]
    e21a:	f041 0301 	orr.w	r3, r1, #1
    e21e:	606b      	str	r3, [r5, #4]
    e220:	5069      	str	r1, [r5, r1]
    e222:	e7d0      	b.n	e1c6 <_free_r+0x6a>
    e224:	4770      	bx	lr
    e226:	f041 0301 	orr.w	r3, r1, #1
    e22a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e22e:	f844 3c04 	str.w	r3, [r4, #-4]
    e232:	f8cc 1000 	str.w	r1, [ip]
    e236:	d3c9      	bcc.n	e1cc <_free_r+0x70>
    e238:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    e23c:	ea4f 2351 	mov.w	r3, r1, lsr #9
    e240:	d248      	bcs.n	e2d4 <_free_r+0x178>
    e242:	098b      	lsrs	r3, r1, #6
    e244:	f103 0039 	add.w	r0, r3, #57	; 0x39
    e248:	f103 0238 	add.w	r2, r3, #56	; 0x38
    e24c:	00c3      	lsls	r3, r0, #3
    e24e:	18f8      	adds	r0, r7, r3
    e250:	58fb      	ldr	r3, [r7, r3]
    e252:	3808      	subs	r0, #8
    e254:	4298      	cmp	r0, r3
    e256:	d059      	beq.n	e30c <_free_r+0x1b0>
    e258:	685a      	ldr	r2, [r3, #4]
    e25a:	f022 0203 	bic.w	r2, r2, #3
    e25e:	428a      	cmp	r2, r1
    e260:	d902      	bls.n	e268 <_free_r+0x10c>
    e262:	689b      	ldr	r3, [r3, #8]
    e264:	4298      	cmp	r0, r3
    e266:	d1f7      	bne.n	e258 <_free_r+0xfc>
    e268:	68d8      	ldr	r0, [r3, #12]
    e26a:	e9c5 3002 	strd	r3, r0, [r5, #8]
    e26e:	6085      	str	r5, [r0, #8]
    e270:	60dd      	str	r5, [r3, #12]
    e272:	4630      	mov	r0, r6
    e274:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e278:	f7ff b9b6 	b.w	d5e8 <__malloc_unlock>
    e27c:	eb0c 0203 	add.w	r2, ip, r3
    e280:	6852      	ldr	r2, [r2, #4]
    e282:	07d2      	lsls	r2, r2, #31
    e284:	d463      	bmi.n	e34e <_free_r+0x1f2>
    e286:	440b      	add	r3, r1
    e288:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    e28c:	60ca      	str	r2, [r1, #12]
    e28e:	6091      	str	r1, [r2, #8]
    e290:	f043 0201 	orr.w	r2, r3, #1
    e294:	606a      	str	r2, [r5, #4]
    e296:	4630      	mov	r0, r6
    e298:	50eb      	str	r3, [r5, r3]
    e29a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e29e:	f7ff b9a3 	b.w	d5e8 <__malloc_unlock>
    e2a2:	440b      	add	r3, r1
    e2a4:	07d1      	lsls	r1, r2, #31
    e2a6:	d407      	bmi.n	e2b8 <_free_r+0x15c>
    e2a8:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e2ac:	1aad      	subs	r5, r5, r2
    e2ae:	4413      	add	r3, r2
    e2b0:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    e2b4:	60ca      	str	r2, [r1, #12]
    e2b6:	6091      	str	r1, [r2, #8]
    e2b8:	f043 0201 	orr.w	r2, r3, #1
    e2bc:	606a      	str	r2, [r5, #4]
    e2be:	4a28      	ldr	r2, [pc, #160]	; (e360 <_free_r+0x204>)
    e2c0:	60bd      	str	r5, [r7, #8]
    e2c2:	6812      	ldr	r2, [r2, #0]
    e2c4:	429a      	cmp	r2, r3
    e2c6:	d893      	bhi.n	e1f0 <_free_r+0x94>
    e2c8:	4b26      	ldr	r3, [pc, #152]	; (e364 <_free_r+0x208>)
    e2ca:	4630      	mov	r0, r6
    e2cc:	6819      	ldr	r1, [r3, #0]
    e2ce:	f7ff fef5 	bl	e0bc <_malloc_trim_r>
    e2d2:	e78d      	b.n	e1f0 <_free_r+0x94>
    e2d4:	2b14      	cmp	r3, #20
    e2d6:	d90a      	bls.n	e2ee <_free_r+0x192>
    e2d8:	2b54      	cmp	r3, #84	; 0x54
    e2da:	d81f      	bhi.n	e31c <_free_r+0x1c0>
    e2dc:	0b0b      	lsrs	r3, r1, #12
    e2de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    e2e2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    e2e6:	00c3      	lsls	r3, r0, #3
    e2e8:	e7b1      	b.n	e24e <_free_r+0xf2>
    e2ea:	4419      	add	r1, r3
    e2ec:	e78d      	b.n	e20a <_free_r+0xae>
    e2ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    e2f2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    e2f6:	00c3      	lsls	r3, r0, #3
    e2f8:	e7a9      	b.n	e24e <_free_r+0xf2>
    e2fa:	f041 0301 	orr.w	r3, r1, #1
    e2fe:	e9c7 5504 	strd	r5, r5, [r7, #16]
    e302:	e9c5 0002 	strd	r0, r0, [r5, #8]
    e306:	606b      	str	r3, [r5, #4]
    e308:	5069      	str	r1, [r5, r1]
    e30a:	e771      	b.n	e1f0 <_free_r+0x94>
    e30c:	6879      	ldr	r1, [r7, #4]
    e30e:	1092      	asrs	r2, r2, #2
    e310:	2401      	movs	r4, #1
    e312:	fa04 f202 	lsl.w	r2, r4, r2
    e316:	430a      	orrs	r2, r1
    e318:	607a      	str	r2, [r7, #4]
    e31a:	e7a6      	b.n	e26a <_free_r+0x10e>
    e31c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    e320:	d806      	bhi.n	e330 <_free_r+0x1d4>
    e322:	0bcb      	lsrs	r3, r1, #15
    e324:	f103 0078 	add.w	r0, r3, #120	; 0x78
    e328:	f103 0277 	add.w	r2, r3, #119	; 0x77
    e32c:	00c3      	lsls	r3, r0, #3
    e32e:	e78e      	b.n	e24e <_free_r+0xf2>
    e330:	f240 5254 	movw	r2, #1364	; 0x554
    e334:	4293      	cmp	r3, r2
    e336:	d806      	bhi.n	e346 <_free_r+0x1ea>
    e338:	0c8b      	lsrs	r3, r1, #18
    e33a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    e33e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    e342:	00c3      	lsls	r3, r0, #3
    e344:	e783      	b.n	e24e <_free_r+0xf2>
    e346:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    e34a:	227e      	movs	r2, #126	; 0x7e
    e34c:	e77f      	b.n	e24e <_free_r+0xf2>
    e34e:	f041 0301 	orr.w	r3, r1, #1
    e352:	606b      	str	r3, [r5, #4]
    e354:	f8cc 1000 	str.w	r1, [ip]
    e358:	e74a      	b.n	e1f0 <_free_r+0x94>
    e35a:	bf00      	nop
    e35c:	1fff8ab8 	.word	0x1fff8ab8
    e360:	1fff8ec4 	.word	0x1fff8ec4
    e364:	1fffdf2c 	.word	0x1fffdf2c

0000e368 <__ascii_mbtowc>:
    e368:	b082      	sub	sp, #8
    e36a:	b149      	cbz	r1, e380 <__ascii_mbtowc+0x18>
    e36c:	b15a      	cbz	r2, e386 <__ascii_mbtowc+0x1e>
    e36e:	b16b      	cbz	r3, e38c <__ascii_mbtowc+0x24>
    e370:	7813      	ldrb	r3, [r2, #0]
    e372:	600b      	str	r3, [r1, #0]
    e374:	7812      	ldrb	r2, [r2, #0]
    e376:	1e10      	subs	r0, r2, #0
    e378:	bf18      	it	ne
    e37a:	2001      	movne	r0, #1
    e37c:	b002      	add	sp, #8
    e37e:	4770      	bx	lr
    e380:	a901      	add	r1, sp, #4
    e382:	2a00      	cmp	r2, #0
    e384:	d1f3      	bne.n	e36e <__ascii_mbtowc+0x6>
    e386:	4610      	mov	r0, r2
    e388:	b002      	add	sp, #8
    e38a:	4770      	bx	lr
    e38c:	f06f 0001 	mvn.w	r0, #1
    e390:	e7f4      	b.n	e37c <__ascii_mbtowc+0x14>
    e392:	bf00      	nop

0000e394 <_Balloc>:
    e394:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e396:	b570      	push	{r4, r5, r6, lr}
    e398:	4605      	mov	r5, r0
    e39a:	460c      	mov	r4, r1
    e39c:	b14b      	cbz	r3, e3b2 <_Balloc+0x1e>
    e39e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    e3a2:	b180      	cbz	r0, e3c6 <_Balloc+0x32>
    e3a4:	6802      	ldr	r2, [r0, #0]
    e3a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    e3aa:	2300      	movs	r3, #0
    e3ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
    e3b0:	bd70      	pop	{r4, r5, r6, pc}
    e3b2:	2221      	movs	r2, #33	; 0x21
    e3b4:	2104      	movs	r1, #4
    e3b6:	f002 fb9f 	bl	10af8 <_calloc_r>
    e3ba:	4603      	mov	r3, r0
    e3bc:	6468      	str	r0, [r5, #68]	; 0x44
    e3be:	2800      	cmp	r0, #0
    e3c0:	d1ed      	bne.n	e39e <_Balloc+0xa>
    e3c2:	2000      	movs	r0, #0
    e3c4:	bd70      	pop	{r4, r5, r6, pc}
    e3c6:	2101      	movs	r1, #1
    e3c8:	fa01 f604 	lsl.w	r6, r1, r4
    e3cc:	1d72      	adds	r2, r6, #5
    e3ce:	0092      	lsls	r2, r2, #2
    e3d0:	4628      	mov	r0, r5
    e3d2:	f002 fb91 	bl	10af8 <_calloc_r>
    e3d6:	2800      	cmp	r0, #0
    e3d8:	d0f3      	beq.n	e3c2 <_Balloc+0x2e>
    e3da:	e9c0 4601 	strd	r4, r6, [r0, #4]
    e3de:	e7e4      	b.n	e3aa <_Balloc+0x16>

0000e3e0 <_Bfree>:
    e3e0:	b131      	cbz	r1, e3f0 <_Bfree+0x10>
    e3e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e3e4:	684a      	ldr	r2, [r1, #4]
    e3e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e3ea:	6008      	str	r0, [r1, #0]
    e3ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    e3f0:	4770      	bx	lr
    e3f2:	bf00      	nop

0000e3f4 <__multadd>:
    e3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3f8:	690d      	ldr	r5, [r1, #16]
    e3fa:	4607      	mov	r7, r0
    e3fc:	460e      	mov	r6, r1
    e3fe:	461c      	mov	r4, r3
    e400:	f101 0e14 	add.w	lr, r1, #20
    e404:	2000      	movs	r0, #0
    e406:	f8de 1000 	ldr.w	r1, [lr]
    e40a:	b28b      	uxth	r3, r1
    e40c:	fb02 4303 	mla	r3, r2, r3, r4
    e410:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    e414:	0c09      	lsrs	r1, r1, #16
    e416:	fb02 cc01 	mla	ip, r2, r1, ip
    e41a:	3001      	adds	r0, #1
    e41c:	b29b      	uxth	r3, r3
    e41e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
    e422:	4285      	cmp	r5, r0
    e424:	f84e 3b04 	str.w	r3, [lr], #4
    e428:	ea4f 441c 	mov.w	r4, ip, lsr #16
    e42c:	dceb      	bgt.n	e406 <__multadd+0x12>
    e42e:	b13c      	cbz	r4, e440 <__multadd+0x4c>
    e430:	68b3      	ldr	r3, [r6, #8]
    e432:	42ab      	cmp	r3, r5
    e434:	dd07      	ble.n	e446 <__multadd+0x52>
    e436:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    e43a:	3501      	adds	r5, #1
    e43c:	615c      	str	r4, [r3, #20]
    e43e:	6135      	str	r5, [r6, #16]
    e440:	4630      	mov	r0, r6
    e442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e446:	6871      	ldr	r1, [r6, #4]
    e448:	4638      	mov	r0, r7
    e44a:	3101      	adds	r1, #1
    e44c:	f7ff ffa2 	bl	e394 <_Balloc>
    e450:	4680      	mov	r8, r0
    e452:	b1a8      	cbz	r0, e480 <__multadd+0x8c>
    e454:	6932      	ldr	r2, [r6, #16]
    e456:	3202      	adds	r2, #2
    e458:	f106 010c 	add.w	r1, r6, #12
    e45c:	0092      	lsls	r2, r2, #2
    e45e:	300c      	adds	r0, #12
    e460:	f7fb fab4 	bl	99cc <memcpy>
    e464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e466:	6872      	ldr	r2, [r6, #4]
    e468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e46c:	6031      	str	r1, [r6, #0]
    e46e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e472:	4646      	mov	r6, r8
    e474:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    e478:	3501      	adds	r5, #1
    e47a:	615c      	str	r4, [r3, #20]
    e47c:	6135      	str	r5, [r6, #16]
    e47e:	e7df      	b.n	e440 <__multadd+0x4c>
    e480:	4b02      	ldr	r3, [pc, #8]	; (e48c <__multadd+0x98>)
    e482:	4803      	ldr	r0, [pc, #12]	; (e490 <__multadd+0x9c>)
    e484:	4642      	mov	r2, r8
    e486:	21ba      	movs	r1, #186	; 0xba
    e488:	f002 fb16 	bl	10ab8 <__assert_func>
    e48c:	000155b8 	.word	0x000155b8
    e490:	000155cc 	.word	0x000155cc

0000e494 <__hi0bits>:
    e494:	0c02      	lsrs	r2, r0, #16
    e496:	0412      	lsls	r2, r2, #16
    e498:	4603      	mov	r3, r0
    e49a:	b9ca      	cbnz	r2, e4d0 <__hi0bits+0x3c>
    e49c:	0403      	lsls	r3, r0, #16
    e49e:	2010      	movs	r0, #16
    e4a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    e4a4:	bf04      	itt	eq
    e4a6:	021b      	lsleq	r3, r3, #8
    e4a8:	3008      	addeq	r0, #8
    e4aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    e4ae:	bf04      	itt	eq
    e4b0:	011b      	lsleq	r3, r3, #4
    e4b2:	3004      	addeq	r0, #4
    e4b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    e4b8:	bf04      	itt	eq
    e4ba:	009b      	lsleq	r3, r3, #2
    e4bc:	3002      	addeq	r0, #2
    e4be:	2b00      	cmp	r3, #0
    e4c0:	db05      	blt.n	e4ce <__hi0bits+0x3a>
    e4c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    e4c6:	f100 0001 	add.w	r0, r0, #1
    e4ca:	bf08      	it	eq
    e4cc:	2020      	moveq	r0, #32
    e4ce:	4770      	bx	lr
    e4d0:	2000      	movs	r0, #0
    e4d2:	e7e5      	b.n	e4a0 <__hi0bits+0xc>

0000e4d4 <__lo0bits>:
    e4d4:	6803      	ldr	r3, [r0, #0]
    e4d6:	f013 0207 	ands.w	r2, r3, #7
    e4da:	4601      	mov	r1, r0
    e4dc:	d007      	beq.n	e4ee <__lo0bits+0x1a>
    e4de:	07da      	lsls	r2, r3, #31
    e4e0:	d41f      	bmi.n	e522 <__lo0bits+0x4e>
    e4e2:	0798      	lsls	r0, r3, #30
    e4e4:	d521      	bpl.n	e52a <__lo0bits+0x56>
    e4e6:	085b      	lsrs	r3, r3, #1
    e4e8:	600b      	str	r3, [r1, #0]
    e4ea:	2001      	movs	r0, #1
    e4ec:	4770      	bx	lr
    e4ee:	b298      	uxth	r0, r3
    e4f0:	b1a0      	cbz	r0, e51c <__lo0bits+0x48>
    e4f2:	4610      	mov	r0, r2
    e4f4:	b2da      	uxtb	r2, r3
    e4f6:	b90a      	cbnz	r2, e4fc <__lo0bits+0x28>
    e4f8:	3008      	adds	r0, #8
    e4fa:	0a1b      	lsrs	r3, r3, #8
    e4fc:	071a      	lsls	r2, r3, #28
    e4fe:	bf04      	itt	eq
    e500:	091b      	lsreq	r3, r3, #4
    e502:	3004      	addeq	r0, #4
    e504:	079a      	lsls	r2, r3, #30
    e506:	bf04      	itt	eq
    e508:	089b      	lsreq	r3, r3, #2
    e50a:	3002      	addeq	r0, #2
    e50c:	07da      	lsls	r2, r3, #31
    e50e:	d403      	bmi.n	e518 <__lo0bits+0x44>
    e510:	085b      	lsrs	r3, r3, #1
    e512:	f100 0001 	add.w	r0, r0, #1
    e516:	d006      	beq.n	e526 <__lo0bits+0x52>
    e518:	600b      	str	r3, [r1, #0]
    e51a:	4770      	bx	lr
    e51c:	0c1b      	lsrs	r3, r3, #16
    e51e:	2010      	movs	r0, #16
    e520:	e7e8      	b.n	e4f4 <__lo0bits+0x20>
    e522:	2000      	movs	r0, #0
    e524:	4770      	bx	lr
    e526:	2020      	movs	r0, #32
    e528:	4770      	bx	lr
    e52a:	089b      	lsrs	r3, r3, #2
    e52c:	600b      	str	r3, [r1, #0]
    e52e:	2002      	movs	r0, #2
    e530:	4770      	bx	lr
    e532:	bf00      	nop

0000e534 <__i2b>:
    e534:	b538      	push	{r3, r4, r5, lr}
    e536:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e538:	4604      	mov	r4, r0
    e53a:	460d      	mov	r5, r1
    e53c:	b14b      	cbz	r3, e552 <__i2b+0x1e>
    e53e:	6858      	ldr	r0, [r3, #4]
    e540:	b1b0      	cbz	r0, e570 <__i2b+0x3c>
    e542:	6802      	ldr	r2, [r0, #0]
    e544:	605a      	str	r2, [r3, #4]
    e546:	2200      	movs	r2, #0
    e548:	2301      	movs	r3, #1
    e54a:	e9c0 3504 	strd	r3, r5, [r0, #16]
    e54e:	60c2      	str	r2, [r0, #12]
    e550:	bd38      	pop	{r3, r4, r5, pc}
    e552:	2221      	movs	r2, #33	; 0x21
    e554:	2104      	movs	r1, #4
    e556:	f002 facf 	bl	10af8 <_calloc_r>
    e55a:	4603      	mov	r3, r0
    e55c:	6460      	str	r0, [r4, #68]	; 0x44
    e55e:	2800      	cmp	r0, #0
    e560:	d1ed      	bne.n	e53e <__i2b+0xa>
    e562:	4b09      	ldr	r3, [pc, #36]	; (e588 <__i2b+0x54>)
    e564:	4809      	ldr	r0, [pc, #36]	; (e58c <__i2b+0x58>)
    e566:	2200      	movs	r2, #0
    e568:	f240 1145 	movw	r1, #325	; 0x145
    e56c:	f002 faa4 	bl	10ab8 <__assert_func>
    e570:	221c      	movs	r2, #28
    e572:	2101      	movs	r1, #1
    e574:	4620      	mov	r0, r4
    e576:	f002 fabf 	bl	10af8 <_calloc_r>
    e57a:	2800      	cmp	r0, #0
    e57c:	d0f1      	beq.n	e562 <__i2b+0x2e>
    e57e:	2201      	movs	r2, #1
    e580:	2302      	movs	r3, #2
    e582:	e9c0 2301 	strd	r2, r3, [r0, #4]
    e586:	e7de      	b.n	e546 <__i2b+0x12>
    e588:	000155b8 	.word	0x000155b8
    e58c:	000155cc 	.word	0x000155cc

0000e590 <__multiply>:
    e590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e594:	690e      	ldr	r6, [r1, #16]
    e596:	6915      	ldr	r5, [r2, #16]
    e598:	42ae      	cmp	r6, r5
    e59a:	b085      	sub	sp, #20
    e59c:	4688      	mov	r8, r1
    e59e:	4614      	mov	r4, r2
    e5a0:	db05      	blt.n	e5ae <__multiply+0x1e>
    e5a2:	462a      	mov	r2, r5
    e5a4:	4623      	mov	r3, r4
    e5a6:	4635      	mov	r5, r6
    e5a8:	460c      	mov	r4, r1
    e5aa:	4616      	mov	r6, r2
    e5ac:	4698      	mov	r8, r3
    e5ae:	68a3      	ldr	r3, [r4, #8]
    e5b0:	6861      	ldr	r1, [r4, #4]
    e5b2:	19af      	adds	r7, r5, r6
    e5b4:	42bb      	cmp	r3, r7
    e5b6:	bfb8      	it	lt
    e5b8:	3101      	addlt	r1, #1
    e5ba:	f7ff feeb 	bl	e394 <_Balloc>
    e5be:	9001      	str	r0, [sp, #4]
    e5c0:	2800      	cmp	r0, #0
    e5c2:	f000 8087 	beq.w	e6d4 <__multiply+0x144>
    e5c6:	9b01      	ldr	r3, [sp, #4]
    e5c8:	f103 0914 	add.w	r9, r3, #20
    e5cc:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    e5d0:	45d1      	cmp	r9, sl
    e5d2:	d205      	bcs.n	e5e0 <__multiply+0x50>
    e5d4:	464b      	mov	r3, r9
    e5d6:	2200      	movs	r2, #0
    e5d8:	f843 2b04 	str.w	r2, [r3], #4
    e5dc:	459a      	cmp	sl, r3
    e5de:	d8fb      	bhi.n	e5d8 <__multiply+0x48>
    e5e0:	f108 0814 	add.w	r8, r8, #20
    e5e4:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    e5e8:	f104 0314 	add.w	r3, r4, #20
    e5ec:	45d8      	cmp	r8, fp
    e5ee:	461a      	mov	r2, r3
    e5f0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    e5f4:	d25f      	bcs.n	e6b6 <__multiply+0x126>
    e5f6:	1b2b      	subs	r3, r5, r4
    e5f8:	3b15      	subs	r3, #21
    e5fa:	f023 0303 	bic.w	r3, r3, #3
    e5fe:	3304      	adds	r3, #4
    e600:	3415      	adds	r4, #21
    e602:	42a5      	cmp	r5, r4
    e604:	bf38      	it	cc
    e606:	2304      	movcc	r3, #4
    e608:	e9cd a702 	strd	sl, r7, [sp, #8]
    e60c:	46ac      	mov	ip, r5
    e60e:	461f      	mov	r7, r3
    e610:	4692      	mov	sl, r2
    e612:	e005      	b.n	e620 <__multiply+0x90>
    e614:	0c09      	lsrs	r1, r1, #16
    e616:	d129      	bne.n	e66c <__multiply+0xdc>
    e618:	45c3      	cmp	fp, r8
    e61a:	f109 0904 	add.w	r9, r9, #4
    e61e:	d948      	bls.n	e6b2 <__multiply+0x122>
    e620:	f858 1b04 	ldr.w	r1, [r8], #4
    e624:	b28d      	uxth	r5, r1
    e626:	2d00      	cmp	r5, #0
    e628:	d0f4      	beq.n	e614 <__multiply+0x84>
    e62a:	4656      	mov	r6, sl
    e62c:	464c      	mov	r4, r9
    e62e:	2300      	movs	r3, #0
    e630:	f856 1b04 	ldr.w	r1, [r6], #4
    e634:	6822      	ldr	r2, [r4, #0]
    e636:	fa1f fe81 	uxth.w	lr, r1
    e63a:	b290      	uxth	r0, r2
    e63c:	0c09      	lsrs	r1, r1, #16
    e63e:	fb05 000e 	mla	r0, r5, lr, r0
    e642:	0c12      	lsrs	r2, r2, #16
    e644:	4403      	add	r3, r0
    e646:	fb05 2201 	mla	r2, r5, r1, r2
    e64a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e64e:	b29b      	uxth	r3, r3
    e650:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e654:	45b4      	cmp	ip, r6
    e656:	f844 3b04 	str.w	r3, [r4], #4
    e65a:	ea4f 4312 	mov.w	r3, r2, lsr #16
    e65e:	d8e7      	bhi.n	e630 <__multiply+0xa0>
    e660:	f849 3007 	str.w	r3, [r9, r7]
    e664:	f858 1c04 	ldr.w	r1, [r8, #-4]
    e668:	0c09      	lsrs	r1, r1, #16
    e66a:	d0d5      	beq.n	e618 <__multiply+0x88>
    e66c:	f8d9 3000 	ldr.w	r3, [r9]
    e670:	4650      	mov	r0, sl
    e672:	461a      	mov	r2, r3
    e674:	464c      	mov	r4, r9
    e676:	2600      	movs	r6, #0
    e678:	8805      	ldrh	r5, [r0, #0]
    e67a:	0c12      	lsrs	r2, r2, #16
    e67c:	fb01 2205 	mla	r2, r1, r5, r2
    e680:	4416      	add	r6, r2
    e682:	b29b      	uxth	r3, r3
    e684:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    e688:	f844 3b04 	str.w	r3, [r4], #4
    e68c:	f850 5b04 	ldr.w	r5, [r0], #4
    e690:	6822      	ldr	r2, [r4, #0]
    e692:	0c2d      	lsrs	r5, r5, #16
    e694:	b293      	uxth	r3, r2
    e696:	fb01 3305 	mla	r3, r1, r5, r3
    e69a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    e69e:	4584      	cmp	ip, r0
    e6a0:	ea4f 4613 	mov.w	r6, r3, lsr #16
    e6a4:	d8e8      	bhi.n	e678 <__multiply+0xe8>
    e6a6:	45c3      	cmp	fp, r8
    e6a8:	f849 3007 	str.w	r3, [r9, r7]
    e6ac:	f109 0904 	add.w	r9, r9, #4
    e6b0:	d8b6      	bhi.n	e620 <__multiply+0x90>
    e6b2:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    e6b6:	2f00      	cmp	r7, #0
    e6b8:	dc02      	bgt.n	e6c0 <__multiply+0x130>
    e6ba:	e005      	b.n	e6c8 <__multiply+0x138>
    e6bc:	3f01      	subs	r7, #1
    e6be:	d003      	beq.n	e6c8 <__multiply+0x138>
    e6c0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    e6c4:	2b00      	cmp	r3, #0
    e6c6:	d0f9      	beq.n	e6bc <__multiply+0x12c>
    e6c8:	9b01      	ldr	r3, [sp, #4]
    e6ca:	4618      	mov	r0, r3
    e6cc:	611f      	str	r7, [r3, #16]
    e6ce:	b005      	add	sp, #20
    e6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6d4:	4b03      	ldr	r3, [pc, #12]	; (e6e4 <__multiply+0x154>)
    e6d6:	4804      	ldr	r0, [pc, #16]	; (e6e8 <__multiply+0x158>)
    e6d8:	9a01      	ldr	r2, [sp, #4]
    e6da:	f44f 71b1 	mov.w	r1, #354	; 0x162
    e6de:	f002 f9eb 	bl	10ab8 <__assert_func>
    e6e2:	bf00      	nop
    e6e4:	000155b8 	.word	0x000155b8
    e6e8:	000155cc 	.word	0x000155cc

0000e6ec <__pow5mult>:
    e6ec:	f012 0303 	ands.w	r3, r2, #3
    e6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e6f4:	4614      	mov	r4, r2
    e6f6:	4606      	mov	r6, r0
    e6f8:	d132      	bne.n	e760 <__pow5mult+0x74>
    e6fa:	460d      	mov	r5, r1
    e6fc:	10a4      	asrs	r4, r4, #2
    e6fe:	d020      	beq.n	e742 <__pow5mult+0x56>
    e700:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    e704:	f1b8 0f00 	cmp.w	r8, #0
    e708:	d033      	beq.n	e772 <__pow5mult+0x86>
    e70a:	07e3      	lsls	r3, r4, #31
    e70c:	f04f 0700 	mov.w	r7, #0
    e710:	d407      	bmi.n	e722 <__pow5mult+0x36>
    e712:	1064      	asrs	r4, r4, #1
    e714:	d015      	beq.n	e742 <__pow5mult+0x56>
    e716:	f8d8 0000 	ldr.w	r0, [r8]
    e71a:	b1a8      	cbz	r0, e748 <__pow5mult+0x5c>
    e71c:	4680      	mov	r8, r0
    e71e:	07e3      	lsls	r3, r4, #31
    e720:	d5f7      	bpl.n	e712 <__pow5mult+0x26>
    e722:	4642      	mov	r2, r8
    e724:	4629      	mov	r1, r5
    e726:	4630      	mov	r0, r6
    e728:	f7ff ff32 	bl	e590 <__multiply>
    e72c:	b1b5      	cbz	r5, e75c <__pow5mult+0x70>
    e72e:	6869      	ldr	r1, [r5, #4]
    e730:	6c73      	ldr	r3, [r6, #68]	; 0x44
    e732:	1064      	asrs	r4, r4, #1
    e734:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    e738:	602a      	str	r2, [r5, #0]
    e73a:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    e73e:	4605      	mov	r5, r0
    e740:	d1e9      	bne.n	e716 <__pow5mult+0x2a>
    e742:	4628      	mov	r0, r5
    e744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e748:	4642      	mov	r2, r8
    e74a:	4641      	mov	r1, r8
    e74c:	4630      	mov	r0, r6
    e74e:	f7ff ff1f 	bl	e590 <__multiply>
    e752:	f8c8 0000 	str.w	r0, [r8]
    e756:	6007      	str	r7, [r0, #0]
    e758:	4680      	mov	r8, r0
    e75a:	e7e0      	b.n	e71e <__pow5mult+0x32>
    e75c:	4605      	mov	r5, r0
    e75e:	e7d8      	b.n	e712 <__pow5mult+0x26>
    e760:	3b01      	subs	r3, #1
    e762:	4a0f      	ldr	r2, [pc, #60]	; (e7a0 <__pow5mult+0xb4>)
    e764:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    e768:	2300      	movs	r3, #0
    e76a:	f7ff fe43 	bl	e3f4 <__multadd>
    e76e:	4605      	mov	r5, r0
    e770:	e7c4      	b.n	e6fc <__pow5mult+0x10>
    e772:	2101      	movs	r1, #1
    e774:	4630      	mov	r0, r6
    e776:	f7ff fe0d 	bl	e394 <_Balloc>
    e77a:	4680      	mov	r8, r0
    e77c:	b140      	cbz	r0, e790 <__pow5mult+0xa4>
    e77e:	2301      	movs	r3, #1
    e780:	f240 2271 	movw	r2, #625	; 0x271
    e784:	e9c0 3204 	strd	r3, r2, [r0, #16]
    e788:	2300      	movs	r3, #0
    e78a:	6430      	str	r0, [r6, #64]	; 0x40
    e78c:	6003      	str	r3, [r0, #0]
    e78e:	e7bc      	b.n	e70a <__pow5mult+0x1e>
    e790:	4b04      	ldr	r3, [pc, #16]	; (e7a4 <__pow5mult+0xb8>)
    e792:	4805      	ldr	r0, [pc, #20]	; (e7a8 <__pow5mult+0xbc>)
    e794:	4642      	mov	r2, r8
    e796:	f240 1145 	movw	r1, #325	; 0x145
    e79a:	f002 f98d 	bl	10ab8 <__assert_func>
    e79e:	bf00      	nop
    e7a0:	00015718 	.word	0x00015718
    e7a4:	000155b8 	.word	0x000155b8
    e7a8:	000155cc 	.word	0x000155cc

0000e7ac <__lshift>:
    e7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e7b0:	460c      	mov	r4, r1
    e7b2:	4690      	mov	r8, r2
    e7b4:	6926      	ldr	r6, [r4, #16]
    e7b6:	68a3      	ldr	r3, [r4, #8]
    e7b8:	6849      	ldr	r1, [r1, #4]
    e7ba:	eb06 1662 	add.w	r6, r6, r2, asr #5
    e7be:	1c75      	adds	r5, r6, #1
    e7c0:	429d      	cmp	r5, r3
    e7c2:	4607      	mov	r7, r0
    e7c4:	ea4f 1962 	mov.w	r9, r2, asr #5
    e7c8:	dd04      	ble.n	e7d4 <__lshift+0x28>
    e7ca:	005b      	lsls	r3, r3, #1
    e7cc:	429d      	cmp	r5, r3
    e7ce:	f101 0101 	add.w	r1, r1, #1
    e7d2:	dcfa      	bgt.n	e7ca <__lshift+0x1e>
    e7d4:	4638      	mov	r0, r7
    e7d6:	f7ff fddd 	bl	e394 <_Balloc>
    e7da:	4684      	mov	ip, r0
    e7dc:	2800      	cmp	r0, #0
    e7de:	d051      	beq.n	e884 <__lshift+0xd8>
    e7e0:	f1b9 0f00 	cmp.w	r9, #0
    e7e4:	f100 0014 	add.w	r0, r0, #20
    e7e8:	dd0e      	ble.n	e808 <__lshift+0x5c>
    e7ea:	f109 0205 	add.w	r2, r9, #5
    e7ee:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    e7f2:	4603      	mov	r3, r0
    e7f4:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    e7f8:	2100      	movs	r1, #0
    e7fa:	f843 1b04 	str.w	r1, [r3], #4
    e7fe:	4293      	cmp	r3, r2
    e800:	d1fb      	bne.n	e7fa <__lshift+0x4e>
    e802:	f1ae 0314 	sub.w	r3, lr, #20
    e806:	4418      	add	r0, r3
    e808:	6921      	ldr	r1, [r4, #16]
    e80a:	f104 0314 	add.w	r3, r4, #20
    e80e:	f018 081f 	ands.w	r8, r8, #31
    e812:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e816:	d02d      	beq.n	e874 <__lshift+0xc8>
    e818:	f1c8 0920 	rsb	r9, r8, #32
    e81c:	4686      	mov	lr, r0
    e81e:	f04f 0a00 	mov.w	sl, #0
    e822:	681a      	ldr	r2, [r3, #0]
    e824:	fa02 f208 	lsl.w	r2, r2, r8
    e828:	ea42 020a 	orr.w	r2, r2, sl
    e82c:	f84e 2b04 	str.w	r2, [lr], #4
    e830:	f853 2b04 	ldr.w	r2, [r3], #4
    e834:	4299      	cmp	r1, r3
    e836:	fa22 fa09 	lsr.w	sl, r2, r9
    e83a:	d8f2      	bhi.n	e822 <__lshift+0x76>
    e83c:	1b0b      	subs	r3, r1, r4
    e83e:	3b15      	subs	r3, #21
    e840:	f023 0303 	bic.w	r3, r3, #3
    e844:	3304      	adds	r3, #4
    e846:	f104 0215 	add.w	r2, r4, #21
    e84a:	4291      	cmp	r1, r2
    e84c:	bf38      	it	cc
    e84e:	2304      	movcc	r3, #4
    e850:	f1ba 0f00 	cmp.w	sl, #0
    e854:	bf18      	it	ne
    e856:	462e      	movne	r6, r5
    e858:	f840 a003 	str.w	sl, [r0, r3]
    e85c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e85e:	6862      	ldr	r2, [r4, #4]
    e860:	f8cc 6010 	str.w	r6, [ip, #16]
    e864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e868:	6021      	str	r1, [r4, #0]
    e86a:	4660      	mov	r0, ip
    e86c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    e870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e874:	3804      	subs	r0, #4
    e876:	f853 2b04 	ldr.w	r2, [r3], #4
    e87a:	f840 2f04 	str.w	r2, [r0, #4]!
    e87e:	4299      	cmp	r1, r3
    e880:	d8f9      	bhi.n	e876 <__lshift+0xca>
    e882:	e7eb      	b.n	e85c <__lshift+0xb0>
    e884:	4b03      	ldr	r3, [pc, #12]	; (e894 <__lshift+0xe8>)
    e886:	4804      	ldr	r0, [pc, #16]	; (e898 <__lshift+0xec>)
    e888:	4662      	mov	r2, ip
    e88a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    e88e:	f002 f913 	bl	10ab8 <__assert_func>
    e892:	bf00      	nop
    e894:	000155b8 	.word	0x000155b8
    e898:	000155cc 	.word	0x000155cc

0000e89c <__mcmp>:
    e89c:	690b      	ldr	r3, [r1, #16]
    e89e:	4684      	mov	ip, r0
    e8a0:	6900      	ldr	r0, [r0, #16]
    e8a2:	1ac0      	subs	r0, r0, r3
    e8a4:	d115      	bne.n	e8d2 <__mcmp+0x36>
    e8a6:	f10c 0c14 	add.w	ip, ip, #20
    e8aa:	3114      	adds	r1, #20
    e8ac:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    e8b0:	b410      	push	{r4}
    e8b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    e8b6:	e001      	b.n	e8bc <__mcmp+0x20>
    e8b8:	4594      	cmp	ip, r2
    e8ba:	d208      	bcs.n	e8ce <__mcmp+0x32>
    e8bc:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e8c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e8c4:	428c      	cmp	r4, r1
    e8c6:	d0f7      	beq.n	e8b8 <__mcmp+0x1c>
    e8c8:	d204      	bcs.n	e8d4 <__mcmp+0x38>
    e8ca:	f04f 30ff 	mov.w	r0, #4294967295
    e8ce:	bc10      	pop	{r4}
    e8d0:	4770      	bx	lr
    e8d2:	4770      	bx	lr
    e8d4:	2001      	movs	r0, #1
    e8d6:	bc10      	pop	{r4}
    e8d8:	4770      	bx	lr
    e8da:	bf00      	nop

0000e8dc <__mdiff>:
    e8dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8e0:	690f      	ldr	r7, [r1, #16]
    e8e2:	6913      	ldr	r3, [r2, #16]
    e8e4:	1aff      	subs	r7, r7, r3
    e8e6:	2f00      	cmp	r7, #0
    e8e8:	460e      	mov	r6, r1
    e8ea:	4690      	mov	r8, r2
    e8ec:	d17f      	bne.n	e9ee <__mdiff+0x112>
    e8ee:	f101 0514 	add.w	r5, r1, #20
    e8f2:	3214      	adds	r2, #20
    e8f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e8f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e8fc:	e001      	b.n	e902 <__mdiff+0x26>
    e8fe:	429d      	cmp	r5, r3
    e900:	d278      	bcs.n	e9f4 <__mdiff+0x118>
    e902:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e906:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e90a:	42a1      	cmp	r1, r4
    e90c:	d0f7      	beq.n	e8fe <__mdiff+0x22>
    e90e:	d369      	bcc.n	e9e4 <__mdiff+0x108>
    e910:	6871      	ldr	r1, [r6, #4]
    e912:	f7ff fd3f 	bl	e394 <_Balloc>
    e916:	4681      	mov	r9, r0
    e918:	2800      	cmp	r0, #0
    e91a:	d077      	beq.n	ea0c <__mdiff+0x130>
    e91c:	6935      	ldr	r5, [r6, #16]
    e91e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    e922:	60c7      	str	r7, [r0, #12]
    e924:	f108 0e14 	add.w	lr, r8, #20
    e928:	f106 0014 	add.w	r0, r6, #20
    e92c:	f109 0a14 	add.w	sl, r9, #20
    e930:	f106 0110 	add.w	r1, r6, #16
    e934:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    e938:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    e93c:	4656      	mov	r6, sl
    e93e:	f04f 0c00 	mov.w	ip, #0
    e942:	f85e 4b04 	ldr.w	r4, [lr], #4
    e946:	f851 bf04 	ldr.w	fp, [r1, #4]!
    e94a:	b2a3      	uxth	r3, r4
    e94c:	fa1c fc8b 	uxtah	ip, ip, fp
    e950:	ebac 0303 	sub.w	r3, ip, r3
    e954:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    e958:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    e95c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    e960:	b29b      	uxth	r3, r3
    e962:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    e966:	4572      	cmp	r2, lr
    e968:	f846 3b04 	str.w	r3, [r6], #4
    e96c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    e970:	d8e7      	bhi.n	e942 <__mdiff+0x66>
    e972:	eba2 0108 	sub.w	r1, r2, r8
    e976:	3915      	subs	r1, #21
    e978:	f108 0815 	add.w	r8, r8, #21
    e97c:	4542      	cmp	r2, r8
    e97e:	f021 0403 	bic.w	r4, r1, #3
    e982:	f104 0404 	add.w	r4, r4, #4
    e986:	bf38      	it	cc
    e988:	2404      	movcc	r4, #4
    e98a:	4420      	add	r0, r4
    e98c:	f021 0203 	bic.w	r2, r1, #3
    e990:	bf38      	it	cc
    e992:	2200      	movcc	r2, #0
    e994:	4287      	cmp	r7, r0
    e996:	4452      	add	r2, sl
    e998:	4454      	add	r4, sl
    e99a:	d918      	bls.n	e9ce <__mdiff+0xf2>
    e99c:	4626      	mov	r6, r4
    e99e:	4601      	mov	r1, r0
    e9a0:	f851 3b04 	ldr.w	r3, [r1], #4
    e9a4:	fa1c fc83 	uxtah	ip, ip, r3
    e9a8:	ea4f 422c 	mov.w	r2, ip, asr #16
    e9ac:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e9b0:	fa1f fc8c 	uxth.w	ip, ip
    e9b4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    e9b8:	428f      	cmp	r7, r1
    e9ba:	f846 3b04 	str.w	r3, [r6], #4
    e9be:	ea4f 4c22 	mov.w	ip, r2, asr #16
    e9c2:	d8ed      	bhi.n	e9a0 <__mdiff+0xc4>
    e9c4:	3f01      	subs	r7, #1
    e9c6:	1a3f      	subs	r7, r7, r0
    e9c8:	f027 0703 	bic.w	r7, r7, #3
    e9cc:	19e2      	adds	r2, r4, r7
    e9ce:	b923      	cbnz	r3, e9da <__mdiff+0xfe>
    e9d0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    e9d4:	3d01      	subs	r5, #1
    e9d6:	2b00      	cmp	r3, #0
    e9d8:	d0fa      	beq.n	e9d0 <__mdiff+0xf4>
    e9da:	f8c9 5010 	str.w	r5, [r9, #16]
    e9de:	4648      	mov	r0, r9
    e9e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9e4:	4633      	mov	r3, r6
    e9e6:	2701      	movs	r7, #1
    e9e8:	4646      	mov	r6, r8
    e9ea:	4698      	mov	r8, r3
    e9ec:	e790      	b.n	e910 <__mdiff+0x34>
    e9ee:	dbf9      	blt.n	e9e4 <__mdiff+0x108>
    e9f0:	2700      	movs	r7, #0
    e9f2:	e78d      	b.n	e910 <__mdiff+0x34>
    e9f4:	2100      	movs	r1, #0
    e9f6:	f7ff fccd 	bl	e394 <_Balloc>
    e9fa:	4681      	mov	r9, r0
    e9fc:	b168      	cbz	r0, ea1a <__mdiff+0x13e>
    e9fe:	2201      	movs	r2, #1
    ea00:	2300      	movs	r3, #0
    ea02:	e9c9 2304 	strd	r2, r3, [r9, #16]
    ea06:	4648      	mov	r0, r9
    ea08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea0c:	4b06      	ldr	r3, [pc, #24]	; (ea28 <__mdiff+0x14c>)
    ea0e:	4807      	ldr	r0, [pc, #28]	; (ea2c <__mdiff+0x150>)
    ea10:	464a      	mov	r2, r9
    ea12:	f240 2145 	movw	r1, #581	; 0x245
    ea16:	f002 f84f 	bl	10ab8 <__assert_func>
    ea1a:	4b03      	ldr	r3, [pc, #12]	; (ea28 <__mdiff+0x14c>)
    ea1c:	4803      	ldr	r0, [pc, #12]	; (ea2c <__mdiff+0x150>)
    ea1e:	464a      	mov	r2, r9
    ea20:	f240 2137 	movw	r1, #567	; 0x237
    ea24:	f002 f848 	bl	10ab8 <__assert_func>
    ea28:	000155b8 	.word	0x000155b8
    ea2c:	000155cc 	.word	0x000155cc

0000ea30 <__d2b>:
    ea30:	b570      	push	{r4, r5, r6, lr}
    ea32:	2101      	movs	r1, #1
    ea34:	b082      	sub	sp, #8
    ea36:	4616      	mov	r6, r2
    ea38:	461d      	mov	r5, r3
    ea3a:	f7ff fcab 	bl	e394 <_Balloc>
    ea3e:	4604      	mov	r4, r0
    ea40:	2800      	cmp	r0, #0
    ea42:	d04a      	beq.n	eada <__d2b+0xaa>
    ea44:	462b      	mov	r3, r5
    ea46:	f3c5 550a 	ubfx	r5, r5, #20, #11
    ea4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ea4e:	b10d      	cbz	r5, ea54 <__d2b+0x24>
    ea50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ea54:	2e00      	cmp	r6, #0
    ea56:	9301      	str	r3, [sp, #4]
    ea58:	d114      	bne.n	ea84 <__d2b+0x54>
    ea5a:	a801      	add	r0, sp, #4
    ea5c:	f7ff fd3a 	bl	e4d4 <__lo0bits>
    ea60:	9b01      	ldr	r3, [sp, #4]
    ea62:	6163      	str	r3, [r4, #20]
    ea64:	2101      	movs	r1, #1
    ea66:	3020      	adds	r0, #32
    ea68:	6121      	str	r1, [r4, #16]
    ea6a:	b315      	cbz	r5, eab2 <__d2b+0x82>
    ea6c:	9b06      	ldr	r3, [sp, #24]
    ea6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    ea72:	4405      	add	r5, r0
    ea74:	601d      	str	r5, [r3, #0]
    ea76:	9b07      	ldr	r3, [sp, #28]
    ea78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    ea7c:	6018      	str	r0, [r3, #0]
    ea7e:	4620      	mov	r0, r4
    ea80:	b002      	add	sp, #8
    ea82:	bd70      	pop	{r4, r5, r6, pc}
    ea84:	4668      	mov	r0, sp
    ea86:	9600      	str	r6, [sp, #0]
    ea88:	f7ff fd24 	bl	e4d4 <__lo0bits>
    ea8c:	b308      	cbz	r0, ead2 <__d2b+0xa2>
    ea8e:	9b01      	ldr	r3, [sp, #4]
    ea90:	9900      	ldr	r1, [sp, #0]
    ea92:	f1c0 0220 	rsb	r2, r0, #32
    ea96:	fa03 f202 	lsl.w	r2, r3, r2
    ea9a:	430a      	orrs	r2, r1
    ea9c:	40c3      	lsrs	r3, r0
    ea9e:	9301      	str	r3, [sp, #4]
    eaa0:	6162      	str	r2, [r4, #20]
    eaa2:	2b00      	cmp	r3, #0
    eaa4:	bf14      	ite	ne
    eaa6:	2102      	movne	r1, #2
    eaa8:	2101      	moveq	r1, #1
    eaaa:	61a3      	str	r3, [r4, #24]
    eaac:	6121      	str	r1, [r4, #16]
    eaae:	2d00      	cmp	r5, #0
    eab0:	d1dc      	bne.n	ea6c <__d2b+0x3c>
    eab2:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    eab6:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
    eaba:	6910      	ldr	r0, [r2, #16]
    eabc:	9a06      	ldr	r2, [sp, #24]
    eabe:	6013      	str	r3, [r2, #0]
    eac0:	f7ff fce8 	bl	e494 <__hi0bits>
    eac4:	9b07      	ldr	r3, [sp, #28]
    eac6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    eaca:	6018      	str	r0, [r3, #0]
    eacc:	4620      	mov	r0, r4
    eace:	b002      	add	sp, #8
    ead0:	bd70      	pop	{r4, r5, r6, pc}
    ead2:	e9dd 2300 	ldrd	r2, r3, [sp]
    ead6:	6162      	str	r2, [r4, #20]
    ead8:	e7e3      	b.n	eaa2 <__d2b+0x72>
    eada:	4b03      	ldr	r3, [pc, #12]	; (eae8 <__d2b+0xb8>)
    eadc:	4803      	ldr	r0, [pc, #12]	; (eaec <__d2b+0xbc>)
    eade:	4622      	mov	r2, r4
    eae0:	f240 310f 	movw	r1, #783	; 0x30f
    eae4:	f001 ffe8 	bl	10ab8 <__assert_func>
    eae8:	000155b8 	.word	0x000155b8
    eaec:	000155cc 	.word	0x000155cc

0000eaf0 <__ascii_wctomb>:
    eaf0:	b149      	cbz	r1, eb06 <__ascii_wctomb+0x16>
    eaf2:	2aff      	cmp	r2, #255	; 0xff
    eaf4:	d802      	bhi.n	eafc <__ascii_wctomb+0xc>
    eaf6:	700a      	strb	r2, [r1, #0]
    eaf8:	2001      	movs	r0, #1
    eafa:	4770      	bx	lr
    eafc:	238a      	movs	r3, #138	; 0x8a
    eafe:	6003      	str	r3, [r0, #0]
    eb00:	f04f 30ff 	mov.w	r0, #4294967295
    eb04:	4770      	bx	lr
    eb06:	4608      	mov	r0, r1
    eb08:	4770      	bx	lr
    eb0a:	bf00      	nop

0000eb0c <_svfprintf_r>:
    eb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb10:	b0d9      	sub	sp, #356	; 0x164
    eb12:	460c      	mov	r4, r1
    eb14:	910c      	str	r1, [sp, #48]	; 0x30
    eb16:	4690      	mov	r8, r2
    eb18:	930e      	str	r3, [sp, #56]	; 0x38
    eb1a:	4682      	mov	sl, r0
    eb1c:	f001 fee6 	bl	108ec <_localeconv_r>
    eb20:	6803      	ldr	r3, [r0, #0]
    eb22:	9319      	str	r3, [sp, #100]	; 0x64
    eb24:	4618      	mov	r0, r3
    eb26:	f7ff fa4b 	bl	dfc0 <strlen>
    eb2a:	2208      	movs	r2, #8
    eb2c:	9017      	str	r0, [sp, #92]	; 0x5c
    eb2e:	2100      	movs	r1, #0
    eb30:	a828      	add	r0, sp, #160	; 0xa0
    eb32:	f7ff f911 	bl	dd58 <memset>
    eb36:	89a3      	ldrh	r3, [r4, #12]
    eb38:	061f      	lsls	r7, r3, #24
    eb3a:	d503      	bpl.n	eb44 <_svfprintf_r+0x38>
    eb3c:	6923      	ldr	r3, [r4, #16]
    eb3e:	2b00      	cmp	r3, #0
    eb40:	f000 873f 	beq.w	f9c2 <_svfprintf_r+0xeb6>
    eb44:	2300      	movs	r3, #0
    eb46:	aa2f      	add	r2, sp, #188	; 0xbc
    eb48:	2400      	movs	r4, #0
    eb4a:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
    eb4e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    eb52:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    eb56:	9313      	str	r3, [sp, #76]	; 0x4c
    eb58:	9318      	str	r3, [sp, #96]	; 0x60
    eb5a:	9309      	str	r3, [sp, #36]	; 0x24
    eb5c:	2300      	movs	r3, #0
    eb5e:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    eb62:	922c      	str	r2, [sp, #176]	; 0xb0
    eb64:	4691      	mov	r9, r2
    eb66:	4644      	mov	r4, r8
    eb68:	46a0      	mov	r8, r4
    eb6a:	4b78      	ldr	r3, [pc, #480]	; (ed4c <_svfprintf_r+0x240>)
    eb6c:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    eb70:	f7ff f976 	bl	de60 <__locale_mb_cur_max>
    eb74:	4603      	mov	r3, r0
    eb76:	a828      	add	r0, sp, #160	; 0xa0
    eb78:	9000      	str	r0, [sp, #0]
    eb7a:	4642      	mov	r2, r8
    eb7c:	a924      	add	r1, sp, #144	; 0x90
    eb7e:	4650      	mov	r0, sl
    eb80:	47a8      	blx	r5
    eb82:	2800      	cmp	r0, #0
    eb84:	f000 80b0 	beq.w	ece8 <_svfprintf_r+0x1dc>
    eb88:	f2c0 80a6 	blt.w	ecd8 <_svfprintf_r+0x1cc>
    eb8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    eb8e:	2a25      	cmp	r2, #37	; 0x25
    eb90:	4603      	mov	r3, r0
    eb92:	d001      	beq.n	eb98 <_svfprintf_r+0x8c>
    eb94:	4498      	add	r8, r3
    eb96:	e7e8      	b.n	eb6a <_svfprintf_r+0x5e>
    eb98:	ebb8 0704 	subs.w	r7, r8, r4
    eb9c:	4606      	mov	r6, r0
    eb9e:	f040 80a7 	bne.w	ecf0 <_svfprintf_r+0x1e4>
    eba2:	2300      	movs	r3, #0
    eba4:	f04f 32ff 	mov.w	r2, #4294967295
    eba8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    ebac:	469b      	mov	fp, r3
    ebae:	930b      	str	r3, [sp, #44]	; 0x2c
    ebb0:	f108 0801 	add.w	r8, r8, #1
    ebb4:	f898 3000 	ldrb.w	r3, [r8]
    ebb8:	9208      	str	r2, [sp, #32]
    ebba:	252b      	movs	r5, #43	; 0x2b
    ebbc:	2620      	movs	r6, #32
    ebbe:	f108 0801 	add.w	r8, r8, #1
    ebc2:	f1a3 0220 	sub.w	r2, r3, #32
    ebc6:	2a5a      	cmp	r2, #90	; 0x5a
    ebc8:	f200 80c2 	bhi.w	ed50 <_svfprintf_r+0x244>
    ebcc:	e8df f012 	tbh	[pc, r2, lsl #1]
    ebd0:	00c002e6 	.word	0x00c002e6
    ebd4:	02e100c0 	.word	0x02e100c0
    ebd8:	00c000c0 	.word	0x00c000c0
    ebdc:	006a00c0 	.word	0x006a00c0
    ebe0:	00c000c0 	.word	0x00c000c0
    ebe4:	02840208 	.word	0x02840208
    ebe8:	021300c0 	.word	0x021300c0
    ebec:	00c002c7 	.word	0x00c002c7
    ebf0:	005b02c2 	.word	0x005b02c2
    ebf4:	005b005b 	.word	0x005b005b
    ebf8:	005b005b 	.word	0x005b005b
    ebfc:	005b005b 	.word	0x005b005b
    ec00:	005b005b 	.word	0x005b005b
    ec04:	00c000c0 	.word	0x00c000c0
    ec08:	00c000c0 	.word	0x00c000c0
    ec0c:	00c000c0 	.word	0x00c000c0
    ec10:	014300c0 	.word	0x014300c0
    ec14:	018900c0 	.word	0x018900c0
    ec18:	0143021d 	.word	0x0143021d
    ec1c:	01430143 	.word	0x01430143
    ec20:	00c000c0 	.word	0x00c000c0
    ec24:	00c000c0 	.word	0x00c000c0
    ec28:	00c00218 	.word	0x00c00218
    ec2c:	029600c0 	.word	0x029600c0
    ec30:	00c000c0 	.word	0x00c000c0
    ec34:	01b100c0 	.word	0x01b100c0
    ec38:	02a900c0 	.word	0x02a900c0
    ec3c:	00c000c0 	.word	0x00c000c0
    ec40:	00c006dd 	.word	0x00c006dd
    ec44:	00c000c0 	.word	0x00c000c0
    ec48:	00c000c0 	.word	0x00c000c0
    ec4c:	00c000c0 	.word	0x00c000c0
    ec50:	014300c0 	.word	0x014300c0
    ec54:	018900c0 	.word	0x018900c0
    ec58:	014301e2 	.word	0x014301e2
    ec5c:	01430143 	.word	0x01430143
    ec60:	01e20277 	.word	0x01e20277
    ec64:	00c0007f 	.word	0x00c0007f
    ec68:	00c00289 	.word	0x00c00289
    ec6c:	06da025f 	.word	0x06da025f
    ec70:	007f0232 	.word	0x007f0232
    ec74:	01b100c0 	.word	0x01b100c0
    ec78:	06b4007c 	.word	0x06b4007c
    ec7c:	00c000c0 	.word	0x00c000c0
    ec80:	00c006b8 	.word	0x00c006b8
    ec84:	007c      	.short	0x007c
    ec86:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ec8a:	2100      	movs	r1, #0
    ec8c:	f818 3b01 	ldrb.w	r3, [r8], #1
    ec90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ec94:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ec98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ec9c:	2a09      	cmp	r2, #9
    ec9e:	d9f5      	bls.n	ec8c <_svfprintf_r+0x180>
    eca0:	910b      	str	r1, [sp, #44]	; 0x2c
    eca2:	e78e      	b.n	ebc2 <_svfprintf_r+0xb6>
    eca4:	4650      	mov	r0, sl
    eca6:	f001 fe21 	bl	108ec <_localeconv_r>
    ecaa:	6843      	ldr	r3, [r0, #4]
    ecac:	931c      	str	r3, [sp, #112]	; 0x70
    ecae:	4618      	mov	r0, r3
    ecb0:	f7ff f986 	bl	dfc0 <strlen>
    ecb4:	901d      	str	r0, [sp, #116]	; 0x74
    ecb6:	4607      	mov	r7, r0
    ecb8:	4650      	mov	r0, sl
    ecba:	f001 fe17 	bl	108ec <_localeconv_r>
    ecbe:	6883      	ldr	r3, [r0, #8]
    ecc0:	931a      	str	r3, [sp, #104]	; 0x68
    ecc2:	2f00      	cmp	r7, #0
    ecc4:	f040 85b1 	bne.w	f82a <_svfprintf_r+0xd1e>
    ecc8:	f898 3000 	ldrb.w	r3, [r8]
    eccc:	e777      	b.n	ebbe <_svfprintf_r+0xb2>
    ecce:	f898 3000 	ldrb.w	r3, [r8]
    ecd2:	f04b 0b20 	orr.w	fp, fp, #32
    ecd6:	e772      	b.n	ebbe <_svfprintf_r+0xb2>
    ecd8:	2208      	movs	r2, #8
    ecda:	2100      	movs	r1, #0
    ecdc:	a828      	add	r0, sp, #160	; 0xa0
    ecde:	f7ff f83b 	bl	dd58 <memset>
    ece2:	2301      	movs	r3, #1
    ece4:	4498      	add	r8, r3
    ece6:	e740      	b.n	eb6a <_svfprintf_r+0x5e>
    ece8:	ebb8 0704 	subs.w	r7, r8, r4
    ecec:	4606      	mov	r6, r0
    ecee:	d011      	beq.n	ed14 <_svfprintf_r+0x208>
    ecf0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    ecf2:	443b      	add	r3, r7
    ecf4:	932e      	str	r3, [sp, #184]	; 0xb8
    ecf6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ecf8:	3301      	adds	r3, #1
    ecfa:	2b07      	cmp	r3, #7
    ecfc:	e9c9 4700 	strd	r4, r7, [r9]
    ed00:	932d      	str	r3, [sp, #180]	; 0xb4
    ed02:	dc19      	bgt.n	ed38 <_svfprintf_r+0x22c>
    ed04:	f109 0908 	add.w	r9, r9, #8
    ed08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed0a:	443b      	add	r3, r7
    ed0c:	9309      	str	r3, [sp, #36]	; 0x24
    ed0e:	2e00      	cmp	r6, #0
    ed10:	f47f af47 	bne.w	eba2 <_svfprintf_r+0x96>
    ed14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    ed16:	2b00      	cmp	r3, #0
    ed18:	f041 8201 	bne.w	1011e <_svfprintf_r+0x1612>
    ed1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ed1e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    ed22:	f013 0f40 	tst.w	r3, #64	; 0x40
    ed26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed28:	bf18      	it	ne
    ed2a:	f04f 33ff 	movne.w	r3, #4294967295
    ed2e:	9309      	str	r3, [sp, #36]	; 0x24
    ed30:	9809      	ldr	r0, [sp, #36]	; 0x24
    ed32:	b059      	add	sp, #356	; 0x164
    ed34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed38:	990c      	ldr	r1, [sp, #48]	; 0x30
    ed3a:	aa2c      	add	r2, sp, #176	; 0xb0
    ed3c:	4650      	mov	r0, sl
    ed3e:	f002 ff4f 	bl	11be0 <__ssprint_r>
    ed42:	2800      	cmp	r0, #0
    ed44:	d1ea      	bne.n	ed1c <_svfprintf_r+0x210>
    ed46:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ed4a:	e7dd      	b.n	ed08 <_svfprintf_r+0x1fc>
    ed4c:	1fff8ed4 	.word	0x1fff8ed4
    ed50:	9310      	str	r3, [sp, #64]	; 0x40
    ed52:	2b00      	cmp	r3, #0
    ed54:	d0de      	beq.n	ed14 <_svfprintf_r+0x208>
    ed56:	2200      	movs	r2, #0
    ed58:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    ed5c:	2301      	movs	r3, #1
    ed5e:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    ed62:	9307      	str	r3, [sp, #28]
    ed64:	920d      	str	r2, [sp, #52]	; 0x34
    ed66:	930a      	str	r3, [sp, #40]	; 0x28
    ed68:	9208      	str	r2, [sp, #32]
    ed6a:	9212      	str	r2, [sp, #72]	; 0x48
    ed6c:	9216      	str	r2, [sp, #88]	; 0x58
    ed6e:	9211      	str	r2, [sp, #68]	; 0x44
    ed70:	ac3f      	add	r4, sp, #252	; 0xfc
    ed72:	f01b 0302 	ands.w	r3, fp, #2
    ed76:	d002      	beq.n	ed7e <_svfprintf_r+0x272>
    ed78:	9907      	ldr	r1, [sp, #28]
    ed7a:	3102      	adds	r1, #2
    ed7c:	9107      	str	r1, [sp, #28]
    ed7e:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    ed82:	910f      	str	r1, [sp, #60]	; 0x3c
    ed84:	d105      	bne.n	ed92 <_svfprintf_r+0x286>
    ed86:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ed88:	9807      	ldr	r0, [sp, #28]
    ed8a:	1a0f      	subs	r7, r1, r0
    ed8c:	2f00      	cmp	r7, #0
    ed8e:	f300 8382 	bgt.w	f496 <_svfprintf_r+0x98a>
    ed92:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ed94:	b182      	cbz	r2, edb8 <_svfprintf_r+0x2ac>
    ed96:	2201      	movs	r2, #1
    ed98:	f8c9 2004 	str.w	r2, [r9, #4]
    ed9c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    ed9e:	3201      	adds	r2, #1
    eda0:	3601      	adds	r6, #1
    eda2:	f10d 0187 	add.w	r1, sp, #135	; 0x87
    eda6:	2a07      	cmp	r2, #7
    eda8:	962e      	str	r6, [sp, #184]	; 0xb8
    edaa:	922d      	str	r2, [sp, #180]	; 0xb4
    edac:	f8c9 1000 	str.w	r1, [r9]
    edb0:	f300 83bd 	bgt.w	f52e <_svfprintf_r+0xa22>
    edb4:	f109 0908 	add.w	r9, r9, #8
    edb8:	b183      	cbz	r3, eddc <_svfprintf_r+0x2d0>
    edba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    edbc:	aa22      	add	r2, sp, #136	; 0x88
    edbe:	3301      	adds	r3, #1
    edc0:	3602      	adds	r6, #2
    edc2:	f8c9 2000 	str.w	r2, [r9]
    edc6:	2b07      	cmp	r3, #7
    edc8:	f04f 0202 	mov.w	r2, #2
    edcc:	962e      	str	r6, [sp, #184]	; 0xb8
    edce:	932d      	str	r3, [sp, #180]	; 0xb4
    edd0:	f8c9 2004 	str.w	r2, [r9, #4]
    edd4:	f300 83c0 	bgt.w	f558 <_svfprintf_r+0xa4c>
    edd8:	f109 0908 	add.w	r9, r9, #8
    eddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    edde:	2b80      	cmp	r3, #128	; 0x80
    ede0:	f000 8281 	beq.w	f2e6 <_svfprintf_r+0x7da>
    ede4:	9b08      	ldr	r3, [sp, #32]
    ede6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ede8:	1a9f      	subs	r7, r3, r2
    edea:	2f00      	cmp	r7, #0
    edec:	f300 82bc 	bgt.w	f368 <_svfprintf_r+0x85c>
    edf0:	f41b 7f80 	tst.w	fp, #256	; 0x100
    edf4:	f040 821e 	bne.w	f234 <_svfprintf_r+0x728>
    edf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    edfa:	f8c9 3004 	str.w	r3, [r9, #4]
    edfe:	441e      	add	r6, r3
    ee00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ee02:	f8c9 4000 	str.w	r4, [r9]
    ee06:	3301      	adds	r3, #1
    ee08:	2b07      	cmp	r3, #7
    ee0a:	962e      	str	r6, [sp, #184]	; 0xb8
    ee0c:	932d      	str	r3, [sp, #180]	; 0xb4
    ee0e:	f300 8337 	bgt.w	f480 <_svfprintf_r+0x974>
    ee12:	f109 0908 	add.w	r9, r9, #8
    ee16:	f01b 0f04 	tst.w	fp, #4
    ee1a:	d005      	beq.n	ee28 <_svfprintf_r+0x31c>
    ee1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ee1e:	9a07      	ldr	r2, [sp, #28]
    ee20:	1a9c      	subs	r4, r3, r2
    ee22:	2c00      	cmp	r4, #0
    ee24:	f300 83a4 	bgt.w	f570 <_svfprintf_r+0xa64>
    ee28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ee2c:	9907      	ldr	r1, [sp, #28]
    ee2e:	428a      	cmp	r2, r1
    ee30:	bfac      	ite	ge
    ee32:	189b      	addge	r3, r3, r2
    ee34:	185b      	addlt	r3, r3, r1
    ee36:	9309      	str	r3, [sp, #36]	; 0x24
    ee38:	2e00      	cmp	r6, #0
    ee3a:	f040 82ca 	bne.w	f3d2 <_svfprintf_r+0x8c6>
    ee3e:	2300      	movs	r3, #0
    ee40:	932d      	str	r3, [sp, #180]	; 0xb4
    ee42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ee44:	b11b      	cbz	r3, ee4e <_svfprintf_r+0x342>
    ee46:	990d      	ldr	r1, [sp, #52]	; 0x34
    ee48:	4650      	mov	r0, sl
    ee4a:	f7ff f987 	bl	e15c <_free_r>
    ee4e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ee52:	4644      	mov	r4, r8
    ee54:	e688      	b.n	eb68 <_svfprintf_r+0x5c>
    ee56:	9310      	str	r3, [sp, #64]	; 0x40
    ee58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee5a:	3307      	adds	r3, #7
    ee5c:	f023 0107 	bic.w	r1, r3, #7
    ee60:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    ee64:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    ee68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    ee6c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    ee70:	910e      	str	r1, [sp, #56]	; 0x38
    ee72:	4616      	mov	r6, r2
    ee74:	4610      	mov	r0, r2
    ee76:	4bb3      	ldr	r3, [pc, #716]	; (f144 <_svfprintf_r+0x638>)
    ee78:	4629      	mov	r1, r5
    ee7a:	f04f 32ff 	mov.w	r2, #4294967295
    ee7e:	f7fd fda5 	bl	c9cc <__aeabi_dcmpun>
    ee82:	2800      	cmp	r0, #0
    ee84:	f040 84fc 	bne.w	f880 <_svfprintf_r+0xd74>
    ee88:	4bae      	ldr	r3, [pc, #696]	; (f144 <_svfprintf_r+0x638>)
    ee8a:	4630      	mov	r0, r6
    ee8c:	4629      	mov	r1, r5
    ee8e:	f04f 32ff 	mov.w	r2, #4294967295
    ee92:	f7fd fd7d 	bl	c990 <__aeabi_dcmple>
    ee96:	2800      	cmp	r0, #0
    ee98:	f040 84f2 	bne.w	f880 <_svfprintf_r+0xd74>
    ee9c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    eea0:	2200      	movs	r2, #0
    eea2:	2300      	movs	r3, #0
    eea4:	f7fd fd6a 	bl	c97c <__aeabi_dcmplt>
    eea8:	2800      	cmp	r0, #0
    eeaa:	f041 8038 	bne.w	ff1e <_svfprintf_r+0x1412>
    eeae:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    eeb2:	4ca5      	ldr	r4, [pc, #660]	; (f148 <_svfprintf_r+0x63c>)
    eeb4:	4ba5      	ldr	r3, [pc, #660]	; (f14c <_svfprintf_r+0x640>)
    eeb6:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    eeba:	9910      	ldr	r1, [sp, #64]	; 0x40
    eebc:	2947      	cmp	r1, #71	; 0x47
    eebe:	bfc8      	it	gt
    eec0:	461c      	movgt	r4, r3
    eec2:	2300      	movs	r3, #0
    eec4:	2103      	movs	r1, #3
    eec6:	930d      	str	r3, [sp, #52]	; 0x34
    eec8:	9107      	str	r1, [sp, #28]
    eeca:	910a      	str	r1, [sp, #40]	; 0x28
    eecc:	9308      	str	r3, [sp, #32]
    eece:	9312      	str	r3, [sp, #72]	; 0x48
    eed0:	9316      	str	r3, [sp, #88]	; 0x58
    eed2:	9311      	str	r3, [sp, #68]	; 0x44
    eed4:	2a00      	cmp	r2, #0
    eed6:	f43f af4c 	beq.w	ed72 <_svfprintf_r+0x266>
    eeda:	9b07      	ldr	r3, [sp, #28]
    eedc:	3301      	adds	r3, #1
    eede:	9307      	str	r3, [sp, #28]
    eee0:	e747      	b.n	ed72 <_svfprintf_r+0x266>
    eee2:	2b43      	cmp	r3, #67	; 0x43
    eee4:	9310      	str	r3, [sp, #64]	; 0x40
    eee6:	d003      	beq.n	eef0 <_svfprintf_r+0x3e4>
    eee8:	f01b 0f10 	tst.w	fp, #16
    eeec:	f000 8551 	beq.w	f992 <_svfprintf_r+0xe86>
    eef0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    eef2:	2208      	movs	r2, #8
    eef4:	2100      	movs	r1, #0
    eef6:	a82a      	add	r0, sp, #168	; 0xa8
    eef8:	ac3f      	add	r4, sp, #252	; 0xfc
    eefa:	f7fe ff2d 	bl	dd58 <memset>
    eefe:	ab2a      	add	r3, sp, #168	; 0xa8
    ef00:	f856 2b04 	ldr.w	r2, [r6], #4
    ef04:	4621      	mov	r1, r4
    ef06:	4650      	mov	r0, sl
    ef08:	f002 fe22 	bl	11b50 <_wcrtomb_r>
    ef0c:	4603      	mov	r3, r0
    ef0e:	3301      	adds	r3, #1
    ef10:	900a      	str	r0, [sp, #40]	; 0x28
    ef12:	f001 82c3 	beq.w	1049c <_svfprintf_r+0x1990>
    ef16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ef18:	960e      	str	r6, [sp, #56]	; 0x38
    ef1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ef1e:	9307      	str	r3, [sp, #28]
    ef20:	2200      	movs	r2, #0
    ef22:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    ef26:	920d      	str	r2, [sp, #52]	; 0x34
    ef28:	9208      	str	r2, [sp, #32]
    ef2a:	9212      	str	r2, [sp, #72]	; 0x48
    ef2c:	9216      	str	r2, [sp, #88]	; 0x58
    ef2e:	9211      	str	r2, [sp, #68]	; 0x44
    ef30:	e71f      	b.n	ed72 <_svfprintf_r+0x266>
    ef32:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ef34:	9310      	str	r3, [sp, #64]	; 0x40
    ef36:	f857 4b04 	ldr.w	r4, [r7], #4
    ef3a:	2300      	movs	r3, #0
    ef3c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    ef40:	2c00      	cmp	r4, #0
    ef42:	f000 854d 	beq.w	f9e0 <_svfprintf_r+0xed4>
    ef46:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ef48:	2b53      	cmp	r3, #83	; 0x53
    ef4a:	f000 86d4 	beq.w	fcf6 <_svfprintf_r+0x11ea>
    ef4e:	f01b 0310 	ands.w	r3, fp, #16
    ef52:	9311      	str	r3, [sp, #68]	; 0x44
    ef54:	f040 86cf 	bne.w	fcf6 <_svfprintf_r+0x11ea>
    ef58:	9b08      	ldr	r3, [sp, #32]
    ef5a:	1c5d      	adds	r5, r3, #1
    ef5c:	f001 80cc 	beq.w	100f8 <_svfprintf_r+0x15ec>
    ef60:	9911      	ldr	r1, [sp, #68]	; 0x44
    ef62:	461a      	mov	r2, r3
    ef64:	4620      	mov	r0, r4
    ef66:	f001 fcdb 	bl	10920 <memchr>
    ef6a:	900d      	str	r0, [sp, #52]	; 0x34
    ef6c:	2800      	cmp	r0, #0
    ef6e:	f001 8351 	beq.w	10614 <_svfprintf_r+0x1b08>
    ef72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ef74:	9911      	ldr	r1, [sp, #68]	; 0x44
    ef76:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    ef7a:	970e      	str	r7, [sp, #56]	; 0x38
    ef7c:	1b1b      	subs	r3, r3, r4
    ef7e:	930a      	str	r3, [sp, #40]	; 0x28
    ef80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ef84:	9307      	str	r3, [sp, #28]
    ef86:	2373      	movs	r3, #115	; 0x73
    ef88:	9108      	str	r1, [sp, #32]
    ef8a:	9112      	str	r1, [sp, #72]	; 0x48
    ef8c:	9116      	str	r1, [sp, #88]	; 0x58
    ef8e:	910d      	str	r1, [sp, #52]	; 0x34
    ef90:	9310      	str	r3, [sp, #64]	; 0x40
    ef92:	e79f      	b.n	eed4 <_svfprintf_r+0x3c8>
    ef94:	f01b 0f20 	tst.w	fp, #32
    ef98:	9310      	str	r3, [sp, #64]	; 0x40
    ef9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef9c:	d03c      	beq.n	f018 <_svfprintf_r+0x50c>
    ef9e:	3307      	adds	r3, #7
    efa0:	f023 0307 	bic.w	r3, r3, #7
    efa4:	461a      	mov	r2, r3
    efa6:	4611      	mov	r1, r2
    efa8:	685b      	ldr	r3, [r3, #4]
    efaa:	f851 2b08 	ldr.w	r2, [r1], #8
    efae:	910e      	str	r1, [sp, #56]	; 0x38
    efb0:	4619      	mov	r1, r3
    efb2:	2b00      	cmp	r3, #0
    efb4:	f2c0 8401 	blt.w	f7ba <_svfprintf_r+0xcae>
    efb8:	9b08      	ldr	r3, [sp, #32]
    efba:	3301      	adds	r3, #1
    efbc:	f000 82a8 	beq.w	f510 <_svfprintf_r+0xa04>
    efc0:	ea52 0301 	orrs.w	r3, r2, r1
    efc4:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    efc8:	f040 82a3 	bne.w	f512 <_svfprintf_r+0xa06>
    efcc:	9b08      	ldr	r3, [sp, #32]
    efce:	2b00      	cmp	r3, #0
    efd0:	f040 82a4 	bne.w	f51c <_svfprintf_r+0xa10>
    efd4:	46ab      	mov	fp, r5
    efd6:	2300      	movs	r3, #0
    efd8:	9308      	str	r3, [sp, #32]
    efda:	930a      	str	r3, [sp, #40]	; 0x28
    efdc:	ac58      	add	r4, sp, #352	; 0x160
    efde:	e0ff      	b.n	f1e0 <_svfprintf_r+0x6d4>
    efe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    efe2:	f853 2b04 	ldr.w	r2, [r3], #4
    efe6:	920b      	str	r2, [sp, #44]	; 0x2c
    efe8:	2a00      	cmp	r2, #0
    efea:	f280 840c 	bge.w	f806 <_svfprintf_r+0xcfa>
    efee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    eff0:	930e      	str	r3, [sp, #56]	; 0x38
    eff2:	4252      	negs	r2, r2
    eff4:	920b      	str	r2, [sp, #44]	; 0x2c
    eff6:	f898 3000 	ldrb.w	r3, [r8]
    effa:	f04b 0b04 	orr.w	fp, fp, #4
    effe:	e5de      	b.n	ebbe <_svfprintf_r+0xb2>
    f000:	f898 3000 	ldrb.w	r3, [r8]
    f004:	f04b 0b08 	orr.w	fp, fp, #8
    f008:	e5d9      	b.n	ebbe <_svfprintf_r+0xb2>
    f00a:	f04b 0b10 	orr.w	fp, fp, #16
    f00e:	f01b 0f20 	tst.w	fp, #32
    f012:	9310      	str	r3, [sp, #64]	; 0x40
    f014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f016:	d1c2      	bne.n	ef9e <_svfprintf_r+0x492>
    f018:	f01b 0f10 	tst.w	fp, #16
    f01c:	f040 83fe 	bne.w	f81c <_svfprintf_r+0xd10>
    f020:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f024:	f000 83f6 	beq.w	f814 <_svfprintf_r+0xd08>
    f028:	f933 2b04 	ldrsh.w	r2, [r3], #4
    f02c:	930e      	str	r3, [sp, #56]	; 0x38
    f02e:	17d1      	asrs	r1, r2, #31
    f030:	460b      	mov	r3, r1
    f032:	e7be      	b.n	efb2 <_svfprintf_r+0x4a6>
    f034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f036:	f853 2b04 	ldr.w	r2, [r3], #4
    f03a:	930e      	str	r3, [sp, #56]	; 0x38
    f03c:	f647 0330 	movw	r3, #30768	; 0x7830
    f040:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    f044:	2078      	movs	r0, #120	; 0x78
    f046:	4b42      	ldr	r3, [pc, #264]	; (f150 <_svfprintf_r+0x644>)
    f048:	9318      	str	r3, [sp, #96]	; 0x60
    f04a:	f04b 0502 	orr.w	r5, fp, #2
    f04e:	2100      	movs	r1, #0
    f050:	2302      	movs	r3, #2
    f052:	9010      	str	r0, [sp, #64]	; 0x40
    f054:	2000      	movs	r0, #0
    f056:	9c08      	ldr	r4, [sp, #32]
    f058:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    f05c:	1c60      	adds	r0, r4, #1
    f05e:	f000 80a8 	beq.w	f1b2 <_svfprintf_r+0x6a6>
    f062:	ea52 0001 	orrs.w	r0, r2, r1
    f066:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    f06a:	f040 80a1 	bne.w	f1b0 <_svfprintf_r+0x6a4>
    f06e:	2c00      	cmp	r4, #0
    f070:	f040 8695 	bne.w	fd9e <_svfprintf_r+0x1292>
    f074:	2b00      	cmp	r3, #0
    f076:	d1ae      	bne.n	efd6 <_svfprintf_r+0x4ca>
    f078:	f015 0301 	ands.w	r3, r5, #1
    f07c:	930a      	str	r3, [sp, #40]	; 0x28
    f07e:	f000 83c7 	beq.w	f810 <_svfprintf_r+0xd04>
    f082:	2330      	movs	r3, #48	; 0x30
    f084:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
    f088:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    f08c:	e0a8      	b.n	f1e0 <_svfprintf_r+0x6d4>
    f08e:	f01b 0f20 	tst.w	fp, #32
    f092:	f040 83e5 	bne.w	f860 <_svfprintf_r+0xd54>
    f096:	f01b 0f10 	tst.w	fp, #16
    f09a:	f040 8686 	bne.w	fdaa <_svfprintf_r+0x129e>
    f09e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f0a2:	f040 877f 	bne.w	ffa4 <_svfprintf_r+0x1498>
    f0a6:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f0aa:	f000 867e 	beq.w	fdaa <_svfprintf_r+0x129e>
    f0ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f0b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    f0b2:	f853 2b04 	ldr.w	r2, [r3], #4
    f0b6:	930e      	str	r3, [sp, #56]	; 0x38
    f0b8:	7011      	strb	r1, [r2, #0]
    f0ba:	4644      	mov	r4, r8
    f0bc:	e554      	b.n	eb68 <_svfprintf_r+0x5c>
    f0be:	f898 3000 	ldrb.w	r3, [r8]
    f0c2:	2b68      	cmp	r3, #104	; 0x68
    f0c4:	bf03      	ittte	eq
    f0c6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    f0ca:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    f0ce:	f108 0801 	addeq.w	r8, r8, #1
    f0d2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    f0d6:	e572      	b.n	ebbe <_svfprintf_r+0xb2>
    f0d8:	f898 3000 	ldrb.w	r3, [r8]
    f0dc:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
    f0e0:	e56d      	b.n	ebbe <_svfprintf_r+0xb2>
    f0e2:	f898 3000 	ldrb.w	r3, [r8]
    f0e6:	2b6c      	cmp	r3, #108	; 0x6c
    f0e8:	bf03      	ittte	eq
    f0ea:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    f0ee:	f04b 0b20 	orreq.w	fp, fp, #32
    f0f2:	f108 0801 	addeq.w	r8, r8, #1
    f0f6:	f04b 0b10 	orrne.w	fp, fp, #16
    f0fa:	e560      	b.n	ebbe <_svfprintf_r+0xb2>
    f0fc:	9310      	str	r3, [sp, #64]	; 0x40
    f0fe:	f04b 0b10 	orr.w	fp, fp, #16
    f102:	f01b 0120 	ands.w	r1, fp, #32
    f106:	f000 834a 	beq.w	f79e <_svfprintf_r+0xc92>
    f10a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f10c:	3307      	adds	r3, #7
    f10e:	f023 0307 	bic.w	r3, r3, #7
    f112:	6859      	ldr	r1, [r3, #4]
    f114:	f853 2b08 	ldr.w	r2, [r3], #8
    f118:	930e      	str	r3, [sp, #56]	; 0x38
    f11a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    f11e:	2300      	movs	r3, #0
    f120:	e798      	b.n	f054 <_svfprintf_r+0x548>
    f122:	9310      	str	r3, [sp, #64]	; 0x40
    f124:	f04b 0510 	orr.w	r5, fp, #16
    f128:	f015 0120 	ands.w	r1, r5, #32
    f12c:	f000 8328 	beq.w	f780 <_svfprintf_r+0xc74>
    f130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f132:	3307      	adds	r3, #7
    f134:	f023 0307 	bic.w	r3, r3, #7
    f138:	6859      	ldr	r1, [r3, #4]
    f13a:	f853 2b08 	ldr.w	r2, [r3], #8
    f13e:	930e      	str	r3, [sp, #56]	; 0x38
    f140:	2301      	movs	r3, #1
    f142:	e787      	b.n	f054 <_svfprintf_r+0x548>
    f144:	7fefffff 	.word	0x7fefffff
    f148:	00015724 	.word	0x00015724
    f14c:	0001529c 	.word	0x0001529c
    f150:	0001572c 	.word	0x0001572c
    f154:	f898 3000 	ldrb.w	r3, [r8]
    f158:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    f15c:	e52f      	b.n	ebbe <_svfprintf_r+0xb2>
    f15e:	4641      	mov	r1, r8
    f160:	f811 3b01 	ldrb.w	r3, [r1], #1
    f164:	2b2a      	cmp	r3, #42	; 0x2a
    f166:	f001 827f 	beq.w	10668 <_svfprintf_r+0x1b5c>
    f16a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f16e:	2a09      	cmp	r2, #9
    f170:	4688      	mov	r8, r1
    f172:	bf98      	it	ls
    f174:	2100      	movls	r1, #0
    f176:	f201 8176 	bhi.w	10466 <_svfprintf_r+0x195a>
    f17a:	f818 3b01 	ldrb.w	r3, [r8], #1
    f17e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f182:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f186:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f18a:	2a09      	cmp	r2, #9
    f18c:	d9f5      	bls.n	f17a <_svfprintf_r+0x66e>
    f18e:	9108      	str	r1, [sp, #32]
    f190:	e517      	b.n	ebc2 <_svfprintf_r+0xb6>
    f192:	f898 3000 	ldrb.w	r3, [r8]
    f196:	f04b 0b01 	orr.w	fp, fp, #1
    f19a:	e510      	b.n	ebbe <_svfprintf_r+0xb2>
    f19c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    f1a0:	2b00      	cmp	r3, #0
    f1a2:	f47f ad91 	bne.w	ecc8 <_svfprintf_r+0x1bc>
    f1a6:	f898 3000 	ldrb.w	r3, [r8]
    f1aa:	f88d 6087 	strb.w	r6, [sp, #135]	; 0x87
    f1ae:	e506      	b.n	ebbe <_svfprintf_r+0xb2>
    f1b0:	465d      	mov	r5, fp
    f1b2:	2b01      	cmp	r3, #1
    f1b4:	f000 81ad 	beq.w	f512 <_svfprintf_r+0xa06>
    f1b8:	2b02      	cmp	r3, #2
    f1ba:	ac58      	add	r4, sp, #352	; 0x160
    f1bc:	d11f      	bne.n	f1fe <_svfprintf_r+0x6f2>
    f1be:	9818      	ldr	r0, [sp, #96]	; 0x60
    f1c0:	f002 030f 	and.w	r3, r2, #15
    f1c4:	0912      	lsrs	r2, r2, #4
    f1c6:	5cc3      	ldrb	r3, [r0, r3]
    f1c8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f1cc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    f1d0:	0909      	lsrs	r1, r1, #4
    f1d2:	ea52 0301 	orrs.w	r3, r2, r1
    f1d6:	d1f3      	bne.n	f1c0 <_svfprintf_r+0x6b4>
    f1d8:	ab58      	add	r3, sp, #352	; 0x160
    f1da:	1b1b      	subs	r3, r3, r4
    f1dc:	46ab      	mov	fp, r5
    f1de:	930a      	str	r3, [sp, #40]	; 0x28
    f1e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    f1e2:	9808      	ldr	r0, [sp, #32]
    f1e4:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f1e8:	4281      	cmp	r1, r0
    f1ea:	f04f 0300 	mov.w	r3, #0
    f1ee:	bfb8      	it	lt
    f1f0:	4601      	movlt	r1, r0
    f1f2:	930d      	str	r3, [sp, #52]	; 0x34
    f1f4:	9107      	str	r1, [sp, #28]
    f1f6:	9312      	str	r3, [sp, #72]	; 0x48
    f1f8:	9316      	str	r3, [sp, #88]	; 0x58
    f1fa:	9311      	str	r3, [sp, #68]	; 0x44
    f1fc:	e66a      	b.n	eed4 <_svfprintf_r+0x3c8>
    f1fe:	f002 0307 	and.w	r3, r2, #7
    f202:	08d2      	lsrs	r2, r2, #3
    f204:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    f208:	08c9      	lsrs	r1, r1, #3
    f20a:	3330      	adds	r3, #48	; 0x30
    f20c:	ea52 0601 	orrs.w	r6, r2, r1
    f210:	4620      	mov	r0, r4
    f212:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f216:	d1f2      	bne.n	f1fe <_svfprintf_r+0x6f2>
    f218:	07e9      	lsls	r1, r5, #31
    f21a:	d5dd      	bpl.n	f1d8 <_svfprintf_r+0x6cc>
    f21c:	2b30      	cmp	r3, #48	; 0x30
    f21e:	d0db      	beq.n	f1d8 <_svfprintf_r+0x6cc>
    f220:	2330      	movs	r3, #48	; 0x30
    f222:	3802      	subs	r0, #2
    f224:	f804 3c01 	strb.w	r3, [r4, #-1]
    f228:	ab58      	add	r3, sp, #352	; 0x160
    f22a:	1a1b      	subs	r3, r3, r0
    f22c:	46ab      	mov	fp, r5
    f22e:	930a      	str	r3, [sp, #40]	; 0x28
    f230:	4604      	mov	r4, r0
    f232:	e7d5      	b.n	f1e0 <_svfprintf_r+0x6d4>
    f234:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f236:	2b65      	cmp	r3, #101	; 0x65
    f238:	f340 80dc 	ble.w	f3f4 <_svfprintf_r+0x8e8>
    f23c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f240:	2200      	movs	r2, #0
    f242:	2300      	movs	r3, #0
    f244:	f7fd fb90 	bl	c968 <__aeabi_dcmpeq>
    f248:	2800      	cmp	r0, #0
    f24a:	f000 81c8 	beq.w	f5de <_svfprintf_r+0xad2>
    f24e:	2301      	movs	r3, #1
    f250:	f8c9 3004 	str.w	r3, [r9, #4]
    f254:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f256:	4abd      	ldr	r2, [pc, #756]	; (f54c <_svfprintf_r+0xa40>)
    f258:	f8c9 2000 	str.w	r2, [r9]
    f25c:	3301      	adds	r3, #1
    f25e:	3601      	adds	r6, #1
    f260:	2b07      	cmp	r3, #7
    f262:	962e      	str	r6, [sp, #184]	; 0xb8
    f264:	932d      	str	r3, [sp, #180]	; 0xb4
    f266:	f300 8539 	bgt.w	fcdc <_svfprintf_r+0x11d0>
    f26a:	f109 0908 	add.w	r9, r9, #8
    f26e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f272:	4293      	cmp	r3, r2
    f274:	f280 82c2 	bge.w	f7fc <_svfprintf_r+0xcf0>
    f278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f27a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f27c:	441e      	add	r6, r3
    f27e:	e9c9 2300 	strd	r2, r3, [r9]
    f282:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f284:	962e      	str	r6, [sp, #184]	; 0xb8
    f286:	3301      	adds	r3, #1
    f288:	2b07      	cmp	r3, #7
    f28a:	932d      	str	r3, [sp, #180]	; 0xb4
    f28c:	f300 838d 	bgt.w	f9aa <_svfprintf_r+0xe9e>
    f290:	f109 0908 	add.w	r9, r9, #8
    f294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f296:	1e5c      	subs	r4, r3, #1
    f298:	2c00      	cmp	r4, #0
    f29a:	f77f adbc 	ble.w	ee16 <_svfprintf_r+0x30a>
    f29e:	2c10      	cmp	r4, #16
    f2a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f2a2:	4dab      	ldr	r5, [pc, #684]	; (f550 <_svfprintf_r+0xa44>)
    f2a4:	f340 8555 	ble.w	fd52 <_svfprintf_r+0x1246>
    f2a8:	4632      	mov	r2, r6
    f2aa:	2710      	movs	r7, #16
    f2ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f2ae:	e005      	b.n	f2bc <_svfprintf_r+0x7b0>
    f2b0:	f109 0908 	add.w	r9, r9, #8
    f2b4:	3c10      	subs	r4, #16
    f2b6:	2c10      	cmp	r4, #16
    f2b8:	f340 854a 	ble.w	fd50 <_svfprintf_r+0x1244>
    f2bc:	3301      	adds	r3, #1
    f2be:	3210      	adds	r2, #16
    f2c0:	2b07      	cmp	r3, #7
    f2c2:	e9c9 5700 	strd	r5, r7, [r9]
    f2c6:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f2ca:	ddf1      	ble.n	f2b0 <_svfprintf_r+0x7a4>
    f2cc:	aa2c      	add	r2, sp, #176	; 0xb0
    f2ce:	4631      	mov	r1, r6
    f2d0:	4650      	mov	r0, sl
    f2d2:	f002 fc85 	bl	11be0 <__ssprint_r>
    f2d6:	2800      	cmp	r0, #0
    f2d8:	f040 8083 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f2dc:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f2e0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f2e4:	e7e6      	b.n	f2b4 <_svfprintf_r+0x7a8>
    f2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f2e8:	9a07      	ldr	r2, [sp, #28]
    f2ea:	1a9f      	subs	r7, r3, r2
    f2ec:	2f00      	cmp	r7, #0
    f2ee:	f77f ad79 	ble.w	ede4 <_svfprintf_r+0x2d8>
    f2f2:	2f10      	cmp	r7, #16
    f2f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f2f6:	4d96      	ldr	r5, [pc, #600]	; (f550 <_svfprintf_r+0xa44>)
    f2f8:	dd23      	ble.n	f342 <_svfprintf_r+0x836>
    f2fa:	4632      	mov	r2, r6
    f2fc:	4626      	mov	r6, r4
    f2fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f300:	e004      	b.n	f30c <_svfprintf_r+0x800>
    f302:	3f10      	subs	r7, #16
    f304:	2f10      	cmp	r7, #16
    f306:	f109 0908 	add.w	r9, r9, #8
    f30a:	dd18      	ble.n	f33e <_svfprintf_r+0x832>
    f30c:	3301      	adds	r3, #1
    f30e:	3210      	adds	r2, #16
    f310:	2110      	movs	r1, #16
    f312:	2b07      	cmp	r3, #7
    f314:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f318:	f8c9 5000 	str.w	r5, [r9]
    f31c:	f8c9 1004 	str.w	r1, [r9, #4]
    f320:	ddef      	ble.n	f302 <_svfprintf_r+0x7f6>
    f322:	aa2c      	add	r2, sp, #176	; 0xb0
    f324:	4621      	mov	r1, r4
    f326:	4650      	mov	r0, sl
    f328:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f32c:	f002 fc58 	bl	11be0 <__ssprint_r>
    f330:	2800      	cmp	r0, #0
    f332:	d156      	bne.n	f3e2 <_svfprintf_r+0x8d6>
    f334:	3f10      	subs	r7, #16
    f336:	2f10      	cmp	r7, #16
    f338:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f33c:	dce6      	bgt.n	f30c <_svfprintf_r+0x800>
    f33e:	4634      	mov	r4, r6
    f340:	4616      	mov	r6, r2
    f342:	3301      	adds	r3, #1
    f344:	443e      	add	r6, r7
    f346:	2b07      	cmp	r3, #7
    f348:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f34c:	f8c9 5000 	str.w	r5, [r9]
    f350:	f8c9 7004 	str.w	r7, [r9, #4]
    f354:	f300 8516 	bgt.w	fd84 <_svfprintf_r+0x1278>
    f358:	9b08      	ldr	r3, [sp, #32]
    f35a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f35c:	1a9f      	subs	r7, r3, r2
    f35e:	2f00      	cmp	r7, #0
    f360:	f109 0908 	add.w	r9, r9, #8
    f364:	f77f ad44 	ble.w	edf0 <_svfprintf_r+0x2e4>
    f368:	2f10      	cmp	r7, #16
    f36a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f36c:	4d78      	ldr	r5, [pc, #480]	; (f550 <_svfprintf_r+0xa44>)
    f36e:	dd22      	ble.n	f3b6 <_svfprintf_r+0x8aa>
    f370:	4632      	mov	r2, r6
    f372:	4626      	mov	r6, r4
    f374:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f376:	e004      	b.n	f382 <_svfprintf_r+0x876>
    f378:	3f10      	subs	r7, #16
    f37a:	2f10      	cmp	r7, #16
    f37c:	f109 0908 	add.w	r9, r9, #8
    f380:	dd17      	ble.n	f3b2 <_svfprintf_r+0x8a6>
    f382:	3301      	adds	r3, #1
    f384:	3210      	adds	r2, #16
    f386:	2110      	movs	r1, #16
    f388:	2b07      	cmp	r3, #7
    f38a:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f38e:	f8c9 5000 	str.w	r5, [r9]
    f392:	f8c9 1004 	str.w	r1, [r9, #4]
    f396:	ddef      	ble.n	f378 <_svfprintf_r+0x86c>
    f398:	aa2c      	add	r2, sp, #176	; 0xb0
    f39a:	4621      	mov	r1, r4
    f39c:	4650      	mov	r0, sl
    f39e:	f002 fc1f 	bl	11be0 <__ssprint_r>
    f3a2:	b9f0      	cbnz	r0, f3e2 <_svfprintf_r+0x8d6>
    f3a4:	3f10      	subs	r7, #16
    f3a6:	2f10      	cmp	r7, #16
    f3a8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f3ac:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f3b0:	dce7      	bgt.n	f382 <_svfprintf_r+0x876>
    f3b2:	4634      	mov	r4, r6
    f3b4:	4616      	mov	r6, r2
    f3b6:	3301      	adds	r3, #1
    f3b8:	443e      	add	r6, r7
    f3ba:	2b07      	cmp	r3, #7
    f3bc:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f3c0:	f8c9 5000 	str.w	r5, [r9]
    f3c4:	f8c9 7004 	str.w	r7, [r9, #4]
    f3c8:	f300 81cd 	bgt.w	f766 <_svfprintf_r+0xc5a>
    f3cc:	f109 0908 	add.w	r9, r9, #8
    f3d0:	e50e      	b.n	edf0 <_svfprintf_r+0x2e4>
    f3d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    f3d4:	aa2c      	add	r2, sp, #176	; 0xb0
    f3d6:	4650      	mov	r0, sl
    f3d8:	f002 fc02 	bl	11be0 <__ssprint_r>
    f3dc:	2800      	cmp	r0, #0
    f3de:	f43f ad2e 	beq.w	ee3e <_svfprintf_r+0x332>
    f3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f3e4:	2b00      	cmp	r3, #0
    f3e6:	f43f ac99 	beq.w	ed1c <_svfprintf_r+0x210>
    f3ea:	990d      	ldr	r1, [sp, #52]	; 0x34
    f3ec:	4650      	mov	r0, sl
    f3ee:	f7fe feb5 	bl	e15c <_free_r>
    f3f2:	e493      	b.n	ed1c <_svfprintf_r+0x210>
    f3f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f3f6:	2b01      	cmp	r3, #1
    f3f8:	f340 816e 	ble.w	f6d8 <_svfprintf_r+0xbcc>
    f3fc:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    f3fe:	f8c9 4000 	str.w	r4, [r9]
    f402:	2301      	movs	r3, #1
    f404:	441f      	add	r7, r3
    f406:	3601      	adds	r6, #1
    f408:	2f07      	cmp	r7, #7
    f40a:	f8c9 3004 	str.w	r3, [r9, #4]
    f40e:	962e      	str	r6, [sp, #184]	; 0xb8
    f410:	972d      	str	r7, [sp, #180]	; 0xb4
    f412:	f300 81d9 	bgt.w	f7c8 <_svfprintf_r+0xcbc>
    f416:	f109 0908 	add.w	r9, r9, #8
    f41a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f41c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f41e:	3701      	adds	r7, #1
    f420:	441e      	add	r6, r3
    f422:	2f07      	cmp	r7, #7
    f424:	e9c9 2300 	strd	r2, r3, [r9]
    f428:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f42c:	f300 81d9 	bgt.w	f7e2 <_svfprintf_r+0xcd6>
    f430:	f109 0908 	add.w	r9, r9, #8
    f434:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f438:	2200      	movs	r2, #0
    f43a:	2300      	movs	r3, #0
    f43c:	f7fd fa94 	bl	c968 <__aeabi_dcmpeq>
    f440:	2800      	cmp	r0, #0
    f442:	f040 8167 	bne.w	f714 <_svfprintf_r+0xc08>
    f446:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f448:	3701      	adds	r7, #1
    f44a:	3b01      	subs	r3, #1
    f44c:	3401      	adds	r4, #1
    f44e:	441e      	add	r6, r3
    f450:	2f07      	cmp	r7, #7
    f452:	f8c9 4000 	str.w	r4, [r9]
    f456:	972d      	str	r7, [sp, #180]	; 0xb4
    f458:	f8c9 3004 	str.w	r3, [r9, #4]
    f45c:	962e      	str	r6, [sp, #184]	; 0xb8
    f45e:	f300 814c 	bgt.w	f6fa <_svfprintf_r+0xbee>
    f462:	f109 0908 	add.w	r9, r9, #8
    f466:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f468:	f8c9 3004 	str.w	r3, [r9, #4]
    f46c:	3701      	adds	r7, #1
    f46e:	441e      	add	r6, r3
    f470:	2f07      	cmp	r7, #7
    f472:	ab26      	add	r3, sp, #152	; 0x98
    f474:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f478:	f8c9 3000 	str.w	r3, [r9]
    f47c:	f77f acc9 	ble.w	ee12 <_svfprintf_r+0x306>
    f480:	990c      	ldr	r1, [sp, #48]	; 0x30
    f482:	aa2c      	add	r2, sp, #176	; 0xb0
    f484:	4650      	mov	r0, sl
    f486:	f002 fbab 	bl	11be0 <__ssprint_r>
    f48a:	2800      	cmp	r0, #0
    f48c:	d1a9      	bne.n	f3e2 <_svfprintf_r+0x8d6>
    f48e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f490:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f494:	e4bf      	b.n	ee16 <_svfprintf_r+0x30a>
    f496:	2f10      	cmp	r7, #16
    f498:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    f49c:	4d2d      	ldr	r5, [pc, #180]	; (f554 <_svfprintf_r+0xa48>)
    f49e:	dd27      	ble.n	f4f0 <_svfprintf_r+0x9e4>
    f4a0:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
    f4a4:	2610      	movs	r6, #16
    f4a6:	46d0      	mov	r8, sl
    f4a8:	46a2      	mov	sl, r4
    f4aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f4ac:	e004      	b.n	f4b8 <_svfprintf_r+0x9ac>
    f4ae:	3f10      	subs	r7, #16
    f4b0:	2f10      	cmp	r7, #16
    f4b2:	f109 0908 	add.w	r9, r9, #8
    f4b6:	dd16      	ble.n	f4e6 <_svfprintf_r+0x9da>
    f4b8:	3201      	adds	r2, #1
    f4ba:	3110      	adds	r1, #16
    f4bc:	2a07      	cmp	r2, #7
    f4be:	e9c9 5600 	strd	r5, r6, [r9]
    f4c2:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
    f4c6:	ddf2      	ble.n	f4ae <_svfprintf_r+0x9a2>
    f4c8:	aa2c      	add	r2, sp, #176	; 0xb0
    f4ca:	4621      	mov	r1, r4
    f4cc:	4640      	mov	r0, r8
    f4ce:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f4d2:	f002 fb85 	bl	11be0 <__ssprint_r>
    f4d6:	2800      	cmp	r0, #0
    f4d8:	f040 83f2 	bne.w	fcc0 <_svfprintf_r+0x11b4>
    f4dc:	3f10      	subs	r7, #16
    f4de:	2f10      	cmp	r7, #16
    f4e0:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    f4e4:	dce8      	bgt.n	f4b8 <_svfprintf_r+0x9ac>
    f4e6:	4654      	mov	r4, sl
    f4e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f4ea:	46c2      	mov	sl, r8
    f4ec:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
    f4f0:	f8c9 5000 	str.w	r5, [r9]
    f4f4:	3201      	adds	r2, #1
    f4f6:	187e      	adds	r6, r7, r1
    f4f8:	2a07      	cmp	r2, #7
    f4fa:	e9cd 262d 	strd	r2, r6, [sp, #180]	; 0xb4
    f4fe:	f8c9 7004 	str.w	r7, [r9, #4]
    f502:	f300 83cc 	bgt.w	fc9e <_svfprintf_r+0x1192>
    f506:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f50a:	f109 0908 	add.w	r9, r9, #8
    f50e:	e441      	b.n	ed94 <_svfprintf_r+0x288>
    f510:	465d      	mov	r5, fp
    f512:	2a0a      	cmp	r2, #10
    f514:	f171 0300 	sbcs.w	r3, r1, #0
    f518:	f080 8329 	bcs.w	fb6e <_svfprintf_r+0x1062>
    f51c:	3230      	adds	r2, #48	; 0x30
    f51e:	2301      	movs	r3, #1
    f520:	f88d 215f 	strb.w	r2, [sp, #351]	; 0x15f
    f524:	46ab      	mov	fp, r5
    f526:	930a      	str	r3, [sp, #40]	; 0x28
    f528:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    f52c:	e658      	b.n	f1e0 <_svfprintf_r+0x6d4>
    f52e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f530:	931e      	str	r3, [sp, #120]	; 0x78
    f532:	aa2c      	add	r2, sp, #176	; 0xb0
    f534:	4650      	mov	r0, sl
    f536:	f002 fb53 	bl	11be0 <__ssprint_r>
    f53a:	2800      	cmp	r0, #0
    f53c:	f47f af51 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f540:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f542:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f544:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f548:	e436      	b.n	edb8 <_svfprintf_r+0x2ac>
    f54a:	bf00      	nop
    f54c:	00013f60 	.word	0x00013f60
    f550:	0001576c 	.word	0x0001576c
    f554:	0001575c 	.word	0x0001575c
    f558:	990c      	ldr	r1, [sp, #48]	; 0x30
    f55a:	aa2c      	add	r2, sp, #176	; 0xb0
    f55c:	4650      	mov	r0, sl
    f55e:	f002 fb3f 	bl	11be0 <__ssprint_r>
    f562:	2800      	cmp	r0, #0
    f564:	f47f af3d 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f568:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f56a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f56e:	e435      	b.n	eddc <_svfprintf_r+0x2d0>
    f570:	2c10      	cmp	r4, #16
    f572:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f574:	4db8      	ldr	r5, [pc, #736]	; (f858 <_svfprintf_r+0xd4c>)
    f576:	dd1f      	ble.n	f5b8 <_svfprintf_r+0xaac>
    f578:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    f57c:	2710      	movs	r7, #16
    f57e:	e004      	b.n	f58a <_svfprintf_r+0xa7e>
    f580:	3c10      	subs	r4, #16
    f582:	2c10      	cmp	r4, #16
    f584:	f109 0908 	add.w	r9, r9, #8
    f588:	dd16      	ble.n	f5b8 <_svfprintf_r+0xaac>
    f58a:	3301      	adds	r3, #1
    f58c:	3610      	adds	r6, #16
    f58e:	2b07      	cmp	r3, #7
    f590:	e9c9 5700 	strd	r5, r7, [r9]
    f594:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f598:	ddf2      	ble.n	f580 <_svfprintf_r+0xa74>
    f59a:	aa2c      	add	r2, sp, #176	; 0xb0
    f59c:	4659      	mov	r1, fp
    f59e:	4650      	mov	r0, sl
    f5a0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f5a4:	f002 fb1c 	bl	11be0 <__ssprint_r>
    f5a8:	2800      	cmp	r0, #0
    f5aa:	f47f af1a 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f5ae:	3c10      	subs	r4, #16
    f5b0:	2c10      	cmp	r4, #16
    f5b2:	e9dd 362d 	ldrd	r3, r6, [sp, #180]	; 0xb4
    f5b6:	dce8      	bgt.n	f58a <_svfprintf_r+0xa7e>
    f5b8:	3301      	adds	r3, #1
    f5ba:	4426      	add	r6, r4
    f5bc:	2b07      	cmp	r3, #7
    f5be:	e9c9 5400 	strd	r5, r4, [r9]
    f5c2:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f5c6:	f77f ac2f 	ble.w	ee28 <_svfprintf_r+0x31c>
    f5ca:	990c      	ldr	r1, [sp, #48]	; 0x30
    f5cc:	aa2c      	add	r2, sp, #176	; 0xb0
    f5ce:	4650      	mov	r0, sl
    f5d0:	f002 fb06 	bl	11be0 <__ssprint_r>
    f5d4:	2800      	cmp	r0, #0
    f5d6:	f47f af04 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f5da:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f5dc:	e424      	b.n	ee28 <_svfprintf_r+0x31c>
    f5de:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f5e0:	2900      	cmp	r1, #0
    f5e2:	f340 8327 	ble.w	fc34 <_svfprintf_r+0x1128>
    f5e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f5e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f5ea:	429d      	cmp	r5, r3
    f5ec:	bfa8      	it	ge
    f5ee:	461d      	movge	r5, r3
    f5f0:	2d00      	cmp	r5, #0
    f5f2:	dd0b      	ble.n	f60c <_svfprintf_r+0xb00>
    f5f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f5f6:	3301      	adds	r3, #1
    f5f8:	442e      	add	r6, r5
    f5fa:	2b07      	cmp	r3, #7
    f5fc:	e9c9 4500 	strd	r4, r5, [r9]
    f600:	962e      	str	r6, [sp, #184]	; 0xb8
    f602:	932d      	str	r3, [sp, #180]	; 0xb4
    f604:	f300 86dd 	bgt.w	103c2 <_svfprintf_r+0x18b6>
    f608:	f109 0908 	add.w	r9, r9, #8
    f60c:	9f11      	ldr	r7, [sp, #68]	; 0x44
    f60e:	2d00      	cmp	r5, #0
    f610:	bfa8      	it	ge
    f612:	1b7f      	subge	r7, r7, r5
    f614:	2f00      	cmp	r7, #0
    f616:	f300 81f4 	bgt.w	fa02 <_svfprintf_r+0xef6>
    f61a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f61c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    f620:	4423      	add	r3, r4
    f622:	930a      	str	r3, [sp, #40]	; 0x28
    f624:	f040 8214 	bne.w	fa50 <_svfprintf_r+0xf44>
    f628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f62a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f62c:	4293      	cmp	r3, r2
    f62e:	db03      	blt.n	f638 <_svfprintf_r+0xb2c>
    f630:	f01b 0f01 	tst.w	fp, #1
    f634:	f000 84a5 	beq.w	ff82 <_svfprintf_r+0x1476>
    f638:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f63a:	9919      	ldr	r1, [sp, #100]	; 0x64
    f63c:	4416      	add	r6, r2
    f63e:	e9c9 1200 	strd	r1, r2, [r9]
    f642:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f644:	962e      	str	r6, [sp, #184]	; 0xb8
    f646:	3201      	adds	r2, #1
    f648:	2a07      	cmp	r2, #7
    f64a:	922d      	str	r2, [sp, #180]	; 0xb4
    f64c:	f300 86c6 	bgt.w	103dc <_svfprintf_r+0x18d0>
    f650:	f109 0908 	add.w	r9, r9, #8
    f654:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f656:	18a5      	adds	r5, r4, r2
    f658:	1ad4      	subs	r4, r2, r3
    f65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f65c:	1aed      	subs	r5, r5, r3
    f65e:	42a5      	cmp	r5, r4
    f660:	bfa8      	it	ge
    f662:	4625      	movge	r5, r4
    f664:	2d00      	cmp	r5, #0
    f666:	dd0d      	ble.n	f684 <_svfprintf_r+0xb78>
    f668:	f8c9 3000 	str.w	r3, [r9]
    f66c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f66e:	f8c9 5004 	str.w	r5, [r9, #4]
    f672:	3301      	adds	r3, #1
    f674:	442e      	add	r6, r5
    f676:	2b07      	cmp	r3, #7
    f678:	962e      	str	r6, [sp, #184]	; 0xb8
    f67a:	932d      	str	r3, [sp, #180]	; 0xb4
    f67c:	f300 86be 	bgt.w	103fc <_svfprintf_r+0x18f0>
    f680:	f109 0908 	add.w	r9, r9, #8
    f684:	2d00      	cmp	r5, #0
    f686:	bfa8      	it	ge
    f688:	1b64      	subge	r4, r4, r5
    f68a:	2c00      	cmp	r4, #0
    f68c:	f77f abc3 	ble.w	ee16 <_svfprintf_r+0x30a>
    f690:	2c10      	cmp	r4, #16
    f692:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f694:	4d71      	ldr	r5, [pc, #452]	; (f85c <_svfprintf_r+0xd50>)
    f696:	f340 835c 	ble.w	fd52 <_svfprintf_r+0x1246>
    f69a:	4632      	mov	r2, r6
    f69c:	2710      	movs	r7, #16
    f69e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f6a0:	e005      	b.n	f6ae <_svfprintf_r+0xba2>
    f6a2:	f109 0908 	add.w	r9, r9, #8
    f6a6:	3c10      	subs	r4, #16
    f6a8:	2c10      	cmp	r4, #16
    f6aa:	f340 8351 	ble.w	fd50 <_svfprintf_r+0x1244>
    f6ae:	3301      	adds	r3, #1
    f6b0:	3210      	adds	r2, #16
    f6b2:	2b07      	cmp	r3, #7
    f6b4:	e9c9 5700 	strd	r5, r7, [r9]
    f6b8:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f6bc:	ddf1      	ble.n	f6a2 <_svfprintf_r+0xb96>
    f6be:	aa2c      	add	r2, sp, #176	; 0xb0
    f6c0:	4631      	mov	r1, r6
    f6c2:	4650      	mov	r0, sl
    f6c4:	f002 fa8c 	bl	11be0 <__ssprint_r>
    f6c8:	2800      	cmp	r0, #0
    f6ca:	f47f ae8a 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f6ce:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f6d2:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f6d6:	e7e6      	b.n	f6a6 <_svfprintf_r+0xb9a>
    f6d8:	f01b 0f01 	tst.w	fp, #1
    f6dc:	f47f ae8e 	bne.w	f3fc <_svfprintf_r+0x8f0>
    f6e0:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    f6e2:	f8c9 4000 	str.w	r4, [r9]
    f6e6:	2301      	movs	r3, #1
    f6e8:	441f      	add	r7, r3
    f6ea:	3601      	adds	r6, #1
    f6ec:	2f07      	cmp	r7, #7
    f6ee:	f8c9 3004 	str.w	r3, [r9, #4]
    f6f2:	962e      	str	r6, [sp, #184]	; 0xb8
    f6f4:	972d      	str	r7, [sp, #180]	; 0xb4
    f6f6:	f77f aeb4 	ble.w	f462 <_svfprintf_r+0x956>
    f6fa:	990c      	ldr	r1, [sp, #48]	; 0x30
    f6fc:	aa2c      	add	r2, sp, #176	; 0xb0
    f6fe:	4650      	mov	r0, sl
    f700:	f002 fa6e 	bl	11be0 <__ssprint_r>
    f704:	2800      	cmp	r0, #0
    f706:	f47f ae6c 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f70a:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    f70e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f712:	e6a8      	b.n	f466 <_svfprintf_r+0x95a>
    f714:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f716:	1e5c      	subs	r4, r3, #1
    f718:	2c00      	cmp	r4, #0
    f71a:	f77f aea4 	ble.w	f466 <_svfprintf_r+0x95a>
    f71e:	2c10      	cmp	r4, #16
    f720:	4d4e      	ldr	r5, [pc, #312]	; (f85c <_svfprintf_r+0xd50>)
    f722:	f340 834c 	ble.w	fdbe <_svfprintf_r+0x12b2>
    f726:	4632      	mov	r2, r6
    f728:	2310      	movs	r3, #16
    f72a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f72c:	e005      	b.n	f73a <_svfprintf_r+0xc2e>
    f72e:	f109 0908 	add.w	r9, r9, #8
    f732:	3c10      	subs	r4, #16
    f734:	2c10      	cmp	r4, #16
    f736:	f340 8341 	ble.w	fdbc <_svfprintf_r+0x12b0>
    f73a:	3701      	adds	r7, #1
    f73c:	3210      	adds	r2, #16
    f73e:	2f07      	cmp	r7, #7
    f740:	e9c9 5300 	strd	r5, r3, [r9]
    f744:	e9cd 722d 	strd	r7, r2, [sp, #180]	; 0xb4
    f748:	ddf1      	ble.n	f72e <_svfprintf_r+0xc22>
    f74a:	aa2c      	add	r2, sp, #176	; 0xb0
    f74c:	4631      	mov	r1, r6
    f74e:	4650      	mov	r0, sl
    f750:	f002 fa46 	bl	11be0 <__ssprint_r>
    f754:	2800      	cmp	r0, #0
    f756:	f47f ae44 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f75a:	e9dd 722d 	ldrd	r7, r2, [sp, #180]	; 0xb4
    f75e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f762:	2310      	movs	r3, #16
    f764:	e7e5      	b.n	f732 <_svfprintf_r+0xc26>
    f766:	990c      	ldr	r1, [sp, #48]	; 0x30
    f768:	aa2c      	add	r2, sp, #176	; 0xb0
    f76a:	4650      	mov	r0, sl
    f76c:	f002 fa38 	bl	11be0 <__ssprint_r>
    f770:	2800      	cmp	r0, #0
    f772:	f47f ae36 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f776:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f778:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f77c:	f7ff bb38 	b.w	edf0 <_svfprintf_r+0x2e4>
    f780:	f015 0310 	ands.w	r3, r5, #16
    f784:	d160      	bne.n	f848 <_svfprintf_r+0xd3c>
    f786:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    f78a:	f000 8373 	beq.w	fe74 <_svfprintf_r+0x1368>
    f78e:	980e      	ldr	r0, [sp, #56]	; 0x38
    f790:	f850 2b04 	ldr.w	r2, [r0], #4
    f794:	900e      	str	r0, [sp, #56]	; 0x38
    f796:	4619      	mov	r1, r3
    f798:	b292      	uxth	r2, r2
    f79a:	2301      	movs	r3, #1
    f79c:	e45a      	b.n	f054 <_svfprintf_r+0x548>
    f79e:	f01b 0310 	ands.w	r3, fp, #16
    f7a2:	d168      	bne.n	f876 <_svfprintf_r+0xd6a>
    f7a4:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    f7a8:	f000 8356 	beq.w	fe58 <_svfprintf_r+0x134c>
    f7ac:	980e      	ldr	r0, [sp, #56]	; 0x38
    f7ae:	f850 2b04 	ldr.w	r2, [r0], #4
    f7b2:	900e      	str	r0, [sp, #56]	; 0x38
    f7b4:	4619      	mov	r1, r3
    f7b6:	b292      	uxth	r2, r2
    f7b8:	e4af      	b.n	f11a <_svfprintf_r+0x60e>
    f7ba:	4252      	negs	r2, r2
    f7bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f7c0:	465d      	mov	r5, fp
    f7c2:	202d      	movs	r0, #45	; 0x2d
    f7c4:	2301      	movs	r3, #1
    f7c6:	e446      	b.n	f056 <_svfprintf_r+0x54a>
    f7c8:	990c      	ldr	r1, [sp, #48]	; 0x30
    f7ca:	aa2c      	add	r2, sp, #176	; 0xb0
    f7cc:	4650      	mov	r0, sl
    f7ce:	f002 fa07 	bl	11be0 <__ssprint_r>
    f7d2:	2800      	cmp	r0, #0
    f7d4:	f47f ae05 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f7d8:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    f7dc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f7e0:	e61b      	b.n	f41a <_svfprintf_r+0x90e>
    f7e2:	990c      	ldr	r1, [sp, #48]	; 0x30
    f7e4:	aa2c      	add	r2, sp, #176	; 0xb0
    f7e6:	4650      	mov	r0, sl
    f7e8:	f002 f9fa 	bl	11be0 <__ssprint_r>
    f7ec:	2800      	cmp	r0, #0
    f7ee:	f47f adf8 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f7f2:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    f7f6:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f7fa:	e61b      	b.n	f434 <_svfprintf_r+0x928>
    f7fc:	f01b 0f01 	tst.w	fp, #1
    f800:	f43f ab09 	beq.w	ee16 <_svfprintf_r+0x30a>
    f804:	e538      	b.n	f278 <_svfprintf_r+0x76c>
    f806:	930e      	str	r3, [sp, #56]	; 0x38
    f808:	f898 3000 	ldrb.w	r3, [r8]
    f80c:	f7ff b9d7 	b.w	ebbe <_svfprintf_r+0xb2>
    f810:	ac58      	add	r4, sp, #352	; 0x160
    f812:	e4e5      	b.n	f1e0 <_svfprintf_r+0x6d4>
    f814:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f818:	f040 83bd 	bne.w	ff96 <_svfprintf_r+0x148a>
    f81c:	f853 2b04 	ldr.w	r2, [r3], #4
    f820:	930e      	str	r3, [sp, #56]	; 0x38
    f822:	17d1      	asrs	r1, r2, #31
    f824:	460b      	mov	r3, r1
    f826:	f7ff bbc4 	b.w	efb2 <_svfprintf_r+0x4a6>
    f82a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f82c:	2b00      	cmp	r3, #0
    f82e:	f43f aa4b 	beq.w	ecc8 <_svfprintf_r+0x1bc>
    f832:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f834:	781b      	ldrb	r3, [r3, #0]
    f836:	2b00      	cmp	r3, #0
    f838:	f43f aa46 	beq.w	ecc8 <_svfprintf_r+0x1bc>
    f83c:	f898 3000 	ldrb.w	r3, [r8]
    f840:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    f844:	f7ff b9bb 	b.w	ebbe <_svfprintf_r+0xb2>
    f848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f84a:	f853 2b04 	ldr.w	r2, [r3], #4
    f84e:	930e      	str	r3, [sp, #56]	; 0x38
    f850:	2301      	movs	r3, #1
    f852:	f7ff bbff 	b.w	f054 <_svfprintf_r+0x548>
    f856:	bf00      	nop
    f858:	0001575c 	.word	0x0001575c
    f85c:	0001576c 	.word	0x0001576c
    f860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f862:	9809      	ldr	r0, [sp, #36]	; 0x24
    f864:	f853 1b04 	ldr.w	r1, [r3], #4
    f868:	930e      	str	r3, [sp, #56]	; 0x38
    f86a:	17c2      	asrs	r2, r0, #31
    f86c:	e9c1 0200 	strd	r0, r2, [r1]
    f870:	4644      	mov	r4, r8
    f872:	f7ff b979 	b.w	eb68 <_svfprintf_r+0x5c>
    f876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f878:	f853 2b04 	ldr.w	r2, [r3], #4
    f87c:	930e      	str	r3, [sp, #56]	; 0x38
    f87e:	e44c      	b.n	f11a <_svfprintf_r+0x60e>
    f880:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f884:	4602      	mov	r2, r0
    f886:	460b      	mov	r3, r1
    f888:	f7fd f8a0 	bl	c9cc <__aeabi_dcmpun>
    f88c:	2800      	cmp	r0, #0
    f88e:	f040 8675 	bne.w	1057c <_svfprintf_r+0x1a70>
    f892:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f894:	2b61      	cmp	r3, #97	; 0x61
    f896:	f000 855b 	beq.w	10350 <_svfprintf_r+0x1844>
    f89a:	2b41      	cmp	r3, #65	; 0x41
    f89c:	f000 85ac 	beq.w	103f8 <_svfprintf_r+0x18ec>
    f8a0:	9b08      	ldr	r3, [sp, #32]
    f8a2:	3301      	adds	r3, #1
    f8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f8a6:	f023 0320 	bic.w	r3, r3, #32
    f8aa:	9307      	str	r3, [sp, #28]
    f8ac:	f000 8463 	beq.w	10176 <_svfprintf_r+0x166a>
    f8b0:	2b47      	cmp	r3, #71	; 0x47
    f8b2:	d104      	bne.n	f8be <_svfprintf_r+0xdb2>
    f8b4:	9b08      	ldr	r3, [sp, #32]
    f8b6:	2b00      	cmp	r3, #0
    f8b8:	bf08      	it	eq
    f8ba:	2301      	moveq	r3, #1
    f8bc:	9308      	str	r3, [sp, #32]
    f8be:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f8c2:	460a      	mov	r2, r1
    f8c4:	2a00      	cmp	r2, #0
    f8c6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    f8ca:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    f8ce:	f2c0 85e1 	blt.w	10494 <_svfprintf_r+0x1988>
    f8d2:	469b      	mov	fp, r3
    f8d4:	2300      	movs	r3, #0
    f8d6:	4616      	mov	r6, r2
    f8d8:	931e      	str	r3, [sp, #120]	; 0x78
    f8da:	4607      	mov	r7, r0
    f8dc:	930d      	str	r3, [sp, #52]	; 0x34
    f8de:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f8e0:	3b41      	subs	r3, #65	; 0x41
    f8e2:	2b25      	cmp	r3, #37	; 0x25
    f8e4:	f200 8367 	bhi.w	ffb6 <_svfprintf_r+0x14aa>
    f8e8:	e8df f013 	tbh	[pc, r3, lsl #1]
    f8ec:	03650452 	.word	0x03650452
    f8f0:	03650365 	.word	0x03650365
    f8f4:	044e0449 	.word	0x044e0449
    f8f8:	03650365 	.word	0x03650365
    f8fc:	03650365 	.word	0x03650365
    f900:	03650365 	.word	0x03650365
    f904:	03650365 	.word	0x03650365
    f908:	03650365 	.word	0x03650365
    f90c:	03650365 	.word	0x03650365
    f910:	03650365 	.word	0x03650365
    f914:	03650365 	.word	0x03650365
    f918:	03650365 	.word	0x03650365
    f91c:	03650365 	.word	0x03650365
    f920:	03650365 	.word	0x03650365
    f924:	03650365 	.word	0x03650365
    f928:	03650365 	.word	0x03650365
    f92c:	03650365 	.word	0x03650365
    f930:	03650365 	.word	0x03650365
    f934:	044e0449 	.word	0x044e0449
    f938:	9310      	str	r3, [sp, #64]	; 0x40
    f93a:	465d      	mov	r5, fp
    f93c:	f7ff bbf4 	b.w	f128 <_svfprintf_r+0x61c>
    f940:	9310      	str	r3, [sp, #64]	; 0x40
    f942:	4bb7      	ldr	r3, [pc, #732]	; (fc20 <_svfprintf_r+0x1114>)
    f944:	9318      	str	r3, [sp, #96]	; 0x60
    f946:	f01b 0120 	ands.w	r1, fp, #32
    f94a:	f000 80fc 	beq.w	fb46 <_svfprintf_r+0x103a>
    f94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f950:	3307      	adds	r3, #7
    f952:	f023 0307 	bic.w	r3, r3, #7
    f956:	6859      	ldr	r1, [r3, #4]
    f958:	f853 2b08 	ldr.w	r2, [r3], #8
    f95c:	930e      	str	r3, [sp, #56]	; 0x38
    f95e:	f01b 0f01 	tst.w	fp, #1
    f962:	d00a      	beq.n	f97a <_svfprintf_r+0xe6e>
    f964:	ea52 0301 	orrs.w	r3, r2, r1
    f968:	d007      	beq.n	f97a <_svfprintf_r+0xe6e>
    f96a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f96c:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
    f970:	2330      	movs	r3, #48	; 0x30
    f972:	f04b 0b02 	orr.w	fp, fp, #2
    f976:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    f97a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    f97e:	2302      	movs	r3, #2
    f980:	f7ff bb68 	b.w	f054 <_svfprintf_r+0x548>
    f984:	9310      	str	r3, [sp, #64]	; 0x40
    f986:	f7ff bbbc 	b.w	f102 <_svfprintf_r+0x5f6>
    f98a:	9310      	str	r3, [sp, #64]	; 0x40
    f98c:	4ba5      	ldr	r3, [pc, #660]	; (fc24 <_svfprintf_r+0x1118>)
    f98e:	9318      	str	r3, [sp, #96]	; 0x60
    f990:	e7d9      	b.n	f946 <_svfprintf_r+0xe3a>
    f992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f994:	2101      	movs	r1, #1
    f996:	f853 2b04 	ldr.w	r2, [r3], #4
    f99a:	9107      	str	r1, [sp, #28]
    f99c:	f88d 20fc 	strb.w	r2, [sp, #252]	; 0xfc
    f9a0:	930e      	str	r3, [sp, #56]	; 0x38
    f9a2:	910a      	str	r1, [sp, #40]	; 0x28
    f9a4:	ac3f      	add	r4, sp, #252	; 0xfc
    f9a6:	f7ff babb 	b.w	ef20 <_svfprintf_r+0x414>
    f9aa:	990c      	ldr	r1, [sp, #48]	; 0x30
    f9ac:	aa2c      	add	r2, sp, #176	; 0xb0
    f9ae:	4650      	mov	r0, sl
    f9b0:	f002 f916 	bl	11be0 <__ssprint_r>
    f9b4:	2800      	cmp	r0, #0
    f9b6:	f47f ad14 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    f9ba:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f9bc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f9c0:	e468      	b.n	f294 <_svfprintf_r+0x788>
    f9c2:	2140      	movs	r1, #64	; 0x40
    f9c4:	4650      	mov	r0, sl
    f9c6:	f7fd fb59 	bl	d07c <_malloc_r>
    f9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f9cc:	6018      	str	r0, [r3, #0]
    f9ce:	6118      	str	r0, [r3, #16]
    f9d0:	2800      	cmp	r0, #0
    f9d2:	f000 8660 	beq.w	10696 <_svfprintf_r+0x1b8a>
    f9d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f9d8:	2340      	movs	r3, #64	; 0x40
    f9da:	6153      	str	r3, [r2, #20]
    f9dc:	f7ff b8b2 	b.w	eb44 <_svfprintf_r+0x38>
    f9e0:	9b08      	ldr	r3, [sp, #32]
    f9e2:	940d      	str	r4, [sp, #52]	; 0x34
    f9e4:	2b06      	cmp	r3, #6
    f9e6:	4621      	mov	r1, r4
    f9e8:	bf28      	it	cs
    f9ea:	2306      	movcs	r3, #6
    f9ec:	9408      	str	r4, [sp, #32]
    f9ee:	4622      	mov	r2, r4
    f9f0:	9307      	str	r3, [sp, #28]
    f9f2:	4c8d      	ldr	r4, [pc, #564]	; (fc28 <_svfprintf_r+0x111c>)
    f9f4:	970e      	str	r7, [sp, #56]	; 0x38
    f9f6:	930a      	str	r3, [sp, #40]	; 0x28
    f9f8:	9112      	str	r1, [sp, #72]	; 0x48
    f9fa:	9116      	str	r1, [sp, #88]	; 0x58
    f9fc:	9111      	str	r1, [sp, #68]	; 0x44
    f9fe:	f7ff ba69 	b.w	eed4 <_svfprintf_r+0x3c8>
    fa02:	2f10      	cmp	r7, #16
    fa04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fa06:	4d89      	ldr	r5, [pc, #548]	; (fc2c <_svfprintf_r+0x1120>)
    fa08:	f340 8245 	ble.w	fe96 <_svfprintf_r+0x138a>
    fa0c:	4632      	mov	r2, r6
    fa0e:	4626      	mov	r6, r4
    fa10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    fa12:	e005      	b.n	fa20 <_svfprintf_r+0xf14>
    fa14:	f109 0908 	add.w	r9, r9, #8
    fa18:	3f10      	subs	r7, #16
    fa1a:	2f10      	cmp	r7, #16
    fa1c:	f340 8239 	ble.w	fe92 <_svfprintf_r+0x1386>
    fa20:	3301      	adds	r3, #1
    fa22:	3210      	adds	r2, #16
    fa24:	2110      	movs	r1, #16
    fa26:	2b07      	cmp	r3, #7
    fa28:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fa2c:	f8c9 5000 	str.w	r5, [r9]
    fa30:	f8c9 1004 	str.w	r1, [r9, #4]
    fa34:	ddee      	ble.n	fa14 <_svfprintf_r+0xf08>
    fa36:	aa2c      	add	r2, sp, #176	; 0xb0
    fa38:	4621      	mov	r1, r4
    fa3a:	4650      	mov	r0, sl
    fa3c:	f002 f8d0 	bl	11be0 <__ssprint_r>
    fa40:	2800      	cmp	r0, #0
    fa42:	f47f acce 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    fa46:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fa4a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fa4e:	e7e3      	b.n	fa18 <_svfprintf_r+0xf0c>
    fa50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fa52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fa54:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    fa58:	464a      	mov	r2, r9
    fa5a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    fa5e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    fa62:	18e3      	adds	r3, r4, r3
    fa64:	9308      	str	r3, [sp, #32]
    fa66:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    fa68:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    fa6c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    fa70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fa72:	9410      	str	r4, [sp, #64]	; 0x40
    fa74:	4631      	mov	r1, r6
    fa76:	f1b9 0f00 	cmp.w	r9, #0
    fa7a:	d02e      	beq.n	fada <_svfprintf_r+0xfce>
    fa7c:	bb83      	cbnz	r3, fae0 <_svfprintf_r+0xfd4>
    fa7e:	3f01      	subs	r7, #1
    fa80:	f109 39ff 	add.w	r9, r9, #4294967295
    fa84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    fa86:	e9c2 3b00 	strd	r3, fp, [r2]
    fa8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fa8c:	3301      	adds	r3, #1
    fa8e:	4459      	add	r1, fp
    fa90:	2b07      	cmp	r3, #7
    fa92:	912e      	str	r1, [sp, #184]	; 0xb8
    fa94:	932d      	str	r3, [sp, #180]	; 0xb4
    fa96:	dc5f      	bgt.n	fb58 <_svfprintf_r+0x104c>
    fa98:	3208      	adds	r2, #8
    fa9a:	9b08      	ldr	r3, [sp, #32]
    fa9c:	7838      	ldrb	r0, [r7, #0]
    fa9e:	1b5b      	subs	r3, r3, r5
    faa0:	4283      	cmp	r3, r0
    faa2:	bfa8      	it	ge
    faa4:	4603      	movge	r3, r0
    faa6:	2b00      	cmp	r3, #0
    faa8:	461e      	mov	r6, r3
    faaa:	dd0b      	ble.n	fac4 <_svfprintf_r+0xfb8>
    faac:	982d      	ldr	r0, [sp, #180]	; 0xb4
    faae:	3001      	adds	r0, #1
    fab0:	4419      	add	r1, r3
    fab2:	2807      	cmp	r0, #7
    fab4:	e9c2 5300 	strd	r5, r3, [r2]
    fab8:	912e      	str	r1, [sp, #184]	; 0xb8
    faba:	902d      	str	r0, [sp, #180]	; 0xb4
    fabc:	f300 8156 	bgt.w	fd6c <_svfprintf_r+0x1260>
    fac0:	7838      	ldrb	r0, [r7, #0]
    fac2:	3208      	adds	r2, #8
    fac4:	2e00      	cmp	r6, #0
    fac6:	bfac      	ite	ge
    fac8:	1b84      	subge	r4, r0, r6
    faca:	4604      	movlt	r4, r0
    facc:	2c00      	cmp	r4, #0
    face:	dc0b      	bgt.n	fae8 <_svfprintf_r+0xfdc>
    fad0:	4405      	add	r5, r0
    fad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fad4:	f1b9 0f00 	cmp.w	r9, #0
    fad8:	d1d0      	bne.n	fa7c <_svfprintf_r+0xf70>
    fada:	2b00      	cmp	r3, #0
    fadc:	f000 83d4 	beq.w	10288 <_svfprintf_r+0x177c>
    fae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fae2:	3b01      	subs	r3, #1
    fae4:	9312      	str	r3, [sp, #72]	; 0x48
    fae6:	e7cd      	b.n	fa84 <_svfprintf_r+0xf78>
    fae8:	2c10      	cmp	r4, #16
    faea:	982d      	ldr	r0, [sp, #180]	; 0xb4
    faec:	dd1d      	ble.n	fb2a <_svfprintf_r+0x101e>
    faee:	2610      	movs	r6, #16
    faf0:	e004      	b.n	fafc <_svfprintf_r+0xff0>
    faf2:	3c10      	subs	r4, #16
    faf4:	2c10      	cmp	r4, #16
    faf6:	f102 0208 	add.w	r2, r2, #8
    fafa:	dd16      	ble.n	fb2a <_svfprintf_r+0x101e>
    fafc:	3001      	adds	r0, #1
    fafe:	4b4b      	ldr	r3, [pc, #300]	; (fc2c <_svfprintf_r+0x1120>)
    fb00:	3110      	adds	r1, #16
    fb02:	2807      	cmp	r0, #7
    fb04:	e9c2 3600 	strd	r3, r6, [r2]
    fb08:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    fb0c:	ddf1      	ble.n	faf2 <_svfprintf_r+0xfe6>
    fb0e:	aa2c      	add	r2, sp, #176	; 0xb0
    fb10:	4641      	mov	r1, r8
    fb12:	4650      	mov	r0, sl
    fb14:	f002 f864 	bl	11be0 <__ssprint_r>
    fb18:	2800      	cmp	r0, #0
    fb1a:	f47f ac62 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    fb1e:	3c10      	subs	r4, #16
    fb20:	2c10      	cmp	r4, #16
    fb22:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
    fb26:	aa2f      	add	r2, sp, #188	; 0xbc
    fb28:	dce8      	bgt.n	fafc <_svfprintf_r+0xff0>
    fb2a:	3001      	adds	r0, #1
    fb2c:	4b3f      	ldr	r3, [pc, #252]	; (fc2c <_svfprintf_r+0x1120>)
    fb2e:	6054      	str	r4, [r2, #4]
    fb30:	4421      	add	r1, r4
    fb32:	2807      	cmp	r0, #7
    fb34:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    fb38:	6013      	str	r3, [r2, #0]
    fb3a:	f300 83fb 	bgt.w	10334 <_svfprintf_r+0x1828>
    fb3e:	7838      	ldrb	r0, [r7, #0]
    fb40:	3208      	adds	r2, #8
    fb42:	4405      	add	r5, r0
    fb44:	e7c5      	b.n	fad2 <_svfprintf_r+0xfc6>
    fb46:	f01b 0310 	ands.w	r3, fp, #16
    fb4a:	f000 80bc 	beq.w	fcc6 <_svfprintf_r+0x11ba>
    fb4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb50:	f853 2b04 	ldr.w	r2, [r3], #4
    fb54:	930e      	str	r3, [sp, #56]	; 0x38
    fb56:	e702      	b.n	f95e <_svfprintf_r+0xe52>
    fb58:	aa2c      	add	r2, sp, #176	; 0xb0
    fb5a:	4641      	mov	r1, r8
    fb5c:	4650      	mov	r0, sl
    fb5e:	f002 f83f 	bl	11be0 <__ssprint_r>
    fb62:	2800      	cmp	r0, #0
    fb64:	f47f ac3d 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    fb68:	992e      	ldr	r1, [sp, #184]	; 0xb8
    fb6a:	aa2f      	add	r2, sp, #188	; 0xbc
    fb6c:	e795      	b.n	fa9a <_svfprintf_r+0xf8e>
    fb6e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    fb72:	4b2f      	ldr	r3, [pc, #188]	; (fc30 <_svfprintf_r+0x1124>)
    fb74:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    fb78:	f8cd 801c 	str.w	r8, [sp, #28]
    fb7c:	f405 6780 	and.w	r7, r5, #1024	; 0x400
    fb80:	f04f 0c00 	mov.w	ip, #0
    fb84:	ac58      	add	r4, sp, #352	; 0x160
    fb86:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    fb8a:	950a      	str	r5, [sp, #40]	; 0x28
    fb8c:	e005      	b.n	fb9a <_svfprintf_r+0x108e>
    fb8e:	2a0a      	cmp	r2, #10
    fb90:	f171 0100 	sbcs.w	r1, r1, #0
    fb94:	d334      	bcc.n	fc00 <_svfprintf_r+0x10f4>
    fb96:	4642      	mov	r2, r8
    fb98:	4631      	mov	r1, r6
    fb9a:	1850      	adds	r0, r2, r1
    fb9c:	f140 0000 	adc.w	r0, r0, #0
    fba0:	fba3 5600 	umull	r5, r6, r3, r0
    fba4:	f026 0503 	bic.w	r5, r6, #3
    fba8:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    fbac:	1b40      	subs	r0, r0, r5
    fbae:	1a15      	subs	r5, r2, r0
    fbb0:	f161 0e00 	sbc.w	lr, r1, #0
    fbb4:	fb0b f605 	mul.w	r6, fp, r5
    fbb8:	fb03 660e 	mla	r6, r3, lr, r6
    fbbc:	fba5 8503 	umull	r8, r5, r5, r3
    fbc0:	442e      	add	r6, r5
    fbc2:	f008 0e01 	and.w	lr, r8, #1
    fbc6:	2505      	movs	r5, #5
    fbc8:	fbae 5e05 	umull	r5, lr, lr, r5
    fbcc:	182d      	adds	r5, r5, r0
    fbce:	ea4f 0858 	mov.w	r8, r8, lsr #1
    fbd2:	3530      	adds	r5, #48	; 0x30
    fbd4:	f804 5c01 	strb.w	r5, [r4, #-1]
    fbd8:	ea48 78c6 	orr.w	r8, r8, r6, lsl #31
    fbdc:	f10c 0c01 	add.w	ip, ip, #1
    fbe0:	3c01      	subs	r4, #1
    fbe2:	0876      	lsrs	r6, r6, #1
    fbe4:	2f00      	cmp	r7, #0
    fbe6:	d0d2      	beq.n	fb8e <_svfprintf_r+0x1082>
    fbe8:	f899 0000 	ldrb.w	r0, [r9]
    fbec:	4584      	cmp	ip, r0
    fbee:	d1ce      	bne.n	fb8e <_svfprintf_r+0x1082>
    fbf0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fbf4:	d0cb      	beq.n	fb8e <_svfprintf_r+0x1082>
    fbf6:	2a0a      	cmp	r2, #10
    fbf8:	f171 0100 	sbcs.w	r1, r1, #0
    fbfc:	f080 8198 	bcs.w	ff30 <_svfprintf_r+0x1424>
    fc00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fc02:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    fc06:	ab58      	add	r3, sp, #352	; 0x160
    fc08:	1b1b      	subs	r3, r3, r4
    fc0a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    fc0e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    fc12:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    fc16:	46ab      	mov	fp, r5
    fc18:	930a      	str	r3, [sp, #40]	; 0x28
    fc1a:	f7ff bae1 	b.w	f1e0 <_svfprintf_r+0x6d4>
    fc1e:	bf00      	nop
    fc20:	0001572c 	.word	0x0001572c
    fc24:	00015740 	.word	0x00015740
    fc28:	00015754 	.word	0x00015754
    fc2c:	0001576c 	.word	0x0001576c
    fc30:	cccccccd 	.word	0xcccccccd
    fc34:	2301      	movs	r3, #1
    fc36:	f8c9 3004 	str.w	r3, [r9, #4]
    fc3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fc3c:	4aba      	ldr	r2, [pc, #744]	; (ff28 <_svfprintf_r+0x141c>)
    fc3e:	f8c9 2000 	str.w	r2, [r9]
    fc42:	3301      	adds	r3, #1
    fc44:	3601      	adds	r6, #1
    fc46:	2b07      	cmp	r3, #7
    fc48:	962e      	str	r6, [sp, #184]	; 0xb8
    fc4a:	932d      	str	r3, [sp, #180]	; 0xb4
    fc4c:	f300 818c 	bgt.w	ff68 <_svfprintf_r+0x145c>
    fc50:	f109 0908 	add.w	r9, r9, #8
    fc54:	2900      	cmp	r1, #0
    fc56:	f040 80be 	bne.w	fdd6 <_svfprintf_r+0x12ca>
    fc5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fc5c:	f00b 0301 	and.w	r3, fp, #1
    fc60:	4313      	orrs	r3, r2
    fc62:	f43f a8d8 	beq.w	ee16 <_svfprintf_r+0x30a>
    fc66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fc68:	9919      	ldr	r1, [sp, #100]	; 0x64
    fc6a:	199a      	adds	r2, r3, r6
    fc6c:	e9c9 1300 	strd	r1, r3, [r9]
    fc70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fc72:	922e      	str	r2, [sp, #184]	; 0xb8
    fc74:	3301      	adds	r3, #1
    fc76:	2b07      	cmp	r3, #7
    fc78:	932d      	str	r3, [sp, #180]	; 0xb4
    fc7a:	f300 826e 	bgt.w	1015a <_svfprintf_r+0x164e>
    fc7e:	f109 0908 	add.w	r9, r9, #8
    fc82:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fc84:	f8c9 4000 	str.w	r4, [r9]
    fc88:	3301      	adds	r3, #1
    fc8a:	188e      	adds	r6, r1, r2
    fc8c:	2b07      	cmp	r3, #7
    fc8e:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fc92:	f8c9 1004 	str.w	r1, [r9, #4]
    fc96:	f77f a8bc 	ble.w	ee12 <_svfprintf_r+0x306>
    fc9a:	f7ff bbf1 	b.w	f480 <_svfprintf_r+0x974>
    fc9e:	990c      	ldr	r1, [sp, #48]	; 0x30
    fca0:	931e      	str	r3, [sp, #120]	; 0x78
    fca2:	aa2c      	add	r2, sp, #176	; 0xb0
    fca4:	4650      	mov	r0, sl
    fca6:	f001 ff9b 	bl	11be0 <__ssprint_r>
    fcaa:	2800      	cmp	r0, #0
    fcac:	f47f ab99 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    fcb0:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    fcb4:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fcb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fcb8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fcbc:	f7ff b86a 	b.w	ed94 <_svfprintf_r+0x288>
    fcc0:	46c2      	mov	sl, r8
    fcc2:	f7ff bb8e 	b.w	f3e2 <_svfprintf_r+0x8d6>
    fcc6:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    fcca:	f000 80b8 	beq.w	fe3e <_svfprintf_r+0x1332>
    fcce:	980e      	ldr	r0, [sp, #56]	; 0x38
    fcd0:	f850 2b04 	ldr.w	r2, [r0], #4
    fcd4:	900e      	str	r0, [sp, #56]	; 0x38
    fcd6:	4619      	mov	r1, r3
    fcd8:	b292      	uxth	r2, r2
    fcda:	e640      	b.n	f95e <_svfprintf_r+0xe52>
    fcdc:	990c      	ldr	r1, [sp, #48]	; 0x30
    fcde:	aa2c      	add	r2, sp, #176	; 0xb0
    fce0:	4650      	mov	r0, sl
    fce2:	f001 ff7d 	bl	11be0 <__ssprint_r>
    fce6:	2800      	cmp	r0, #0
    fce8:	f47f ab7b 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    fcec:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fcee:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fcf2:	f7ff babc 	b.w	f26e <_svfprintf_r+0x762>
    fcf6:	ae2a      	add	r6, sp, #168	; 0xa8
    fcf8:	2208      	movs	r2, #8
    fcfa:	2100      	movs	r1, #0
    fcfc:	4630      	mov	r0, r6
    fcfe:	9425      	str	r4, [sp, #148]	; 0x94
    fd00:	f7fe f82a 	bl	dd58 <memset>
    fd04:	9b08      	ldr	r3, [sp, #32]
    fd06:	1c5a      	adds	r2, r3, #1
    fd08:	f000 80d4 	beq.w	feb4 <_svfprintf_r+0x13a8>
    fd0c:	2500      	movs	r5, #0
    fd0e:	f8cd 801c 	str.w	r8, [sp, #28]
    fd12:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    fd16:	46a8      	mov	r8, r5
    fd18:	469b      	mov	fp, r3
    fd1a:	e00c      	b.n	fd36 <_svfprintf_r+0x122a>
    fd1c:	a93f      	add	r1, sp, #252	; 0xfc
    fd1e:	4650      	mov	r0, sl
    fd20:	f001 ff16 	bl	11b50 <_wcrtomb_r>
    fd24:	1c43      	adds	r3, r0, #1
    fd26:	4440      	add	r0, r8
    fd28:	f000 83b8 	beq.w	1049c <_svfprintf_r+0x1990>
    fd2c:	4558      	cmp	r0, fp
    fd2e:	dc08      	bgt.n	fd42 <_svfprintf_r+0x1236>
    fd30:	f000 8435 	beq.w	1059e <_svfprintf_r+0x1a92>
    fd34:	4680      	mov	r8, r0
    fd36:	9a25      	ldr	r2, [sp, #148]	; 0x94
    fd38:	5952      	ldr	r2, [r2, r5]
    fd3a:	4633      	mov	r3, r6
    fd3c:	3504      	adds	r5, #4
    fd3e:	2a00      	cmp	r2, #0
    fd40:	d1ec      	bne.n	fd1c <_svfprintf_r+0x1210>
    fd42:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    fd46:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    fd4a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    fd4e:	e0be      	b.n	fece <_svfprintf_r+0x13c2>
    fd50:	4616      	mov	r6, r2
    fd52:	3301      	adds	r3, #1
    fd54:	4426      	add	r6, r4
    fd56:	2b07      	cmp	r3, #7
    fd58:	f8c9 5000 	str.w	r5, [r9]
    fd5c:	f8c9 4004 	str.w	r4, [r9, #4]
    fd60:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fd64:	f77f a855 	ble.w	ee12 <_svfprintf_r+0x306>
    fd68:	f7ff bb8a 	b.w	f480 <_svfprintf_r+0x974>
    fd6c:	aa2c      	add	r2, sp, #176	; 0xb0
    fd6e:	4641      	mov	r1, r8
    fd70:	4650      	mov	r0, sl
    fd72:	f001 ff35 	bl	11be0 <__ssprint_r>
    fd76:	2800      	cmp	r0, #0
    fd78:	f47f ab33 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    fd7c:	7838      	ldrb	r0, [r7, #0]
    fd7e:	992e      	ldr	r1, [sp, #184]	; 0xb8
    fd80:	aa2f      	add	r2, sp, #188	; 0xbc
    fd82:	e69f      	b.n	fac4 <_svfprintf_r+0xfb8>
    fd84:	990c      	ldr	r1, [sp, #48]	; 0x30
    fd86:	aa2c      	add	r2, sp, #176	; 0xb0
    fd88:	4650      	mov	r0, sl
    fd8a:	f001 ff29 	bl	11be0 <__ssprint_r>
    fd8e:	2800      	cmp	r0, #0
    fd90:	f47f ab27 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    fd94:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fd96:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fd9a:	f7ff b823 	b.w	ede4 <_svfprintf_r+0x2d8>
    fd9e:	2b01      	cmp	r3, #1
    fda0:	465d      	mov	r5, fp
    fda2:	f47f aa09 	bne.w	f1b8 <_svfprintf_r+0x6ac>
    fda6:	f7ff bbb9 	b.w	f51c <_svfprintf_r+0xa10>
    fdaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fdac:	9909      	ldr	r1, [sp, #36]	; 0x24
    fdae:	f853 2b04 	ldr.w	r2, [r3], #4
    fdb2:	4644      	mov	r4, r8
    fdb4:	6011      	str	r1, [r2, #0]
    fdb6:	930e      	str	r3, [sp, #56]	; 0x38
    fdb8:	f7fe bed6 	b.w	eb68 <_svfprintf_r+0x5c>
    fdbc:	4616      	mov	r6, r2
    fdbe:	3701      	adds	r7, #1
    fdc0:	4426      	add	r6, r4
    fdc2:	2f07      	cmp	r7, #7
    fdc4:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    fdc8:	f8c9 5000 	str.w	r5, [r9]
    fdcc:	f8c9 4004 	str.w	r4, [r9, #4]
    fdd0:	f77f ab47 	ble.w	f462 <_svfprintf_r+0x956>
    fdd4:	e491      	b.n	f6fa <_svfprintf_r+0xbee>
    fdd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fdd8:	9819      	ldr	r0, [sp, #100]	; 0x64
    fdda:	199a      	adds	r2, r3, r6
    fddc:	e9c9 0300 	strd	r0, r3, [r9]
    fde0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fde2:	922e      	str	r2, [sp, #184]	; 0xb8
    fde4:	3301      	adds	r3, #1
    fde6:	2b07      	cmp	r3, #7
    fde8:	932d      	str	r3, [sp, #180]	; 0xb4
    fdea:	f300 81b6 	bgt.w	1015a <_svfprintf_r+0x164e>
    fdee:	f109 0908 	add.w	r9, r9, #8
    fdf2:	2900      	cmp	r1, #0
    fdf4:	f6bf af45 	bge.w	fc82 <_svfprintf_r+0x1176>
    fdf8:	424f      	negs	r7, r1
    fdfa:	3110      	adds	r1, #16
    fdfc:	4d4b      	ldr	r5, [pc, #300]	; (ff2c <_svfprintf_r+0x1420>)
    fdfe:	f280 8388 	bge.w	10512 <_svfprintf_r+0x1a06>
    fe02:	4649      	mov	r1, r9
    fe04:	2610      	movs	r6, #16
    fe06:	46a1      	mov	r9, r4
    fe08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    fe0a:	e004      	b.n	fe16 <_svfprintf_r+0x130a>
    fe0c:	3108      	adds	r1, #8
    fe0e:	3f10      	subs	r7, #16
    fe10:	2f10      	cmp	r7, #16
    fe12:	f340 837c 	ble.w	1050e <_svfprintf_r+0x1a02>
    fe16:	3301      	adds	r3, #1
    fe18:	3210      	adds	r2, #16
    fe1a:	2b07      	cmp	r3, #7
    fe1c:	e9c1 5600 	strd	r5, r6, [r1]
    fe20:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fe24:	ddf2      	ble.n	fe0c <_svfprintf_r+0x1300>
    fe26:	aa2c      	add	r2, sp, #176	; 0xb0
    fe28:	4621      	mov	r1, r4
    fe2a:	4650      	mov	r0, sl
    fe2c:	f001 fed8 	bl	11be0 <__ssprint_r>
    fe30:	2800      	cmp	r0, #0
    fe32:	f47f aad6 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    fe36:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fe3a:	a92f      	add	r1, sp, #188	; 0xbc
    fe3c:	e7e7      	b.n	fe0e <_svfprintf_r+0x1302>
    fe3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe40:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    fe44:	bf1a      	itte	ne
    fe46:	4611      	movne	r1, r2
    fe48:	f853 2b04 	ldrne.w	r2, [r3], #4
    fe4c:	f853 2b04 	ldreq.w	r2, [r3], #4
    fe50:	930e      	str	r3, [sp, #56]	; 0x38
    fe52:	bf18      	it	ne
    fe54:	b2d2      	uxtbne	r2, r2
    fe56:	e582      	b.n	f95e <_svfprintf_r+0xe52>
    fe58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe5a:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    fe5e:	bf1a      	itte	ne
    fe60:	4611      	movne	r1, r2
    fe62:	f853 2b04 	ldrne.w	r2, [r3], #4
    fe66:	f853 2b04 	ldreq.w	r2, [r3], #4
    fe6a:	930e      	str	r3, [sp, #56]	; 0x38
    fe6c:	bf18      	it	ne
    fe6e:	b2d2      	uxtbne	r2, r2
    fe70:	f7ff b953 	b.w	f11a <_svfprintf_r+0x60e>
    fe74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe76:	f415 7100 	ands.w	r1, r5, #512	; 0x200
    fe7a:	bf1a      	itte	ne
    fe7c:	4611      	movne	r1, r2
    fe7e:	f853 2b04 	ldrne.w	r2, [r3], #4
    fe82:	f853 2b04 	ldreq.w	r2, [r3], #4
    fe86:	930e      	str	r3, [sp, #56]	; 0x38
    fe88:	bf18      	it	ne
    fe8a:	b2d2      	uxtbne	r2, r2
    fe8c:	2301      	movs	r3, #1
    fe8e:	f7ff b8e1 	b.w	f054 <_svfprintf_r+0x548>
    fe92:	4634      	mov	r4, r6
    fe94:	4616      	mov	r6, r2
    fe96:	3301      	adds	r3, #1
    fe98:	443e      	add	r6, r7
    fe9a:	2b07      	cmp	r3, #7
    fe9c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fea0:	f8c9 5000 	str.w	r5, [r9]
    fea4:	f8c9 7004 	str.w	r7, [r9, #4]
    fea8:	f300 814a 	bgt.w	10140 <_svfprintf_r+0x1634>
    feac:	f109 0908 	add.w	r9, r9, #8
    feb0:	f7ff bbb3 	b.w	f61a <_svfprintf_r+0xb0e>
    feb4:	2300      	movs	r3, #0
    feb6:	4619      	mov	r1, r3
    feb8:	9600      	str	r6, [sp, #0]
    feba:	aa25      	add	r2, sp, #148	; 0x94
    febc:	4650      	mov	r0, sl
    febe:	f001 fe6d 	bl	11b9c <_wcsrtombs_r>
    fec2:	4603      	mov	r3, r0
    fec4:	3301      	adds	r3, #1
    fec6:	900a      	str	r0, [sp, #40]	; 0x28
    fec8:	f000 82e8 	beq.w	1049c <_svfprintf_r+0x1990>
    fecc:	9425      	str	r4, [sp, #148]	; 0x94
    fece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fed0:	2b00      	cmp	r3, #0
    fed2:	d03d      	beq.n	ff50 <_svfprintf_r+0x1444>
    fed4:	2b63      	cmp	r3, #99	; 0x63
    fed6:	f300 8129 	bgt.w	1012c <_svfprintf_r+0x1620>
    feda:	2300      	movs	r3, #0
    fedc:	930d      	str	r3, [sp, #52]	; 0x34
    fede:	ac3f      	add	r4, sp, #252	; 0xfc
    fee0:	2208      	movs	r2, #8
    fee2:	2100      	movs	r1, #0
    fee4:	4630      	mov	r0, r6
    fee6:	f7fd ff37 	bl	dd58 <memset>
    feea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    feec:	9600      	str	r6, [sp, #0]
    feee:	462b      	mov	r3, r5
    fef0:	aa25      	add	r2, sp, #148	; 0x94
    fef2:	4621      	mov	r1, r4
    fef4:	4650      	mov	r0, sl
    fef6:	f001 fe51 	bl	11b9c <_wcsrtombs_r>
    fefa:	4285      	cmp	r5, r0
    fefc:	f040 83c4 	bne.w	10688 <_svfprintf_r+0x1b7c>
    ff00:	990a      	ldr	r1, [sp, #40]	; 0x28
    ff02:	970e      	str	r7, [sp, #56]	; 0x38
    ff04:	2300      	movs	r3, #0
    ff06:	5463      	strb	r3, [r4, r1]
    ff08:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    ff0c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    ff10:	9308      	str	r3, [sp, #32]
    ff12:	9107      	str	r1, [sp, #28]
    ff14:	9312      	str	r3, [sp, #72]	; 0x48
    ff16:	9316      	str	r3, [sp, #88]	; 0x58
    ff18:	9311      	str	r3, [sp, #68]	; 0x44
    ff1a:	f7fe bfdb 	b.w	eed4 <_svfprintf_r+0x3c8>
    ff1e:	222d      	movs	r2, #45	; 0x2d
    ff20:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    ff24:	f7fe bfc5 	b.w	eeb2 <_svfprintf_r+0x3a6>
    ff28:	00013f60 	.word	0x00013f60
    ff2c:	0001576c 	.word	0x0001576c
    ff30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ff32:	991c      	ldr	r1, [sp, #112]	; 0x70
    ff34:	1ae4      	subs	r4, r4, r3
    ff36:	461a      	mov	r2, r3
    ff38:	4620      	mov	r0, r4
    ff3a:	f7fd ff5f 	bl	ddfc <strncpy>
    ff3e:	f899 2001 	ldrb.w	r2, [r9, #1]
    ff42:	4ba5      	ldr	r3, [pc, #660]	; (101d8 <_svfprintf_r+0x16cc>)
    ff44:	b10a      	cbz	r2, ff4a <_svfprintf_r+0x143e>
    ff46:	f109 0901 	add.w	r9, r9, #1
    ff4a:	f04f 0c00 	mov.w	ip, #0
    ff4e:	e622      	b.n	fb96 <_svfprintf_r+0x108a>
    ff50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ff52:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    ff56:	970e      	str	r7, [sp, #56]	; 0x38
    ff58:	e9cd 3307 	strd	r3, r3, [sp, #28]
    ff5c:	9312      	str	r3, [sp, #72]	; 0x48
    ff5e:	9316      	str	r3, [sp, #88]	; 0x58
    ff60:	9311      	str	r3, [sp, #68]	; 0x44
    ff62:	930d      	str	r3, [sp, #52]	; 0x34
    ff64:	f7fe bfb6 	b.w	eed4 <_svfprintf_r+0x3c8>
    ff68:	990c      	ldr	r1, [sp, #48]	; 0x30
    ff6a:	aa2c      	add	r2, sp, #176	; 0xb0
    ff6c:	4650      	mov	r0, sl
    ff6e:	f001 fe37 	bl	11be0 <__ssprint_r>
    ff72:	2800      	cmp	r0, #0
    ff74:	f47f aa35 	bne.w	f3e2 <_svfprintf_r+0x8d6>
    ff78:	9923      	ldr	r1, [sp, #140]	; 0x8c
    ff7a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ff7c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ff80:	e668      	b.n	fc54 <_svfprintf_r+0x1148>
    ff82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ff84:	990a      	ldr	r1, [sp, #40]	; 0x28
    ff86:	18a5      	adds	r5, r4, r2
    ff88:	1a6d      	subs	r5, r5, r1
    ff8a:	1ad4      	subs	r4, r2, r3
    ff8c:	42a5      	cmp	r5, r4
    ff8e:	bfa8      	it	ge
    ff90:	4625      	movge	r5, r4
    ff92:	f7ff bb77 	b.w	f684 <_svfprintf_r+0xb78>
    ff96:	f913 2b04 	ldrsb.w	r2, [r3], #4
    ff9a:	930e      	str	r3, [sp, #56]	; 0x38
    ff9c:	17d1      	asrs	r1, r2, #31
    ff9e:	460b      	mov	r3, r1
    ffa0:	f7ff b807 	b.w	efb2 <_svfprintf_r+0x4a6>
    ffa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ffa6:	9909      	ldr	r1, [sp, #36]	; 0x24
    ffa8:	f853 2b04 	ldr.w	r2, [r3], #4
    ffac:	930e      	str	r3, [sp, #56]	; 0x38
    ffae:	8011      	strh	r1, [r2, #0]
    ffb0:	4644      	mov	r4, r8
    ffb2:	f7fe bdd9 	b.w	eb68 <_svfprintf_r+0x5c>
    ffb6:	9b08      	ldr	r3, [sp, #32]
    ffb8:	930a      	str	r3, [sp, #40]	; 0x28
    ffba:	2302      	movs	r3, #2
    ffbc:	a92a      	add	r1, sp, #168	; 0xa8
    ffbe:	9104      	str	r1, [sp, #16]
    ffc0:	a925      	add	r1, sp, #148	; 0x94
    ffc2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ffc4:	9103      	str	r1, [sp, #12]
    ffc6:	a923      	add	r1, sp, #140	; 0x8c
    ffc8:	9300      	str	r3, [sp, #0]
    ffca:	463a      	mov	r2, r7
    ffcc:	4633      	mov	r3, r6
    ffce:	9501      	str	r5, [sp, #4]
    ffd0:	9102      	str	r1, [sp, #8]
    ffd2:	4650      	mov	r0, sl
    ffd4:	f000 fe60 	bl	10c98 <_dtoa_r>
    ffd8:	9b07      	ldr	r3, [sp, #28]
    ffda:	2b47      	cmp	r3, #71	; 0x47
    ffdc:	4604      	mov	r4, r0
    ffde:	f000 81a3 	beq.w	10328 <_svfprintf_r+0x181c>
    ffe2:	2b46      	cmp	r3, #70	; 0x46
    ffe4:	4405      	add	r5, r0
    ffe6:	d105      	bne.n	fff4 <_svfprintf_r+0x14e8>
    ffe8:	7803      	ldrb	r3, [r0, #0]
    ffea:	2b30      	cmp	r3, #48	; 0x30
    ffec:	f000 82b8 	beq.w	10560 <_svfprintf_r+0x1a54>
    fff0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fff2:	441d      	add	r5, r3
    fff4:	4638      	mov	r0, r7
    fff6:	4631      	mov	r1, r6
    fff8:	2200      	movs	r2, #0
    fffa:	2300      	movs	r3, #0
    fffc:	f7fc fcb4 	bl	c968 <__aeabi_dcmpeq>
   10000:	2800      	cmp	r0, #0
   10002:	f000 8166 	beq.w	102d2 <_svfprintf_r+0x17c6>
   10006:	462b      	mov	r3, r5
   10008:	1b1b      	subs	r3, r3, r4
   1000a:	9313      	str	r3, [sp, #76]	; 0x4c
   1000c:	9b07      	ldr	r3, [sp, #28]
   1000e:	2b47      	cmp	r3, #71	; 0x47
   10010:	f000 814a 	beq.w	102a8 <_svfprintf_r+0x179c>
   10014:	9b07      	ldr	r3, [sp, #28]
   10016:	2b46      	cmp	r3, #70	; 0x46
   10018:	f000 8200 	beq.w	1041c <_svfprintf_r+0x1910>
   1001c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1001e:	9311      	str	r3, [sp, #68]	; 0x44
   10020:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10022:	9a07      	ldr	r2, [sp, #28]
   10024:	3b01      	subs	r3, #1
   10026:	2a41      	cmp	r2, #65	; 0x41
   10028:	9323      	str	r3, [sp, #140]	; 0x8c
   1002a:	f000 8223 	beq.w	10474 <_svfprintf_r+0x1968>
   1002e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   10032:	2100      	movs	r1, #0
   10034:	2b00      	cmp	r3, #0
   10036:	bfb8      	it	lt
   10038:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
   1003a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1003e:	bfba      	itte	lt
   10040:	f1c3 0301 	rsblt	r3, r3, #1
   10044:	222d      	movlt	r2, #45	; 0x2d
   10046:	222b      	movge	r2, #43	; 0x2b
   10048:	2b09      	cmp	r3, #9
   1004a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   1004e:	f340 824f 	ble.w	104f0 <_svfprintf_r+0x19e4>
   10052:	f10d 05af 	add.w	r5, sp, #175	; 0xaf
   10056:	4e61      	ldr	r6, [pc, #388]	; (101dc <_svfprintf_r+0x16d0>)
   10058:	462a      	mov	r2, r5
   1005a:	4610      	mov	r0, r2
   1005c:	fb86 2103 	smull	r2, r1, r6, r3
   10060:	17da      	asrs	r2, r3, #31
   10062:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   10066:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1006a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   1006e:	3130      	adds	r1, #48	; 0x30
   10070:	f800 1c01 	strb.w	r1, [r0, #-1]
   10074:	4619      	mov	r1, r3
   10076:	2963      	cmp	r1, #99	; 0x63
   10078:	4613      	mov	r3, r2
   1007a:	f100 32ff 	add.w	r2, r0, #4294967295
   1007e:	dcec      	bgt.n	1005a <_svfprintf_r+0x154e>
   10080:	3330      	adds	r3, #48	; 0x30
   10082:	b2d9      	uxtb	r1, r3
   10084:	1e83      	subs	r3, r0, #2
   10086:	429d      	cmp	r5, r3
   10088:	f802 1c01 	strb.w	r1, [r2, #-1]
   1008c:	f240 82e9 	bls.w	10662 <_svfprintf_r+0x1b56>
   10090:	4613      	mov	r3, r2
   10092:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   10096:	e001      	b.n	1009c <_svfprintf_r+0x1590>
   10098:	f813 1b01 	ldrb.w	r1, [r3], #1
   1009c:	f802 1b01 	strb.w	r1, [r2], #1
   100a0:	429d      	cmp	r5, r3
   100a2:	d1f9      	bne.n	10098 <_svfprintf_r+0x158c>
   100a4:	f10d 03b1 	add.w	r3, sp, #177	; 0xb1
   100a8:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   100ac:	1a1b      	subs	r3, r3, r0
   100ae:	4413      	add	r3, r2
   100b0:	aa26      	add	r2, sp, #152	; 0x98
   100b2:	1a9b      	subs	r3, r3, r2
   100b4:	931b      	str	r3, [sp, #108]	; 0x6c
   100b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   100b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   100ba:	2b01      	cmp	r3, #1
   100bc:	441a      	add	r2, r3
   100be:	920a      	str	r2, [sp, #40]	; 0x28
   100c0:	f340 8249 	ble.w	10556 <_svfprintf_r+0x1a4a>
   100c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   100c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   100c8:	4413      	add	r3, r2
   100ca:	930a      	str	r3, [sp, #40]	; 0x28
   100cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   100ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   100d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   100d4:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
   100d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   100dc:	2300      	movs	r3, #0
   100de:	9312      	str	r3, [sp, #72]	; 0x48
   100e0:	9207      	str	r2, [sp, #28]
   100e2:	9316      	str	r3, [sp, #88]	; 0x58
   100e4:	9311      	str	r3, [sp, #68]	; 0x44
   100e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   100e8:	2b00      	cmp	r3, #0
   100ea:	f040 80eb 	bne.w	102c4 <_svfprintf_r+0x17b8>
   100ee:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   100f2:	9308      	str	r3, [sp, #32]
   100f4:	f7fe beee 	b.w	eed4 <_svfprintf_r+0x3c8>
   100f8:	4620      	mov	r0, r4
   100fa:	970e      	str	r7, [sp, #56]	; 0x38
   100fc:	f7fd ff60 	bl	dfc0 <strlen>
   10100:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10102:	9308      	str	r3, [sp, #32]
   10104:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   10108:	9312      	str	r3, [sp, #72]	; 0x48
   1010a:	9316      	str	r3, [sp, #88]	; 0x58
   1010c:	930d      	str	r3, [sp, #52]	; 0x34
   1010e:	2373      	movs	r3, #115	; 0x73
   10110:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10114:	900a      	str	r0, [sp, #40]	; 0x28
   10116:	9107      	str	r1, [sp, #28]
   10118:	9310      	str	r3, [sp, #64]	; 0x40
   1011a:	f7fe bedb 	b.w	eed4 <_svfprintf_r+0x3c8>
   1011e:	990c      	ldr	r1, [sp, #48]	; 0x30
   10120:	aa2c      	add	r2, sp, #176	; 0xb0
   10122:	4650      	mov	r0, sl
   10124:	f001 fd5c 	bl	11be0 <__ssprint_r>
   10128:	f7fe bdf8 	b.w	ed1c <_svfprintf_r+0x210>
   1012c:	1c59      	adds	r1, r3, #1
   1012e:	4650      	mov	r0, sl
   10130:	f7fc ffa4 	bl	d07c <_malloc_r>
   10134:	4604      	mov	r4, r0
   10136:	2800      	cmp	r0, #0
   10138:	f000 81b0 	beq.w	1049c <_svfprintf_r+0x1990>
   1013c:	900d      	str	r0, [sp, #52]	; 0x34
   1013e:	e6cf      	b.n	fee0 <_svfprintf_r+0x13d4>
   10140:	990c      	ldr	r1, [sp, #48]	; 0x30
   10142:	aa2c      	add	r2, sp, #176	; 0xb0
   10144:	4650      	mov	r0, sl
   10146:	f001 fd4b 	bl	11be0 <__ssprint_r>
   1014a:	2800      	cmp	r0, #0
   1014c:	f47f a949 	bne.w	f3e2 <_svfprintf_r+0x8d6>
   10150:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10152:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10156:	f7ff ba60 	b.w	f61a <_svfprintf_r+0xb0e>
   1015a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1015c:	aa2c      	add	r2, sp, #176	; 0xb0
   1015e:	4650      	mov	r0, sl
   10160:	f001 fd3e 	bl	11be0 <__ssprint_r>
   10164:	2800      	cmp	r0, #0
   10166:	f47f a93c 	bne.w	f3e2 <_svfprintf_r+0x8d6>
   1016a:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   1016e:	9923      	ldr	r1, [sp, #140]	; 0x8c
   10170:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10174:	e63d      	b.n	fdf2 <_svfprintf_r+0x12e6>
   10176:	2306      	movs	r3, #6
   10178:	9308      	str	r3, [sp, #32]
   1017a:	f7ff bba0 	b.w	f8be <_svfprintf_r+0xdb2>
   1017e:	9b08      	ldr	r3, [sp, #32]
   10180:	3301      	adds	r3, #1
   10182:	930a      	str	r3, [sp, #40]	; 0x28
   10184:	2302      	movs	r3, #2
   10186:	e719      	b.n	ffbc <_svfprintf_r+0x14b0>
   10188:	9b08      	ldr	r3, [sp, #32]
   1018a:	930a      	str	r3, [sp, #40]	; 0x28
   1018c:	2303      	movs	r3, #3
   1018e:	e715      	b.n	ffbc <_svfprintf_r+0x14b0>
   10190:	4638      	mov	r0, r7
   10192:	4631      	mov	r1, r6
   10194:	aa23      	add	r2, sp, #140	; 0x8c
   10196:	f000 fc13 	bl	109c0 <frexp>
   1019a:	2200      	movs	r2, #0
   1019c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   101a0:	f003 f9ba 	bl	13518 <__aeabi_dmul>
   101a4:	2200      	movs	r2, #0
   101a6:	2300      	movs	r3, #0
   101a8:	4606      	mov	r6, r0
   101aa:	460f      	mov	r7, r1
   101ac:	f7fc fbdc 	bl	c968 <__aeabi_dcmpeq>
   101b0:	b108      	cbz	r0, 101b6 <_svfprintf_r+0x16aa>
   101b2:	2301      	movs	r3, #1
   101b4:	9323      	str	r3, [sp, #140]	; 0x8c
   101b6:	4b0a      	ldr	r3, [pc, #40]	; (101e0 <_svfprintf_r+0x16d4>)
   101b8:	930a      	str	r3, [sp, #40]	; 0x28
   101ba:	9b08      	ldr	r3, [sp, #32]
   101bc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   101c0:	3b01      	subs	r3, #1
   101c2:	e9cd 8b11 	strd	r8, fp, [sp, #68]	; 0x44
   101c6:	4625      	mov	r5, r4
   101c8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   101cc:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
   101d0:	4698      	mov	r8, r3
   101d2:	941f      	str	r4, [sp, #124]	; 0x7c
   101d4:	e00d      	b.n	101f2 <_svfprintf_r+0x16e6>
   101d6:	bf00      	nop
   101d8:	cccccccd 	.word	0xcccccccd
   101dc:	66666667 	.word	0x66666667
   101e0:	00015740 	.word	0x00015740
   101e4:	2200      	movs	r2, #0
   101e6:	2300      	movs	r3, #0
   101e8:	f108 38ff 	add.w	r8, r8, #4294967295
   101ec:	f7fc fbbc 	bl	c968 <__aeabi_dcmpeq>
   101f0:	b9e8      	cbnz	r0, 1022e <_svfprintf_r+0x1722>
   101f2:	4bae      	ldr	r3, [pc, #696]	; (104ac <_svfprintf_r+0x19a0>)
   101f4:	2200      	movs	r2, #0
   101f6:	4630      	mov	r0, r6
   101f8:	4639      	mov	r1, r7
   101fa:	f003 f98d 	bl	13518 <__aeabi_dmul>
   101fe:	460f      	mov	r7, r1
   10200:	4606      	mov	r6, r0
   10202:	f003 fb9b 	bl	1393c <__aeabi_d2iz>
   10206:	4604      	mov	r4, r0
   10208:	f7fc faee 	bl	c7e8 <__aeabi_i2d>
   1020c:	460b      	mov	r3, r1
   1020e:	4602      	mov	r2, r0
   10210:	4639      	mov	r1, r7
   10212:	4630      	mov	r0, r6
   10214:	f7fc f99a 	bl	c54c <__aeabi_dsub>
   10218:	f81b 3004 	ldrb.w	r3, [fp, r4]
   1021c:	f1b8 3fff 	cmp.w	r8, #4294967295
   10220:	46aa      	mov	sl, r5
   10222:	46c1      	mov	r9, r8
   10224:	f805 3b01 	strb.w	r3, [r5], #1
   10228:	4606      	mov	r6, r0
   1022a:	460f      	mov	r7, r1
   1022c:	d1da      	bne.n	101e4 <_svfprintf_r+0x16d8>
   1022e:	4ba0      	ldr	r3, [pc, #640]	; (104b0 <_svfprintf_r+0x19a4>)
   10230:	2200      	movs	r2, #0
   10232:	4630      	mov	r0, r6
   10234:	4639      	mov	r1, r7
   10236:	e9dd 8b11 	ldrd	r8, fp, [sp, #68]	; 0x44
   1023a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   1023e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   10242:	e9cd a412 	strd	sl, r4, [sp, #72]	; 0x48
   10246:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   1024a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   1024c:	f7fc fbb4 	bl	c9b8 <__aeabi_dcmpgt>
   10250:	2800      	cmp	r0, #0
   10252:	f040 8131 	bne.w	104b8 <_svfprintf_r+0x19ac>
   10256:	4b96      	ldr	r3, [pc, #600]	; (104b0 <_svfprintf_r+0x19a4>)
   10258:	4630      	mov	r0, r6
   1025a:	4639      	mov	r1, r7
   1025c:	2200      	movs	r2, #0
   1025e:	f7fc fb83 	bl	c968 <__aeabi_dcmpeq>
   10262:	b118      	cbz	r0, 1026c <_svfprintf_r+0x1760>
   10264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10266:	07de      	lsls	r6, r3, #31
   10268:	f100 8126 	bmi.w	104b8 <_svfprintf_r+0x19ac>
   1026c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1026e:	2b00      	cmp	r3, #0
   10270:	db07      	blt.n	10282 <_svfprintf_r+0x1776>
   10272:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10274:	3301      	adds	r3, #1
   10276:	442b      	add	r3, r5
   10278:	2230      	movs	r2, #48	; 0x30
   1027a:	f805 2b01 	strb.w	r2, [r5], #1
   1027e:	42ab      	cmp	r3, r5
   10280:	d1fb      	bne.n	1027a <_svfprintf_r+0x176e>
   10282:	1b2b      	subs	r3, r5, r4
   10284:	9313      	str	r3, [sp, #76]	; 0x4c
   10286:	e6c1      	b.n	1000c <_svfprintf_r+0x1500>
   10288:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1028a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1028c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10290:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   10294:	971a      	str	r7, [sp, #104]	; 0x68
   10296:	18e3      	adds	r3, r4, r3
   10298:	429d      	cmp	r5, r3
   1029a:	bf28      	it	cs
   1029c:	461d      	movcs	r5, r3
   1029e:	4691      	mov	r9, r2
   102a0:	460e      	mov	r6, r1
   102a2:	950a      	str	r5, [sp, #40]	; 0x28
   102a4:	f7ff b9c0 	b.w	f628 <_svfprintf_r+0xb1c>
   102a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   102aa:	9311      	str	r3, [sp, #68]	; 0x44
   102ac:	1cdd      	adds	r5, r3, #3
   102ae:	db02      	blt.n	102b6 <_svfprintf_r+0x17aa>
   102b0:	9a08      	ldr	r2, [sp, #32]
   102b2:	4293      	cmp	r3, r2
   102b4:	dd19      	ble.n	102ea <_svfprintf_r+0x17de>
   102b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   102b8:	3b02      	subs	r3, #2
   102ba:	9310      	str	r3, [sp, #64]	; 0x40
   102bc:	f023 0320 	bic.w	r3, r3, #32
   102c0:	9307      	str	r3, [sp, #28]
   102c2:	e6ad      	b.n	10020 <_svfprintf_r+0x1514>
   102c4:	222d      	movs	r2, #45	; 0x2d
   102c6:	2300      	movs	r3, #0
   102c8:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   102cc:	9308      	str	r3, [sp, #32]
   102ce:	f7fe be04 	b.w	eeda <_svfprintf_r+0x3ce>
   102d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   102d4:	42ab      	cmp	r3, r5
   102d6:	f4bf ae97 	bcs.w	10008 <_svfprintf_r+0x14fc>
   102da:	2130      	movs	r1, #48	; 0x30
   102dc:	1c5a      	adds	r2, r3, #1
   102de:	922a      	str	r2, [sp, #168]	; 0xa8
   102e0:	7019      	strb	r1, [r3, #0]
   102e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   102e4:	429d      	cmp	r5, r3
   102e6:	d8f9      	bhi.n	102dc <_svfprintf_r+0x17d0>
   102e8:	e68e      	b.n	10008 <_svfprintf_r+0x14fc>
   102ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   102ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   102ee:	4293      	cmp	r3, r2
   102f0:	f2c0 80c5 	blt.w	1047e <_svfprintf_r+0x1972>
   102f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   102f6:	f013 0f01 	tst.w	r3, #1
   102fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   102fc:	f000 814d 	beq.w	1059a <_svfprintf_r+0x1a8e>
   10300:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10302:	4413      	add	r3, r2
   10304:	930a      	str	r3, [sp, #40]	; 0x28
   10306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10308:	0559      	lsls	r1, r3, #21
   1030a:	d503      	bpl.n	10314 <_svfprintf_r+0x1808>
   1030c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1030e:	2b00      	cmp	r3, #0
   10310:	f300 8156 	bgt.w	105c0 <_svfprintf_r+0x1ab4>
   10314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1031a:	9307      	str	r3, [sp, #28]
   1031c:	2367      	movs	r3, #103	; 0x67
   1031e:	9310      	str	r3, [sp, #64]	; 0x40
   10320:	2300      	movs	r3, #0
   10322:	9312      	str	r3, [sp, #72]	; 0x48
   10324:	9316      	str	r3, [sp, #88]	; 0x58
   10326:	e6de      	b.n	100e6 <_svfprintf_r+0x15da>
   10328:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1032a:	07db      	lsls	r3, r3, #31
   1032c:	f100 809f 	bmi.w	1046e <_svfprintf_r+0x1962>
   10330:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10332:	e669      	b.n	10008 <_svfprintf_r+0x14fc>
   10334:	aa2c      	add	r2, sp, #176	; 0xb0
   10336:	4641      	mov	r1, r8
   10338:	4650      	mov	r0, sl
   1033a:	f001 fc51 	bl	11be0 <__ssprint_r>
   1033e:	2800      	cmp	r0, #0
   10340:	f47f a84f 	bne.w	f3e2 <_svfprintf_r+0x8d6>
   10344:	7838      	ldrb	r0, [r7, #0]
   10346:	992e      	ldr	r1, [sp, #184]	; 0xb8
   10348:	aa2f      	add	r2, sp, #188	; 0xbc
   1034a:	4405      	add	r5, r0
   1034c:	f7ff bbc1 	b.w	fad2 <_svfprintf_r+0xfc6>
   10350:	2378      	movs	r3, #120	; 0x78
   10352:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
   10356:	2330      	movs	r3, #48	; 0x30
   10358:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
   1035c:	f04b 0302 	orr.w	r3, fp, #2
   10360:	930f      	str	r3, [sp, #60]	; 0x3c
   10362:	9b08      	ldr	r3, [sp, #32]
   10364:	2b63      	cmp	r3, #99	; 0x63
   10366:	f300 80ed 	bgt.w	10544 <_svfprintf_r+0x1a38>
   1036a:	2300      	movs	r3, #0
   1036c:	930d      	str	r3, [sp, #52]	; 0x34
   1036e:	ac3f      	add	r4, sp, #252	; 0xfc
   10370:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   10374:	4613      	mov	r3, r2
   10376:	2b00      	cmp	r3, #0
   10378:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
   1037c:	db67      	blt.n	1044e <_svfprintf_r+0x1942>
   1037e:	461e      	mov	r6, r3
   10380:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10382:	f023 0320 	bic.w	r3, r3, #32
   10386:	9307      	str	r3, [sp, #28]
   10388:	2300      	movs	r3, #0
   1038a:	460f      	mov	r7, r1
   1038c:	931e      	str	r3, [sp, #120]	; 0x78
   1038e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10390:	2b61      	cmp	r3, #97	; 0x61
   10392:	f47f aaa4 	bne.w	f8de <_svfprintf_r+0xdd2>
   10396:	4638      	mov	r0, r7
   10398:	4631      	mov	r1, r6
   1039a:	aa23      	add	r2, sp, #140	; 0x8c
   1039c:	f000 fb10 	bl	109c0 <frexp>
   103a0:	2200      	movs	r2, #0
   103a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   103a6:	f003 f8b7 	bl	13518 <__aeabi_dmul>
   103aa:	2200      	movs	r2, #0
   103ac:	2300      	movs	r3, #0
   103ae:	4606      	mov	r6, r0
   103b0:	460f      	mov	r7, r1
   103b2:	f7fc fad9 	bl	c968 <__aeabi_dcmpeq>
   103b6:	b108      	cbz	r0, 103bc <_svfprintf_r+0x18b0>
   103b8:	2301      	movs	r3, #1
   103ba:	9323      	str	r3, [sp, #140]	; 0x8c
   103bc:	4b3d      	ldr	r3, [pc, #244]	; (104b4 <_svfprintf_r+0x19a8>)
   103be:	930a      	str	r3, [sp, #40]	; 0x28
   103c0:	e6fb      	b.n	101ba <_svfprintf_r+0x16ae>
   103c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   103c4:	aa2c      	add	r2, sp, #176	; 0xb0
   103c6:	4650      	mov	r0, sl
   103c8:	f001 fc0a 	bl	11be0 <__ssprint_r>
   103cc:	2800      	cmp	r0, #0
   103ce:	f47f a808 	bne.w	f3e2 <_svfprintf_r+0x8d6>
   103d2:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   103d4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   103d8:	f7ff b918 	b.w	f60c <_svfprintf_r+0xb00>
   103dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   103de:	aa2c      	add	r2, sp, #176	; 0xb0
   103e0:	4650      	mov	r0, sl
   103e2:	f001 fbfd 	bl	11be0 <__ssprint_r>
   103e6:	2800      	cmp	r0, #0
   103e8:	f47e affb 	bne.w	f3e2 <_svfprintf_r+0x8d6>
   103ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   103ee:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   103f0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   103f4:	f7ff b92e 	b.w	f654 <_svfprintf_r+0xb48>
   103f8:	2358      	movs	r3, #88	; 0x58
   103fa:	e7aa      	b.n	10352 <_svfprintf_r+0x1846>
   103fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   103fe:	aa2c      	add	r2, sp, #176	; 0xb0
   10400:	4650      	mov	r0, sl
   10402:	f001 fbed 	bl	11be0 <__ssprint_r>
   10406:	2800      	cmp	r0, #0
   10408:	f47e afeb 	bne.w	f3e2 <_svfprintf_r+0x8d6>
   1040c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   1040e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10410:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10412:	1b1c      	subs	r4, r3, r4
   10414:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10418:	f7ff b934 	b.w	f684 <_svfprintf_r+0xb78>
   1041c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1041e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10420:	9211      	str	r2, [sp, #68]	; 0x44
   10422:	2a00      	cmp	r2, #0
   10424:	f003 0301 	and.w	r3, r3, #1
   10428:	f340 8108 	ble.w	1063c <_svfprintf_r+0x1b30>
   1042c:	9908      	ldr	r1, [sp, #32]
   1042e:	430b      	orrs	r3, r1
   10430:	f040 80fd 	bne.w	1062e <_svfprintf_r+0x1b22>
   10434:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10436:	930a      	str	r3, [sp, #40]	; 0x28
   10438:	2366      	movs	r3, #102	; 0x66
   1043a:	9310      	str	r3, [sp, #64]	; 0x40
   1043c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1043e:	055a      	lsls	r2, r3, #21
   10440:	f100 80c0 	bmi.w	105c4 <_svfprintf_r+0x1ab8>
   10444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10446:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1044a:	9307      	str	r3, [sp, #28]
   1044c:	e768      	b.n	10320 <_svfprintf_r+0x1814>
   1044e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10450:	f023 0320 	bic.w	r3, r3, #32
   10454:	9307      	str	r3, [sp, #28]
   10456:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1045a:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
   1045e:	232d      	movs	r3, #45	; 0x2d
   10460:	4617      	mov	r7, r2
   10462:	931e      	str	r3, [sp, #120]	; 0x78
   10464:	e793      	b.n	1038e <_svfprintf_r+0x1882>
   10466:	2200      	movs	r2, #0
   10468:	9208      	str	r2, [sp, #32]
   1046a:	f7fe bbaa 	b.w	ebc2 <_svfprintf_r+0xb6>
   1046e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10470:	4425      	add	r5, r4
   10472:	e5bf      	b.n	fff4 <_svfprintf_r+0x14e8>
   10474:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10476:	320f      	adds	r2, #15
   10478:	b2d2      	uxtb	r2, r2
   1047a:	2101      	movs	r1, #1
   1047c:	e5da      	b.n	10034 <_svfprintf_r+0x1528>
   1047e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10480:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10482:	189a      	adds	r2, r3, r2
   10484:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10486:	920a      	str	r2, [sp, #40]	; 0x28
   10488:	2b00      	cmp	r3, #0
   1048a:	f340 808f 	ble.w	105ac <_svfprintf_r+0x1aa0>
   1048e:	2367      	movs	r3, #103	; 0x67
   10490:	9310      	str	r3, [sp, #64]	; 0x40
   10492:	e7d3      	b.n	1043c <_svfprintf_r+0x1930>
   10494:	469b      	mov	fp, r3
   10496:	2300      	movs	r3, #0
   10498:	930d      	str	r3, [sp, #52]	; 0x34
   1049a:	e7dc      	b.n	10456 <_svfprintf_r+0x194a>
   1049c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1049e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   104a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   104a6:	8193      	strh	r3, [r2, #12]
   104a8:	f7fe bc3b 	b.w	ed22 <_svfprintf_r+0x216>
   104ac:	40300000 	.word	0x40300000
   104b0:	3fe00000 	.word	0x3fe00000
   104b4:	0001572c 	.word	0x0001572c
   104b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   104ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   104bc:	932a      	str	r3, [sp, #168]	; 0xa8
   104be:	7bd1      	ldrb	r1, [r2, #15]
   104c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   104c4:	428b      	cmp	r3, r1
   104c6:	462a      	mov	r2, r5
   104c8:	d109      	bne.n	104de <_svfprintf_r+0x19d2>
   104ca:	2030      	movs	r0, #48	; 0x30
   104cc:	f802 0c01 	strb.w	r0, [r2, #-1]
   104d0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   104d2:	1e53      	subs	r3, r2, #1
   104d4:	932a      	str	r3, [sp, #168]	; 0xa8
   104d6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   104da:	4299      	cmp	r1, r3
   104dc:	d0f6      	beq.n	104cc <_svfprintf_r+0x19c0>
   104de:	2b39      	cmp	r3, #57	; 0x39
   104e0:	bf0b      	itete	eq
   104e2:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   104e4:	3301      	addne	r3, #1
   104e6:	7a9b      	ldrbeq	r3, [r3, #10]
   104e8:	b2db      	uxtbne	r3, r3
   104ea:	f802 3c01 	strb.w	r3, [r2, #-1]
   104ee:	e6c8      	b.n	10282 <_svfprintf_r+0x1776>
   104f0:	2900      	cmp	r1, #0
   104f2:	f040 808c 	bne.w	1060e <_svfprintf_r+0x1b02>
   104f6:	2230      	movs	r2, #48	; 0x30
   104f8:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   104fc:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   10500:	3330      	adds	r3, #48	; 0x30
   10502:	f802 3b01 	strb.w	r3, [r2], #1
   10506:	ab26      	add	r3, sp, #152	; 0x98
   10508:	1ad3      	subs	r3, r2, r3
   1050a:	931b      	str	r3, [sp, #108]	; 0x6c
   1050c:	e5d3      	b.n	100b6 <_svfprintf_r+0x15aa>
   1050e:	464c      	mov	r4, r9
   10510:	4689      	mov	r9, r1
   10512:	3301      	adds	r3, #1
   10514:	443a      	add	r2, r7
   10516:	2b07      	cmp	r3, #7
   10518:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   1051c:	f8c9 5000 	str.w	r5, [r9]
   10520:	f8c9 7004 	str.w	r7, [r9, #4]
   10524:	f77f abab 	ble.w	fc7e <_svfprintf_r+0x1172>
   10528:	990c      	ldr	r1, [sp, #48]	; 0x30
   1052a:	aa2c      	add	r2, sp, #176	; 0xb0
   1052c:	4650      	mov	r0, sl
   1052e:	f001 fb57 	bl	11be0 <__ssprint_r>
   10532:	2800      	cmp	r0, #0
   10534:	f47e af55 	bne.w	f3e2 <_svfprintf_r+0x8d6>
   10538:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   1053c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10540:	f7ff bb9f 	b.w	fc82 <_svfprintf_r+0x1176>
   10544:	1c59      	adds	r1, r3, #1
   10546:	4650      	mov	r0, sl
   10548:	f7fc fd98 	bl	d07c <_malloc_r>
   1054c:	4604      	mov	r4, r0
   1054e:	2800      	cmp	r0, #0
   10550:	d0a4      	beq.n	1049c <_svfprintf_r+0x1990>
   10552:	900d      	str	r0, [sp, #52]	; 0x34
   10554:	e70c      	b.n	10370 <_svfprintf_r+0x1864>
   10556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10558:	07d8      	lsls	r0, r3, #31
   1055a:	f57f adb7 	bpl.w	100cc <_svfprintf_r+0x15c0>
   1055e:	e5b1      	b.n	100c4 <_svfprintf_r+0x15b8>
   10560:	4638      	mov	r0, r7
   10562:	4631      	mov	r1, r6
   10564:	2200      	movs	r2, #0
   10566:	2300      	movs	r3, #0
   10568:	f7fc f9fe 	bl	c968 <__aeabi_dcmpeq>
   1056c:	2800      	cmp	r0, #0
   1056e:	f47f ad3f 	bne.w	fff0 <_svfprintf_r+0x14e4>
   10572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10574:	f1c3 0301 	rsb	r3, r3, #1
   10578:	9323      	str	r3, [sp, #140]	; 0x8c
   1057a:	e53a      	b.n	fff2 <_svfprintf_r+0x14e6>
   1057c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1057e:	4c4a      	ldr	r4, [pc, #296]	; (106a8 <_svfprintf_r+0x1b9c>)
   10580:	2b00      	cmp	r3, #0
   10582:	bfb4      	ite	lt
   10584:	222d      	movlt	r2, #45	; 0x2d
   10586:	f89d 2087 	ldrbge.w	r2, [sp, #135]	; 0x87
   1058a:	4b48      	ldr	r3, [pc, #288]	; (106ac <_svfprintf_r+0x1ba0>)
   1058c:	bfb8      	it	lt
   1058e:	f88d 2087 	strblt.w	r2, [sp, #135]	; 0x87
   10592:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10596:	f7fe bc90 	b.w	eeba <_svfprintf_r+0x3ae>
   1059a:	930a      	str	r3, [sp, #40]	; 0x28
   1059c:	e6b3      	b.n	10306 <_svfprintf_r+0x17fa>
   1059e:	9b08      	ldr	r3, [sp, #32]
   105a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
   105a4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   105a8:	930a      	str	r3, [sp, #40]	; 0x28
   105aa:	e490      	b.n	fece <_svfprintf_r+0x13c2>
   105ac:	f1c3 0301 	rsb	r3, r3, #1
   105b0:	441a      	add	r2, r3
   105b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   105b6:	9307      	str	r3, [sp, #28]
   105b8:	2367      	movs	r3, #103	; 0x67
   105ba:	920a      	str	r2, [sp, #40]	; 0x28
   105bc:	9310      	str	r3, [sp, #64]	; 0x40
   105be:	e6af      	b.n	10320 <_svfprintf_r+0x1814>
   105c0:	2367      	movs	r3, #103	; 0x67
   105c2:	9310      	str	r3, [sp, #64]	; 0x40
   105c4:	991a      	ldr	r1, [sp, #104]	; 0x68
   105c6:	780b      	ldrb	r3, [r1, #0]
   105c8:	2bff      	cmp	r3, #255	; 0xff
   105ca:	d059      	beq.n	10680 <_svfprintf_r+0x1b74>
   105cc:	2500      	movs	r5, #0
   105ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   105d0:	4628      	mov	r0, r5
   105d2:	e003      	b.n	105dc <_svfprintf_r+0x1ad0>
   105d4:	3001      	adds	r0, #1
   105d6:	3101      	adds	r1, #1
   105d8:	2bff      	cmp	r3, #255	; 0xff
   105da:	d008      	beq.n	105ee <_svfprintf_r+0x1ae2>
   105dc:	4293      	cmp	r3, r2
   105de:	da06      	bge.n	105ee <_svfprintf_r+0x1ae2>
   105e0:	1ad2      	subs	r2, r2, r3
   105e2:	784b      	ldrb	r3, [r1, #1]
   105e4:	2b00      	cmp	r3, #0
   105e6:	d1f5      	bne.n	105d4 <_svfprintf_r+0x1ac8>
   105e8:	780b      	ldrb	r3, [r1, #0]
   105ea:	3501      	adds	r5, #1
   105ec:	e7f4      	b.n	105d8 <_svfprintf_r+0x1acc>
   105ee:	9211      	str	r2, [sp, #68]	; 0x44
   105f0:	911a      	str	r1, [sp, #104]	; 0x68
   105f2:	9016      	str	r0, [sp, #88]	; 0x58
   105f4:	9512      	str	r5, [sp, #72]	; 0x48
   105f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   105f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   105fa:	991d      	ldr	r1, [sp, #116]	; 0x74
   105fc:	4413      	add	r3, r2
   105fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10600:	fb01 2303 	mla	r3, r1, r3, r2
   10604:	930a      	str	r3, [sp, #40]	; 0x28
   10606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1060a:	9307      	str	r3, [sp, #28]
   1060c:	e56b      	b.n	100e6 <_svfprintf_r+0x15da>
   1060e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   10612:	e775      	b.n	10500 <_svfprintf_r+0x19f4>
   10614:	9b08      	ldr	r3, [sp, #32]
   10616:	9307      	str	r3, [sp, #28]
   10618:	930a      	str	r3, [sp, #40]	; 0x28
   1061a:	2373      	movs	r3, #115	; 0x73
   1061c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10620:	970e      	str	r7, [sp, #56]	; 0x38
   10622:	9008      	str	r0, [sp, #32]
   10624:	9012      	str	r0, [sp, #72]	; 0x48
   10626:	9016      	str	r0, [sp, #88]	; 0x58
   10628:	9310      	str	r3, [sp, #64]	; 0x40
   1062a:	f7fe bc53 	b.w	eed4 <_svfprintf_r+0x3c8>
   1062e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10630:	18d5      	adds	r5, r2, r3
   10632:	4429      	add	r1, r5
   10634:	2366      	movs	r3, #102	; 0x66
   10636:	910a      	str	r1, [sp, #40]	; 0x28
   10638:	9310      	str	r3, [sp, #64]	; 0x40
   1063a:	e6ff      	b.n	1043c <_svfprintf_r+0x1930>
   1063c:	9a08      	ldr	r2, [sp, #32]
   1063e:	4313      	orrs	r3, r2
   10640:	d105      	bne.n	1064e <_svfprintf_r+0x1b42>
   10642:	2301      	movs	r3, #1
   10644:	2266      	movs	r2, #102	; 0x66
   10646:	9307      	str	r3, [sp, #28]
   10648:	9210      	str	r2, [sp, #64]	; 0x40
   1064a:	930a      	str	r3, [sp, #40]	; 0x28
   1064c:	e668      	b.n	10320 <_svfprintf_r+0x1814>
   1064e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10650:	1c5d      	adds	r5, r3, #1
   10652:	442a      	add	r2, r5
   10654:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10658:	9307      	str	r3, [sp, #28]
   1065a:	2366      	movs	r3, #102	; 0x66
   1065c:	920a      	str	r2, [sp, #40]	; 0x28
   1065e:	9310      	str	r3, [sp, #64]	; 0x40
   10660:	e65e      	b.n	10320 <_svfprintf_r+0x1814>
   10662:	2302      	movs	r3, #2
   10664:	931b      	str	r3, [sp, #108]	; 0x6c
   10666:	e526      	b.n	100b6 <_svfprintf_r+0x15aa>
   10668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1066a:	f898 3001 	ldrb.w	r3, [r8, #1]
   1066e:	4688      	mov	r8, r1
   10670:	f852 1b04 	ldr.w	r1, [r2], #4
   10674:	920e      	str	r2, [sp, #56]	; 0x38
   10676:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1067a:	9108      	str	r1, [sp, #32]
   1067c:	f7fe ba9f 	b.w	ebbe <_svfprintf_r+0xb2>
   10680:	2300      	movs	r3, #0
   10682:	9312      	str	r3, [sp, #72]	; 0x48
   10684:	9316      	str	r3, [sp, #88]	; 0x58
   10686:	e7b6      	b.n	105f6 <_svfprintf_r+0x1aea>
   10688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1068a:	8993      	ldrh	r3, [r2, #12]
   1068c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10690:	8193      	strh	r3, [r2, #12]
   10692:	f7fe bea6 	b.w	f3e2 <_svfprintf_r+0x8d6>
   10696:	230c      	movs	r3, #12
   10698:	f8ca 3000 	str.w	r3, [sl]
   1069c:	f04f 33ff 	mov.w	r3, #4294967295
   106a0:	9309      	str	r3, [sp, #36]	; 0x24
   106a2:	f7fe bb45 	b.w	ed30 <_svfprintf_r+0x224>
   106a6:	bf00      	nop
   106a8:	00015728 	.word	0x00015728
   106ac:	00015298 	.word	0x00015298

000106b0 <_fclose_r>:
   106b0:	b570      	push	{r4, r5, r6, lr}
   106b2:	2900      	cmp	r1, #0
   106b4:	d04b      	beq.n	1074e <_fclose_r+0x9e>
   106b6:	4606      	mov	r6, r0
   106b8:	460c      	mov	r4, r1
   106ba:	b110      	cbz	r0, 106c2 <_fclose_r+0x12>
   106bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   106be:	2b00      	cmp	r3, #0
   106c0:	d048      	beq.n	10754 <_fclose_r+0xa4>
   106c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   106c4:	07d8      	lsls	r0, r3, #31
   106c6:	d534      	bpl.n	10732 <_fclose_r+0x82>
   106c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   106cc:	2b00      	cmp	r3, #0
   106ce:	d03e      	beq.n	1074e <_fclose_r+0x9e>
   106d0:	4621      	mov	r1, r4
   106d2:	4630      	mov	r0, r6
   106d4:	f000 f850 	bl	10778 <__sflush_r>
   106d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   106da:	4605      	mov	r5, r0
   106dc:	b133      	cbz	r3, 106ec <_fclose_r+0x3c>
   106de:	69e1      	ldr	r1, [r4, #28]
   106e0:	4630      	mov	r0, r6
   106e2:	4798      	blx	r3
   106e4:	2800      	cmp	r0, #0
   106e6:	bfb8      	it	lt
   106e8:	f04f 35ff 	movlt.w	r5, #4294967295
   106ec:	89a3      	ldrh	r3, [r4, #12]
   106ee:	061a      	lsls	r2, r3, #24
   106f0:	d43c      	bmi.n	1076c <_fclose_r+0xbc>
   106f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   106f4:	b141      	cbz	r1, 10708 <_fclose_r+0x58>
   106f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   106fa:	4299      	cmp	r1, r3
   106fc:	d002      	beq.n	10704 <_fclose_r+0x54>
   106fe:	4630      	mov	r0, r6
   10700:	f7fd fd2c 	bl	e15c <_free_r>
   10704:	2300      	movs	r3, #0
   10706:	6323      	str	r3, [r4, #48]	; 0x30
   10708:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1070a:	b121      	cbz	r1, 10716 <_fclose_r+0x66>
   1070c:	4630      	mov	r0, r6
   1070e:	f7fd fd25 	bl	e15c <_free_r>
   10712:	2300      	movs	r3, #0
   10714:	6463      	str	r3, [r4, #68]	; 0x44
   10716:	f7fd fa0d 	bl	db34 <__sfp_lock_acquire>
   1071a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1071c:	2200      	movs	r2, #0
   1071e:	07db      	lsls	r3, r3, #31
   10720:	81a2      	strh	r2, [r4, #12]
   10722:	d51f      	bpl.n	10764 <_fclose_r+0xb4>
   10724:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10726:	f7fd fc33 	bl	df90 <__retarget_lock_close_recursive>
   1072a:	f7fd fa09 	bl	db40 <__sfp_lock_release>
   1072e:	4628      	mov	r0, r5
   10730:	bd70      	pop	{r4, r5, r6, pc}
   10732:	89a3      	ldrh	r3, [r4, #12]
   10734:	0599      	lsls	r1, r3, #22
   10736:	d4cb      	bmi.n	106d0 <_fclose_r+0x20>
   10738:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1073a:	f7fd fc2b 	bl	df94 <__retarget_lock_acquire_recursive>
   1073e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10742:	2b00      	cmp	r3, #0
   10744:	d1c4      	bne.n	106d0 <_fclose_r+0x20>
   10746:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10748:	f015 0501 	ands.w	r5, r5, #1
   1074c:	d005      	beq.n	1075a <_fclose_r+0xaa>
   1074e:	2500      	movs	r5, #0
   10750:	4628      	mov	r0, r5
   10752:	bd70      	pop	{r4, r5, r6, pc}
   10754:	f7fd f9d0 	bl	daf8 <__sinit>
   10758:	e7b3      	b.n	106c2 <_fclose_r+0x12>
   1075a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1075c:	f7fd fc1c 	bl	df98 <__retarget_lock_release_recursive>
   10760:	4628      	mov	r0, r5
   10762:	bd70      	pop	{r4, r5, r6, pc}
   10764:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10766:	f7fd fc17 	bl	df98 <__retarget_lock_release_recursive>
   1076a:	e7db      	b.n	10724 <_fclose_r+0x74>
   1076c:	6921      	ldr	r1, [r4, #16]
   1076e:	4630      	mov	r0, r6
   10770:	f7fd fcf4 	bl	e15c <_free_r>
   10774:	e7bd      	b.n	106f2 <_fclose_r+0x42>
   10776:	bf00      	nop

00010778 <__sflush_r>:
   10778:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1077e:	460c      	mov	r4, r1
   10780:	0711      	lsls	r1, r2, #28
   10782:	4607      	mov	r7, r0
   10784:	d442      	bmi.n	1080c <__sflush_r+0x94>
   10786:	6863      	ldr	r3, [r4, #4]
   10788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1078c:	2b00      	cmp	r3, #0
   1078e:	81a2      	strh	r2, [r4, #12]
   10790:	dd59      	ble.n	10846 <__sflush_r+0xce>
   10792:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10794:	2d00      	cmp	r5, #0
   10796:	d054      	beq.n	10842 <__sflush_r+0xca>
   10798:	2300      	movs	r3, #0
   1079a:	683e      	ldr	r6, [r7, #0]
   1079c:	603b      	str	r3, [r7, #0]
   1079e:	b293      	uxth	r3, r2
   107a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   107a4:	d153      	bne.n	1084e <__sflush_r+0xd6>
   107a6:	69e1      	ldr	r1, [r4, #28]
   107a8:	2301      	movs	r3, #1
   107aa:	4638      	mov	r0, r7
   107ac:	47a8      	blx	r5
   107ae:	1c42      	adds	r2, r0, #1
   107b0:	d063      	beq.n	1087a <__sflush_r+0x102>
   107b2:	89a3      	ldrh	r3, [r4, #12]
   107b4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   107b6:	075b      	lsls	r3, r3, #29
   107b8:	d505      	bpl.n	107c6 <__sflush_r+0x4e>
   107ba:	6863      	ldr	r3, [r4, #4]
   107bc:	1ac0      	subs	r0, r0, r3
   107be:	6b23      	ldr	r3, [r4, #48]	; 0x30
   107c0:	b10b      	cbz	r3, 107c6 <__sflush_r+0x4e>
   107c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   107c4:	1ac0      	subs	r0, r0, r3
   107c6:	69e1      	ldr	r1, [r4, #28]
   107c8:	4602      	mov	r2, r0
   107ca:	2300      	movs	r3, #0
   107cc:	4638      	mov	r0, r7
   107ce:	47a8      	blx	r5
   107d0:	1c41      	adds	r1, r0, #1
   107d2:	d13e      	bne.n	10852 <__sflush_r+0xda>
   107d4:	683b      	ldr	r3, [r7, #0]
   107d6:	2b00      	cmp	r3, #0
   107d8:	d03b      	beq.n	10852 <__sflush_r+0xda>
   107da:	2b1d      	cmp	r3, #29
   107dc:	d001      	beq.n	107e2 <__sflush_r+0x6a>
   107de:	2b16      	cmp	r3, #22
   107e0:	d152      	bne.n	10888 <__sflush_r+0x110>
   107e2:	89a3      	ldrh	r3, [r4, #12]
   107e4:	6922      	ldr	r2, [r4, #16]
   107e6:	6022      	str	r2, [r4, #0]
   107e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   107ec:	2100      	movs	r1, #0
   107ee:	6061      	str	r1, [r4, #4]
   107f0:	81a3      	strh	r3, [r4, #12]
   107f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   107f4:	603e      	str	r6, [r7, #0]
   107f6:	b321      	cbz	r1, 10842 <__sflush_r+0xca>
   107f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   107fc:	4299      	cmp	r1, r3
   107fe:	d002      	beq.n	10806 <__sflush_r+0x8e>
   10800:	4638      	mov	r0, r7
   10802:	f7fd fcab 	bl	e15c <_free_r>
   10806:	2000      	movs	r0, #0
   10808:	6320      	str	r0, [r4, #48]	; 0x30
   1080a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1080c:	6926      	ldr	r6, [r4, #16]
   1080e:	b1c6      	cbz	r6, 10842 <__sflush_r+0xca>
   10810:	b293      	uxth	r3, r2
   10812:	6825      	ldr	r5, [r4, #0]
   10814:	6026      	str	r6, [r4, #0]
   10816:	079a      	lsls	r2, r3, #30
   10818:	bf0c      	ite	eq
   1081a:	6963      	ldreq	r3, [r4, #20]
   1081c:	2300      	movne	r3, #0
   1081e:	1bad      	subs	r5, r5, r6
   10820:	60a3      	str	r3, [r4, #8]
   10822:	e00c      	b.n	1083e <__sflush_r+0xc6>
   10824:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   10828:	69e1      	ldr	r1, [r4, #28]
   1082a:	462b      	mov	r3, r5
   1082c:	4632      	mov	r2, r6
   1082e:	4638      	mov	r0, r7
   10830:	47e0      	blx	ip
   10832:	f1b0 0c00 	subs.w	ip, r0, #0
   10836:	eba5 050c 	sub.w	r5, r5, ip
   1083a:	4466      	add	r6, ip
   1083c:	dd16      	ble.n	1086c <__sflush_r+0xf4>
   1083e:	2d00      	cmp	r5, #0
   10840:	dcf0      	bgt.n	10824 <__sflush_r+0xac>
   10842:	2000      	movs	r0, #0
   10844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10846:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10848:	2b00      	cmp	r3, #0
   1084a:	dca2      	bgt.n	10792 <__sflush_r+0x1a>
   1084c:	e7f9      	b.n	10842 <__sflush_r+0xca>
   1084e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10850:	e7b1      	b.n	107b6 <__sflush_r+0x3e>
   10852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10856:	6922      	ldr	r2, [r4, #16]
   10858:	6022      	str	r2, [r4, #0]
   1085a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1085e:	81a3      	strh	r3, [r4, #12]
   10860:	2200      	movs	r2, #0
   10862:	04db      	lsls	r3, r3, #19
   10864:	6062      	str	r2, [r4, #4]
   10866:	d5c4      	bpl.n	107f2 <__sflush_r+0x7a>
   10868:	6520      	str	r0, [r4, #80]	; 0x50
   1086a:	e7c2      	b.n	107f2 <__sflush_r+0x7a>
   1086c:	89a3      	ldrh	r3, [r4, #12]
   1086e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10872:	f04f 30ff 	mov.w	r0, #4294967295
   10876:	81a3      	strh	r3, [r4, #12]
   10878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1087a:	683b      	ldr	r3, [r7, #0]
   1087c:	2b00      	cmp	r3, #0
   1087e:	d098      	beq.n	107b2 <__sflush_r+0x3a>
   10880:	2b1d      	cmp	r3, #29
   10882:	d006      	beq.n	10892 <__sflush_r+0x11a>
   10884:	2b16      	cmp	r3, #22
   10886:	d004      	beq.n	10892 <__sflush_r+0x11a>
   10888:	89a3      	ldrh	r3, [r4, #12]
   1088a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1088e:	81a3      	strh	r3, [r4, #12]
   10890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10892:	603e      	str	r6, [r7, #0]
   10894:	e7d5      	b.n	10842 <__sflush_r+0xca>
   10896:	bf00      	nop

00010898 <_fflush_r>:
   10898:	b538      	push	{r3, r4, r5, lr}
   1089a:	460c      	mov	r4, r1
   1089c:	4605      	mov	r5, r0
   1089e:	b108      	cbz	r0, 108a4 <_fflush_r+0xc>
   108a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   108a2:	b303      	cbz	r3, 108e6 <_fflush_r+0x4e>
   108a4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   108a8:	b188      	cbz	r0, 108ce <_fflush_r+0x36>
   108aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   108ac:	07db      	lsls	r3, r3, #31
   108ae:	d401      	bmi.n	108b4 <_fflush_r+0x1c>
   108b0:	0581      	lsls	r1, r0, #22
   108b2:	d50f      	bpl.n	108d4 <_fflush_r+0x3c>
   108b4:	4628      	mov	r0, r5
   108b6:	4621      	mov	r1, r4
   108b8:	f7ff ff5e 	bl	10778 <__sflush_r>
   108bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   108be:	07da      	lsls	r2, r3, #31
   108c0:	4605      	mov	r5, r0
   108c2:	d402      	bmi.n	108ca <_fflush_r+0x32>
   108c4:	89a3      	ldrh	r3, [r4, #12]
   108c6:	059b      	lsls	r3, r3, #22
   108c8:	d508      	bpl.n	108dc <_fflush_r+0x44>
   108ca:	4628      	mov	r0, r5
   108cc:	bd38      	pop	{r3, r4, r5, pc}
   108ce:	4605      	mov	r5, r0
   108d0:	4628      	mov	r0, r5
   108d2:	bd38      	pop	{r3, r4, r5, pc}
   108d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   108d6:	f7fd fb5d 	bl	df94 <__retarget_lock_acquire_recursive>
   108da:	e7eb      	b.n	108b4 <_fflush_r+0x1c>
   108dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   108de:	f7fd fb5b 	bl	df98 <__retarget_lock_release_recursive>
   108e2:	4628      	mov	r0, r5
   108e4:	bd38      	pop	{r3, r4, r5, pc}
   108e6:	f7fd f907 	bl	daf8 <__sinit>
   108ea:	e7db      	b.n	108a4 <_fflush_r+0xc>

000108ec <_localeconv_r>:
   108ec:	4800      	ldr	r0, [pc, #0]	; (108f0 <_localeconv_r+0x4>)
   108ee:	4770      	bx	lr
   108f0:	1fff8fc4 	.word	0x1fff8fc4

000108f4 <__libc_fini_array>:
   108f4:	b538      	push	{r3, r4, r5, lr}
   108f6:	4d07      	ldr	r5, [pc, #28]	; (10914 <__libc_fini_array+0x20>)
   108f8:	4c07      	ldr	r4, [pc, #28]	; (10918 <__libc_fini_array+0x24>)
   108fa:	1b2c      	subs	r4, r5, r4
   108fc:	10a4      	asrs	r4, r4, #2
   108fe:	d005      	beq.n	1090c <__libc_fini_array+0x18>
   10900:	3c01      	subs	r4, #1
   10902:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   10906:	4798      	blx	r3
   10908:	2c00      	cmp	r4, #0
   1090a:	d1f9      	bne.n	10900 <__libc_fini_array+0xc>
   1090c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10910:	f004 bfaa 	b.w	15868 <__init_array_end>
	...
   1091c:	ffffffff 	.word	0xffffffff

00010920 <memchr>:
   10920:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   10924:	2a10      	cmp	r2, #16
   10926:	db2b      	blt.n	10980 <memchr+0x60>
   10928:	f010 0f07 	tst.w	r0, #7
   1092c:	d008      	beq.n	10940 <memchr+0x20>
   1092e:	f810 3b01 	ldrb.w	r3, [r0], #1
   10932:	3a01      	subs	r2, #1
   10934:	428b      	cmp	r3, r1
   10936:	d02d      	beq.n	10994 <memchr+0x74>
   10938:	f010 0f07 	tst.w	r0, #7
   1093c:	b342      	cbz	r2, 10990 <memchr+0x70>
   1093e:	d1f6      	bne.n	1092e <memchr+0xe>
   10940:	b4f0      	push	{r4, r5, r6, r7}
   10942:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10946:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1094a:	f022 0407 	bic.w	r4, r2, #7
   1094e:	f07f 0700 	mvns.w	r7, #0
   10952:	2300      	movs	r3, #0
   10954:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   10958:	3c08      	subs	r4, #8
   1095a:	ea85 0501 	eor.w	r5, r5, r1
   1095e:	ea86 0601 	eor.w	r6, r6, r1
   10962:	fa85 f547 	uadd8	r5, r5, r7
   10966:	faa3 f587 	sel	r5, r3, r7
   1096a:	fa86 f647 	uadd8	r6, r6, r7
   1096e:	faa5 f687 	sel	r6, r5, r7
   10972:	b98e      	cbnz	r6, 10998 <memchr+0x78>
   10974:	d1ee      	bne.n	10954 <memchr+0x34>
   10976:	bcf0      	pop	{r4, r5, r6, r7}
   10978:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1097c:	f002 0207 	and.w	r2, r2, #7
   10980:	b132      	cbz	r2, 10990 <memchr+0x70>
   10982:	f810 3b01 	ldrb.w	r3, [r0], #1
   10986:	3a01      	subs	r2, #1
   10988:	ea83 0301 	eor.w	r3, r3, r1
   1098c:	b113      	cbz	r3, 10994 <memchr+0x74>
   1098e:	d1f8      	bne.n	10982 <memchr+0x62>
   10990:	2000      	movs	r0, #0
   10992:	4770      	bx	lr
   10994:	3801      	subs	r0, #1
   10996:	4770      	bx	lr
   10998:	2d00      	cmp	r5, #0
   1099a:	bf06      	itte	eq
   1099c:	4635      	moveq	r5, r6
   1099e:	3803      	subeq	r0, #3
   109a0:	3807      	subne	r0, #7
   109a2:	f015 0f01 	tst.w	r5, #1
   109a6:	d107      	bne.n	109b8 <memchr+0x98>
   109a8:	3001      	adds	r0, #1
   109aa:	f415 7f80 	tst.w	r5, #256	; 0x100
   109ae:	bf02      	ittt	eq
   109b0:	3001      	addeq	r0, #1
   109b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   109b6:	3001      	addeq	r0, #1
   109b8:	bcf0      	pop	{r4, r5, r6, r7}
   109ba:	3801      	subs	r0, #1
   109bc:	4770      	bx	lr
   109be:	bf00      	nop

000109c0 <frexp>:
   109c0:	f8df c060 	ldr.w	ip, [pc, #96]	; 10a24 <frexp+0x64>
   109c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   109ca:	2700      	movs	r7, #0
   109cc:	4563      	cmp	r3, ip
   109ce:	4604      	mov	r4, r0
   109d0:	460d      	mov	r5, r1
   109d2:	4616      	mov	r6, r2
   109d4:	6017      	str	r7, [r2, #0]
   109d6:	dc22      	bgt.n	10a1e <frexp+0x5e>
   109d8:	4684      	mov	ip, r0
   109da:	ea53 0c0c 	orrs.w	ip, r3, ip
   109de:	d01e      	beq.n	10a1e <frexp+0x5e>
   109e0:	f8df c044 	ldr.w	ip, [pc, #68]	; 10a28 <frexp+0x68>
   109e4:	ea01 0c0c 	and.w	ip, r1, ip
   109e8:	460a      	mov	r2, r1
   109ea:	f1bc 0f00 	cmp.w	ip, #0
   109ee:	d109      	bne.n	10a04 <frexp+0x44>
   109f0:	4b0e      	ldr	r3, [pc, #56]	; (10a2c <frexp+0x6c>)
   109f2:	2200      	movs	r2, #0
   109f4:	f002 fd90 	bl	13518 <__aeabi_dmul>
   109f8:	f06f 0735 	mvn.w	r7, #53	; 0x35
   109fc:	4604      	mov	r4, r0
   109fe:	460a      	mov	r2, r1
   10a00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10a04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   10a08:	151b      	asrs	r3, r3, #20
   10a0a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   10a0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10a12:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10a16:	443b      	add	r3, r7
   10a18:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   10a1c:	6033      	str	r3, [r6, #0]
   10a1e:	4620      	mov	r0, r4
   10a20:	4629      	mov	r1, r5
   10a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a24:	7fefffff 	.word	0x7fefffff
   10a28:	7ff00000 	.word	0x7ff00000
   10a2c:	43500000 	.word	0x43500000

00010a30 <__register_exitproc>:
   10a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a34:	f8df a074 	ldr.w	sl, [pc, #116]	; 10aac <__register_exitproc+0x7c>
   10a38:	4606      	mov	r6, r0
   10a3a:	f8da 0000 	ldr.w	r0, [sl]
   10a3e:	4698      	mov	r8, r3
   10a40:	460f      	mov	r7, r1
   10a42:	4691      	mov	r9, r2
   10a44:	f7fd faa6 	bl	df94 <__retarget_lock_acquire_recursive>
   10a48:	4b19      	ldr	r3, [pc, #100]	; (10ab0 <__register_exitproc+0x80>)
   10a4a:	681c      	ldr	r4, [r3, #0]
   10a4c:	b324      	cbz	r4, 10a98 <__register_exitproc+0x68>
   10a4e:	6865      	ldr	r5, [r4, #4]
   10a50:	2d1f      	cmp	r5, #31
   10a52:	dc24      	bgt.n	10a9e <__register_exitproc+0x6e>
   10a54:	b95e      	cbnz	r6, 10a6e <__register_exitproc+0x3e>
   10a56:	1c6b      	adds	r3, r5, #1
   10a58:	3502      	adds	r5, #2
   10a5a:	f8da 0000 	ldr.w	r0, [sl]
   10a5e:	6063      	str	r3, [r4, #4]
   10a60:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   10a64:	f7fd fa98 	bl	df98 <__retarget_lock_release_recursive>
   10a68:	2000      	movs	r0, #0
   10a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10a6e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   10a72:	2301      	movs	r3, #1
   10a74:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10a78:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   10a7c:	40ab      	lsls	r3, r5
   10a7e:	431a      	orrs	r2, r3
   10a80:	2e02      	cmp	r6, #2
   10a82:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   10a86:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10a8a:	d1e4      	bne.n	10a56 <__register_exitproc+0x26>
   10a8c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   10a90:	431a      	orrs	r2, r3
   10a92:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   10a96:	e7de      	b.n	10a56 <__register_exitproc+0x26>
   10a98:	4c06      	ldr	r4, [pc, #24]	; (10ab4 <__register_exitproc+0x84>)
   10a9a:	601c      	str	r4, [r3, #0]
   10a9c:	e7d7      	b.n	10a4e <__register_exitproc+0x1e>
   10a9e:	f8da 0000 	ldr.w	r0, [sl]
   10aa2:	f7fd fa79 	bl	df98 <__retarget_lock_release_recursive>
   10aa6:	f04f 30ff 	mov.w	r0, #4294967295
   10aaa:	e7de      	b.n	10a6a <__register_exitproc+0x3a>
   10aac:	1fff9164 	.word	0x1fff9164
   10ab0:	1fffe07c 	.word	0x1fffe07c
   10ab4:	1fffe080 	.word	0x1fffe080

00010ab8 <__assert_func>:
   10ab8:	b500      	push	{lr}
   10aba:	4c0b      	ldr	r4, [pc, #44]	; (10ae8 <__assert_func+0x30>)
   10abc:	6825      	ldr	r5, [r4, #0]
   10abe:	4614      	mov	r4, r2
   10ac0:	68ee      	ldr	r6, [r5, #12]
   10ac2:	461a      	mov	r2, r3
   10ac4:	b085      	sub	sp, #20
   10ac6:	4603      	mov	r3, r0
   10ac8:	460d      	mov	r5, r1
   10aca:	b14c      	cbz	r4, 10ae0 <__assert_func+0x28>
   10acc:	4907      	ldr	r1, [pc, #28]	; (10aec <__assert_func+0x34>)
   10ace:	9500      	str	r5, [sp, #0]
   10ad0:	e9cd 1401 	strd	r1, r4, [sp, #4]
   10ad4:	4630      	mov	r0, r6
   10ad6:	4906      	ldr	r1, [pc, #24]	; (10af0 <__assert_func+0x38>)
   10ad8:	f001 f86e 	bl	11bb8 <fiprintf>
   10adc:	f7f9 f8a0 	bl	9c20 <abort>
   10ae0:	4904      	ldr	r1, [pc, #16]	; (10af4 <__assert_func+0x3c>)
   10ae2:	460c      	mov	r4, r1
   10ae4:	e7f3      	b.n	10ace <__assert_func+0x16>
   10ae6:	bf00      	nop
   10ae8:	1fff9160 	.word	0x1fff9160
   10aec:	0001577c 	.word	0x0001577c
   10af0:	0001578c 	.word	0x0001578c
   10af4:	00014068 	.word	0x00014068

00010af8 <_calloc_r>:
   10af8:	b538      	push	{r3, r4, r5, lr}
   10afa:	fba1 1402 	umull	r1, r4, r1, r2
   10afe:	bb8c      	cbnz	r4, 10b64 <_calloc_r+0x6c>
   10b00:	f7fc fabc 	bl	d07c <_malloc_r>
   10b04:	4605      	mov	r5, r0
   10b06:	b1e0      	cbz	r0, 10b42 <_calloc_r+0x4a>
   10b08:	f850 2c04 	ldr.w	r2, [r0, #-4]
   10b0c:	f022 0203 	bic.w	r2, r2, #3
   10b10:	3a04      	subs	r2, #4
   10b12:	2a24      	cmp	r2, #36	; 0x24
   10b14:	d817      	bhi.n	10b46 <_calloc_r+0x4e>
   10b16:	2a13      	cmp	r2, #19
   10b18:	d91a      	bls.n	10b50 <_calloc_r+0x58>
   10b1a:	2a1b      	cmp	r2, #27
   10b1c:	e9c0 4400 	strd	r4, r4, [r0]
   10b20:	d91d      	bls.n	10b5e <_calloc_r+0x66>
   10b22:	2a24      	cmp	r2, #36	; 0x24
   10b24:	bf14      	ite	ne
   10b26:	f100 0210 	addne.w	r2, r0, #16
   10b2a:	f100 0218 	addeq.w	r2, r0, #24
   10b2e:	f04f 0300 	mov.w	r3, #0
   10b32:	e9c0 4402 	strd	r4, r4, [r0, #8]
   10b36:	bf04      	itt	eq
   10b38:	6104      	streq	r4, [r0, #16]
   10b3a:	6144      	streq	r4, [r0, #20]
   10b3c:	e9c2 3300 	strd	r3, r3, [r2]
   10b40:	6093      	str	r3, [r2, #8]
   10b42:	4628      	mov	r0, r5
   10b44:	bd38      	pop	{r3, r4, r5, pc}
   10b46:	4621      	mov	r1, r4
   10b48:	f7fd f906 	bl	dd58 <memset>
   10b4c:	4628      	mov	r0, r5
   10b4e:	bd38      	pop	{r3, r4, r5, pc}
   10b50:	4602      	mov	r2, r0
   10b52:	2300      	movs	r3, #0
   10b54:	e9c2 3300 	strd	r3, r3, [r2]
   10b58:	6093      	str	r3, [r2, #8]
   10b5a:	4628      	mov	r0, r5
   10b5c:	bd38      	pop	{r3, r4, r5, pc}
   10b5e:	f100 0208 	add.w	r2, r0, #8
   10b62:	e7f6      	b.n	10b52 <_calloc_r+0x5a>
   10b64:	f7fd f9e8 	bl	df38 <__errno>
   10b68:	230c      	movs	r3, #12
   10b6a:	2500      	movs	r5, #0
   10b6c:	6003      	str	r3, [r0, #0]
   10b6e:	e7e8      	b.n	10b42 <_calloc_r+0x4a>

00010b70 <quorem>:
   10b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b74:	6903      	ldr	r3, [r0, #16]
   10b76:	690c      	ldr	r4, [r1, #16]
   10b78:	42a3      	cmp	r3, r4
   10b7a:	b083      	sub	sp, #12
   10b7c:	f2c0 8088 	blt.w	10c90 <quorem+0x120>
   10b80:	3c01      	subs	r4, #1
   10b82:	f101 0514 	add.w	r5, r1, #20
   10b86:	00a3      	lsls	r3, r4, #2
   10b88:	f100 0814 	add.w	r8, r0, #20
   10b8c:	9300      	str	r3, [sp, #0]
   10b8e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   10b92:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10b96:	3301      	adds	r3, #1
   10b98:	468a      	mov	sl, r1
   10b9a:	429a      	cmp	r2, r3
   10b9c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   10ba0:	4681      	mov	r9, r0
   10ba2:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   10ba6:	9101      	str	r1, [sp, #4]
   10ba8:	fbb2 f6f3 	udiv	r6, r2, r3
   10bac:	d33a      	bcc.n	10c24 <quorem+0xb4>
   10bae:	f04f 0c00 	mov.w	ip, #0
   10bb2:	46ae      	mov	lr, r5
   10bb4:	4640      	mov	r0, r8
   10bb6:	4662      	mov	r2, ip
   10bb8:	4663      	mov	r3, ip
   10bba:	f85e bb04 	ldr.w	fp, [lr], #4
   10bbe:	6801      	ldr	r1, [r0, #0]
   10bc0:	fa1f fc8b 	uxth.w	ip, fp
   10bc4:	fb06 330c 	mla	r3, r6, ip, r3
   10bc8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   10bcc:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   10bd0:	fb06 cc0b 	mla	ip, r6, fp, ip
   10bd4:	b29b      	uxth	r3, r3
   10bd6:	1ad3      	subs	r3, r2, r3
   10bd8:	fa1f f28c 	uxth.w	r2, ip
   10bdc:	fa13 f381 	uxtah	r3, r3, r1
   10be0:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
   10be4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10be8:	b29b      	uxth	r3, r3
   10bea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10bee:	4577      	cmp	r7, lr
   10bf0:	f840 3b04 	str.w	r3, [r0], #4
   10bf4:	ea4f 4222 	mov.w	r2, r2, asr #16
   10bf8:	ea4f 431c 	mov.w	r3, ip, lsr #16
   10bfc:	d2dd      	bcs.n	10bba <quorem+0x4a>
   10bfe:	9b00      	ldr	r3, [sp, #0]
   10c00:	f858 3003 	ldr.w	r3, [r8, r3]
   10c04:	b973      	cbnz	r3, 10c24 <quorem+0xb4>
   10c06:	9b01      	ldr	r3, [sp, #4]
   10c08:	3b04      	subs	r3, #4
   10c0a:	4598      	cmp	r8, r3
   10c0c:	d304      	bcc.n	10c18 <quorem+0xa8>
   10c0e:	e007      	b.n	10c20 <quorem+0xb0>
   10c10:	4598      	cmp	r8, r3
   10c12:	f104 34ff 	add.w	r4, r4, #4294967295
   10c16:	d203      	bcs.n	10c20 <quorem+0xb0>
   10c18:	f853 2904 	ldr.w	r2, [r3], #-4
   10c1c:	2a00      	cmp	r2, #0
   10c1e:	d0f7      	beq.n	10c10 <quorem+0xa0>
   10c20:	f8c9 4010 	str.w	r4, [r9, #16]
   10c24:	4651      	mov	r1, sl
   10c26:	4648      	mov	r0, r9
   10c28:	f7fd fe38 	bl	e89c <__mcmp>
   10c2c:	2800      	cmp	r0, #0
   10c2e:	db2b      	blt.n	10c88 <quorem+0x118>
   10c30:	3601      	adds	r6, #1
   10c32:	4641      	mov	r1, r8
   10c34:	2300      	movs	r3, #0
   10c36:	f855 0b04 	ldr.w	r0, [r5], #4
   10c3a:	f8d1 c000 	ldr.w	ip, [r1]
   10c3e:	b282      	uxth	r2, r0
   10c40:	1a9a      	subs	r2, r3, r2
   10c42:	0c03      	lsrs	r3, r0, #16
   10c44:	fa12 f28c 	uxtah	r2, r2, ip
   10c48:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   10c4c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   10c50:	b292      	uxth	r2, r2
   10c52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   10c56:	42af      	cmp	r7, r5
   10c58:	f841 2b04 	str.w	r2, [r1], #4
   10c5c:	ea4f 4323 	mov.w	r3, r3, asr #16
   10c60:	d2e9      	bcs.n	10c36 <quorem+0xc6>
   10c62:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10c66:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   10c6a:	b96a      	cbnz	r2, 10c88 <quorem+0x118>
   10c6c:	3b04      	subs	r3, #4
   10c6e:	4598      	cmp	r8, r3
   10c70:	d304      	bcc.n	10c7c <quorem+0x10c>
   10c72:	e007      	b.n	10c84 <quorem+0x114>
   10c74:	4598      	cmp	r8, r3
   10c76:	f104 34ff 	add.w	r4, r4, #4294967295
   10c7a:	d203      	bcs.n	10c84 <quorem+0x114>
   10c7c:	f853 2904 	ldr.w	r2, [r3], #-4
   10c80:	2a00      	cmp	r2, #0
   10c82:	d0f7      	beq.n	10c74 <quorem+0x104>
   10c84:	f8c9 4010 	str.w	r4, [r9, #16]
   10c88:	4630      	mov	r0, r6
   10c8a:	b003      	add	sp, #12
   10c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c90:	2000      	movs	r0, #0
   10c92:	b003      	add	sp, #12
   10c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010c98 <_dtoa_r>:
   10c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c9c:	6b81      	ldr	r1, [r0, #56]	; 0x38
   10c9e:	b099      	sub	sp, #100	; 0x64
   10ca0:	4690      	mov	r8, r2
   10ca2:	4699      	mov	r9, r3
   10ca4:	e9cd 8904 	strd	r8, r9, [sp, #16]
   10ca8:	9d25      	ldr	r5, [sp, #148]	; 0x94
   10caa:	4604      	mov	r4, r0
   10cac:	b141      	cbz	r1, 10cc0 <_dtoa_r+0x28>
   10cae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   10cb0:	604a      	str	r2, [r1, #4]
   10cb2:	2301      	movs	r3, #1
   10cb4:	4093      	lsls	r3, r2
   10cb6:	608b      	str	r3, [r1, #8]
   10cb8:	f7fd fb92 	bl	e3e0 <_Bfree>
   10cbc:	2300      	movs	r3, #0
   10cbe:	63a3      	str	r3, [r4, #56]	; 0x38
   10cc0:	f1b9 0a00 	subs.w	sl, r9, #0
   10cc4:	bfb4      	ite	lt
   10cc6:	2301      	movlt	r3, #1
   10cc8:	2300      	movge	r3, #0
   10cca:	602b      	str	r3, [r5, #0]
   10ccc:	4b76      	ldr	r3, [pc, #472]	; (10ea8 <_dtoa_r+0x210>)
   10cce:	bfbc      	itt	lt
   10cd0:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   10cd4:	f8cd a014 	strlt.w	sl, [sp, #20]
   10cd8:	ea33 030a 	bics.w	r3, r3, sl
   10cdc:	f000 80ab 	beq.w	10e36 <_dtoa_r+0x19e>
   10ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10ce4:	4610      	mov	r0, r2
   10ce6:	4619      	mov	r1, r3
   10ce8:	2200      	movs	r2, #0
   10cea:	2300      	movs	r3, #0
   10cec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   10cf0:	f7fb fe3a 	bl	c968 <__aeabi_dcmpeq>
   10cf4:	4607      	mov	r7, r0
   10cf6:	b178      	cbz	r0, 10d18 <_dtoa_r+0x80>
   10cf8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   10cfa:	2301      	movs	r3, #1
   10cfc:	6013      	str	r3, [r2, #0]
   10cfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10d00:	2b00      	cmp	r3, #0
   10d02:	f000 83ae 	beq.w	11462 <_dtoa_r+0x7ca>
   10d06:	4b69      	ldr	r3, [pc, #420]	; (10eac <_dtoa_r+0x214>)
   10d08:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10d0a:	6013      	str	r3, [r2, #0]
   10d0c:	3b01      	subs	r3, #1
   10d0e:	9303      	str	r3, [sp, #12]
   10d10:	9803      	ldr	r0, [sp, #12]
   10d12:	b019      	add	sp, #100	; 0x64
   10d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d18:	ab16      	add	r3, sp, #88	; 0x58
   10d1a:	9301      	str	r3, [sp, #4]
   10d1c:	ab17      	add	r3, sp, #92	; 0x5c
   10d1e:	9300      	str	r3, [sp, #0]
   10d20:	4620      	mov	r0, r4
   10d22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10d26:	f7fd fe83 	bl	ea30 <__d2b>
   10d2a:	ea5f 561a 	movs.w	r6, sl, lsr #20
   10d2e:	4605      	mov	r5, r0
   10d30:	f040 8097 	bne.w	10e62 <_dtoa_r+0x1ca>
   10d34:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   10d38:	443e      	add	r6, r7
   10d3a:	f206 4332 	addw	r3, r6, #1074	; 0x432
   10d3e:	2b20      	cmp	r3, #32
   10d40:	f340 83a6 	ble.w	11490 <_dtoa_r+0x7f8>
   10d44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   10d48:	fa0a fa03 	lsl.w	sl, sl, r3
   10d4c:	f206 4312 	addw	r3, r6, #1042	; 0x412
   10d50:	fa28 f003 	lsr.w	r0, r8, r3
   10d54:	ea4a 0000 	orr.w	r0, sl, r0
   10d58:	f7fb fd36 	bl	c7c8 <__aeabi_ui2d>
   10d5c:	2301      	movs	r3, #1
   10d5e:	3e01      	subs	r6, #1
   10d60:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   10d64:	930f      	str	r3, [sp, #60]	; 0x3c
   10d66:	4b52      	ldr	r3, [pc, #328]	; (10eb0 <_dtoa_r+0x218>)
   10d68:	2200      	movs	r2, #0
   10d6a:	f7fb fbef 	bl	c54c <__aeabi_dsub>
   10d6e:	a348      	add	r3, pc, #288	; (adr r3, 10e90 <_dtoa_r+0x1f8>)
   10d70:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d74:	f002 fbd0 	bl	13518 <__aeabi_dmul>
   10d78:	a347      	add	r3, pc, #284	; (adr r3, 10e98 <_dtoa_r+0x200>)
   10d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d7e:	f7fb fbe7 	bl	c550 <__adddf3>
   10d82:	4680      	mov	r8, r0
   10d84:	4630      	mov	r0, r6
   10d86:	4689      	mov	r9, r1
   10d88:	f7fb fd2e 	bl	c7e8 <__aeabi_i2d>
   10d8c:	a344      	add	r3, pc, #272	; (adr r3, 10ea0 <_dtoa_r+0x208>)
   10d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d92:	f002 fbc1 	bl	13518 <__aeabi_dmul>
   10d96:	4602      	mov	r2, r0
   10d98:	460b      	mov	r3, r1
   10d9a:	4640      	mov	r0, r8
   10d9c:	4649      	mov	r1, r9
   10d9e:	f7fb fbd7 	bl	c550 <__adddf3>
   10da2:	4680      	mov	r8, r0
   10da4:	4689      	mov	r9, r1
   10da6:	f002 fdc9 	bl	1393c <__aeabi_d2iz>
   10daa:	2200      	movs	r2, #0
   10dac:	4683      	mov	fp, r0
   10dae:	2300      	movs	r3, #0
   10db0:	4640      	mov	r0, r8
   10db2:	4649      	mov	r1, r9
   10db4:	f7fb fde2 	bl	c97c <__aeabi_dcmplt>
   10db8:	2800      	cmp	r0, #0
   10dba:	f040 8345 	bne.w	11448 <_dtoa_r+0x7b0>
   10dbe:	f1bb 0f16 	cmp.w	fp, #22
   10dc2:	f200 8334 	bhi.w	1142e <_dtoa_r+0x796>
   10dc6:	4b3b      	ldr	r3, [pc, #236]	; (10eb4 <_dtoa_r+0x21c>)
   10dc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   10dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10dd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10dd4:	f7fb fdd2 	bl	c97c <__aeabi_dcmplt>
   10dd8:	2800      	cmp	r0, #0
   10dda:	d071      	beq.n	10ec0 <_dtoa_r+0x228>
   10ddc:	2300      	movs	r3, #0
   10dde:	1bbf      	subs	r7, r7, r6
   10de0:	930e      	str	r3, [sp, #56]	; 0x38
   10de2:	1e7b      	subs	r3, r7, #1
   10de4:	f10b 3bff 	add.w	fp, fp, #4294967295
   10de8:	9306      	str	r3, [sp, #24]
   10dea:	f100 8327 	bmi.w	1143c <_dtoa_r+0x7a4>
   10dee:	2300      	movs	r3, #0
   10df0:	9309      	str	r3, [sp, #36]	; 0x24
   10df2:	f1bb 0f00 	cmp.w	fp, #0
   10df6:	da6a      	bge.n	10ece <_dtoa_r+0x236>
   10df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10dfa:	f8cd b01c 	str.w	fp, [sp, #28]
   10dfe:	eba3 030b 	sub.w	r3, r3, fp
   10e02:	9309      	str	r3, [sp, #36]	; 0x24
   10e04:	f1cb 0300 	rsb	r3, fp, #0
   10e08:	930d      	str	r3, [sp, #52]	; 0x34
   10e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10e0c:	2b09      	cmp	r3, #9
   10e0e:	f04f 0b00 	mov.w	fp, #0
   10e12:	d865      	bhi.n	10ee0 <_dtoa_r+0x248>
   10e14:	2b05      	cmp	r3, #5
   10e16:	f340 8339 	ble.w	1148c <_dtoa_r+0x7f4>
   10e1a:	3b04      	subs	r3, #4
   10e1c:	9322      	str	r3, [sp, #136]	; 0x88
   10e1e:	2600      	movs	r6, #0
   10e20:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10e22:	3b02      	subs	r3, #2
   10e24:	2b03      	cmp	r3, #3
   10e26:	f200 8667 	bhi.w	11af8 <_dtoa_r+0xe60>
   10e2a:	e8df f013 	tbh	[pc, r3, lsl #1]
   10e2e:	044e      	.short	0x044e
   10e30:	0442044b 	.word	0x0442044b
   10e34:	0425      	.short	0x0425
   10e36:	9a24      	ldr	r2, [sp, #144]	; 0x90
   10e38:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   10e3c:	f242 730f 	movw	r3, #9999	; 0x270f
   10e40:	ea5a 0a08 	orrs.w	sl, sl, r8
   10e44:	6013      	str	r3, [r2, #0]
   10e46:	d11a      	bne.n	10e7e <_dtoa_r+0x1e6>
   10e48:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10e4a:	2b00      	cmp	r3, #0
   10e4c:	f000 8663 	beq.w	11b16 <_dtoa_r+0xe7e>
   10e50:	4b19      	ldr	r3, [pc, #100]	; (10eb8 <_dtoa_r+0x220>)
   10e52:	9303      	str	r3, [sp, #12]
   10e54:	3308      	adds	r3, #8
   10e56:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10e58:	9803      	ldr	r0, [sp, #12]
   10e5a:	6013      	str	r3, [r2, #0]
   10e5c:	b019      	add	sp, #100	; 0x64
   10e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e62:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   10e66:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10e6a:	4608      	mov	r0, r1
   10e6c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10e70:	970f      	str	r7, [sp, #60]	; 0x3c
   10e72:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   10e76:	9f16      	ldr	r7, [sp, #88]	; 0x58
   10e78:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   10e7c:	e773      	b.n	10d66 <_dtoa_r+0xce>
   10e7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10e80:	2b00      	cmp	r3, #0
   10e82:	f040 83db 	bne.w	1163c <_dtoa_r+0x9a4>
   10e86:	4b0d      	ldr	r3, [pc, #52]	; (10ebc <_dtoa_r+0x224>)
   10e88:	9303      	str	r3, [sp, #12]
   10e8a:	e741      	b.n	10d10 <_dtoa_r+0x78>
   10e8c:	f3af 8000 	nop.w
   10e90:	636f4361 	.word	0x636f4361
   10e94:	3fd287a7 	.word	0x3fd287a7
   10e98:	8b60c8b3 	.word	0x8b60c8b3
   10e9c:	3fc68a28 	.word	0x3fc68a28
   10ea0:	509f79fb 	.word	0x509f79fb
   10ea4:	3fd34413 	.word	0x3fd34413
   10ea8:	7ff00000 	.word	0x7ff00000
   10eac:	00013f61 	.word	0x00013f61
   10eb0:	3ff80000 	.word	0x3ff80000
   10eb4:	00015650 	.word	0x00015650
   10eb8:	000157bc 	.word	0x000157bc
   10ebc:	000157c8 	.word	0x000157c8
   10ec0:	1bbf      	subs	r7, r7, r6
   10ec2:	1e7b      	subs	r3, r7, #1
   10ec4:	9306      	str	r3, [sp, #24]
   10ec6:	f100 847e 	bmi.w	117c6 <_dtoa_r+0xb2e>
   10eca:	900e      	str	r0, [sp, #56]	; 0x38
   10ecc:	9009      	str	r0, [sp, #36]	; 0x24
   10ece:	9b06      	ldr	r3, [sp, #24]
   10ed0:	445b      	add	r3, fp
   10ed2:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   10ed6:	2300      	movs	r3, #0
   10ed8:	930d      	str	r3, [sp, #52]	; 0x34
   10eda:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10edc:	2b09      	cmp	r3, #9
   10ede:	d999      	bls.n	10e14 <_dtoa_r+0x17c>
   10ee0:	2300      	movs	r3, #0
   10ee2:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
   10ee6:	2601      	movs	r6, #1
   10ee8:	f04f 33ff 	mov.w	r3, #4294967295
   10eec:	960c      	str	r6, [sp, #48]	; 0x30
   10eee:	9308      	str	r3, [sp, #32]
   10ef0:	9b08      	ldr	r3, [sp, #32]
   10ef2:	9312      	str	r3, [sp, #72]	; 0x48
   10ef4:	2100      	movs	r1, #0
   10ef6:	63e1      	str	r1, [r4, #60]	; 0x3c
   10ef8:	4620      	mov	r0, r4
   10efa:	f7fd fa4b 	bl	e394 <_Balloc>
   10efe:	9003      	str	r0, [sp, #12]
   10f00:	2800      	cmp	r0, #0
   10f02:	f000 8601 	beq.w	11b08 <_dtoa_r+0xe70>
   10f06:	9b03      	ldr	r3, [sp, #12]
   10f08:	63a3      	str	r3, [r4, #56]	; 0x38
   10f0a:	9b08      	ldr	r3, [sp, #32]
   10f0c:	2b0e      	cmp	r3, #14
   10f0e:	f200 8113 	bhi.w	11138 <_dtoa_r+0x4a0>
   10f12:	2e00      	cmp	r6, #0
   10f14:	f000 8110 	beq.w	11138 <_dtoa_r+0x4a0>
   10f18:	9907      	ldr	r1, [sp, #28]
   10f1a:	2900      	cmp	r1, #0
   10f1c:	f340 8455 	ble.w	117ca <_dtoa_r+0xb32>
   10f20:	4bae      	ldr	r3, [pc, #696]	; (111dc <_dtoa_r+0x544>)
   10f22:	f001 020f 	and.w	r2, r1, #15
   10f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10f2a:	ea4f 1821 	mov.w	r8, r1, asr #4
   10f2e:	05c9      	lsls	r1, r1, #23
   10f30:	e9d3 6700 	ldrd	r6, r7, [r3]
   10f34:	f140 8411 	bpl.w	1175a <_dtoa_r+0xac2>
   10f38:	4ba9      	ldr	r3, [pc, #676]	; (111e0 <_dtoa_r+0x548>)
   10f3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10f3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   10f42:	f002 fc13 	bl	1376c <__aeabi_ddiv>
   10f46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10f4a:	f008 080f 	and.w	r8, r8, #15
   10f4e:	f04f 0a03 	mov.w	sl, #3
   10f52:	f1b8 0f00 	cmp.w	r8, #0
   10f56:	d013      	beq.n	10f80 <_dtoa_r+0x2e8>
   10f58:	f8df 9284 	ldr.w	r9, [pc, #644]	; 111e0 <_dtoa_r+0x548>
   10f5c:	f018 0f01 	tst.w	r8, #1
   10f60:	d009      	beq.n	10f76 <_dtoa_r+0x2de>
   10f62:	4630      	mov	r0, r6
   10f64:	4639      	mov	r1, r7
   10f66:	e9d9 2300 	ldrd	r2, r3, [r9]
   10f6a:	f002 fad5 	bl	13518 <__aeabi_dmul>
   10f6e:	f10a 0a01 	add.w	sl, sl, #1
   10f72:	4606      	mov	r6, r0
   10f74:	460f      	mov	r7, r1
   10f76:	ea5f 0868 	movs.w	r8, r8, asr #1
   10f7a:	f109 0908 	add.w	r9, r9, #8
   10f7e:	d1ed      	bne.n	10f5c <_dtoa_r+0x2c4>
   10f80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10f84:	4632      	mov	r2, r6
   10f86:	463b      	mov	r3, r7
   10f88:	f002 fbf0 	bl	1376c <__aeabi_ddiv>
   10f8c:	4680      	mov	r8, r0
   10f8e:	4689      	mov	r9, r1
   10f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10f92:	b143      	cbz	r3, 10fa6 <_dtoa_r+0x30e>
   10f94:	4b93      	ldr	r3, [pc, #588]	; (111e4 <_dtoa_r+0x54c>)
   10f96:	2200      	movs	r2, #0
   10f98:	4640      	mov	r0, r8
   10f9a:	4649      	mov	r1, r9
   10f9c:	f7fb fcee 	bl	c97c <__aeabi_dcmplt>
   10fa0:	2800      	cmp	r0, #0
   10fa2:	f040 852a 	bne.w	119fa <_dtoa_r+0xd62>
   10fa6:	4650      	mov	r0, sl
   10fa8:	f7fb fc1e 	bl	c7e8 <__aeabi_i2d>
   10fac:	4642      	mov	r2, r8
   10fae:	464b      	mov	r3, r9
   10fb0:	f002 fab2 	bl	13518 <__aeabi_dmul>
   10fb4:	4b8c      	ldr	r3, [pc, #560]	; (111e8 <_dtoa_r+0x550>)
   10fb6:	2200      	movs	r2, #0
   10fb8:	f7fb faca 	bl	c550 <__adddf3>
   10fbc:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   10fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10fc4:	9311      	str	r3, [sp, #68]	; 0x44
   10fc6:	9b08      	ldr	r3, [sp, #32]
   10fc8:	2b00      	cmp	r3, #0
   10fca:	f000 8099 	beq.w	11100 <_dtoa_r+0x468>
   10fce:	9b07      	ldr	r3, [sp, #28]
   10fd0:	9314      	str	r3, [sp, #80]	; 0x50
   10fd2:	9b08      	ldr	r3, [sp, #32]
   10fd4:	9313      	str	r3, [sp, #76]	; 0x4c
   10fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10fd8:	2b00      	cmp	r3, #0
   10fda:	f000 84a5 	beq.w	11928 <_dtoa_r+0xc90>
   10fde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10fe0:	4b7e      	ldr	r3, [pc, #504]	; (111dc <_dtoa_r+0x544>)
   10fe2:	4982      	ldr	r1, [pc, #520]	; (111ec <_dtoa_r+0x554>)
   10fe4:	9e03      	ldr	r6, [sp, #12]
   10fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10fea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   10fee:	2000      	movs	r0, #0
   10ff0:	f002 fbbc 	bl	1376c <__aeabi_ddiv>
   10ff4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   10ff8:	f7fb faa8 	bl	c54c <__aeabi_dsub>
   10ffc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11000:	4649      	mov	r1, r9
   11002:	4640      	mov	r0, r8
   11004:	f002 fc9a 	bl	1393c <__aeabi_d2iz>
   11008:	4607      	mov	r7, r0
   1100a:	f7fb fbed 	bl	c7e8 <__aeabi_i2d>
   1100e:	4602      	mov	r2, r0
   11010:	460b      	mov	r3, r1
   11012:	4640      	mov	r0, r8
   11014:	4649      	mov	r1, r9
   11016:	f7fb fa99 	bl	c54c <__aeabi_dsub>
   1101a:	3730      	adds	r7, #48	; 0x30
   1101c:	4680      	mov	r8, r0
   1101e:	4689      	mov	r9, r1
   11020:	4602      	mov	r2, r0
   11022:	460b      	mov	r3, r1
   11024:	f806 7b01 	strb.w	r7, [r6], #1
   11028:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1102c:	f7fb fcc4 	bl	c9b8 <__aeabi_dcmpgt>
   11030:	2800      	cmp	r0, #0
   11032:	f040 8527 	bne.w	11a84 <_dtoa_r+0xdec>
   11036:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   1103a:	2700      	movs	r7, #0
   1103c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   11040:	9510      	str	r5, [sp, #64]	; 0x40
   11042:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   11044:	9413      	str	r4, [sp, #76]	; 0x4c
   11046:	e02a      	b.n	1109e <_dtoa_r+0x406>
   11048:	3701      	adds	r7, #1
   1104a:	42af      	cmp	r7, r5
   1104c:	f280 852a 	bge.w	11aa4 <_dtoa_r+0xe0c>
   11050:	4b67      	ldr	r3, [pc, #412]	; (111f0 <_dtoa_r+0x558>)
   11052:	4650      	mov	r0, sl
   11054:	4659      	mov	r1, fp
   11056:	2200      	movs	r2, #0
   11058:	f002 fa5e 	bl	13518 <__aeabi_dmul>
   1105c:	4b64      	ldr	r3, [pc, #400]	; (111f0 <_dtoa_r+0x558>)
   1105e:	2200      	movs	r2, #0
   11060:	4682      	mov	sl, r0
   11062:	468b      	mov	fp, r1
   11064:	4640      	mov	r0, r8
   11066:	4649      	mov	r1, r9
   11068:	f002 fa56 	bl	13518 <__aeabi_dmul>
   1106c:	4689      	mov	r9, r1
   1106e:	4680      	mov	r8, r0
   11070:	f002 fc64 	bl	1393c <__aeabi_d2iz>
   11074:	4604      	mov	r4, r0
   11076:	f7fb fbb7 	bl	c7e8 <__aeabi_i2d>
   1107a:	4602      	mov	r2, r0
   1107c:	460b      	mov	r3, r1
   1107e:	4640      	mov	r0, r8
   11080:	4649      	mov	r1, r9
   11082:	f7fb fa63 	bl	c54c <__aeabi_dsub>
   11086:	3430      	adds	r4, #48	; 0x30
   11088:	f806 4b01 	strb.w	r4, [r6], #1
   1108c:	4652      	mov	r2, sl
   1108e:	465b      	mov	r3, fp
   11090:	4680      	mov	r8, r0
   11092:	4689      	mov	r9, r1
   11094:	f7fb fc72 	bl	c97c <__aeabi_dcmplt>
   11098:	2800      	cmp	r0, #0
   1109a:	f040 84f1 	bne.w	11a80 <_dtoa_r+0xde8>
   1109e:	4642      	mov	r2, r8
   110a0:	464b      	mov	r3, r9
   110a2:	4950      	ldr	r1, [pc, #320]	; (111e4 <_dtoa_r+0x54c>)
   110a4:	2000      	movs	r0, #0
   110a6:	f7fb fa51 	bl	c54c <__aeabi_dsub>
   110aa:	4652      	mov	r2, sl
   110ac:	465b      	mov	r3, fp
   110ae:	f7fb fc65 	bl	c97c <__aeabi_dcmplt>
   110b2:	2800      	cmp	r0, #0
   110b4:	d0c8      	beq.n	11048 <_dtoa_r+0x3b0>
   110b6:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   110ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
   110bc:	9a03      	ldr	r2, [sp, #12]
   110be:	9307      	str	r3, [sp, #28]
   110c0:	e002      	b.n	110c8 <_dtoa_r+0x430>
   110c2:	42b2      	cmp	r2, r6
   110c4:	f000 84c6 	beq.w	11a54 <_dtoa_r+0xdbc>
   110c8:	46b1      	mov	r9, r6
   110ca:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   110ce:	2b39      	cmp	r3, #57	; 0x39
   110d0:	d0f7      	beq.n	110c2 <_dtoa_r+0x42a>
   110d2:	3301      	adds	r3, #1
   110d4:	b2db      	uxtb	r3, r3
   110d6:	7033      	strb	r3, [r6, #0]
   110d8:	9b07      	ldr	r3, [sp, #28]
   110da:	3301      	adds	r3, #1
   110dc:	9307      	str	r3, [sp, #28]
   110de:	e192      	b.n	11406 <_dtoa_r+0x76e>
   110e0:	4650      	mov	r0, sl
   110e2:	f7fb fb81 	bl	c7e8 <__aeabi_i2d>
   110e6:	4642      	mov	r2, r8
   110e8:	464b      	mov	r3, r9
   110ea:	f002 fa15 	bl	13518 <__aeabi_dmul>
   110ee:	4b3e      	ldr	r3, [pc, #248]	; (111e8 <_dtoa_r+0x550>)
   110f0:	2200      	movs	r2, #0
   110f2:	f7fb fa2d 	bl	c550 <__adddf3>
   110f6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   110fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   110fe:	9311      	str	r3, [sp, #68]	; 0x44
   11100:	4b3c      	ldr	r3, [pc, #240]	; (111f4 <_dtoa_r+0x55c>)
   11102:	4640      	mov	r0, r8
   11104:	4649      	mov	r1, r9
   11106:	2200      	movs	r2, #0
   11108:	f7fb fa20 	bl	c54c <__aeabi_dsub>
   1110c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   11110:	4642      	mov	r2, r8
   11112:	464b      	mov	r3, r9
   11114:	4606      	mov	r6, r0
   11116:	460f      	mov	r7, r1
   11118:	f7fb fc4e 	bl	c9b8 <__aeabi_dcmpgt>
   1111c:	4682      	mov	sl, r0
   1111e:	2800      	cmp	r0, #0
   11120:	f040 84a8 	bne.w	11a74 <_dtoa_r+0xddc>
   11124:	4642      	mov	r2, r8
   11126:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1112a:	4630      	mov	r0, r6
   1112c:	4639      	mov	r1, r7
   1112e:	f7fb fc25 	bl	c97c <__aeabi_dcmplt>
   11132:	2800      	cmp	r0, #0
   11134:	f040 8345 	bne.w	117c2 <_dtoa_r+0xb2a>
   11138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1113a:	2b00      	cmp	r3, #0
   1113c:	f2c0 808c 	blt.w	11258 <_dtoa_r+0x5c0>
   11140:	9a07      	ldr	r2, [sp, #28]
   11142:	2a0e      	cmp	r2, #14
   11144:	f300 8088 	bgt.w	11258 <_dtoa_r+0x5c0>
   11148:	4b24      	ldr	r3, [pc, #144]	; (111dc <_dtoa_r+0x544>)
   1114a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1114e:	e9d3 ab00 	ldrd	sl, fp, [r3]
   11152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11154:	2b00      	cmp	r3, #0
   11156:	da1b      	bge.n	11190 <_dtoa_r+0x4f8>
   11158:	9b08      	ldr	r3, [sp, #32]
   1115a:	2b00      	cmp	r3, #0
   1115c:	dc18      	bgt.n	11190 <_dtoa_r+0x4f8>
   1115e:	f040 832e 	bne.w	117be <_dtoa_r+0xb26>
   11162:	4b24      	ldr	r3, [pc, #144]	; (111f4 <_dtoa_r+0x55c>)
   11164:	4650      	mov	r0, sl
   11166:	2200      	movs	r2, #0
   11168:	4659      	mov	r1, fp
   1116a:	f002 f9d5 	bl	13518 <__aeabi_dmul>
   1116e:	4602      	mov	r2, r0
   11170:	460b      	mov	r3, r1
   11172:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11176:	f7fb fc0b 	bl	c990 <__aeabi_dcmple>
   1117a:	f8dd a020 	ldr.w	sl, [sp, #32]
   1117e:	4656      	mov	r6, sl
   11180:	2800      	cmp	r0, #0
   11182:	f000 82b9 	beq.w	116f8 <_dtoa_r+0xa60>
   11186:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11188:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1118c:	43df      	mvns	r7, r3
   1118e:	e2bb      	b.n	11708 <_dtoa_r+0xa70>
   11190:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   11194:	4652      	mov	r2, sl
   11196:	465b      	mov	r3, fp
   11198:	4638      	mov	r0, r7
   1119a:	4641      	mov	r1, r8
   1119c:	f002 fae6 	bl	1376c <__aeabi_ddiv>
   111a0:	f002 fbcc 	bl	1393c <__aeabi_d2iz>
   111a4:	4681      	mov	r9, r0
   111a6:	9009      	str	r0, [sp, #36]	; 0x24
   111a8:	f7fb fb1e 	bl	c7e8 <__aeabi_i2d>
   111ac:	4652      	mov	r2, sl
   111ae:	465b      	mov	r3, fp
   111b0:	f002 f9b2 	bl	13518 <__aeabi_dmul>
   111b4:	9e03      	ldr	r6, [sp, #12]
   111b6:	460b      	mov	r3, r1
   111b8:	4602      	mov	r2, r0
   111ba:	4641      	mov	r1, r8
   111bc:	4638      	mov	r0, r7
   111be:	f7fb f9c5 	bl	c54c <__aeabi_dsub>
   111c2:	f109 0330 	add.w	r3, r9, #48	; 0x30
   111c6:	f806 3b01 	strb.w	r3, [r6], #1
   111ca:	9b08      	ldr	r3, [sp, #32]
   111cc:	2b01      	cmp	r3, #1
   111ce:	f000 835c 	beq.w	1188a <_dtoa_r+0xbf2>
   111d2:	9406      	str	r4, [sp, #24]
   111d4:	2701      	movs	r7, #1
   111d6:	9504      	str	r5, [sp, #16]
   111d8:	461c      	mov	r4, r3
   111da:	e02a      	b.n	11232 <_dtoa_r+0x59a>
   111dc:	00015650 	.word	0x00015650
   111e0:	00015628 	.word	0x00015628
   111e4:	3ff00000 	.word	0x3ff00000
   111e8:	401c0000 	.word	0x401c0000
   111ec:	3fe00000 	.word	0x3fe00000
   111f0:	40240000 	.word	0x40240000
   111f4:	40140000 	.word	0x40140000
   111f8:	4652      	mov	r2, sl
   111fa:	465b      	mov	r3, fp
   111fc:	4640      	mov	r0, r8
   111fe:	4649      	mov	r1, r9
   11200:	f002 fab4 	bl	1376c <__aeabi_ddiv>
   11204:	f002 fb9a 	bl	1393c <__aeabi_d2iz>
   11208:	4605      	mov	r5, r0
   1120a:	f7fb faed 	bl	c7e8 <__aeabi_i2d>
   1120e:	4652      	mov	r2, sl
   11210:	465b      	mov	r3, fp
   11212:	f002 f981 	bl	13518 <__aeabi_dmul>
   11216:	3701      	adds	r7, #1
   11218:	460b      	mov	r3, r1
   1121a:	4602      	mov	r2, r0
   1121c:	4649      	mov	r1, r9
   1121e:	4640      	mov	r0, r8
   11220:	f7fb f994 	bl	c54c <__aeabi_dsub>
   11224:	f105 0330 	add.w	r3, r5, #48	; 0x30
   11228:	42a7      	cmp	r7, r4
   1122a:	f806 3b01 	strb.w	r3, [r6], #1
   1122e:	f000 8329 	beq.w	11884 <_dtoa_r+0xbec>
   11232:	4ba5      	ldr	r3, [pc, #660]	; (114c8 <_dtoa_r+0x830>)
   11234:	2200      	movs	r2, #0
   11236:	f002 f96f 	bl	13518 <__aeabi_dmul>
   1123a:	2200      	movs	r2, #0
   1123c:	2300      	movs	r3, #0
   1123e:	4680      	mov	r8, r0
   11240:	4689      	mov	r9, r1
   11242:	f7fb fb91 	bl	c968 <__aeabi_dcmpeq>
   11246:	2800      	cmp	r0, #0
   11248:	d0d6      	beq.n	111f8 <_dtoa_r+0x560>
   1124a:	9d04      	ldr	r5, [sp, #16]
   1124c:	9c06      	ldr	r4, [sp, #24]
   1124e:	9b07      	ldr	r3, [sp, #28]
   11250:	3301      	adds	r3, #1
   11252:	9307      	str	r3, [sp, #28]
   11254:	46b1      	mov	r9, r6
   11256:	e0d6      	b.n	11406 <_dtoa_r+0x76e>
   11258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1125a:	2a00      	cmp	r2, #0
   1125c:	f000 8107 	beq.w	1146e <_dtoa_r+0x7d6>
   11260:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11262:	2a01      	cmp	r2, #1
   11264:	f340 8294 	ble.w	11790 <_dtoa_r+0xaf8>
   11268:	9b08      	ldr	r3, [sp, #32]
   1126a:	f103 38ff 	add.w	r8, r3, #4294967295
   1126e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11270:	4543      	cmp	r3, r8
   11272:	f280 825e 	bge.w	11732 <_dtoa_r+0xa9a>
   11276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11278:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   1127c:	eba8 0303 	sub.w	r3, r8, r3
   11280:	449b      	add	fp, r3
   11282:	f04f 0800 	mov.w	r8, #0
   11286:	9b08      	ldr	r3, [sp, #32]
   11288:	2b00      	cmp	r3, #0
   1128a:	f2c0 832f 	blt.w	118ec <_dtoa_r+0xc54>
   1128e:	9a06      	ldr	r2, [sp, #24]
   11290:	441a      	add	r2, r3
   11292:	9206      	str	r2, [sp, #24]
   11294:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11296:	4617      	mov	r7, r2
   11298:	441a      	add	r2, r3
   1129a:	9209      	str	r2, [sp, #36]	; 0x24
   1129c:	2101      	movs	r1, #1
   1129e:	4620      	mov	r0, r4
   112a0:	f7fd f948 	bl	e534 <__i2b>
   112a4:	4606      	mov	r6, r0
   112a6:	b167      	cbz	r7, 112c2 <_dtoa_r+0x62a>
   112a8:	9906      	ldr	r1, [sp, #24]
   112aa:	2900      	cmp	r1, #0
   112ac:	460b      	mov	r3, r1
   112ae:	dd08      	ble.n	112c2 <_dtoa_r+0x62a>
   112b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   112b2:	42b9      	cmp	r1, r7
   112b4:	bfa8      	it	ge
   112b6:	463b      	movge	r3, r7
   112b8:	1ad2      	subs	r2, r2, r3
   112ba:	1aff      	subs	r7, r7, r3
   112bc:	1acb      	subs	r3, r1, r3
   112be:	9209      	str	r2, [sp, #36]	; 0x24
   112c0:	9306      	str	r3, [sp, #24]
   112c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   112c4:	b163      	cbz	r3, 112e0 <_dtoa_r+0x648>
   112c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   112c8:	2b00      	cmp	r3, #0
   112ca:	f000 82b6 	beq.w	1183a <_dtoa_r+0xba2>
   112ce:	f1b8 0f00 	cmp.w	r8, #0
   112d2:	f300 8231 	bgt.w	11738 <_dtoa_r+0xaa0>
   112d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   112d8:	ebb3 0208 	subs.w	r2, r3, r8
   112dc:	f040 8316 	bne.w	1190c <_dtoa_r+0xc74>
   112e0:	2101      	movs	r1, #1
   112e2:	4620      	mov	r0, r4
   112e4:	f7fd f926 	bl	e534 <__i2b>
   112e8:	f1bb 0f00 	cmp.w	fp, #0
   112ec:	4682      	mov	sl, r0
   112ee:	f300 80d4 	bgt.w	1149a <_dtoa_r+0x802>
   112f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   112f4:	2b01      	cmp	r3, #1
   112f6:	f340 81a7 	ble.w	11648 <_dtoa_r+0x9b0>
   112fa:	f04f 0900 	mov.w	r9, #0
   112fe:	2001      	movs	r0, #1
   11300:	f1bb 0f00 	cmp.w	fp, #0
   11304:	f040 80d5 	bne.w	114b2 <_dtoa_r+0x81a>
   11308:	9b06      	ldr	r3, [sp, #24]
   1130a:	4418      	add	r0, r3
   1130c:	f010 001f 	ands.w	r0, r0, #31
   11310:	f000 8198 	beq.w	11644 <_dtoa_r+0x9ac>
   11314:	f1c0 0320 	rsb	r3, r0, #32
   11318:	2b04      	cmp	r3, #4
   1131a:	f300 80ad 	bgt.w	11478 <_dtoa_r+0x7e0>
   1131e:	f040 8224 	bne.w	1176a <_dtoa_r+0xad2>
   11322:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11324:	2b00      	cmp	r3, #0
   11326:	dd05      	ble.n	11334 <_dtoa_r+0x69c>
   11328:	4629      	mov	r1, r5
   1132a:	461a      	mov	r2, r3
   1132c:	4620      	mov	r0, r4
   1132e:	f7fd fa3d 	bl	e7ac <__lshift>
   11332:	4605      	mov	r5, r0
   11334:	9b06      	ldr	r3, [sp, #24]
   11336:	2b00      	cmp	r3, #0
   11338:	dd05      	ble.n	11346 <_dtoa_r+0x6ae>
   1133a:	4651      	mov	r1, sl
   1133c:	461a      	mov	r2, r3
   1133e:	4620      	mov	r0, r4
   11340:	f7fd fa34 	bl	e7ac <__lshift>
   11344:	4682      	mov	sl, r0
   11346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11348:	2b00      	cmp	r3, #0
   1134a:	f040 815c 	bne.w	11606 <_dtoa_r+0x96e>
   1134e:	9b08      	ldr	r3, [sp, #32]
   11350:	2b00      	cmp	r3, #0
   11352:	f340 8143 	ble.w	115dc <_dtoa_r+0x944>
   11356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11358:	2b00      	cmp	r3, #0
   1135a:	f040 80c6 	bne.w	114ea <_dtoa_r+0x852>
   1135e:	9b07      	ldr	r3, [sp, #28]
   11360:	3301      	adds	r3, #1
   11362:	9307      	str	r3, [sp, #28]
   11364:	f8dd 800c 	ldr.w	r8, [sp, #12]
   11368:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1136c:	2701      	movs	r7, #1
   1136e:	e007      	b.n	11380 <_dtoa_r+0x6e8>
   11370:	4629      	mov	r1, r5
   11372:	2300      	movs	r3, #0
   11374:	220a      	movs	r2, #10
   11376:	4620      	mov	r0, r4
   11378:	f7fd f83c 	bl	e3f4 <__multadd>
   1137c:	3701      	adds	r7, #1
   1137e:	4605      	mov	r5, r0
   11380:	4651      	mov	r1, sl
   11382:	4628      	mov	r0, r5
   11384:	f7ff fbf4 	bl	10b70 <quorem>
   11388:	45b9      	cmp	r9, r7
   1138a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1138e:	f808 3b01 	strb.w	r3, [r8], #1
   11392:	dced      	bgt.n	11370 <_dtoa_r+0x6d8>
   11394:	9a08      	ldr	r2, [sp, #32]
   11396:	2a00      	cmp	r2, #0
   11398:	bfc8      	it	gt
   1139a:	4693      	movgt	fp, r2
   1139c:	9a03      	ldr	r2, [sp, #12]
   1139e:	bfd8      	it	le
   113a0:	f04f 0b01 	movle.w	fp, #1
   113a4:	4493      	add	fp, r2
   113a6:	2700      	movs	r7, #0
   113a8:	4629      	mov	r1, r5
   113aa:	2201      	movs	r2, #1
   113ac:	4620      	mov	r0, r4
   113ae:	9304      	str	r3, [sp, #16]
   113b0:	f7fd f9fc 	bl	e7ac <__lshift>
   113b4:	4651      	mov	r1, sl
   113b6:	4605      	mov	r5, r0
   113b8:	f7fd fa70 	bl	e89c <__mcmp>
   113bc:	2800      	cmp	r0, #0
   113be:	f340 81dc 	ble.w	1177a <_dtoa_r+0xae2>
   113c2:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   113c6:	9a03      	ldr	r2, [sp, #12]
   113c8:	f10b 3bff 	add.w	fp, fp, #4294967295
   113cc:	e004      	b.n	113d8 <_dtoa_r+0x740>
   113ce:	455a      	cmp	r2, fp
   113d0:	f000 81ee 	beq.w	117b0 <_dtoa_r+0xb18>
   113d4:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   113d8:	2b39      	cmp	r3, #57	; 0x39
   113da:	f10b 0901 	add.w	r9, fp, #1
   113de:	d0f6      	beq.n	113ce <_dtoa_r+0x736>
   113e0:	3301      	adds	r3, #1
   113e2:	f88b 3000 	strb.w	r3, [fp]
   113e6:	4651      	mov	r1, sl
   113e8:	4620      	mov	r0, r4
   113ea:	f7fc fff9 	bl	e3e0 <_Bfree>
   113ee:	b156      	cbz	r6, 11406 <_dtoa_r+0x76e>
   113f0:	b12f      	cbz	r7, 113fe <_dtoa_r+0x766>
   113f2:	42b7      	cmp	r7, r6
   113f4:	d003      	beq.n	113fe <_dtoa_r+0x766>
   113f6:	4639      	mov	r1, r7
   113f8:	4620      	mov	r0, r4
   113fa:	f7fc fff1 	bl	e3e0 <_Bfree>
   113fe:	4631      	mov	r1, r6
   11400:	4620      	mov	r0, r4
   11402:	f7fc ffed 	bl	e3e0 <_Bfree>
   11406:	4629      	mov	r1, r5
   11408:	4620      	mov	r0, r4
   1140a:	f7fc ffe9 	bl	e3e0 <_Bfree>
   1140e:	2300      	movs	r3, #0
   11410:	f889 3000 	strb.w	r3, [r9]
   11414:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11416:	9a07      	ldr	r2, [sp, #28]
   11418:	601a      	str	r2, [r3, #0]
   1141a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1141c:	2b00      	cmp	r3, #0
   1141e:	f43f ac77 	beq.w	10d10 <_dtoa_r+0x78>
   11422:	9803      	ldr	r0, [sp, #12]
   11424:	f8c3 9000 	str.w	r9, [r3]
   11428:	b019      	add	sp, #100	; 0x64
   1142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1142e:	2301      	movs	r3, #1
   11430:	1bbf      	subs	r7, r7, r6
   11432:	930e      	str	r3, [sp, #56]	; 0x38
   11434:	1e7b      	subs	r3, r7, #1
   11436:	9306      	str	r3, [sp, #24]
   11438:	f57f acd9 	bpl.w	10dee <_dtoa_r+0x156>
   1143c:	f1c7 0301 	rsb	r3, r7, #1
   11440:	9309      	str	r3, [sp, #36]	; 0x24
   11442:	2300      	movs	r3, #0
   11444:	9306      	str	r3, [sp, #24]
   11446:	e4d4      	b.n	10df2 <_dtoa_r+0x15a>
   11448:	4658      	mov	r0, fp
   1144a:	f7fb f9cd 	bl	c7e8 <__aeabi_i2d>
   1144e:	4642      	mov	r2, r8
   11450:	464b      	mov	r3, r9
   11452:	f7fb fa89 	bl	c968 <__aeabi_dcmpeq>
   11456:	2800      	cmp	r0, #0
   11458:	f47f acb1 	bne.w	10dbe <_dtoa_r+0x126>
   1145c:	f10b 3bff 	add.w	fp, fp, #4294967295
   11460:	e4ad      	b.n	10dbe <_dtoa_r+0x126>
   11462:	4b1a      	ldr	r3, [pc, #104]	; (114cc <_dtoa_r+0x834>)
   11464:	9303      	str	r3, [sp, #12]
   11466:	9803      	ldr	r0, [sp, #12]
   11468:	b019      	add	sp, #100	; 0x64
   1146a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1146e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   11472:	9f09      	ldr	r7, [sp, #36]	; 0x24
   11474:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11476:	e716      	b.n	112a6 <_dtoa_r+0x60e>
   11478:	f1c0 001c 	rsb	r0, r0, #28
   1147c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1147e:	4403      	add	r3, r0
   11480:	9309      	str	r3, [sp, #36]	; 0x24
   11482:	9b06      	ldr	r3, [sp, #24]
   11484:	4403      	add	r3, r0
   11486:	4407      	add	r7, r0
   11488:	9306      	str	r3, [sp, #24]
   1148a:	e74a      	b.n	11322 <_dtoa_r+0x68a>
   1148c:	2601      	movs	r6, #1
   1148e:	e4c7      	b.n	10e20 <_dtoa_r+0x188>
   11490:	f1c3 0320 	rsb	r3, r3, #32
   11494:	fa08 f003 	lsl.w	r0, r8, r3
   11498:	e45e      	b.n	10d58 <_dtoa_r+0xc0>
   1149a:	4601      	mov	r1, r0
   1149c:	465a      	mov	r2, fp
   1149e:	4620      	mov	r0, r4
   114a0:	f7fd f924 	bl	e6ec <__pow5mult>
   114a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   114a6:	2b01      	cmp	r3, #1
   114a8:	4682      	mov	sl, r0
   114aa:	f340 81ba 	ble.w	11822 <_dtoa_r+0xb8a>
   114ae:	f04f 0900 	mov.w	r9, #0
   114b2:	f8da 3010 	ldr.w	r3, [sl, #16]
   114b6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   114ba:	6918      	ldr	r0, [r3, #16]
   114bc:	f7fc ffea 	bl	e494 <__hi0bits>
   114c0:	f1c0 0020 	rsb	r0, r0, #32
   114c4:	e720      	b.n	11308 <_dtoa_r+0x670>
   114c6:	bf00      	nop
   114c8:	40240000 	.word	0x40240000
   114cc:	00013f60 	.word	0x00013f60
   114d0:	4631      	mov	r1, r6
   114d2:	2300      	movs	r3, #0
   114d4:	220a      	movs	r2, #10
   114d6:	4620      	mov	r0, r4
   114d8:	f7fc ff8c 	bl	e3f4 <__multadd>
   114dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   114de:	2b00      	cmp	r3, #0
   114e0:	4606      	mov	r6, r0
   114e2:	f340 82f3 	ble.w	11acc <_dtoa_r+0xe34>
   114e6:	e9cd 8307 	strd	r8, r3, [sp, #28]
   114ea:	2f00      	cmp	r7, #0
   114ec:	f300 811a 	bgt.w	11724 <_dtoa_r+0xa8c>
   114f0:	f1b9 0f00 	cmp.w	r9, #0
   114f4:	f040 81e3 	bne.w	118be <_dtoa_r+0xc26>
   114f8:	46b0      	mov	r8, r6
   114fa:	9b04      	ldr	r3, [sp, #16]
   114fc:	9f03      	ldr	r7, [sp, #12]
   114fe:	9908      	ldr	r1, [sp, #32]
   11500:	f003 0201 	and.w	r2, r3, #1
   11504:	1e7b      	subs	r3, r7, #1
   11506:	4419      	add	r1, r3
   11508:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1150a:	920c      	str	r2, [sp, #48]	; 0x30
   1150c:	4313      	orrs	r3, r2
   1150e:	9109      	str	r1, [sp, #36]	; 0x24
   11510:	930a      	str	r3, [sp, #40]	; 0x28
   11512:	4651      	mov	r1, sl
   11514:	4628      	mov	r0, r5
   11516:	f7ff fb2b 	bl	10b70 <quorem>
   1151a:	4631      	mov	r1, r6
   1151c:	4683      	mov	fp, r0
   1151e:	4628      	mov	r0, r5
   11520:	f7fd f9bc 	bl	e89c <__mcmp>
   11524:	4642      	mov	r2, r8
   11526:	4651      	mov	r1, sl
   11528:	4681      	mov	r9, r0
   1152a:	4620      	mov	r0, r4
   1152c:	f7fd f9d6 	bl	e8dc <__mdiff>
   11530:	68c2      	ldr	r2, [r0, #12]
   11532:	4601      	mov	r1, r0
   11534:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   11538:	2a00      	cmp	r2, #0
   1153a:	d142      	bne.n	115c2 <_dtoa_r+0x92a>
   1153c:	9006      	str	r0, [sp, #24]
   1153e:	4628      	mov	r0, r5
   11540:	9308      	str	r3, [sp, #32]
   11542:	f7fd f9ab 	bl	e89c <__mcmp>
   11546:	9906      	ldr	r1, [sp, #24]
   11548:	9004      	str	r0, [sp, #16]
   1154a:	4620      	mov	r0, r4
   1154c:	f7fc ff48 	bl	e3e0 <_Bfree>
   11550:	9a04      	ldr	r2, [sp, #16]
   11552:	9b08      	ldr	r3, [sp, #32]
   11554:	b91a      	cbnz	r2, 1155e <_dtoa_r+0x8c6>
   11556:	990a      	ldr	r1, [sp, #40]	; 0x28
   11558:	2900      	cmp	r1, #0
   1155a:	f000 82a9 	beq.w	11ab0 <_dtoa_r+0xe18>
   1155e:	f1b9 0f00 	cmp.w	r9, #0
   11562:	f2c0 8171 	blt.w	11848 <_dtoa_r+0xbb0>
   11566:	9922      	ldr	r1, [sp, #136]	; 0x88
   11568:	ea49 0901 	orr.w	r9, r9, r1
   1156c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1156e:	ea51 0909 	orrs.w	r9, r1, r9
   11572:	f000 8169 	beq.w	11848 <_dtoa_r+0xbb0>
   11576:	2a00      	cmp	r2, #0
   11578:	f300 81bc 	bgt.w	118f4 <_dtoa_r+0xc5c>
   1157c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1157e:	703b      	strb	r3, [r7, #0]
   11580:	f107 0901 	add.w	r9, r7, #1
   11584:	4297      	cmp	r7, r2
   11586:	46cb      	mov	fp, r9
   11588:	f000 81ba 	beq.w	11900 <_dtoa_r+0xc68>
   1158c:	4629      	mov	r1, r5
   1158e:	2300      	movs	r3, #0
   11590:	220a      	movs	r2, #10
   11592:	4620      	mov	r0, r4
   11594:	f7fc ff2e 	bl	e3f4 <__multadd>
   11598:	4546      	cmp	r6, r8
   1159a:	4605      	mov	r5, r0
   1159c:	4631      	mov	r1, r6
   1159e:	f04f 0300 	mov.w	r3, #0
   115a2:	f04f 020a 	mov.w	r2, #10
   115a6:	4620      	mov	r0, r4
   115a8:	d012      	beq.n	115d0 <_dtoa_r+0x938>
   115aa:	f7fc ff23 	bl	e3f4 <__multadd>
   115ae:	4641      	mov	r1, r8
   115b0:	4606      	mov	r6, r0
   115b2:	2300      	movs	r3, #0
   115b4:	220a      	movs	r2, #10
   115b6:	4620      	mov	r0, r4
   115b8:	f7fc ff1c 	bl	e3f4 <__multadd>
   115bc:	464f      	mov	r7, r9
   115be:	4680      	mov	r8, r0
   115c0:	e7a7      	b.n	11512 <_dtoa_r+0x87a>
   115c2:	4620      	mov	r0, r4
   115c4:	9304      	str	r3, [sp, #16]
   115c6:	f7fc ff0b 	bl	e3e0 <_Bfree>
   115ca:	9b04      	ldr	r3, [sp, #16]
   115cc:	2201      	movs	r2, #1
   115ce:	e7c6      	b.n	1155e <_dtoa_r+0x8c6>
   115d0:	f7fc ff10 	bl	e3f4 <__multadd>
   115d4:	464f      	mov	r7, r9
   115d6:	4606      	mov	r6, r0
   115d8:	4680      	mov	r8, r0
   115da:	e79a      	b.n	11512 <_dtoa_r+0x87a>
   115dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   115de:	2b02      	cmp	r3, #2
   115e0:	dc79      	bgt.n	116d6 <_dtoa_r+0xa3e>
   115e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   115e4:	2b00      	cmp	r3, #0
   115e6:	d180      	bne.n	114ea <_dtoa_r+0x852>
   115e8:	9b07      	ldr	r3, [sp, #28]
   115ea:	4651      	mov	r1, sl
   115ec:	3301      	adds	r3, #1
   115ee:	4628      	mov	r0, r5
   115f0:	9307      	str	r3, [sp, #28]
   115f2:	f7ff fabd 	bl	10b70 <quorem>
   115f6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   115fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
   115fe:	f80b 3b01 	strb.w	r3, [fp], #1
   11602:	2700      	movs	r7, #0
   11604:	e6d0      	b.n	113a8 <_dtoa_r+0x710>
   11606:	4651      	mov	r1, sl
   11608:	4628      	mov	r0, r5
   1160a:	f7fd f947 	bl	e89c <__mcmp>
   1160e:	2800      	cmp	r0, #0
   11610:	f6bf ae9d 	bge.w	1134e <_dtoa_r+0x6b6>
   11614:	4629      	mov	r1, r5
   11616:	2300      	movs	r3, #0
   11618:	220a      	movs	r2, #10
   1161a:	4620      	mov	r0, r4
   1161c:	f7fc feea 	bl	e3f4 <__multadd>
   11620:	9b07      	ldr	r3, [sp, #28]
   11622:	f103 38ff 	add.w	r8, r3, #4294967295
   11626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11628:	4605      	mov	r5, r0
   1162a:	2b00      	cmp	r3, #0
   1162c:	f47f af50 	bne.w	114d0 <_dtoa_r+0x838>
   11630:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11632:	2b00      	cmp	r3, #0
   11634:	f340 8243 	ble.w	11abe <_dtoa_r+0xe26>
   11638:	9308      	str	r3, [sp, #32]
   1163a:	e693      	b.n	11364 <_dtoa_r+0x6cc>
   1163c:	4bb6      	ldr	r3, [pc, #728]	; (11918 <_dtoa_r+0xc80>)
   1163e:	9303      	str	r3, [sp, #12]
   11640:	3303      	adds	r3, #3
   11642:	e408      	b.n	10e56 <_dtoa_r+0x1be>
   11644:	201c      	movs	r0, #28
   11646:	e719      	b.n	1147c <_dtoa_r+0x7e4>
   11648:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1164c:	2900      	cmp	r1, #0
   1164e:	f47f ae54 	bne.w	112fa <_dtoa_r+0x662>
   11652:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11656:	2b00      	cmp	r3, #0
   11658:	f47f ae4f 	bne.w	112fa <_dtoa_r+0x662>
   1165c:	4baf      	ldr	r3, [pc, #700]	; (1191c <_dtoa_r+0xc84>)
   1165e:	4013      	ands	r3, r2
   11660:	2b00      	cmp	r3, #0
   11662:	f000 820b 	beq.w	11a7c <_dtoa_r+0xde4>
   11666:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11668:	3301      	adds	r3, #1
   1166a:	9309      	str	r3, [sp, #36]	; 0x24
   1166c:	9b06      	ldr	r3, [sp, #24]
   1166e:	3301      	adds	r3, #1
   11670:	9306      	str	r3, [sp, #24]
   11672:	f04f 0901 	mov.w	r9, #1
   11676:	e642      	b.n	112fe <_dtoa_r+0x666>
   11678:	2301      	movs	r3, #1
   1167a:	930c      	str	r3, [sp, #48]	; 0x30
   1167c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1167e:	9a07      	ldr	r2, [sp, #28]
   11680:	4413      	add	r3, r2
   11682:	9312      	str	r3, [sp, #72]	; 0x48
   11684:	3301      	adds	r3, #1
   11686:	2b01      	cmp	r3, #1
   11688:	461f      	mov	r7, r3
   1168a:	9308      	str	r3, [sp, #32]
   1168c:	bfb8      	it	lt
   1168e:	2701      	movlt	r7, #1
   11690:	2100      	movs	r1, #0
   11692:	2f17      	cmp	r7, #23
   11694:	63e1      	str	r1, [r4, #60]	; 0x3c
   11696:	f77f ac2f 	ble.w	10ef8 <_dtoa_r+0x260>
   1169a:	2201      	movs	r2, #1
   1169c:	2304      	movs	r3, #4
   1169e:	005b      	lsls	r3, r3, #1
   116a0:	f103 0014 	add.w	r0, r3, #20
   116a4:	42b8      	cmp	r0, r7
   116a6:	4611      	mov	r1, r2
   116a8:	f102 0201 	add.w	r2, r2, #1
   116ac:	d9f7      	bls.n	1169e <_dtoa_r+0xa06>
   116ae:	63e1      	str	r1, [r4, #60]	; 0x3c
   116b0:	e422      	b.n	10ef8 <_dtoa_r+0x260>
   116b2:	2301      	movs	r3, #1
   116b4:	930c      	str	r3, [sp, #48]	; 0x30
   116b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   116b8:	2b00      	cmp	r3, #0
   116ba:	dd59      	ble.n	11770 <_dtoa_r+0xad8>
   116bc:	9312      	str	r3, [sp, #72]	; 0x48
   116be:	9308      	str	r3, [sp, #32]
   116c0:	461f      	mov	r7, r3
   116c2:	e7e5      	b.n	11690 <_dtoa_r+0x9f8>
   116c4:	2300      	movs	r3, #0
   116c6:	930c      	str	r3, [sp, #48]	; 0x30
   116c8:	e7d8      	b.n	1167c <_dtoa_r+0x9e4>
   116ca:	2300      	movs	r3, #0
   116cc:	930c      	str	r3, [sp, #48]	; 0x30
   116ce:	e7f2      	b.n	116b6 <_dtoa_r+0xa1e>
   116d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   116d2:	e9cd 8307 	strd	r8, r3, [sp, #28]
   116d6:	9b08      	ldr	r3, [sp, #32]
   116d8:	2b00      	cmp	r3, #0
   116da:	f47f ad54 	bne.w	11186 <_dtoa_r+0x4ee>
   116de:	4651      	mov	r1, sl
   116e0:	2205      	movs	r2, #5
   116e2:	4620      	mov	r0, r4
   116e4:	f7fc fe86 	bl	e3f4 <__multadd>
   116e8:	4601      	mov	r1, r0
   116ea:	4682      	mov	sl, r0
   116ec:	4628      	mov	r0, r5
   116ee:	f7fd f8d5 	bl	e89c <__mcmp>
   116f2:	2800      	cmp	r0, #0
   116f4:	f77f ad47 	ble.w	11186 <_dtoa_r+0x4ee>
   116f8:	9b03      	ldr	r3, [sp, #12]
   116fa:	9f07      	ldr	r7, [sp, #28]
   116fc:	2231      	movs	r2, #49	; 0x31
   116fe:	4698      	mov	r8, r3
   11700:	f803 2b01 	strb.w	r2, [r3], #1
   11704:	3701      	adds	r7, #1
   11706:	9303      	str	r3, [sp, #12]
   11708:	4651      	mov	r1, sl
   1170a:	4620      	mov	r0, r4
   1170c:	f7fc fe68 	bl	e3e0 <_Bfree>
   11710:	1c7b      	adds	r3, r7, #1
   11712:	f8dd 900c 	ldr.w	r9, [sp, #12]
   11716:	9307      	str	r3, [sp, #28]
   11718:	f8cd 800c 	str.w	r8, [sp, #12]
   1171c:	2e00      	cmp	r6, #0
   1171e:	f47f ae6e 	bne.w	113fe <_dtoa_r+0x766>
   11722:	e670      	b.n	11406 <_dtoa_r+0x76e>
   11724:	4631      	mov	r1, r6
   11726:	463a      	mov	r2, r7
   11728:	4620      	mov	r0, r4
   1172a:	f7fd f83f 	bl	e7ac <__lshift>
   1172e:	4606      	mov	r6, r0
   11730:	e6de      	b.n	114f0 <_dtoa_r+0x858>
   11732:	eba3 0808 	sub.w	r8, r3, r8
   11736:	e5a6      	b.n	11286 <_dtoa_r+0x5ee>
   11738:	4631      	mov	r1, r6
   1173a:	4642      	mov	r2, r8
   1173c:	4620      	mov	r0, r4
   1173e:	f7fc ffd5 	bl	e6ec <__pow5mult>
   11742:	462a      	mov	r2, r5
   11744:	4601      	mov	r1, r0
   11746:	4606      	mov	r6, r0
   11748:	4620      	mov	r0, r4
   1174a:	f7fc ff21 	bl	e590 <__multiply>
   1174e:	4629      	mov	r1, r5
   11750:	4605      	mov	r5, r0
   11752:	4620      	mov	r0, r4
   11754:	f7fc fe44 	bl	e3e0 <_Bfree>
   11758:	e5bd      	b.n	112d6 <_dtoa_r+0x63e>
   1175a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1175e:	f04f 0a02 	mov.w	sl, #2
   11762:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11766:	f7ff bbf4 	b.w	10f52 <_dtoa_r+0x2ba>
   1176a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   1176e:	e685      	b.n	1147c <_dtoa_r+0x7e4>
   11770:	2301      	movs	r3, #1
   11772:	9323      	str	r3, [sp, #140]	; 0x8c
   11774:	9308      	str	r3, [sp, #32]
   11776:	f7ff bbbb 	b.w	10ef0 <_dtoa_r+0x258>
   1177a:	d103      	bne.n	11784 <_dtoa_r+0xaec>
   1177c:	9b04      	ldr	r3, [sp, #16]
   1177e:	07db      	lsls	r3, r3, #31
   11780:	f53f ae1f 	bmi.w	113c2 <_dtoa_r+0x72a>
   11784:	46d9      	mov	r9, fp
   11786:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1178a:	2b30      	cmp	r3, #48	; 0x30
   1178c:	d0fa      	beq.n	11784 <_dtoa_r+0xaec>
   1178e:	e62a      	b.n	113e6 <_dtoa_r+0x74e>
   11790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11792:	2a00      	cmp	r2, #0
   11794:	f000 812d 	beq.w	119f2 <_dtoa_r+0xd5a>
   11798:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1179c:	9a06      	ldr	r2, [sp, #24]
   1179e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   117a2:	441a      	add	r2, r3
   117a4:	9206      	str	r2, [sp, #24]
   117a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   117a8:	4617      	mov	r7, r2
   117aa:	441a      	add	r2, r3
   117ac:	9209      	str	r2, [sp, #36]	; 0x24
   117ae:	e575      	b.n	1129c <_dtoa_r+0x604>
   117b0:	9b07      	ldr	r3, [sp, #28]
   117b2:	9a03      	ldr	r2, [sp, #12]
   117b4:	3301      	adds	r3, #1
   117b6:	9307      	str	r3, [sp, #28]
   117b8:	2331      	movs	r3, #49	; 0x31
   117ba:	7013      	strb	r3, [r2, #0]
   117bc:	e613      	b.n	113e6 <_dtoa_r+0x74e>
   117be:	f04f 0a00 	mov.w	sl, #0
   117c2:	4656      	mov	r6, sl
   117c4:	e4df      	b.n	11186 <_dtoa_r+0x4ee>
   117c6:	900e      	str	r0, [sp, #56]	; 0x38
   117c8:	e638      	b.n	1143c <_dtoa_r+0x7a4>
   117ca:	f000 813d 	beq.w	11a48 <_dtoa_r+0xdb0>
   117ce:	9a07      	ldr	r2, [sp, #28]
   117d0:	4b53      	ldr	r3, [pc, #332]	; (11920 <_dtoa_r+0xc88>)
   117d2:	4256      	negs	r6, r2
   117d4:	f006 020f 	and.w	r2, r6, #15
   117d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   117dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   117e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   117e4:	f001 fe98 	bl	13518 <__aeabi_dmul>
   117e8:	1136      	asrs	r6, r6, #4
   117ea:	4680      	mov	r8, r0
   117ec:	4689      	mov	r9, r1
   117ee:	f000 8178 	beq.w	11ae2 <_dtoa_r+0xe4a>
   117f2:	4f4c      	ldr	r7, [pc, #304]	; (11924 <_dtoa_r+0xc8c>)
   117f4:	2300      	movs	r3, #0
   117f6:	f04f 0a02 	mov.w	sl, #2
   117fa:	07f2      	lsls	r2, r6, #31
   117fc:	d506      	bpl.n	1180c <_dtoa_r+0xb74>
   117fe:	e9d7 2300 	ldrd	r2, r3, [r7]
   11802:	f001 fe89 	bl	13518 <__aeabi_dmul>
   11806:	f10a 0a01 	add.w	sl, sl, #1
   1180a:	2301      	movs	r3, #1
   1180c:	1076      	asrs	r6, r6, #1
   1180e:	f107 0708 	add.w	r7, r7, #8
   11812:	d1f2      	bne.n	117fa <_dtoa_r+0xb62>
   11814:	2b00      	cmp	r3, #0
   11816:	f43f abbb 	beq.w	10f90 <_dtoa_r+0x2f8>
   1181a:	4680      	mov	r8, r0
   1181c:	4689      	mov	r9, r1
   1181e:	f7ff bbb7 	b.w	10f90 <_dtoa_r+0x2f8>
   11822:	9b04      	ldr	r3, [sp, #16]
   11824:	2b00      	cmp	r3, #0
   11826:	f47f ae42 	bne.w	114ae <_dtoa_r+0x816>
   1182a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1182e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11832:	2b00      	cmp	r3, #0
   11834:	f43f af12 	beq.w	1165c <_dtoa_r+0x9c4>
   11838:	e639      	b.n	114ae <_dtoa_r+0x816>
   1183a:	4629      	mov	r1, r5
   1183c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1183e:	4620      	mov	r0, r4
   11840:	f7fc ff54 	bl	e6ec <__pow5mult>
   11844:	4605      	mov	r5, r0
   11846:	e54b      	b.n	112e0 <_dtoa_r+0x648>
   11848:	2a00      	cmp	r2, #0
   1184a:	dd12      	ble.n	11872 <_dtoa_r+0xbda>
   1184c:	4629      	mov	r1, r5
   1184e:	2201      	movs	r2, #1
   11850:	4620      	mov	r0, r4
   11852:	9304      	str	r3, [sp, #16]
   11854:	f7fc ffaa 	bl	e7ac <__lshift>
   11858:	4651      	mov	r1, sl
   1185a:	4605      	mov	r5, r0
   1185c:	f7fd f81e 	bl	e89c <__mcmp>
   11860:	2800      	cmp	r0, #0
   11862:	9b04      	ldr	r3, [sp, #16]
   11864:	f340 8118 	ble.w	11a98 <_dtoa_r+0xe00>
   11868:	2b39      	cmp	r3, #57	; 0x39
   1186a:	f000 80f9 	beq.w	11a60 <_dtoa_r+0xdc8>
   1186e:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11872:	46b9      	mov	r9, r7
   11874:	f809 3b01 	strb.w	r3, [r9], #1
   11878:	9b07      	ldr	r3, [sp, #28]
   1187a:	3301      	adds	r3, #1
   1187c:	4637      	mov	r7, r6
   1187e:	9307      	str	r3, [sp, #28]
   11880:	4646      	mov	r6, r8
   11882:	e5b0      	b.n	113e6 <_dtoa_r+0x74e>
   11884:	9509      	str	r5, [sp, #36]	; 0x24
   11886:	9c06      	ldr	r4, [sp, #24]
   11888:	9d04      	ldr	r5, [sp, #16]
   1188a:	4602      	mov	r2, r0
   1188c:	460b      	mov	r3, r1
   1188e:	f7fa fe5f 	bl	c550 <__adddf3>
   11892:	4652      	mov	r2, sl
   11894:	465b      	mov	r3, fp
   11896:	4680      	mov	r8, r0
   11898:	4689      	mov	r9, r1
   1189a:	f7fb f88d 	bl	c9b8 <__aeabi_dcmpgt>
   1189e:	b960      	cbnz	r0, 118ba <_dtoa_r+0xc22>
   118a0:	4652      	mov	r2, sl
   118a2:	465b      	mov	r3, fp
   118a4:	4640      	mov	r0, r8
   118a6:	4649      	mov	r1, r9
   118a8:	f7fb f85e 	bl	c968 <__aeabi_dcmpeq>
   118ac:	2800      	cmp	r0, #0
   118ae:	f43f acce 	beq.w	1124e <_dtoa_r+0x5b6>
   118b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   118b4:	07d9      	lsls	r1, r3, #31
   118b6:	f57f acca 	bpl.w	1124e <_dtoa_r+0x5b6>
   118ba:	9a03      	ldr	r2, [sp, #12]
   118bc:	e404      	b.n	110c8 <_dtoa_r+0x430>
   118be:	6871      	ldr	r1, [r6, #4]
   118c0:	4620      	mov	r0, r4
   118c2:	f7fc fd67 	bl	e394 <_Balloc>
   118c6:	4607      	mov	r7, r0
   118c8:	2800      	cmp	r0, #0
   118ca:	f000 810e 	beq.w	11aea <_dtoa_r+0xe52>
   118ce:	6933      	ldr	r3, [r6, #16]
   118d0:	3302      	adds	r3, #2
   118d2:	009a      	lsls	r2, r3, #2
   118d4:	f106 010c 	add.w	r1, r6, #12
   118d8:	300c      	adds	r0, #12
   118da:	f7f8 f877 	bl	99cc <memcpy>
   118de:	4639      	mov	r1, r7
   118e0:	2201      	movs	r2, #1
   118e2:	4620      	mov	r0, r4
   118e4:	f7fc ff62 	bl	e7ac <__lshift>
   118e8:	4680      	mov	r8, r0
   118ea:	e606      	b.n	114fa <_dtoa_r+0x862>
   118ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   118f0:	1a9f      	subs	r7, r3, r2
   118f2:	e4d3      	b.n	1129c <_dtoa_r+0x604>
   118f4:	2b39      	cmp	r3, #57	; 0x39
   118f6:	f000 80b3 	beq.w	11a60 <_dtoa_r+0xdc8>
   118fa:	46b9      	mov	r9, r7
   118fc:	3301      	adds	r3, #1
   118fe:	e7b9      	b.n	11874 <_dtoa_r+0xbdc>
   11900:	9a07      	ldr	r2, [sp, #28]
   11902:	3201      	adds	r2, #1
   11904:	4637      	mov	r7, r6
   11906:	9207      	str	r2, [sp, #28]
   11908:	4646      	mov	r6, r8
   1190a:	e54d      	b.n	113a8 <_dtoa_r+0x710>
   1190c:	4629      	mov	r1, r5
   1190e:	4620      	mov	r0, r4
   11910:	f7fc feec 	bl	e6ec <__pow5mult>
   11914:	4605      	mov	r5, r0
   11916:	e4e3      	b.n	112e0 <_dtoa_r+0x648>
   11918:	000157c8 	.word	0x000157c8
   1191c:	7ff00000 	.word	0x7ff00000
   11920:	00015650 	.word	0x00015650
   11924:	00015628 	.word	0x00015628
   11928:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1192c:	4981      	ldr	r1, [pc, #516]	; (11b34 <_dtoa_r+0xe9c>)
   1192e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   11932:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11936:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   1193a:	f001 fded 	bl	13518 <__aeabi_dmul>
   1193e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11942:	4649      	mov	r1, r9
   11944:	4640      	mov	r0, r8
   11946:	f001 fff9 	bl	1393c <__aeabi_d2iz>
   1194a:	4606      	mov	r6, r0
   1194c:	f7fa ff4c 	bl	c7e8 <__aeabi_i2d>
   11950:	460b      	mov	r3, r1
   11952:	4602      	mov	r2, r0
   11954:	4649      	mov	r1, r9
   11956:	4640      	mov	r0, r8
   11958:	f7fa fdf8 	bl	c54c <__aeabi_dsub>
   1195c:	9f03      	ldr	r7, [sp, #12]
   1195e:	4653      	mov	r3, sl
   11960:	3630      	adds	r6, #48	; 0x30
   11962:	2b01      	cmp	r3, #1
   11964:	f807 6b01 	strb.w	r6, [r7], #1
   11968:	4680      	mov	r8, r0
   1196a:	4689      	mov	r9, r1
   1196c:	f000 80b7 	beq.w	11ade <_dtoa_r+0xe46>
   11970:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   11972:	9b03      	ldr	r3, [sp, #12]
   11974:	441e      	add	r6, r3
   11976:	4b70      	ldr	r3, [pc, #448]	; (11b38 <_dtoa_r+0xea0>)
   11978:	2200      	movs	r2, #0
   1197a:	4640      	mov	r0, r8
   1197c:	4649      	mov	r1, r9
   1197e:	f001 fdcb 	bl	13518 <__aeabi_dmul>
   11982:	4689      	mov	r9, r1
   11984:	4680      	mov	r8, r0
   11986:	f001 ffd9 	bl	1393c <__aeabi_d2iz>
   1198a:	4682      	mov	sl, r0
   1198c:	f7fa ff2c 	bl	c7e8 <__aeabi_i2d>
   11990:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   11994:	4602      	mov	r2, r0
   11996:	460b      	mov	r3, r1
   11998:	4640      	mov	r0, r8
   1199a:	4649      	mov	r1, r9
   1199c:	f7fa fdd6 	bl	c54c <__aeabi_dsub>
   119a0:	f807 ab01 	strb.w	sl, [r7], #1
   119a4:	42be      	cmp	r6, r7
   119a6:	4680      	mov	r8, r0
   119a8:	4689      	mov	r9, r1
   119aa:	d1e4      	bne.n	11976 <_dtoa_r+0xcde>
   119ac:	4b63      	ldr	r3, [pc, #396]	; (11b3c <_dtoa_r+0xea4>)
   119ae:	2200      	movs	r2, #0
   119b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   119b4:	f7fa fdcc 	bl	c550 <__adddf3>
   119b8:	4642      	mov	r2, r8
   119ba:	464b      	mov	r3, r9
   119bc:	f7fa ffde 	bl	c97c <__aeabi_dcmplt>
   119c0:	2800      	cmp	r0, #0
   119c2:	d164      	bne.n	11a8e <_dtoa_r+0xdf6>
   119c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   119c8:	495c      	ldr	r1, [pc, #368]	; (11b3c <_dtoa_r+0xea4>)
   119ca:	2000      	movs	r0, #0
   119cc:	f7fa fdbe 	bl	c54c <__aeabi_dsub>
   119d0:	4642      	mov	r2, r8
   119d2:	464b      	mov	r3, r9
   119d4:	f7fa fff0 	bl	c9b8 <__aeabi_dcmpgt>
   119d8:	2800      	cmp	r0, #0
   119da:	f43f abad 	beq.w	11138 <_dtoa_r+0x4a0>
   119de:	46b1      	mov	r9, r6
   119e0:	3e01      	subs	r6, #1
   119e2:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   119e6:	2b30      	cmp	r3, #48	; 0x30
   119e8:	d0f9      	beq.n	119de <_dtoa_r+0xd46>
   119ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   119ec:	3301      	adds	r3, #1
   119ee:	9307      	str	r3, [sp, #28]
   119f0:	e509      	b.n	11406 <_dtoa_r+0x76e>
   119f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   119f4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   119f8:	e6d0      	b.n	1179c <_dtoa_r+0xb04>
   119fa:	9b08      	ldr	r3, [sp, #32]
   119fc:	2b00      	cmp	r3, #0
   119fe:	f43f ab6f 	beq.w	110e0 <_dtoa_r+0x448>
   11a02:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11a04:	2b00      	cmp	r3, #0
   11a06:	f77f ab97 	ble.w	11138 <_dtoa_r+0x4a0>
   11a0a:	9a07      	ldr	r2, [sp, #28]
   11a0c:	3a01      	subs	r2, #1
   11a0e:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   11a12:	4640      	mov	r0, r8
   11a14:	4b48      	ldr	r3, [pc, #288]	; (11b38 <_dtoa_r+0xea0>)
   11a16:	2200      	movs	r2, #0
   11a18:	4649      	mov	r1, r9
   11a1a:	f001 fd7d 	bl	13518 <__aeabi_dmul>
   11a1e:	4680      	mov	r8, r0
   11a20:	4689      	mov	r9, r1
   11a22:	f10a 0001 	add.w	r0, sl, #1
   11a26:	f7fa fedf 	bl	c7e8 <__aeabi_i2d>
   11a2a:	4642      	mov	r2, r8
   11a2c:	464b      	mov	r3, r9
   11a2e:	f001 fd73 	bl	13518 <__aeabi_dmul>
   11a32:	4b43      	ldr	r3, [pc, #268]	; (11b40 <_dtoa_r+0xea8>)
   11a34:	2200      	movs	r2, #0
   11a36:	f7fa fd8b 	bl	c550 <__adddf3>
   11a3a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   11a3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11a42:	9311      	str	r3, [sp, #68]	; 0x44
   11a44:	f7ff bac7 	b.w	10fd6 <_dtoa_r+0x33e>
   11a48:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   11a4c:	f04f 0a02 	mov.w	sl, #2
   11a50:	f7ff ba9e 	b.w	10f90 <_dtoa_r+0x2f8>
   11a54:	9b07      	ldr	r3, [sp, #28]
   11a56:	3301      	adds	r3, #1
   11a58:	9307      	str	r3, [sp, #28]
   11a5a:	2331      	movs	r3, #49	; 0x31
   11a5c:	f7ff bb3b 	b.w	110d6 <_dtoa_r+0x43e>
   11a60:	9b07      	ldr	r3, [sp, #28]
   11a62:	46bb      	mov	fp, r7
   11a64:	3301      	adds	r3, #1
   11a66:	9307      	str	r3, [sp, #28]
   11a68:	2339      	movs	r3, #57	; 0x39
   11a6a:	4637      	mov	r7, r6
   11a6c:	f80b 3b01 	strb.w	r3, [fp], #1
   11a70:	4646      	mov	r6, r8
   11a72:	e4a8      	b.n	113c6 <_dtoa_r+0x72e>
   11a74:	f04f 0a00 	mov.w	sl, #0
   11a78:	4656      	mov	r6, sl
   11a7a:	e63d      	b.n	116f8 <_dtoa_r+0xa60>
   11a7c:	4699      	mov	r9, r3
   11a7e:	e43e      	b.n	112fe <_dtoa_r+0x666>
   11a80:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11a82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11a84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11a86:	3301      	adds	r3, #1
   11a88:	9307      	str	r3, [sp, #28]
   11a8a:	46b1      	mov	r9, r6
   11a8c:	e4bb      	b.n	11406 <_dtoa_r+0x76e>
   11a8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11a90:	9a03      	ldr	r2, [sp, #12]
   11a92:	9307      	str	r3, [sp, #28]
   11a94:	f7ff bb18 	b.w	110c8 <_dtoa_r+0x430>
   11a98:	f47f aeeb 	bne.w	11872 <_dtoa_r+0xbda>
   11a9c:	07da      	lsls	r2, r3, #31
   11a9e:	f57f aee8 	bpl.w	11872 <_dtoa_r+0xbda>
   11aa2:	e6e1      	b.n	11868 <_dtoa_r+0xbd0>
   11aa4:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   11aa8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11aaa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11aac:	f7ff bb44 	b.w	11138 <_dtoa_r+0x4a0>
   11ab0:	2b39      	cmp	r3, #57	; 0x39
   11ab2:	d0d5      	beq.n	11a60 <_dtoa_r+0xdc8>
   11ab4:	f1b9 0f00 	cmp.w	r9, #0
   11ab8:	f73f aed9 	bgt.w	1186e <_dtoa_r+0xbd6>
   11abc:	e6d9      	b.n	11872 <_dtoa_r+0xbda>
   11abe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11ac0:	2b02      	cmp	r3, #2
   11ac2:	f73f ae05 	bgt.w	116d0 <_dtoa_r+0xa38>
   11ac6:	f8cd 801c 	str.w	r8, [sp, #28]
   11aca:	e58d      	b.n	115e8 <_dtoa_r+0x950>
   11acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11ace:	2b02      	cmp	r3, #2
   11ad0:	f73f adfe 	bgt.w	116d0 <_dtoa_r+0xa38>
   11ad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11ad6:	f8cd 801c 	str.w	r8, [sp, #28]
   11ada:	9308      	str	r3, [sp, #32]
   11adc:	e505      	b.n	114ea <_dtoa_r+0x852>
   11ade:	463e      	mov	r6, r7
   11ae0:	e764      	b.n	119ac <_dtoa_r+0xd14>
   11ae2:	f04f 0a02 	mov.w	sl, #2
   11ae6:	f7ff ba53 	b.w	10f90 <_dtoa_r+0x2f8>
   11aea:	4b16      	ldr	r3, [pc, #88]	; (11b44 <_dtoa_r+0xeac>)
   11aec:	4816      	ldr	r0, [pc, #88]	; (11b48 <_dtoa_r+0xeb0>)
   11aee:	463a      	mov	r2, r7
   11af0:	f240 21ef 	movw	r1, #751	; 0x2ef
   11af4:	f7fe ffe0 	bl	10ab8 <__assert_func>
   11af8:	2600      	movs	r6, #0
   11afa:	63e6      	str	r6, [r4, #60]	; 0x3c
   11afc:	4631      	mov	r1, r6
   11afe:	4620      	mov	r0, r4
   11b00:	f7fc fc48 	bl	e394 <_Balloc>
   11b04:	9003      	str	r0, [sp, #12]
   11b06:	b950      	cbnz	r0, 11b1e <_dtoa_r+0xe86>
   11b08:	4b0e      	ldr	r3, [pc, #56]	; (11b44 <_dtoa_r+0xeac>)
   11b0a:	480f      	ldr	r0, [pc, #60]	; (11b48 <_dtoa_r+0xeb0>)
   11b0c:	2200      	movs	r2, #0
   11b0e:	f240 11af 	movw	r1, #431	; 0x1af
   11b12:	f7fe ffd1 	bl	10ab8 <__assert_func>
   11b16:	4b0d      	ldr	r3, [pc, #52]	; (11b4c <_dtoa_r+0xeb4>)
   11b18:	9303      	str	r3, [sp, #12]
   11b1a:	f7ff b8f9 	b.w	10d10 <_dtoa_r+0x78>
   11b1e:	9b03      	ldr	r3, [sp, #12]
   11b20:	63a3      	str	r3, [r4, #56]	; 0x38
   11b22:	f04f 33ff 	mov.w	r3, #4294967295
   11b26:	9312      	str	r3, [sp, #72]	; 0x48
   11b28:	9308      	str	r3, [sp, #32]
   11b2a:	2301      	movs	r3, #1
   11b2c:	9623      	str	r6, [sp, #140]	; 0x8c
   11b2e:	930c      	str	r3, [sp, #48]	; 0x30
   11b30:	f7ff bb02 	b.w	11138 <_dtoa_r+0x4a0>
   11b34:	00015650 	.word	0x00015650
   11b38:	40240000 	.word	0x40240000
   11b3c:	3fe00000 	.word	0x3fe00000
   11b40:	401c0000 	.word	0x401c0000
   11b44:	000155b8 	.word	0x000155b8
   11b48:	000157cc 	.word	0x000157cc
   11b4c:	000157bc 	.word	0x000157bc

00011b50 <_wcrtomb_r>:
   11b50:	b570      	push	{r4, r5, r6, lr}
   11b52:	4605      	mov	r5, r0
   11b54:	b084      	sub	sp, #16
   11b56:	b15b      	cbz	r3, 11b70 <_wcrtomb_r+0x20>
   11b58:	461c      	mov	r4, r3
   11b5a:	b169      	cbz	r1, 11b78 <_wcrtomb_r+0x28>
   11b5c:	4b0e      	ldr	r3, [pc, #56]	; (11b98 <_wcrtomb_r+0x48>)
   11b5e:	4628      	mov	r0, r5
   11b60:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11b64:	4623      	mov	r3, r4
   11b66:	47b0      	blx	r6
   11b68:	1c43      	adds	r3, r0, #1
   11b6a:	d00f      	beq.n	11b8c <_wcrtomb_r+0x3c>
   11b6c:	b004      	add	sp, #16
   11b6e:	bd70      	pop	{r4, r5, r6, pc}
   11b70:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11b74:	2900      	cmp	r1, #0
   11b76:	d1f1      	bne.n	11b5c <_wcrtomb_r+0xc>
   11b78:	4a07      	ldr	r2, [pc, #28]	; (11b98 <_wcrtomb_r+0x48>)
   11b7a:	4623      	mov	r3, r4
   11b7c:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   11b80:	4628      	mov	r0, r5
   11b82:	460a      	mov	r2, r1
   11b84:	a901      	add	r1, sp, #4
   11b86:	47b0      	blx	r6
   11b88:	1c43      	adds	r3, r0, #1
   11b8a:	d1ef      	bne.n	11b6c <_wcrtomb_r+0x1c>
   11b8c:	2200      	movs	r2, #0
   11b8e:	238a      	movs	r3, #138	; 0x8a
   11b90:	6022      	str	r2, [r4, #0]
   11b92:	602b      	str	r3, [r5, #0]
   11b94:	b004      	add	sp, #16
   11b96:	bd70      	pop	{r4, r5, r6, pc}
   11b98:	1fff8ed4 	.word	0x1fff8ed4

00011b9c <_wcsrtombs_r>:
   11b9c:	b500      	push	{lr}
   11b9e:	b083      	sub	sp, #12
   11ba0:	f8dd c010 	ldr.w	ip, [sp, #16]
   11ba4:	e9cd 3c00 	strd	r3, ip, [sp]
   11ba8:	f04f 33ff 	mov.w	r3, #4294967295
   11bac:	f001 fbb6 	bl	1331c <_wcsnrtombs_r>
   11bb0:	b003      	add	sp, #12
   11bb2:	f85d fb04 	ldr.w	pc, [sp], #4
   11bb6:	bf00      	nop

00011bb8 <fiprintf>:
   11bb8:	b40e      	push	{r1, r2, r3}
   11bba:	b510      	push	{r4, lr}
   11bbc:	b083      	sub	sp, #12
   11bbe:	ab05      	add	r3, sp, #20
   11bc0:	4c06      	ldr	r4, [pc, #24]	; (11bdc <fiprintf+0x24>)
   11bc2:	f853 2b04 	ldr.w	r2, [r3], #4
   11bc6:	9301      	str	r3, [sp, #4]
   11bc8:	4601      	mov	r1, r0
   11bca:	6820      	ldr	r0, [r4, #0]
   11bcc:	f000 f8c4 	bl	11d58 <_vfiprintf_r>
   11bd0:	b003      	add	sp, #12
   11bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11bd6:	b003      	add	sp, #12
   11bd8:	4770      	bx	lr
   11bda:	bf00      	nop
   11bdc:	1fff9160 	.word	0x1fff9160

00011be0 <__ssprint_r>:
   11be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11be4:	6893      	ldr	r3, [r2, #8]
   11be6:	6817      	ldr	r7, [r2, #0]
   11be8:	b083      	sub	sp, #12
   11bea:	4692      	mov	sl, r2
   11bec:	2b00      	cmp	r3, #0
   11bee:	d070      	beq.n	11cd2 <__ssprint_r+0xf2>
   11bf0:	4681      	mov	r9, r0
   11bf2:	688a      	ldr	r2, [r1, #8]
   11bf4:	6808      	ldr	r0, [r1, #0]
   11bf6:	460c      	mov	r4, r1
   11bf8:	3708      	adds	r7, #8
   11bfa:	e043      	b.n	11c84 <__ssprint_r+0xa4>
   11bfc:	89a3      	ldrh	r3, [r4, #12]
   11bfe:	f413 6f90 	tst.w	r3, #1152	; 0x480
   11c02:	d02e      	beq.n	11c62 <__ssprint_r+0x82>
   11c04:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   11c08:	eba0 0801 	sub.w	r8, r0, r1
   11c0c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   11c10:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   11c14:	f108 0001 	add.w	r0, r8, #1
   11c18:	1076      	asrs	r6, r6, #1
   11c1a:	4428      	add	r0, r5
   11c1c:	42b0      	cmp	r0, r6
   11c1e:	4632      	mov	r2, r6
   11c20:	bf84      	itt	hi
   11c22:	4606      	movhi	r6, r0
   11c24:	4632      	movhi	r2, r6
   11c26:	055b      	lsls	r3, r3, #21
   11c28:	d537      	bpl.n	11c9a <__ssprint_r+0xba>
   11c2a:	4611      	mov	r1, r2
   11c2c:	4648      	mov	r0, r9
   11c2e:	f7fb fa25 	bl	d07c <_malloc_r>
   11c32:	9001      	str	r0, [sp, #4]
   11c34:	2800      	cmp	r0, #0
   11c36:	d03a      	beq.n	11cae <__ssprint_r+0xce>
   11c38:	4642      	mov	r2, r8
   11c3a:	6921      	ldr	r1, [r4, #16]
   11c3c:	f7f7 fec6 	bl	99cc <memcpy>
   11c40:	89a2      	ldrh	r2, [r4, #12]
   11c42:	9b01      	ldr	r3, [sp, #4]
   11c44:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11c48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11c4c:	81a2      	strh	r2, [r4, #12]
   11c4e:	eba6 0208 	sub.w	r2, r6, r8
   11c52:	eb03 0008 	add.w	r0, r3, r8
   11c56:	6166      	str	r6, [r4, #20]
   11c58:	60a2      	str	r2, [r4, #8]
   11c5a:	6123      	str	r3, [r4, #16]
   11c5c:	6020      	str	r0, [r4, #0]
   11c5e:	462e      	mov	r6, r5
   11c60:	46a8      	mov	r8, r5
   11c62:	4642      	mov	r2, r8
   11c64:	4659      	mov	r1, fp
   11c66:	f7fb fffb 	bl	dc60 <memmove>
   11c6a:	f8da 3008 	ldr.w	r3, [sl, #8]
   11c6e:	68a2      	ldr	r2, [r4, #8]
   11c70:	6820      	ldr	r0, [r4, #0]
   11c72:	1b92      	subs	r2, r2, r6
   11c74:	4440      	add	r0, r8
   11c76:	1b5b      	subs	r3, r3, r5
   11c78:	60a2      	str	r2, [r4, #8]
   11c7a:	6020      	str	r0, [r4, #0]
   11c7c:	f8ca 3008 	str.w	r3, [sl, #8]
   11c80:	b33b      	cbz	r3, 11cd2 <__ssprint_r+0xf2>
   11c82:	3708      	adds	r7, #8
   11c84:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   11c88:	2d00      	cmp	r5, #0
   11c8a:	d0fa      	beq.n	11c82 <__ssprint_r+0xa2>
   11c8c:	42aa      	cmp	r2, r5
   11c8e:	4616      	mov	r6, r2
   11c90:	4690      	mov	r8, r2
   11c92:	d9b3      	bls.n	11bfc <__ssprint_r+0x1c>
   11c94:	462e      	mov	r6, r5
   11c96:	46a8      	mov	r8, r5
   11c98:	e7e3      	b.n	11c62 <__ssprint_r+0x82>
   11c9a:	4648      	mov	r0, r9
   11c9c:	f7fb fcaa 	bl	d5f4 <_realloc_r>
   11ca0:	4603      	mov	r3, r0
   11ca2:	2800      	cmp	r0, #0
   11ca4:	d1d3      	bne.n	11c4e <__ssprint_r+0x6e>
   11ca6:	6921      	ldr	r1, [r4, #16]
   11ca8:	4648      	mov	r0, r9
   11caa:	f7fc fa57 	bl	e15c <_free_r>
   11cae:	89a3      	ldrh	r3, [r4, #12]
   11cb0:	220c      	movs	r2, #12
   11cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11cb6:	f8c9 2000 	str.w	r2, [r9]
   11cba:	f04f 30ff 	mov.w	r0, #4294967295
   11cbe:	81a3      	strh	r3, [r4, #12]
   11cc0:	2200      	movs	r2, #0
   11cc2:	2300      	movs	r3, #0
   11cc4:	f8ca 2008 	str.w	r2, [sl, #8]
   11cc8:	f8ca 3004 	str.w	r3, [sl, #4]
   11ccc:	b003      	add	sp, #12
   11cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cd2:	2000      	movs	r0, #0
   11cd4:	2300      	movs	r3, #0
   11cd6:	f8ca 3004 	str.w	r3, [sl, #4]
   11cda:	b003      	add	sp, #12
   11cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011ce0 <__sprint_r.part.0>:
   11ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ce4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11ce6:	049c      	lsls	r4, r3, #18
   11ce8:	4690      	mov	r8, r2
   11cea:	d52d      	bpl.n	11d48 <__sprint_r.part.0+0x68>
   11cec:	6893      	ldr	r3, [r2, #8]
   11cee:	6812      	ldr	r2, [r2, #0]
   11cf0:	b343      	cbz	r3, 11d44 <__sprint_r.part.0+0x64>
   11cf2:	468b      	mov	fp, r1
   11cf4:	4606      	mov	r6, r0
   11cf6:	f102 0908 	add.w	r9, r2, #8
   11cfa:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   11cfe:	ea5f 079a 	movs.w	r7, sl, lsr #2
   11d02:	d015      	beq.n	11d30 <__sprint_r.part.0+0x50>
   11d04:	3d04      	subs	r5, #4
   11d06:	2400      	movs	r4, #0
   11d08:	e001      	b.n	11d0e <__sprint_r.part.0+0x2e>
   11d0a:	42a7      	cmp	r7, r4
   11d0c:	d00e      	beq.n	11d2c <__sprint_r.part.0+0x4c>
   11d0e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   11d12:	465a      	mov	r2, fp
   11d14:	4630      	mov	r0, r6
   11d16:	f001 fa51 	bl	131bc <_fputwc_r>
   11d1a:	1c43      	adds	r3, r0, #1
   11d1c:	f104 0401 	add.w	r4, r4, #1
   11d20:	d1f3      	bne.n	11d0a <__sprint_r.part.0+0x2a>
   11d22:	2300      	movs	r3, #0
   11d24:	e9c8 3301 	strd	r3, r3, [r8, #4]
   11d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11d30:	f02a 0a03 	bic.w	sl, sl, #3
   11d34:	eba3 030a 	sub.w	r3, r3, sl
   11d38:	f8c8 3008 	str.w	r3, [r8, #8]
   11d3c:	f109 0908 	add.w	r9, r9, #8
   11d40:	2b00      	cmp	r3, #0
   11d42:	d1da      	bne.n	11cfa <__sprint_r.part.0+0x1a>
   11d44:	2000      	movs	r0, #0
   11d46:	e7ec      	b.n	11d22 <__sprint_r.part.0+0x42>
   11d48:	f001 f808 	bl	12d5c <__sfvwrite_r>
   11d4c:	2300      	movs	r3, #0
   11d4e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   11d52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d56:	bf00      	nop

00011d58 <_vfiprintf_r>:
   11d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d5c:	b0c5      	sub	sp, #276	; 0x114
   11d5e:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   11d62:	4683      	mov	fp, r0
   11d64:	9103      	str	r1, [sp, #12]
   11d66:	4616      	mov	r6, r2
   11d68:	2100      	movs	r1, #0
   11d6a:	2208      	movs	r2, #8
   11d6c:	4650      	mov	r0, sl
   11d6e:	461c      	mov	r4, r3
   11d70:	9307      	str	r3, [sp, #28]
   11d72:	f7fb fff1 	bl	dd58 <memset>
   11d76:	f1bb 0f00 	cmp.w	fp, #0
   11d7a:	d004      	beq.n	11d86 <_vfiprintf_r+0x2e>
   11d7c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   11d80:	2b00      	cmp	r3, #0
   11d82:	f000 86a1 	beq.w	12ac8 <_vfiprintf_r+0xd70>
   11d86:	9a03      	ldr	r2, [sp, #12]
   11d88:	6e53      	ldr	r3, [r2, #100]	; 0x64
   11d8a:	07db      	lsls	r3, r3, #31
   11d8c:	f140 851c 	bpl.w	127c8 <_vfiprintf_r+0xa70>
   11d90:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   11d94:	b28a      	uxth	r2, r1
   11d96:	0495      	lsls	r5, r2, #18
   11d98:	d409      	bmi.n	11dae <_vfiprintf_r+0x56>
   11d9a:	9b03      	ldr	r3, [sp, #12]
   11d9c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   11da0:	8199      	strh	r1, [r3, #12]
   11da2:	b28a      	uxth	r2, r1
   11da4:	4619      	mov	r1, r3
   11da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11dac:	664b      	str	r3, [r1, #100]	; 0x64
   11dae:	0710      	lsls	r0, r2, #28
   11db0:	f140 8104 	bpl.w	11fbc <_vfiprintf_r+0x264>
   11db4:	9b03      	ldr	r3, [sp, #12]
   11db6:	691b      	ldr	r3, [r3, #16]
   11db8:	2b00      	cmp	r3, #0
   11dba:	f000 80ff 	beq.w	11fbc <_vfiprintf_r+0x264>
   11dbe:	f002 031a 	and.w	r3, r2, #26
   11dc2:	2b0a      	cmp	r3, #10
   11dc4:	f000 8108 	beq.w	11fd8 <_vfiprintf_r+0x280>
   11dc8:	2300      	movs	r3, #0
   11dca:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   11dce:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   11dd2:	aa1b      	add	r2, sp, #108	; 0x6c
   11dd4:	930b      	str	r3, [sp, #44]	; 0x2c
   11dd6:	9218      	str	r2, [sp, #96]	; 0x60
   11dd8:	4691      	mov	r9, r2
   11dda:	930c      	str	r3, [sp, #48]	; 0x30
   11ddc:	9305      	str	r3, [sp, #20]
   11dde:	46b0      	mov	r8, r6
   11de0:	4644      	mov	r4, r8
   11de2:	4ba6      	ldr	r3, [pc, #664]	; (1207c <_vfiprintf_r+0x324>)
   11de4:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   11de8:	f7fc f83a 	bl	de60 <__locale_mb_cur_max>
   11dec:	4622      	mov	r2, r4
   11dee:	4603      	mov	r3, r0
   11df0:	a912      	add	r1, sp, #72	; 0x48
   11df2:	f8cd a000 	str.w	sl, [sp]
   11df6:	4658      	mov	r0, fp
   11df8:	47a8      	blx	r5
   11dfa:	2800      	cmp	r0, #0
   11dfc:	f000 8140 	beq.w	12080 <_vfiprintf_r+0x328>
   11e00:	f2c0 8133 	blt.w	1206a <_vfiprintf_r+0x312>
   11e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11e06:	2a25      	cmp	r2, #37	; 0x25
   11e08:	4603      	mov	r3, r0
   11e0a:	d001      	beq.n	11e10 <_vfiprintf_r+0xb8>
   11e0c:	441c      	add	r4, r3
   11e0e:	e7e8      	b.n	11de2 <_vfiprintf_r+0x8a>
   11e10:	ebb4 0608 	subs.w	r6, r4, r8
   11e14:	4605      	mov	r5, r0
   11e16:	f040 8137 	bne.w	12088 <_vfiprintf_r+0x330>
   11e1a:	2300      	movs	r3, #0
   11e1c:	7861      	ldrb	r1, [r4, #1]
   11e1e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11e22:	f104 0801 	add.w	r8, r4, #1
   11e26:	9306      	str	r3, [sp, #24]
   11e28:	f04f 37ff 	mov.w	r7, #4294967295
   11e2c:	461e      	mov	r6, r3
   11e2e:	242b      	movs	r4, #43	; 0x2b
   11e30:	f108 0801 	add.w	r8, r8, #1
   11e34:	f1a1 0320 	sub.w	r3, r1, #32
   11e38:	2b5a      	cmp	r3, #90	; 0x5a
   11e3a:	f200 8165 	bhi.w	12108 <_vfiprintf_r+0x3b0>
   11e3e:	e8df f013 	tbh	[pc, r3, lsl #1]
   11e42:	029f      	.short	0x029f
   11e44:	01630163 	.word	0x01630163
   11e48:	0163029a 	.word	0x0163029a
   11e4c:	01630163 	.word	0x01630163
   11e50:	0163006a 	.word	0x0163006a
   11e54:	02670163 	.word	0x02670163
   11e58:	01630277 	.word	0x01630277
   11e5c:	02810272 	.word	0x02810272
   11e60:	027c0163 	.word	0x027c0163
   11e64:	005b005b 	.word	0x005b005b
   11e68:	005b005b 	.word	0x005b005b
   11e6c:	005b005b 	.word	0x005b005b
   11e70:	005b005b 	.word	0x005b005b
   11e74:	0163005b 	.word	0x0163005b
   11e78:	01630163 	.word	0x01630163
   11e7c:	01630163 	.word	0x01630163
   11e80:	01630163 	.word	0x01630163
   11e84:	01630163 	.word	0x01630163
   11e88:	00840246 	.word	0x00840246
   11e8c:	01630163 	.word	0x01630163
   11e90:	01630163 	.word	0x01630163
   11e94:	01630163 	.word	0x01630163
   11e98:	01630163 	.word	0x01630163
   11e9c:	01630163 	.word	0x01630163
   11ea0:	016300e2 	.word	0x016300e2
   11ea4:	01630163 	.word	0x01630163
   11ea8:	0163021d 	.word	0x0163021d
   11eac:	016302c4 	.word	0x016302c4
   11eb0:	05940163 	.word	0x05940163
   11eb4:	01630163 	.word	0x01630163
   11eb8:	01630163 	.word	0x01630163
   11ebc:	01630163 	.word	0x01630163
   11ec0:	01630163 	.word	0x01630163
   11ec4:	01630163 	.word	0x01630163
   11ec8:	00860246 	.word	0x00860246
   11ecc:	01630163 	.word	0x01630163
   11ed0:	02b70163 	.word	0x02b70163
   11ed4:	007f0086 	.word	0x007f0086
   11ed8:	02aa0163 	.word	0x02aa0163
   11edc:	02e70163 	.word	0x02e70163
   11ee0:	02d700e4 	.word	0x02d700e4
   11ee4:	0163007f 	.word	0x0163007f
   11ee8:	007c021d 	.word	0x007c021d
   11eec:	01630572 	.word	0x01630572
   11ef0:	05740163 	.word	0x05740163
   11ef4:	007c0163 	.word	0x007c0163
   11ef8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   11efc:	2200      	movs	r2, #0
   11efe:	f818 1b01 	ldrb.w	r1, [r8], #1
   11f02:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   11f06:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   11f0a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   11f0e:	2b09      	cmp	r3, #9
   11f10:	d9f5      	bls.n	11efe <_vfiprintf_r+0x1a6>
   11f12:	9206      	str	r2, [sp, #24]
   11f14:	e78e      	b.n	11e34 <_vfiprintf_r+0xdc>
   11f16:	4658      	mov	r0, fp
   11f18:	f7fe fce8 	bl	108ec <_localeconv_r>
   11f1c:	6843      	ldr	r3, [r0, #4]
   11f1e:	930d      	str	r3, [sp, #52]	; 0x34
   11f20:	4618      	mov	r0, r3
   11f22:	f7fc f84d 	bl	dfc0 <strlen>
   11f26:	900e      	str	r0, [sp, #56]	; 0x38
   11f28:	4605      	mov	r5, r0
   11f2a:	4658      	mov	r0, fp
   11f2c:	f7fe fcde 	bl	108ec <_localeconv_r>
   11f30:	6883      	ldr	r3, [r0, #8]
   11f32:	930c      	str	r3, [sp, #48]	; 0x30
   11f34:	2d00      	cmp	r5, #0
   11f36:	f040 84df 	bne.w	128f8 <_vfiprintf_r+0xba0>
   11f3a:	f898 1000 	ldrb.w	r1, [r8]
   11f3e:	e777      	b.n	11e30 <_vfiprintf_r+0xd8>
   11f40:	f898 1000 	ldrb.w	r1, [r8]
   11f44:	f046 0620 	orr.w	r6, r6, #32
   11f48:	e772      	b.n	11e30 <_vfiprintf_r+0xd8>
   11f4a:	f046 0610 	orr.w	r6, r6, #16
   11f4e:	06b4      	lsls	r4, r6, #26
   11f50:	f140 8178 	bpl.w	12244 <_vfiprintf_r+0x4ec>
   11f54:	9b07      	ldr	r3, [sp, #28]
   11f56:	3307      	adds	r3, #7
   11f58:	f023 0307 	bic.w	r3, r3, #7
   11f5c:	461a      	mov	r2, r3
   11f5e:	6859      	ldr	r1, [r3, #4]
   11f60:	f852 3b08 	ldr.w	r3, [r2], #8
   11f64:	9207      	str	r2, [sp, #28]
   11f66:	460a      	mov	r2, r1
   11f68:	2900      	cmp	r1, #0
   11f6a:	f2c0 847a 	blt.w	12862 <_vfiprintf_r+0xb0a>
   11f6e:	1c79      	adds	r1, r7, #1
   11f70:	f000 85a7 	beq.w	12ac2 <_vfiprintf_r+0xd6a>
   11f74:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   11f78:	9102      	str	r1, [sp, #8]
   11f7a:	ea53 0102 	orrs.w	r1, r3, r2
   11f7e:	f000 8448 	beq.w	12812 <_vfiprintf_r+0xaba>
   11f82:	2b0a      	cmp	r3, #10
   11f84:	f172 0100 	sbcs.w	r1, r2, #0
   11f88:	f080 8549 	bcs.w	12a1e <_vfiprintf_r+0xcc6>
   11f8c:	3330      	adds	r3, #48	; 0x30
   11f8e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   11f92:	9e02      	ldr	r6, [sp, #8]
   11f94:	2301      	movs	r3, #1
   11f96:	9304      	str	r3, [sp, #16]
   11f98:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   11f9c:	9b04      	ldr	r3, [sp, #16]
   11f9e:	42bb      	cmp	r3, r7
   11fa0:	bfb8      	it	lt
   11fa2:	463b      	movlt	r3, r7
   11fa4:	9302      	str	r3, [sp, #8]
   11fa6:	2300      	movs	r3, #0
   11fa8:	9308      	str	r3, [sp, #32]
   11faa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   11fae:	2b00      	cmp	r3, #0
   11fb0:	f000 80b8 	beq.w	12124 <_vfiprintf_r+0x3cc>
   11fb4:	9b02      	ldr	r3, [sp, #8]
   11fb6:	3301      	adds	r3, #1
   11fb8:	9302      	str	r3, [sp, #8]
   11fba:	e0b3      	b.n	12124 <_vfiprintf_r+0x3cc>
   11fbc:	9d03      	ldr	r5, [sp, #12]
   11fbe:	4658      	mov	r0, fp
   11fc0:	4629      	mov	r1, r5
   11fc2:	f001 f83f 	bl	13044 <__swsetup_r>
   11fc6:	2800      	cmp	r0, #0
   11fc8:	f040 8656 	bne.w	12c78 <_vfiprintf_r+0xf20>
   11fcc:	89aa      	ldrh	r2, [r5, #12]
   11fce:	f002 031a 	and.w	r3, r2, #26
   11fd2:	2b0a      	cmp	r3, #10
   11fd4:	f47f aef8 	bne.w	11dc8 <_vfiprintf_r+0x70>
   11fd8:	9903      	ldr	r1, [sp, #12]
   11fda:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   11fde:	2b00      	cmp	r3, #0
   11fe0:	f6ff aef2 	blt.w	11dc8 <_vfiprintf_r+0x70>
   11fe4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11fe6:	07db      	lsls	r3, r3, #31
   11fe8:	d402      	bmi.n	11ff0 <_vfiprintf_r+0x298>
   11fea:	0597      	lsls	r7, r2, #22
   11fec:	f140 8618 	bpl.w	12c20 <_vfiprintf_r+0xec8>
   11ff0:	9903      	ldr	r1, [sp, #12]
   11ff2:	4623      	mov	r3, r4
   11ff4:	4632      	mov	r2, r6
   11ff6:	4658      	mov	r0, fp
   11ff8:	f000 fe70 	bl	12cdc <__sbprintf>
   11ffc:	9005      	str	r0, [sp, #20]
   11ffe:	9805      	ldr	r0, [sp, #20]
   12000:	b045      	add	sp, #276	; 0x114
   12002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12006:	f046 0610 	orr.w	r6, r6, #16
   1200a:	f016 0220 	ands.w	r2, r6, #32
   1200e:	f000 8126 	beq.w	1225e <_vfiprintf_r+0x506>
   12012:	9b07      	ldr	r3, [sp, #28]
   12014:	3307      	adds	r3, #7
   12016:	f023 0307 	bic.w	r3, r3, #7
   1201a:	4619      	mov	r1, r3
   1201c:	685a      	ldr	r2, [r3, #4]
   1201e:	f851 3b08 	ldr.w	r3, [r1], #8
   12022:	9107      	str	r1, [sp, #28]
   12024:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12028:	9102      	str	r1, [sp, #8]
   1202a:	2100      	movs	r1, #0
   1202c:	2000      	movs	r0, #0
   1202e:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12032:	1c78      	adds	r0, r7, #1
   12034:	f000 8200 	beq.w	12438 <_vfiprintf_r+0x6e0>
   12038:	9802      	ldr	r0, [sp, #8]
   1203a:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   1203e:	ea53 0002 	orrs.w	r0, r3, r2
   12042:	f040 81f8 	bne.w	12436 <_vfiprintf_r+0x6de>
   12046:	2f00      	cmp	r7, #0
   12048:	f040 8543 	bne.w	12ad2 <_vfiprintf_r+0xd7a>
   1204c:	2900      	cmp	r1, #0
   1204e:	f040 83e4 	bne.w	1281a <_vfiprintf_r+0xac2>
   12052:	9b02      	ldr	r3, [sp, #8]
   12054:	f013 0301 	ands.w	r3, r3, #1
   12058:	9304      	str	r3, [sp, #16]
   1205a:	f000 8420 	beq.w	1289e <_vfiprintf_r+0xb46>
   1205e:	2330      	movs	r3, #48	; 0x30
   12060:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12064:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12068:	e798      	b.n	11f9c <_vfiprintf_r+0x244>
   1206a:	2208      	movs	r2, #8
   1206c:	2100      	movs	r1, #0
   1206e:	4650      	mov	r0, sl
   12070:	f7fb fe72 	bl	dd58 <memset>
   12074:	2301      	movs	r3, #1
   12076:	441c      	add	r4, r3
   12078:	e6b3      	b.n	11de2 <_vfiprintf_r+0x8a>
   1207a:	bf00      	nop
   1207c:	1fff8ed4 	.word	0x1fff8ed4
   12080:	ebb4 0608 	subs.w	r6, r4, r8
   12084:	4605      	mov	r5, r0
   12086:	d01a      	beq.n	120be <_vfiprintf_r+0x366>
   12088:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1208a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1208c:	3301      	adds	r3, #1
   1208e:	4432      	add	r2, r6
   12090:	2b07      	cmp	r3, #7
   12092:	e9c9 8600 	strd	r8, r6, [r9]
   12096:	921a      	str	r2, [sp, #104]	; 0x68
   12098:	9319      	str	r3, [sp, #100]	; 0x64
   1209a:	dd1a      	ble.n	120d2 <_vfiprintf_r+0x37a>
   1209c:	2a00      	cmp	r2, #0
   1209e:	f000 83b4 	beq.w	1280a <_vfiprintf_r+0xab2>
   120a2:	9903      	ldr	r1, [sp, #12]
   120a4:	aa18      	add	r2, sp, #96	; 0x60
   120a6:	4658      	mov	r0, fp
   120a8:	f7ff fe1a 	bl	11ce0 <__sprint_r.part.0>
   120ac:	b9d8      	cbnz	r0, 120e6 <_vfiprintf_r+0x38e>
   120ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   120b2:	9b05      	ldr	r3, [sp, #20]
   120b4:	4433      	add	r3, r6
   120b6:	9305      	str	r3, [sp, #20]
   120b8:	2d00      	cmp	r5, #0
   120ba:	f47f aeae 	bne.w	11e1a <_vfiprintf_r+0xc2>
   120be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   120c0:	2b00      	cmp	r3, #0
   120c2:	f040 85ca 	bne.w	12c5a <_vfiprintf_r+0xf02>
   120c6:	9b03      	ldr	r3, [sp, #12]
   120c8:	2200      	movs	r2, #0
   120ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   120ce:	9219      	str	r2, [sp, #100]	; 0x64
   120d0:	e00c      	b.n	120ec <_vfiprintf_r+0x394>
   120d2:	f109 0908 	add.w	r9, r9, #8
   120d6:	e7ec      	b.n	120b2 <_vfiprintf_r+0x35a>
   120d8:	46b3      	mov	fp, r6
   120da:	9b08      	ldr	r3, [sp, #32]
   120dc:	b11b      	cbz	r3, 120e6 <_vfiprintf_r+0x38e>
   120de:	9908      	ldr	r1, [sp, #32]
   120e0:	4658      	mov	r0, fp
   120e2:	f7fc f83b 	bl	e15c <_free_r>
   120e6:	9b03      	ldr	r3, [sp, #12]
   120e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   120ec:	9a03      	ldr	r2, [sp, #12]
   120ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
   120f0:	f012 0f01 	tst.w	r2, #1
   120f4:	b29a      	uxth	r2, r3
   120f6:	f000 809c 	beq.w	12232 <_vfiprintf_r+0x4da>
   120fa:	0650      	lsls	r0, r2, #25
   120fc:	f100 85c8 	bmi.w	12c90 <_vfiprintf_r+0xf38>
   12100:	9805      	ldr	r0, [sp, #20]
   12102:	b045      	add	sp, #276	; 0x114
   12104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12108:	2900      	cmp	r1, #0
   1210a:	d0d8      	beq.n	120be <_vfiprintf_r+0x366>
   1210c:	2300      	movs	r3, #0
   1210e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12112:	2301      	movs	r3, #1
   12114:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12118:	9302      	str	r3, [sp, #8]
   1211a:	9304      	str	r3, [sp, #16]
   1211c:	ac2b      	add	r4, sp, #172	; 0xac
   1211e:	2300      	movs	r3, #0
   12120:	9308      	str	r3, [sp, #32]
   12122:	461f      	mov	r7, r3
   12124:	f016 0302 	ands.w	r3, r6, #2
   12128:	9309      	str	r3, [sp, #36]	; 0x24
   1212a:	d002      	beq.n	12132 <_vfiprintf_r+0x3da>
   1212c:	9b02      	ldr	r3, [sp, #8]
   1212e:	3302      	adds	r3, #2
   12130:	9302      	str	r3, [sp, #8]
   12132:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12136:	930a      	str	r3, [sp, #40]	; 0x28
   12138:	d105      	bne.n	12146 <_vfiprintf_r+0x3ee>
   1213a:	9b06      	ldr	r3, [sp, #24]
   1213c:	9a02      	ldr	r2, [sp, #8]
   1213e:	1a9d      	subs	r5, r3, r2
   12140:	2d00      	cmp	r5, #0
   12142:	f300 8294 	bgt.w	1266e <_vfiprintf_r+0x916>
   12146:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1214a:	1c41      	adds	r1, r0, #1
   1214c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12150:	b182      	cbz	r2, 12174 <_vfiprintf_r+0x41c>
   12152:	2201      	movs	r2, #1
   12154:	3301      	adds	r3, #1
   12156:	f8c9 2004 	str.w	r2, [r9, #4]
   1215a:	2907      	cmp	r1, #7
   1215c:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12160:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12164:	f8c9 2000 	str.w	r2, [r9]
   12168:	f300 8264 	bgt.w	12634 <_vfiprintf_r+0x8dc>
   1216c:	4608      	mov	r0, r1
   1216e:	f109 0908 	add.w	r9, r9, #8
   12172:	3101      	adds	r1, #1
   12174:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12176:	b1da      	cbz	r2, 121b0 <_vfiprintf_r+0x458>
   12178:	aa11      	add	r2, sp, #68	; 0x44
   1217a:	3302      	adds	r3, #2
   1217c:	f8c9 2000 	str.w	r2, [r9]
   12180:	2907      	cmp	r1, #7
   12182:	f04f 0202 	mov.w	r2, #2
   12186:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1218a:	f8c9 2004 	str.w	r2, [r9, #4]
   1218e:	f340 8269 	ble.w	12664 <_vfiprintf_r+0x90c>
   12192:	2b00      	cmp	r3, #0
   12194:	f000 8358 	beq.w	12848 <_vfiprintf_r+0xaf0>
   12198:	9903      	ldr	r1, [sp, #12]
   1219a:	aa18      	add	r2, sp, #96	; 0x60
   1219c:	4658      	mov	r0, fp
   1219e:	f7ff fd9f 	bl	11ce0 <__sprint_r.part.0>
   121a2:	2800      	cmp	r0, #0
   121a4:	d199      	bne.n	120da <_vfiprintf_r+0x382>
   121a6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   121aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   121ae:	1c41      	adds	r1, r0, #1
   121b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   121b2:	2a80      	cmp	r2, #128	; 0x80
   121b4:	f000 8182 	beq.w	124bc <_vfiprintf_r+0x764>
   121b8:	9a04      	ldr	r2, [sp, #16]
   121ba:	1abd      	subs	r5, r7, r2
   121bc:	2d00      	cmp	r5, #0
   121be:	f300 81e0 	bgt.w	12582 <_vfiprintf_r+0x82a>
   121c2:	9a04      	ldr	r2, [sp, #16]
   121c4:	f8c9 4000 	str.w	r4, [r9]
   121c8:	4413      	add	r3, r2
   121ca:	2907      	cmp	r1, #7
   121cc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   121d0:	f8c9 2004 	str.w	r2, [r9, #4]
   121d4:	f340 816c 	ble.w	124b0 <_vfiprintf_r+0x758>
   121d8:	2b00      	cmp	r3, #0
   121da:	f000 829e 	beq.w	1271a <_vfiprintf_r+0x9c2>
   121de:	9903      	ldr	r1, [sp, #12]
   121e0:	aa18      	add	r2, sp, #96	; 0x60
   121e2:	4658      	mov	r0, fp
   121e4:	f7ff fd7c 	bl	11ce0 <__sprint_r.part.0>
   121e8:	2800      	cmp	r0, #0
   121ea:	f47f af76 	bne.w	120da <_vfiprintf_r+0x382>
   121ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   121f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   121f4:	0775      	lsls	r5, r6, #29
   121f6:	d505      	bpl.n	12204 <_vfiprintf_r+0x4ac>
   121f8:	9a06      	ldr	r2, [sp, #24]
   121fa:	9902      	ldr	r1, [sp, #8]
   121fc:	1a54      	subs	r4, r2, r1
   121fe:	2c00      	cmp	r4, #0
   12200:	f300 8295 	bgt.w	1272e <_vfiprintf_r+0x9d6>
   12204:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12208:	9802      	ldr	r0, [sp, #8]
   1220a:	4281      	cmp	r1, r0
   1220c:	bfac      	ite	ge
   1220e:	1852      	addge	r2, r2, r1
   12210:	1812      	addlt	r2, r2, r0
   12212:	9205      	str	r2, [sp, #20]
   12214:	2b00      	cmp	r3, #0
   12216:	f040 81fe 	bne.w	12616 <_vfiprintf_r+0x8be>
   1221a:	9908      	ldr	r1, [sp, #32]
   1221c:	2300      	movs	r3, #0
   1221e:	9319      	str	r3, [sp, #100]	; 0x64
   12220:	2900      	cmp	r1, #0
   12222:	f000 8148 	beq.w	124b6 <_vfiprintf_r+0x75e>
   12226:	4658      	mov	r0, fp
   12228:	f7fb ff98 	bl	e15c <_free_r>
   1222c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12230:	e5d6      	b.n	11de0 <_vfiprintf_r+0x88>
   12232:	059c      	lsls	r4, r3, #22
   12234:	f53f af61 	bmi.w	120fa <_vfiprintf_r+0x3a2>
   12238:	9c03      	ldr	r4, [sp, #12]
   1223a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1223c:	f7fb feac 	bl	df98 <__retarget_lock_release_recursive>
   12240:	89a2      	ldrh	r2, [r4, #12]
   12242:	e75a      	b.n	120fa <_vfiprintf_r+0x3a2>
   12244:	06f0      	lsls	r0, r6, #27
   12246:	9a07      	ldr	r2, [sp, #28]
   12248:	f100 833e 	bmi.w	128c8 <_vfiprintf_r+0xb70>
   1224c:	0671      	lsls	r1, r6, #25
   1224e:	f140 8338 	bpl.w	128c2 <_vfiprintf_r+0xb6a>
   12252:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12256:	9207      	str	r2, [sp, #28]
   12258:	17da      	asrs	r2, r3, #31
   1225a:	4611      	mov	r1, r2
   1225c:	e684      	b.n	11f68 <_vfiprintf_r+0x210>
   1225e:	f016 0310 	ands.w	r3, r6, #16
   12262:	9907      	ldr	r1, [sp, #28]
   12264:	f040 8328 	bne.w	128b8 <_vfiprintf_r+0xb60>
   12268:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1226c:	f000 8320 	beq.w	128b0 <_vfiprintf_r+0xb58>
   12270:	461a      	mov	r2, r3
   12272:	f851 3b04 	ldr.w	r3, [r1], #4
   12276:	9107      	str	r1, [sp, #28]
   12278:	b29b      	uxth	r3, r3
   1227a:	e6d3      	b.n	12024 <_vfiprintf_r+0x2cc>
   1227c:	9b07      	ldr	r3, [sp, #28]
   1227e:	461a      	mov	r2, r3
   12280:	2300      	movs	r3, #0
   12282:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12286:	4613      	mov	r3, r2
   12288:	f853 4b04 	ldr.w	r4, [r3], #4
   1228c:	9302      	str	r3, [sp, #8]
   1228e:	2c00      	cmp	r4, #0
   12290:	f000 842d 	beq.w	12aee <_vfiprintf_r+0xd96>
   12294:	2953      	cmp	r1, #83	; 0x53
   12296:	f000 838a 	beq.w	129ae <_vfiprintf_r+0xc56>
   1229a:	f016 0510 	ands.w	r5, r6, #16
   1229e:	f040 8386 	bne.w	129ae <_vfiprintf_r+0xc56>
   122a2:	1c7b      	adds	r3, r7, #1
   122a4:	f000 84cc 	beq.w	12c40 <_vfiprintf_r+0xee8>
   122a8:	463a      	mov	r2, r7
   122aa:	4629      	mov	r1, r5
   122ac:	4620      	mov	r0, r4
   122ae:	f7fe fb37 	bl	10920 <memchr>
   122b2:	9008      	str	r0, [sp, #32]
   122b4:	2800      	cmp	r0, #0
   122b6:	f000 84b8 	beq.w	12c2a <_vfiprintf_r+0xed2>
   122ba:	1b03      	subs	r3, r0, r4
   122bc:	9a02      	ldr	r2, [sp, #8]
   122be:	9304      	str	r3, [sp, #16]
   122c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   122c4:	462f      	mov	r7, r5
   122c6:	9207      	str	r2, [sp, #28]
   122c8:	9302      	str	r3, [sp, #8]
   122ca:	9508      	str	r5, [sp, #32]
   122cc:	e66d      	b.n	11faa <_vfiprintf_r+0x252>
   122ce:	2943      	cmp	r1, #67	; 0x43
   122d0:	d002      	beq.n	122d8 <_vfiprintf_r+0x580>
   122d2:	06f5      	lsls	r5, r6, #27
   122d4:	f140 8352 	bpl.w	1297c <_vfiprintf_r+0xc24>
   122d8:	9d07      	ldr	r5, [sp, #28]
   122da:	2208      	movs	r2, #8
   122dc:	2100      	movs	r1, #0
   122de:	a816      	add	r0, sp, #88	; 0x58
   122e0:	ac2b      	add	r4, sp, #172	; 0xac
   122e2:	f7fb fd39 	bl	dd58 <memset>
   122e6:	ab16      	add	r3, sp, #88	; 0x58
   122e8:	f855 2b04 	ldr.w	r2, [r5], #4
   122ec:	4621      	mov	r1, r4
   122ee:	4658      	mov	r0, fp
   122f0:	f7ff fc2e 	bl	11b50 <_wcrtomb_r>
   122f4:	4603      	mov	r3, r0
   122f6:	3301      	adds	r3, #1
   122f8:	9004      	str	r0, [sp, #16]
   122fa:	f000 84ce 	beq.w	12c9a <_vfiprintf_r+0xf42>
   122fe:	9b04      	ldr	r3, [sp, #16]
   12300:	9507      	str	r5, [sp, #28]
   12302:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12306:	9302      	str	r3, [sp, #8]
   12308:	2300      	movs	r3, #0
   1230a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1230e:	e706      	b.n	1211e <_vfiprintf_r+0x3c6>
   12310:	9b07      	ldr	r3, [sp, #28]
   12312:	f853 2b04 	ldr.w	r2, [r3], #4
   12316:	9206      	str	r2, [sp, #24]
   12318:	2a00      	cmp	r2, #0
   1231a:	f280 82bb 	bge.w	12894 <_vfiprintf_r+0xb3c>
   1231e:	9a06      	ldr	r2, [sp, #24]
   12320:	4252      	negs	r2, r2
   12322:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12326:	f898 1000 	ldrb.w	r1, [r8]
   1232a:	f046 0604 	orr.w	r6, r6, #4
   1232e:	e57f      	b.n	11e30 <_vfiprintf_r+0xd8>
   12330:	f898 1000 	ldrb.w	r1, [r8]
   12334:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12338:	e57a      	b.n	11e30 <_vfiprintf_r+0xd8>
   1233a:	f898 1000 	ldrb.w	r1, [r8]
   1233e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12342:	e575      	b.n	11e30 <_vfiprintf_r+0xd8>
   12344:	4642      	mov	r2, r8
   12346:	f812 1b01 	ldrb.w	r1, [r2], #1
   1234a:	292a      	cmp	r1, #42	; 0x2a
   1234c:	f000 84b0 	beq.w	12cb0 <_vfiprintf_r+0xf58>
   12350:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12354:	2b09      	cmp	r3, #9
   12356:	4690      	mov	r8, r2
   12358:	f04f 0700 	mov.w	r7, #0
   1235c:	f63f ad6a 	bhi.w	11e34 <_vfiprintf_r+0xdc>
   12360:	f818 1b01 	ldrb.w	r1, [r8], #1
   12364:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12368:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1236c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12370:	2b09      	cmp	r3, #9
   12372:	d9f5      	bls.n	12360 <_vfiprintf_r+0x608>
   12374:	e55e      	b.n	11e34 <_vfiprintf_r+0xdc>
   12376:	f898 1000 	ldrb.w	r1, [r8]
   1237a:	f046 0601 	orr.w	r6, r6, #1
   1237e:	e557      	b.n	11e30 <_vfiprintf_r+0xd8>
   12380:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12384:	2b00      	cmp	r3, #0
   12386:	f47f add8 	bne.w	11f3a <_vfiprintf_r+0x1e2>
   1238a:	2320      	movs	r3, #32
   1238c:	f898 1000 	ldrb.w	r1, [r8]
   12390:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12394:	e54c      	b.n	11e30 <_vfiprintf_r+0xd8>
   12396:	f898 1000 	ldrb.w	r1, [r8]
   1239a:	296c      	cmp	r1, #108	; 0x6c
   1239c:	bf03      	ittte	eq
   1239e:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   123a2:	f046 0620 	orreq.w	r6, r6, #32
   123a6:	f108 0801 	addeq.w	r8, r8, #1
   123aa:	f046 0610 	orrne.w	r6, r6, #16
   123ae:	e53f      	b.n	11e30 <_vfiprintf_r+0xd8>
   123b0:	f898 1000 	ldrb.w	r1, [r8]
   123b4:	2968      	cmp	r1, #104	; 0x68
   123b6:	bf03      	ittte	eq
   123b8:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   123bc:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   123c0:	f108 0801 	addeq.w	r8, r8, #1
   123c4:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   123c8:	e532      	b.n	11e30 <_vfiprintf_r+0xd8>
   123ca:	f046 0310 	orr.w	r3, r6, #16
   123ce:	9302      	str	r3, [sp, #8]
   123d0:	9b02      	ldr	r3, [sp, #8]
   123d2:	f013 0220 	ands.w	r2, r3, #32
   123d6:	f000 8225 	beq.w	12824 <_vfiprintf_r+0xacc>
   123da:	9b07      	ldr	r3, [sp, #28]
   123dc:	3307      	adds	r3, #7
   123de:	f023 0307 	bic.w	r3, r3, #7
   123e2:	4619      	mov	r1, r3
   123e4:	685a      	ldr	r2, [r3, #4]
   123e6:	f851 3b08 	ldr.w	r3, [r1], #8
   123ea:	9107      	str	r1, [sp, #28]
   123ec:	2101      	movs	r1, #1
   123ee:	e61d      	b.n	1202c <_vfiprintf_r+0x2d4>
   123f0:	9a07      	ldr	r2, [sp, #28]
   123f2:	f046 0302 	orr.w	r3, r6, #2
   123f6:	9302      	str	r3, [sp, #8]
   123f8:	f852 3b04 	ldr.w	r3, [r2], #4
   123fc:	9207      	str	r2, [sp, #28]
   123fe:	f647 0230 	movw	r2, #30768	; 0x7830
   12402:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12406:	4aa1      	ldr	r2, [pc, #644]	; (1268c <_vfiprintf_r+0x934>)
   12408:	920b      	str	r2, [sp, #44]	; 0x2c
   1240a:	2102      	movs	r1, #2
   1240c:	2200      	movs	r2, #0
   1240e:	e60d      	b.n	1202c <_vfiprintf_r+0x2d4>
   12410:	06b7      	lsls	r7, r6, #26
   12412:	f100 8267 	bmi.w	128e4 <_vfiprintf_r+0xb8c>
   12416:	06f5      	lsls	r5, r6, #27
   12418:	f100 8361 	bmi.w	12ade <_vfiprintf_r+0xd86>
   1241c:	0674      	lsls	r4, r6, #25
   1241e:	f100 83ee 	bmi.w	12bfe <_vfiprintf_r+0xea6>
   12422:	05b0      	lsls	r0, r6, #22
   12424:	f140 835b 	bpl.w	12ade <_vfiprintf_r+0xd86>
   12428:	9b07      	ldr	r3, [sp, #28]
   1242a:	9905      	ldr	r1, [sp, #20]
   1242c:	f853 2b04 	ldr.w	r2, [r3], #4
   12430:	9307      	str	r3, [sp, #28]
   12432:	7011      	strb	r1, [r2, #0]
   12434:	e4d4      	b.n	11de0 <_vfiprintf_r+0x88>
   12436:	9602      	str	r6, [sp, #8]
   12438:	2901      	cmp	r1, #1
   1243a:	f43f ada2 	beq.w	11f82 <_vfiprintf_r+0x22a>
   1243e:	2902      	cmp	r1, #2
   12440:	ac44      	add	r4, sp, #272	; 0x110
   12442:	d111      	bne.n	12468 <_vfiprintf_r+0x710>
   12444:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12446:	f003 010f 	and.w	r1, r3, #15
   1244a:	091b      	lsrs	r3, r3, #4
   1244c:	5c41      	ldrb	r1, [r0, r1]
   1244e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12452:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12456:	0912      	lsrs	r2, r2, #4
   12458:	ea53 0102 	orrs.w	r1, r3, r2
   1245c:	d1f3      	bne.n	12446 <_vfiprintf_r+0x6ee>
   1245e:	9e02      	ldr	r6, [sp, #8]
   12460:	ab44      	add	r3, sp, #272	; 0x110
   12462:	1b1b      	subs	r3, r3, r4
   12464:	9304      	str	r3, [sp, #16]
   12466:	e599      	b.n	11f9c <_vfiprintf_r+0x244>
   12468:	f003 0107 	and.w	r1, r3, #7
   1246c:	08db      	lsrs	r3, r3, #3
   1246e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12472:	08d2      	lsrs	r2, r2, #3
   12474:	3130      	adds	r1, #48	; 0x30
   12476:	ea53 0502 	orrs.w	r5, r3, r2
   1247a:	4620      	mov	r0, r4
   1247c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12480:	d1f2      	bne.n	12468 <_vfiprintf_r+0x710>
   12482:	9e02      	ldr	r6, [sp, #8]
   12484:	07f3      	lsls	r3, r6, #31
   12486:	d5eb      	bpl.n	12460 <_vfiprintf_r+0x708>
   12488:	2930      	cmp	r1, #48	; 0x30
   1248a:	d0e8      	beq.n	1245e <_vfiprintf_r+0x706>
   1248c:	2330      	movs	r3, #48	; 0x30
   1248e:	3802      	subs	r0, #2
   12490:	f804 3c01 	strb.w	r3, [r4, #-1]
   12494:	ab44      	add	r3, sp, #272	; 0x110
   12496:	1a1b      	subs	r3, r3, r0
   12498:	9e02      	ldr	r6, [sp, #8]
   1249a:	9304      	str	r3, [sp, #16]
   1249c:	4604      	mov	r4, r0
   1249e:	e57d      	b.n	11f9c <_vfiprintf_r+0x244>
   124a0:	9b04      	ldr	r3, [sp, #16]
   124a2:	941b      	str	r4, [sp, #108]	; 0x6c
   124a4:	2201      	movs	r2, #1
   124a6:	931c      	str	r3, [sp, #112]	; 0x70
   124a8:	931a      	str	r3, [sp, #104]	; 0x68
   124aa:	9219      	str	r2, [sp, #100]	; 0x64
   124ac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   124b0:	f109 0908 	add.w	r9, r9, #8
   124b4:	e69e      	b.n	121f4 <_vfiprintf_r+0x49c>
   124b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   124ba:	e491      	b.n	11de0 <_vfiprintf_r+0x88>
   124bc:	9a06      	ldr	r2, [sp, #24]
   124be:	9d02      	ldr	r5, [sp, #8]
   124c0:	1b55      	subs	r5, r2, r5
   124c2:	2d00      	cmp	r5, #0
   124c4:	f77f ae78 	ble.w	121b8 <_vfiprintf_r+0x460>
   124c8:	2d10      	cmp	r5, #16
   124ca:	f340 83d3 	ble.w	12c74 <_vfiprintf_r+0xf1c>
   124ce:	4619      	mov	r1, r3
   124d0:	4643      	mov	r3, r8
   124d2:	9409      	str	r4, [sp, #36]	; 0x24
   124d4:	46b8      	mov	r8, r7
   124d6:	9c03      	ldr	r4, [sp, #12]
   124d8:	4637      	mov	r7, r6
   124da:	465e      	mov	r6, fp
   124dc:	469b      	mov	fp, r3
   124de:	e007      	b.n	124f0 <_vfiprintf_r+0x798>
   124e0:	f100 0c02 	add.w	ip, r0, #2
   124e4:	f109 0908 	add.w	r9, r9, #8
   124e8:	4610      	mov	r0, r2
   124ea:	3d10      	subs	r5, #16
   124ec:	2d10      	cmp	r5, #16
   124ee:	dd1f      	ble.n	12530 <_vfiprintf_r+0x7d8>
   124f0:	4b67      	ldr	r3, [pc, #412]	; (12690 <_vfiprintf_r+0x938>)
   124f2:	f8c9 3000 	str.w	r3, [r9]
   124f6:	1c42      	adds	r2, r0, #1
   124f8:	3110      	adds	r1, #16
   124fa:	2310      	movs	r3, #16
   124fc:	2a07      	cmp	r2, #7
   124fe:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   12502:	f8c9 3004 	str.w	r3, [r9, #4]
   12506:	ddeb      	ble.n	124e0 <_vfiprintf_r+0x788>
   12508:	aa18      	add	r2, sp, #96	; 0x60
   1250a:	2900      	cmp	r1, #0
   1250c:	f000 808c 	beq.w	12628 <_vfiprintf_r+0x8d0>
   12510:	4621      	mov	r1, r4
   12512:	4630      	mov	r0, r6
   12514:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12518:	f7ff fbe2 	bl	11ce0 <__sprint_r.part.0>
   1251c:	2800      	cmp	r0, #0
   1251e:	f47f addb 	bne.w	120d8 <_vfiprintf_r+0x380>
   12522:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   12526:	3d10      	subs	r5, #16
   12528:	2d10      	cmp	r5, #16
   1252a:	f100 0c01 	add.w	ip, r0, #1
   1252e:	dcdf      	bgt.n	124f0 <_vfiprintf_r+0x798>
   12530:	465a      	mov	r2, fp
   12532:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12534:	46b3      	mov	fp, r6
   12536:	460b      	mov	r3, r1
   12538:	463e      	mov	r6, r7
   1253a:	4647      	mov	r7, r8
   1253c:	4690      	mov	r8, r2
   1253e:	4a54      	ldr	r2, [pc, #336]	; (12690 <_vfiprintf_r+0x938>)
   12540:	f8c9 5004 	str.w	r5, [r9, #4]
   12544:	442b      	add	r3, r5
   12546:	f1bc 0f07 	cmp.w	ip, #7
   1254a:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   1254e:	f8c9 2000 	str.w	r2, [r9]
   12552:	f340 81a7 	ble.w	128a4 <_vfiprintf_r+0xb4c>
   12556:	2b00      	cmp	r3, #0
   12558:	f000 832c 	beq.w	12bb4 <_vfiprintf_r+0xe5c>
   1255c:	9903      	ldr	r1, [sp, #12]
   1255e:	aa18      	add	r2, sp, #96	; 0x60
   12560:	4658      	mov	r0, fp
   12562:	f7ff fbbd 	bl	11ce0 <__sprint_r.part.0>
   12566:	2800      	cmp	r0, #0
   12568:	f47f adb7 	bne.w	120da <_vfiprintf_r+0x382>
   1256c:	9a04      	ldr	r2, [sp, #16]
   1256e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12572:	1abd      	subs	r5, r7, r2
   12574:	2d00      	cmp	r5, #0
   12576:	f100 0101 	add.w	r1, r0, #1
   1257a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1257e:	f77f ae20 	ble.w	121c2 <_vfiprintf_r+0x46a>
   12582:	2d10      	cmp	r5, #16
   12584:	dd32      	ble.n	125ec <_vfiprintf_r+0x894>
   12586:	4619      	mov	r1, r3
   12588:	4643      	mov	r3, r8
   1258a:	9409      	str	r4, [sp, #36]	; 0x24
   1258c:	46b0      	mov	r8, r6
   1258e:	9c03      	ldr	r4, [sp, #12]
   12590:	465e      	mov	r6, fp
   12592:	2710      	movs	r7, #16
   12594:	469b      	mov	fp, r3
   12596:	e007      	b.n	125a8 <_vfiprintf_r+0x850>
   12598:	f100 0c02 	add.w	ip, r0, #2
   1259c:	f109 0908 	add.w	r9, r9, #8
   125a0:	4610      	mov	r0, r2
   125a2:	3d10      	subs	r5, #16
   125a4:	2d10      	cmp	r5, #16
   125a6:	dd1a      	ble.n	125de <_vfiprintf_r+0x886>
   125a8:	1c42      	adds	r2, r0, #1
   125aa:	4b39      	ldr	r3, [pc, #228]	; (12690 <_vfiprintf_r+0x938>)
   125ac:	3110      	adds	r1, #16
   125ae:	2a07      	cmp	r2, #7
   125b0:	e9c9 3700 	strd	r3, r7, [r9]
   125b4:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   125b8:	ddee      	ble.n	12598 <_vfiprintf_r+0x840>
   125ba:	aa18      	add	r2, sp, #96	; 0x60
   125bc:	b329      	cbz	r1, 1260a <_vfiprintf_r+0x8b2>
   125be:	4621      	mov	r1, r4
   125c0:	4630      	mov	r0, r6
   125c2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   125c6:	f7ff fb8b 	bl	11ce0 <__sprint_r.part.0>
   125ca:	2800      	cmp	r0, #0
   125cc:	f47f ad84 	bne.w	120d8 <_vfiprintf_r+0x380>
   125d0:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   125d4:	3d10      	subs	r5, #16
   125d6:	2d10      	cmp	r5, #16
   125d8:	f100 0c01 	add.w	ip, r0, #1
   125dc:	dce4      	bgt.n	125a8 <_vfiprintf_r+0x850>
   125de:	465a      	mov	r2, fp
   125e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   125e2:	460b      	mov	r3, r1
   125e4:	46b3      	mov	fp, r6
   125e6:	4661      	mov	r1, ip
   125e8:	4646      	mov	r6, r8
   125ea:	4690      	mov	r8, r2
   125ec:	4a28      	ldr	r2, [pc, #160]	; (12690 <_vfiprintf_r+0x938>)
   125ee:	f8c9 5004 	str.w	r5, [r9, #4]
   125f2:	442b      	add	r3, r5
   125f4:	2907      	cmp	r1, #7
   125f6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   125fa:	f8c9 2000 	str.w	r2, [r9]
   125fe:	f300 80f3 	bgt.w	127e8 <_vfiprintf_r+0xa90>
   12602:	f109 0908 	add.w	r9, r9, #8
   12606:	3101      	adds	r1, #1
   12608:	e5db      	b.n	121c2 <_vfiprintf_r+0x46a>
   1260a:	f04f 0c01 	mov.w	ip, #1
   1260e:	4608      	mov	r0, r1
   12610:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12614:	e7c5      	b.n	125a2 <_vfiprintf_r+0x84a>
   12616:	9903      	ldr	r1, [sp, #12]
   12618:	aa18      	add	r2, sp, #96	; 0x60
   1261a:	4658      	mov	r0, fp
   1261c:	f7ff fb60 	bl	11ce0 <__sprint_r.part.0>
   12620:	2800      	cmp	r0, #0
   12622:	f43f adfa 	beq.w	1221a <_vfiprintf_r+0x4c2>
   12626:	e558      	b.n	120da <_vfiprintf_r+0x382>
   12628:	f04f 0c01 	mov.w	ip, #1
   1262c:	4608      	mov	r0, r1
   1262e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12632:	e75a      	b.n	124ea <_vfiprintf_r+0x792>
   12634:	2b00      	cmp	r3, #0
   12636:	f000 810c 	beq.w	12852 <_vfiprintf_r+0xafa>
   1263a:	9903      	ldr	r1, [sp, #12]
   1263c:	aa18      	add	r2, sp, #96	; 0x60
   1263e:	4658      	mov	r0, fp
   12640:	f7ff fb4e 	bl	11ce0 <__sprint_r.part.0>
   12644:	2800      	cmp	r0, #0
   12646:	f47f ad48 	bne.w	120da <_vfiprintf_r+0x382>
   1264a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1264e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12652:	1c41      	adds	r1, r0, #1
   12654:	e58e      	b.n	12174 <_vfiprintf_r+0x41c>
   12656:	2302      	movs	r3, #2
   12658:	aa11      	add	r2, sp, #68	; 0x44
   1265a:	931c      	str	r3, [sp, #112]	; 0x70
   1265c:	921b      	str	r2, [sp, #108]	; 0x6c
   1265e:	2101      	movs	r1, #1
   12660:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12664:	4608      	mov	r0, r1
   12666:	f109 0908 	add.w	r9, r9, #8
   1266a:	1c41      	adds	r1, r0, #1
   1266c:	e5a0      	b.n	121b0 <_vfiprintf_r+0x458>
   1266e:	2d10      	cmp	r5, #16
   12670:	f340 82e2 	ble.w	12c38 <_vfiprintf_r+0xee0>
   12674:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12678:	4618      	mov	r0, r3
   1267a:	4643      	mov	r3, r8
   1267c:	940f      	str	r4, [sp, #60]	; 0x3c
   1267e:	46b8      	mov	r8, r7
   12680:	9c03      	ldr	r4, [sp, #12]
   12682:	4637      	mov	r7, r6
   12684:	465e      	mov	r6, fp
   12686:	469b      	mov	fp, r3
   12688:	e00c      	b.n	126a4 <_vfiprintf_r+0x94c>
   1268a:	bf00      	nop
   1268c:	0001572c 	.word	0x0001572c
   12690:	00015838 	.word	0x00015838
   12694:	f101 0c02 	add.w	ip, r1, #2
   12698:	f109 0908 	add.w	r9, r9, #8
   1269c:	4611      	mov	r1, r2
   1269e:	3d10      	subs	r5, #16
   126a0:	2d10      	cmp	r5, #16
   126a2:	dd1d      	ble.n	126e0 <_vfiprintf_r+0x988>
   126a4:	4bb2      	ldr	r3, [pc, #712]	; (12970 <_vfiprintf_r+0xc18>)
   126a6:	f8c9 3000 	str.w	r3, [r9]
   126aa:	1c4a      	adds	r2, r1, #1
   126ac:	3010      	adds	r0, #16
   126ae:	2310      	movs	r3, #16
   126b0:	2a07      	cmp	r2, #7
   126b2:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   126b6:	f8c9 3004 	str.w	r3, [r9, #4]
   126ba:	ddeb      	ble.n	12694 <_vfiprintf_r+0x93c>
   126bc:	aa18      	add	r2, sp, #96	; 0x60
   126be:	b330      	cbz	r0, 1270e <_vfiprintf_r+0x9b6>
   126c0:	4621      	mov	r1, r4
   126c2:	4630      	mov	r0, r6
   126c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   126c8:	f7ff fb0a 	bl	11ce0 <__sprint_r.part.0>
   126cc:	2800      	cmp	r0, #0
   126ce:	f47f ad03 	bne.w	120d8 <_vfiprintf_r+0x380>
   126d2:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
   126d6:	3d10      	subs	r5, #16
   126d8:	2d10      	cmp	r5, #16
   126da:	f101 0c01 	add.w	ip, r1, #1
   126de:	dce1      	bgt.n	126a4 <_vfiprintf_r+0x94c>
   126e0:	465a      	mov	r2, fp
   126e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   126e4:	4603      	mov	r3, r0
   126e6:	46b3      	mov	fp, r6
   126e8:	4660      	mov	r0, ip
   126ea:	463e      	mov	r6, r7
   126ec:	4647      	mov	r7, r8
   126ee:	4690      	mov	r8, r2
   126f0:	4a9f      	ldr	r2, [pc, #636]	; (12970 <_vfiprintf_r+0xc18>)
   126f2:	f8c9 5004 	str.w	r5, [r9, #4]
   126f6:	442b      	add	r3, r5
   126f8:	2807      	cmp	r0, #7
   126fa:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   126fe:	f8c9 2000 	str.w	r2, [r9]
   12702:	f300 80b6 	bgt.w	12872 <_vfiprintf_r+0xb1a>
   12706:	f109 0908 	add.w	r9, r9, #8
   1270a:	1c41      	adds	r1, r0, #1
   1270c:	e51e      	b.n	1214c <_vfiprintf_r+0x3f4>
   1270e:	4601      	mov	r1, r0
   12710:	f04f 0c01 	mov.w	ip, #1
   12714:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12718:	e7c1      	b.n	1269e <_vfiprintf_r+0x946>
   1271a:	0776      	lsls	r6, r6, #29
   1271c:	9319      	str	r3, [sp, #100]	; 0x64
   1271e:	d54a      	bpl.n	127b6 <_vfiprintf_r+0xa5e>
   12720:	9a06      	ldr	r2, [sp, #24]
   12722:	9902      	ldr	r1, [sp, #8]
   12724:	1a54      	subs	r4, r2, r1
   12726:	2c00      	cmp	r4, #0
   12728:	dd45      	ble.n	127b6 <_vfiprintf_r+0xa5e>
   1272a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1272e:	2c10      	cmp	r4, #16
   12730:	f340 829d 	ble.w	12c6e <_vfiprintf_r+0xf16>
   12734:	9919      	ldr	r1, [sp, #100]	; 0x64
   12736:	9e03      	ldr	r6, [sp, #12]
   12738:	2510      	movs	r5, #16
   1273a:	e006      	b.n	1274a <_vfiprintf_r+0x9f2>
   1273c:	1c88      	adds	r0, r1, #2
   1273e:	f109 0908 	add.w	r9, r9, #8
   12742:	4611      	mov	r1, r2
   12744:	3c10      	subs	r4, #16
   12746:	2c10      	cmp	r4, #16
   12748:	dd1a      	ble.n	12780 <_vfiprintf_r+0xa28>
   1274a:	1c4a      	adds	r2, r1, #1
   1274c:	4888      	ldr	r0, [pc, #544]	; (12970 <_vfiprintf_r+0xc18>)
   1274e:	3310      	adds	r3, #16
   12750:	2a07      	cmp	r2, #7
   12752:	e9c9 0500 	strd	r0, r5, [r9]
   12756:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1275a:	ddef      	ble.n	1273c <_vfiprintf_r+0x9e4>
   1275c:	aa18      	add	r2, sp, #96	; 0x60
   1275e:	b32b      	cbz	r3, 127ac <_vfiprintf_r+0xa54>
   12760:	4631      	mov	r1, r6
   12762:	4658      	mov	r0, fp
   12764:	f7ff fabc 	bl	11ce0 <__sprint_r.part.0>
   12768:	2800      	cmp	r0, #0
   1276a:	f47f acb6 	bne.w	120da <_vfiprintf_r+0x382>
   1276e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12772:	3c10      	subs	r4, #16
   12774:	2c10      	cmp	r4, #16
   12776:	f101 0001 	add.w	r0, r1, #1
   1277a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1277e:	dce4      	bgt.n	1274a <_vfiprintf_r+0x9f2>
   12780:	4a7b      	ldr	r2, [pc, #492]	; (12970 <_vfiprintf_r+0xc18>)
   12782:	f8c9 4004 	str.w	r4, [r9, #4]
   12786:	4423      	add	r3, r4
   12788:	2807      	cmp	r0, #7
   1278a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1278e:	f8c9 2000 	str.w	r2, [r9]
   12792:	f77f ad37 	ble.w	12204 <_vfiprintf_r+0x4ac>
   12796:	b173      	cbz	r3, 127b6 <_vfiprintf_r+0xa5e>
   12798:	9903      	ldr	r1, [sp, #12]
   1279a:	aa18      	add	r2, sp, #96	; 0x60
   1279c:	4658      	mov	r0, fp
   1279e:	f7ff fa9f 	bl	11ce0 <__sprint_r.part.0>
   127a2:	2800      	cmp	r0, #0
   127a4:	f47f ac99 	bne.w	120da <_vfiprintf_r+0x382>
   127a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   127aa:	e52b      	b.n	12204 <_vfiprintf_r+0x4ac>
   127ac:	2001      	movs	r0, #1
   127ae:	4619      	mov	r1, r3
   127b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   127b4:	e7c6      	b.n	12744 <_vfiprintf_r+0x9ec>
   127b6:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   127ba:	9902      	ldr	r1, [sp, #8]
   127bc:	428a      	cmp	r2, r1
   127be:	bfac      	ite	ge
   127c0:	189b      	addge	r3, r3, r2
   127c2:	185b      	addlt	r3, r3, r1
   127c4:	9305      	str	r3, [sp, #20]
   127c6:	e528      	b.n	1221a <_vfiprintf_r+0x4c2>
   127c8:	9b03      	ldr	r3, [sp, #12]
   127ca:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   127ce:	058f      	lsls	r7, r1, #22
   127d0:	b28a      	uxth	r2, r1
   127d2:	f53f aae0 	bmi.w	11d96 <_vfiprintf_r+0x3e>
   127d6:	461d      	mov	r5, r3
   127d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   127da:	f7fb fbdb 	bl	df94 <__retarget_lock_acquire_recursive>
   127de:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   127e2:	b28a      	uxth	r2, r1
   127e4:	f7ff bad7 	b.w	11d96 <_vfiprintf_r+0x3e>
   127e8:	2b00      	cmp	r3, #0
   127ea:	f43f ae59 	beq.w	124a0 <_vfiprintf_r+0x748>
   127ee:	9903      	ldr	r1, [sp, #12]
   127f0:	aa18      	add	r2, sp, #96	; 0x60
   127f2:	4658      	mov	r0, fp
   127f4:	f7ff fa74 	bl	11ce0 <__sprint_r.part.0>
   127f8:	2800      	cmp	r0, #0
   127fa:	f47f ac6e 	bne.w	120da <_vfiprintf_r+0x382>
   127fe:	9919      	ldr	r1, [sp, #100]	; 0x64
   12800:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12802:	3101      	adds	r1, #1
   12804:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12808:	e4db      	b.n	121c2 <_vfiprintf_r+0x46a>
   1280a:	9219      	str	r2, [sp, #100]	; 0x64
   1280c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12810:	e44f      	b.n	120b2 <_vfiprintf_r+0x35a>
   12812:	2f00      	cmp	r7, #0
   12814:	f47f abba 	bne.w	11f8c <_vfiprintf_r+0x234>
   12818:	9e02      	ldr	r6, [sp, #8]
   1281a:	2700      	movs	r7, #0
   1281c:	9704      	str	r7, [sp, #16]
   1281e:	ac44      	add	r4, sp, #272	; 0x110
   12820:	f7ff bbbc 	b.w	11f9c <_vfiprintf_r+0x244>
   12824:	9b02      	ldr	r3, [sp, #8]
   12826:	f013 0310 	ands.w	r3, r3, #16
   1282a:	d154      	bne.n	128d6 <_vfiprintf_r+0xb7e>
   1282c:	9a02      	ldr	r2, [sp, #8]
   1282e:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   12832:	f000 8167 	beq.w	12b04 <_vfiprintf_r+0xdac>
   12836:	9907      	ldr	r1, [sp, #28]
   12838:	461a      	mov	r2, r3
   1283a:	f851 3b04 	ldr.w	r3, [r1], #4
   1283e:	9107      	str	r1, [sp, #28]
   12840:	b29b      	uxth	r3, r3
   12842:	2101      	movs	r1, #1
   12844:	f7ff bbf2 	b.w	1202c <_vfiprintf_r+0x2d4>
   12848:	2101      	movs	r1, #1
   1284a:	4618      	mov	r0, r3
   1284c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12850:	e4ae      	b.n	121b0 <_vfiprintf_r+0x458>
   12852:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12854:	2a00      	cmp	r2, #0
   12856:	d15e      	bne.n	12916 <_vfiprintf_r+0xbbe>
   12858:	4618      	mov	r0, r3
   1285a:	2101      	movs	r1, #1
   1285c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12860:	e4a6      	b.n	121b0 <_vfiprintf_r+0x458>
   12862:	425b      	negs	r3, r3
   12864:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   12868:	9602      	str	r6, [sp, #8]
   1286a:	202d      	movs	r0, #45	; 0x2d
   1286c:	2101      	movs	r1, #1
   1286e:	f7ff bbde 	b.w	1202e <_vfiprintf_r+0x2d6>
   12872:	2b00      	cmp	r3, #0
   12874:	f000 808d 	beq.w	12992 <_vfiprintf_r+0xc3a>
   12878:	9903      	ldr	r1, [sp, #12]
   1287a:	aa18      	add	r2, sp, #96	; 0x60
   1287c:	4658      	mov	r0, fp
   1287e:	f7ff fa2f 	bl	11ce0 <__sprint_r.part.0>
   12882:	2800      	cmp	r0, #0
   12884:	f47f ac29 	bne.w	120da <_vfiprintf_r+0x382>
   12888:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1288c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12890:	1c41      	adds	r1, r0, #1
   12892:	e45b      	b.n	1214c <_vfiprintf_r+0x3f4>
   12894:	f898 1000 	ldrb.w	r1, [r8]
   12898:	9307      	str	r3, [sp, #28]
   1289a:	f7ff bac9 	b.w	11e30 <_vfiprintf_r+0xd8>
   1289e:	ac44      	add	r4, sp, #272	; 0x110
   128a0:	f7ff bb7c 	b.w	11f9c <_vfiprintf_r+0x244>
   128a4:	f109 0908 	add.w	r9, r9, #8
   128a8:	f10c 0101 	add.w	r1, ip, #1
   128ac:	4660      	mov	r0, ip
   128ae:	e483      	b.n	121b8 <_vfiprintf_r+0x460>
   128b0:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   128b4:	f040 8191 	bne.w	12bda <_vfiprintf_r+0xe82>
   128b8:	f851 3b04 	ldr.w	r3, [r1], #4
   128bc:	9107      	str	r1, [sp, #28]
   128be:	f7ff bbb1 	b.w	12024 <_vfiprintf_r+0x2cc>
   128c2:	05b3      	lsls	r3, r6, #22
   128c4:	f100 8182 	bmi.w	12bcc <_vfiprintf_r+0xe74>
   128c8:	f852 3b04 	ldr.w	r3, [r2], #4
   128cc:	9207      	str	r2, [sp, #28]
   128ce:	17da      	asrs	r2, r3, #31
   128d0:	4611      	mov	r1, r2
   128d2:	f7ff bb49 	b.w	11f68 <_vfiprintf_r+0x210>
   128d6:	9907      	ldr	r1, [sp, #28]
   128d8:	f851 3b04 	ldr.w	r3, [r1], #4
   128dc:	9107      	str	r1, [sp, #28]
   128de:	2101      	movs	r1, #1
   128e0:	f7ff bba4 	b.w	1202c <_vfiprintf_r+0x2d4>
   128e4:	9b07      	ldr	r3, [sp, #28]
   128e6:	9805      	ldr	r0, [sp, #20]
   128e8:	f853 1b04 	ldr.w	r1, [r3], #4
   128ec:	9307      	str	r3, [sp, #28]
   128ee:	17c2      	asrs	r2, r0, #31
   128f0:	e9c1 0200 	strd	r0, r2, [r1]
   128f4:	f7ff ba74 	b.w	11de0 <_vfiprintf_r+0x88>
   128f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   128fa:	2b00      	cmp	r3, #0
   128fc:	f43f ab1d 	beq.w	11f3a <_vfiprintf_r+0x1e2>
   12900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12902:	781b      	ldrb	r3, [r3, #0]
   12904:	2b00      	cmp	r3, #0
   12906:	f43f ab18 	beq.w	11f3a <_vfiprintf_r+0x1e2>
   1290a:	f898 1000 	ldrb.w	r1, [r8]
   1290e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   12912:	f7ff ba8d 	b.w	11e30 <_vfiprintf_r+0xd8>
   12916:	2302      	movs	r3, #2
   12918:	aa11      	add	r2, sp, #68	; 0x44
   1291a:	931c      	str	r3, [sp, #112]	; 0x70
   1291c:	921b      	str	r2, [sp, #108]	; 0x6c
   1291e:	2001      	movs	r0, #1
   12920:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12924:	e69f      	b.n	12666 <_vfiprintf_r+0x90e>
   12926:	9602      	str	r6, [sp, #8]
   12928:	e552      	b.n	123d0 <_vfiprintf_r+0x678>
   1292a:	4b12      	ldr	r3, [pc, #72]	; (12974 <_vfiprintf_r+0xc1c>)
   1292c:	930b      	str	r3, [sp, #44]	; 0x2c
   1292e:	f016 0220 	ands.w	r2, r6, #32
   12932:	d05f      	beq.n	129f4 <_vfiprintf_r+0xc9c>
   12934:	9b07      	ldr	r3, [sp, #28]
   12936:	3307      	adds	r3, #7
   12938:	f023 0307 	bic.w	r3, r3, #7
   1293c:	4618      	mov	r0, r3
   1293e:	685a      	ldr	r2, [r3, #4]
   12940:	f850 3b08 	ldr.w	r3, [r0], #8
   12944:	9007      	str	r0, [sp, #28]
   12946:	07f4      	lsls	r4, r6, #31
   12948:	d509      	bpl.n	1295e <_vfiprintf_r+0xc06>
   1294a:	ea53 0002 	orrs.w	r0, r3, r2
   1294e:	d006      	beq.n	1295e <_vfiprintf_r+0xc06>
   12950:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   12954:	2130      	movs	r1, #48	; 0x30
   12956:	f046 0602 	orr.w	r6, r6, #2
   1295a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   1295e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12962:	9102      	str	r1, [sp, #8]
   12964:	2102      	movs	r1, #2
   12966:	f7ff bb61 	b.w	1202c <_vfiprintf_r+0x2d4>
   1296a:	4b03      	ldr	r3, [pc, #12]	; (12978 <_vfiprintf_r+0xc20>)
   1296c:	930b      	str	r3, [sp, #44]	; 0x2c
   1296e:	e7de      	b.n	1292e <_vfiprintf_r+0xbd6>
   12970:	00015828 	.word	0x00015828
   12974:	0001572c 	.word	0x0001572c
   12978:	00015740 	.word	0x00015740
   1297c:	9b07      	ldr	r3, [sp, #28]
   1297e:	2101      	movs	r1, #1
   12980:	f853 2b04 	ldr.w	r2, [r3], #4
   12984:	9102      	str	r1, [sp, #8]
   12986:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   1298a:	9307      	str	r3, [sp, #28]
   1298c:	9104      	str	r1, [sp, #16]
   1298e:	ac2b      	add	r4, sp, #172	; 0xac
   12990:	e4ba      	b.n	12308 <_vfiprintf_r+0x5b0>
   12992:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12996:	2a00      	cmp	r2, #0
   12998:	f040 8126 	bne.w	12be8 <_vfiprintf_r+0xe90>
   1299c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1299e:	2a00      	cmp	r2, #0
   129a0:	f47f ae59 	bne.w	12656 <_vfiprintf_r+0x8fe>
   129a4:	4618      	mov	r0, r3
   129a6:	2101      	movs	r1, #1
   129a8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   129ac:	e404      	b.n	121b8 <_vfiprintf_r+0x460>
   129ae:	2100      	movs	r1, #0
   129b0:	2208      	movs	r2, #8
   129b2:	a816      	add	r0, sp, #88	; 0x58
   129b4:	9413      	str	r4, [sp, #76]	; 0x4c
   129b6:	f7fb f9cf 	bl	dd58 <memset>
   129ba:	1c79      	adds	r1, r7, #1
   129bc:	f000 80b2 	beq.w	12b24 <_vfiprintf_r+0xdcc>
   129c0:	2500      	movs	r5, #0
   129c2:	9407      	str	r4, [sp, #28]
   129c4:	462c      	mov	r4, r5
   129c6:	e00c      	b.n	129e2 <_vfiprintf_r+0xc8a>
   129c8:	a92b      	add	r1, sp, #172	; 0xac
   129ca:	4658      	mov	r0, fp
   129cc:	f7ff f8c0 	bl	11b50 <_wcrtomb_r>
   129d0:	1c42      	adds	r2, r0, #1
   129d2:	4420      	add	r0, r4
   129d4:	f000 8161 	beq.w	12c9a <_vfiprintf_r+0xf42>
   129d8:	42b8      	cmp	r0, r7
   129da:	dc08      	bgt.n	129ee <_vfiprintf_r+0xc96>
   129dc:	f000 8165 	beq.w	12caa <_vfiprintf_r+0xf52>
   129e0:	4604      	mov	r4, r0
   129e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   129e4:	5952      	ldr	r2, [r2, r5]
   129e6:	ab16      	add	r3, sp, #88	; 0x58
   129e8:	3504      	adds	r5, #4
   129ea:	2a00      	cmp	r2, #0
   129ec:	d1ec      	bne.n	129c8 <_vfiprintf_r+0xc70>
   129ee:	9404      	str	r4, [sp, #16]
   129f0:	9c07      	ldr	r4, [sp, #28]
   129f2:	e0a5      	b.n	12b40 <_vfiprintf_r+0xde8>
   129f4:	f016 0310 	ands.w	r3, r6, #16
   129f8:	9807      	ldr	r0, [sp, #28]
   129fa:	d10c      	bne.n	12a16 <_vfiprintf_r+0xcbe>
   129fc:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   12a00:	d005      	beq.n	12a0e <_vfiprintf_r+0xcb6>
   12a02:	461a      	mov	r2, r3
   12a04:	f850 3b04 	ldr.w	r3, [r0], #4
   12a08:	9007      	str	r0, [sp, #28]
   12a0a:	b29b      	uxth	r3, r3
   12a0c:	e79b      	b.n	12946 <_vfiprintf_r+0xbee>
   12a0e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12a12:	f040 80d5 	bne.w	12bc0 <_vfiprintf_r+0xe68>
   12a16:	f850 3b04 	ldr.w	r3, [r0], #4
   12a1a:	9007      	str	r0, [sp, #28]
   12a1c:	e793      	b.n	12946 <_vfiprintf_r+0xbee>
   12a1e:	9902      	ldr	r1, [sp, #8]
   12a20:	f8cd 8020 	str.w	r8, [sp, #32]
   12a24:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   12a28:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   12a2c:	9704      	str	r7, [sp, #16]
   12a2e:	f04f 0c00 	mov.w	ip, #0
   12a32:	ac44      	add	r4, sp, #272	; 0x110
   12a34:	e005      	b.n	12a42 <_vfiprintf_r+0xcea>
   12a36:	2b0a      	cmp	r3, #10
   12a38:	f172 0200 	sbcs.w	r2, r2, #0
   12a3c:	d336      	bcc.n	12aac <_vfiprintf_r+0xd54>
   12a3e:	463b      	mov	r3, r7
   12a40:	462a      	mov	r2, r5
   12a42:	f8df e290 	ldr.w	lr, [pc, #656]	; 12cd4 <_vfiprintf_r+0xf7c>
   12a46:	1899      	adds	r1, r3, r2
   12a48:	f141 0100 	adc.w	r1, r1, #0
   12a4c:	fbae 0501 	umull	r0, r5, lr, r1
   12a50:	f025 0003 	bic.w	r0, r5, #3
   12a54:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   12a58:	1a09      	subs	r1, r1, r0
   12a5a:	1a58      	subs	r0, r3, r1
   12a5c:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   12a60:	f162 0700 	sbc.w	r7, r2, #0
   12a64:	fb05 f500 	mul.w	r5, r5, r0
   12a68:	fb0e 5507 	mla	r5, lr, r7, r5
   12a6c:	fba0 700e 	umull	r7, r0, r0, lr
   12a70:	4405      	add	r5, r0
   12a72:	f007 0e01 	and.w	lr, r7, #1
   12a76:	2005      	movs	r0, #5
   12a78:	fbae 0e00 	umull	r0, lr, lr, r0
   12a7c:	1840      	adds	r0, r0, r1
   12a7e:	087f      	lsrs	r7, r7, #1
   12a80:	3030      	adds	r0, #48	; 0x30
   12a82:	f804 0c01 	strb.w	r0, [r4, #-1]
   12a86:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   12a8a:	f10c 0c01 	add.w	ip, ip, #1
   12a8e:	3c01      	subs	r4, #1
   12a90:	086d      	lsrs	r5, r5, #1
   12a92:	2e00      	cmp	r6, #0
   12a94:	d0cf      	beq.n	12a36 <_vfiprintf_r+0xcde>
   12a96:	f898 1000 	ldrb.w	r1, [r8]
   12a9a:	4561      	cmp	r1, ip
   12a9c:	d1cb      	bne.n	12a36 <_vfiprintf_r+0xcde>
   12a9e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   12aa2:	d0c8      	beq.n	12a36 <_vfiprintf_r+0xcde>
   12aa4:	2b0a      	cmp	r3, #10
   12aa6:	f172 0200 	sbcs.w	r2, r2, #0
   12aaa:	d26c      	bcs.n	12b86 <_vfiprintf_r+0xe2e>
   12aac:	ab44      	add	r3, sp, #272	; 0x110
   12aae:	1b1b      	subs	r3, r3, r4
   12ab0:	9f04      	ldr	r7, [sp, #16]
   12ab2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   12ab6:	9e02      	ldr	r6, [sp, #8]
   12ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   12abc:	9304      	str	r3, [sp, #16]
   12abe:	f7ff ba6d 	b.w	11f9c <_vfiprintf_r+0x244>
   12ac2:	9602      	str	r6, [sp, #8]
   12ac4:	f7ff ba5d 	b.w	11f82 <_vfiprintf_r+0x22a>
   12ac8:	4658      	mov	r0, fp
   12aca:	f7fb f815 	bl	daf8 <__sinit>
   12ace:	f7ff b95a 	b.w	11d86 <_vfiprintf_r+0x2e>
   12ad2:	2901      	cmp	r1, #1
   12ad4:	9602      	str	r6, [sp, #8]
   12ad6:	f47f acb2 	bne.w	1243e <_vfiprintf_r+0x6e6>
   12ada:	f7ff ba57 	b.w	11f8c <_vfiprintf_r+0x234>
   12ade:	9b07      	ldr	r3, [sp, #28]
   12ae0:	9905      	ldr	r1, [sp, #20]
   12ae2:	f853 2b04 	ldr.w	r2, [r3], #4
   12ae6:	6011      	str	r1, [r2, #0]
   12ae8:	9307      	str	r3, [sp, #28]
   12aea:	f7ff b979 	b.w	11de0 <_vfiprintf_r+0x88>
   12aee:	2f06      	cmp	r7, #6
   12af0:	463b      	mov	r3, r7
   12af2:	9a02      	ldr	r2, [sp, #8]
   12af4:	4c78      	ldr	r4, [pc, #480]	; (12cd8 <_vfiprintf_r+0xf80>)
   12af6:	9207      	str	r2, [sp, #28]
   12af8:	bf28      	it	cs
   12afa:	2306      	movcs	r3, #6
   12afc:	9304      	str	r3, [sp, #16]
   12afe:	9302      	str	r3, [sp, #8]
   12b00:	f7ff bb0d 	b.w	1211e <_vfiprintf_r+0x3c6>
   12b04:	9b02      	ldr	r3, [sp, #8]
   12b06:	9907      	ldr	r1, [sp, #28]
   12b08:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   12b0c:	bf14      	ite	ne
   12b0e:	f851 3b04 	ldrne.w	r3, [r1], #4
   12b12:	f851 3b04 	ldreq.w	r3, [r1], #4
   12b16:	9107      	str	r1, [sp, #28]
   12b18:	bf1c      	itt	ne
   12b1a:	4602      	movne	r2, r0
   12b1c:	b2db      	uxtbne	r3, r3
   12b1e:	2101      	movs	r1, #1
   12b20:	f7ff ba84 	b.w	1202c <_vfiprintf_r+0x2d4>
   12b24:	ab16      	add	r3, sp, #88	; 0x58
   12b26:	9300      	str	r3, [sp, #0]
   12b28:	2300      	movs	r3, #0
   12b2a:	4619      	mov	r1, r3
   12b2c:	aa13      	add	r2, sp, #76	; 0x4c
   12b2e:	4658      	mov	r0, fp
   12b30:	f7ff f834 	bl	11b9c <_wcsrtombs_r>
   12b34:	4603      	mov	r3, r0
   12b36:	3301      	adds	r3, #1
   12b38:	9004      	str	r0, [sp, #16]
   12b3a:	f000 80ae 	beq.w	12c9a <_vfiprintf_r+0xf42>
   12b3e:	9413      	str	r4, [sp, #76]	; 0x4c
   12b40:	9b04      	ldr	r3, [sp, #16]
   12b42:	b37b      	cbz	r3, 12ba4 <_vfiprintf_r+0xe4c>
   12b44:	2b63      	cmp	r3, #99	; 0x63
   12b46:	dc62      	bgt.n	12c0e <_vfiprintf_r+0xeb6>
   12b48:	2300      	movs	r3, #0
   12b4a:	9308      	str	r3, [sp, #32]
   12b4c:	ac2b      	add	r4, sp, #172	; 0xac
   12b4e:	2208      	movs	r2, #8
   12b50:	2100      	movs	r1, #0
   12b52:	a816      	add	r0, sp, #88	; 0x58
   12b54:	f7fb f900 	bl	dd58 <memset>
   12b58:	9d04      	ldr	r5, [sp, #16]
   12b5a:	ab16      	add	r3, sp, #88	; 0x58
   12b5c:	9300      	str	r3, [sp, #0]
   12b5e:	aa13      	add	r2, sp, #76	; 0x4c
   12b60:	462b      	mov	r3, r5
   12b62:	4621      	mov	r1, r4
   12b64:	4658      	mov	r0, fp
   12b66:	f7ff f819 	bl	11b9c <_wcsrtombs_r>
   12b6a:	4285      	cmp	r5, r0
   12b6c:	f040 80ab 	bne.w	12cc6 <_vfiprintf_r+0xf6e>
   12b70:	9b02      	ldr	r3, [sp, #8]
   12b72:	9a04      	ldr	r2, [sp, #16]
   12b74:	9307      	str	r3, [sp, #28]
   12b76:	2300      	movs	r3, #0
   12b78:	54a3      	strb	r3, [r4, r2]
   12b7a:	461f      	mov	r7, r3
   12b7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   12b80:	9302      	str	r3, [sp, #8]
   12b82:	f7ff ba12 	b.w	11faa <_vfiprintf_r+0x252>
   12b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12b88:	990d      	ldr	r1, [sp, #52]	; 0x34
   12b8a:	1ae4      	subs	r4, r4, r3
   12b8c:	461a      	mov	r2, r3
   12b8e:	4620      	mov	r0, r4
   12b90:	f7fb f934 	bl	ddfc <strncpy>
   12b94:	f898 3001 	ldrb.w	r3, [r8, #1]
   12b98:	b10b      	cbz	r3, 12b9e <_vfiprintf_r+0xe46>
   12b9a:	f108 0801 	add.w	r8, r8, #1
   12b9e:	f04f 0c00 	mov.w	ip, #0
   12ba2:	e74c      	b.n	12a3e <_vfiprintf_r+0xce6>
   12ba4:	9b02      	ldr	r3, [sp, #8]
   12ba6:	9307      	str	r3, [sp, #28]
   12ba8:	9b04      	ldr	r3, [sp, #16]
   12baa:	9302      	str	r3, [sp, #8]
   12bac:	461f      	mov	r7, r3
   12bae:	9308      	str	r3, [sp, #32]
   12bb0:	f7ff b9fb 	b.w	11faa <_vfiprintf_r+0x252>
   12bb4:	2101      	movs	r1, #1
   12bb6:	4618      	mov	r0, r3
   12bb8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12bbc:	f7ff bafc 	b.w	121b8 <_vfiprintf_r+0x460>
   12bc0:	f850 3b04 	ldr.w	r3, [r0], #4
   12bc4:	9007      	str	r0, [sp, #28]
   12bc6:	4622      	mov	r2, r4
   12bc8:	b2db      	uxtb	r3, r3
   12bca:	e6bc      	b.n	12946 <_vfiprintf_r+0xbee>
   12bcc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   12bd0:	9207      	str	r2, [sp, #28]
   12bd2:	17da      	asrs	r2, r3, #31
   12bd4:	4611      	mov	r1, r2
   12bd6:	f7ff b9c7 	b.w	11f68 <_vfiprintf_r+0x210>
   12bda:	f851 3b04 	ldr.w	r3, [r1], #4
   12bde:	9107      	str	r1, [sp, #28]
   12be0:	4602      	mov	r2, r0
   12be2:	b2db      	uxtb	r3, r3
   12be4:	f7ff ba1e 	b.w	12024 <_vfiprintf_r+0x2cc>
   12be8:	2301      	movs	r3, #1
   12bea:	931c      	str	r3, [sp, #112]	; 0x70
   12bec:	2101      	movs	r1, #1
   12bee:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   12bf2:	931b      	str	r3, [sp, #108]	; 0x6c
   12bf4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12bf8:	460b      	mov	r3, r1
   12bfa:	f7ff bab7 	b.w	1216c <_vfiprintf_r+0x414>
   12bfe:	9b07      	ldr	r3, [sp, #28]
   12c00:	9905      	ldr	r1, [sp, #20]
   12c02:	f853 2b04 	ldr.w	r2, [r3], #4
   12c06:	9307      	str	r3, [sp, #28]
   12c08:	8011      	strh	r1, [r2, #0]
   12c0a:	f7ff b8e9 	b.w	11de0 <_vfiprintf_r+0x88>
   12c0e:	1c59      	adds	r1, r3, #1
   12c10:	4658      	mov	r0, fp
   12c12:	f7fa fa33 	bl	d07c <_malloc_r>
   12c16:	4604      	mov	r4, r0
   12c18:	2800      	cmp	r0, #0
   12c1a:	d03e      	beq.n	12c9a <_vfiprintf_r+0xf42>
   12c1c:	9008      	str	r0, [sp, #32]
   12c1e:	e796      	b.n	12b4e <_vfiprintf_r+0xdf6>
   12c20:	6d88      	ldr	r0, [r1, #88]	; 0x58
   12c22:	f7fb f9b9 	bl	df98 <__retarget_lock_release_recursive>
   12c26:	f7ff b9e3 	b.w	11ff0 <_vfiprintf_r+0x298>
   12c2a:	9b02      	ldr	r3, [sp, #8]
   12c2c:	9704      	str	r7, [sp, #16]
   12c2e:	9702      	str	r7, [sp, #8]
   12c30:	9307      	str	r3, [sp, #28]
   12c32:	9f08      	ldr	r7, [sp, #32]
   12c34:	f7ff b9b9 	b.w	11faa <_vfiprintf_r+0x252>
   12c38:	9819      	ldr	r0, [sp, #100]	; 0x64
   12c3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12c3c:	3001      	adds	r0, #1
   12c3e:	e557      	b.n	126f0 <_vfiprintf_r+0x998>
   12c40:	9b02      	ldr	r3, [sp, #8]
   12c42:	9307      	str	r3, [sp, #28]
   12c44:	4620      	mov	r0, r4
   12c46:	f7fb f9bb 	bl	dfc0 <strlen>
   12c4a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   12c4e:	462f      	mov	r7, r5
   12c50:	9004      	str	r0, [sp, #16]
   12c52:	9302      	str	r3, [sp, #8]
   12c54:	9508      	str	r5, [sp, #32]
   12c56:	f7ff b9a8 	b.w	11faa <_vfiprintf_r+0x252>
   12c5a:	9903      	ldr	r1, [sp, #12]
   12c5c:	aa18      	add	r2, sp, #96	; 0x60
   12c5e:	4658      	mov	r0, fp
   12c60:	f7ff f83e 	bl	11ce0 <__sprint_r.part.0>
   12c64:	2800      	cmp	r0, #0
   12c66:	f43f aa2e 	beq.w	120c6 <_vfiprintf_r+0x36e>
   12c6a:	f7ff ba3c 	b.w	120e6 <_vfiprintf_r+0x38e>
   12c6e:	9819      	ldr	r0, [sp, #100]	; 0x64
   12c70:	3001      	adds	r0, #1
   12c72:	e585      	b.n	12780 <_vfiprintf_r+0xa28>
   12c74:	468c      	mov	ip, r1
   12c76:	e462      	b.n	1253e <_vfiprintf_r+0x7e6>
   12c78:	9b03      	ldr	r3, [sp, #12]
   12c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12c7c:	07d9      	lsls	r1, r3, #31
   12c7e:	d407      	bmi.n	12c90 <_vfiprintf_r+0xf38>
   12c80:	9b03      	ldr	r3, [sp, #12]
   12c82:	899b      	ldrh	r3, [r3, #12]
   12c84:	059a      	lsls	r2, r3, #22
   12c86:	d403      	bmi.n	12c90 <_vfiprintf_r+0xf38>
   12c88:	9b03      	ldr	r3, [sp, #12]
   12c8a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   12c8c:	f7fb f984 	bl	df98 <__retarget_lock_release_recursive>
   12c90:	f04f 33ff 	mov.w	r3, #4294967295
   12c94:	9305      	str	r3, [sp, #20]
   12c96:	f7ff ba33 	b.w	12100 <_vfiprintf_r+0x3a8>
   12c9a:	9a03      	ldr	r2, [sp, #12]
   12c9c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   12ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12ca4:	8193      	strh	r3, [r2, #12]
   12ca6:	f7ff ba21 	b.w	120ec <_vfiprintf_r+0x394>
   12caa:	9c07      	ldr	r4, [sp, #28]
   12cac:	9704      	str	r7, [sp, #16]
   12cae:	e747      	b.n	12b40 <_vfiprintf_r+0xde8>
   12cb0:	9b07      	ldr	r3, [sp, #28]
   12cb2:	f898 1001 	ldrb.w	r1, [r8, #1]
   12cb6:	f853 7b04 	ldr.w	r7, [r3], #4
   12cba:	9307      	str	r3, [sp, #28]
   12cbc:	4690      	mov	r8, r2
   12cbe:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   12cc2:	f7ff b8b5 	b.w	11e30 <_vfiprintf_r+0xd8>
   12cc6:	9a03      	ldr	r2, [sp, #12]
   12cc8:	8993      	ldrh	r3, [r2, #12]
   12cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12cce:	8193      	strh	r3, [r2, #12]
   12cd0:	f7ff ba03 	b.w	120da <_vfiprintf_r+0x382>
   12cd4:	cccccccd 	.word	0xcccccccd
   12cd8:	00015754 	.word	0x00015754

00012cdc <__sbprintf>:
   12cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12cde:	461f      	mov	r7, r3
   12ce0:	898b      	ldrh	r3, [r1, #12]
   12ce2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   12ce6:	f023 0302 	bic.w	r3, r3, #2
   12cea:	f8ad 300c 	strh.w	r3, [sp, #12]
   12cee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12cf0:	9319      	str	r3, [sp, #100]	; 0x64
   12cf2:	89cb      	ldrh	r3, [r1, #14]
   12cf4:	f8ad 300e 	strh.w	r3, [sp, #14]
   12cf8:	69cb      	ldr	r3, [r1, #28]
   12cfa:	9307      	str	r3, [sp, #28]
   12cfc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   12cfe:	9309      	str	r3, [sp, #36]	; 0x24
   12d00:	ab1a      	add	r3, sp, #104	; 0x68
   12d02:	9300      	str	r3, [sp, #0]
   12d04:	9304      	str	r3, [sp, #16]
   12d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
   12d0a:	4615      	mov	r5, r2
   12d0c:	4606      	mov	r6, r0
   12d0e:	9302      	str	r3, [sp, #8]
   12d10:	9305      	str	r3, [sp, #20]
   12d12:	a816      	add	r0, sp, #88	; 0x58
   12d14:	2300      	movs	r3, #0
   12d16:	460c      	mov	r4, r1
   12d18:	9306      	str	r3, [sp, #24]
   12d1a:	f7fb f937 	bl	df8c <__retarget_lock_init_recursive>
   12d1e:	462a      	mov	r2, r5
   12d20:	463b      	mov	r3, r7
   12d22:	4669      	mov	r1, sp
   12d24:	4630      	mov	r0, r6
   12d26:	f7ff f817 	bl	11d58 <_vfiprintf_r>
   12d2a:	1e05      	subs	r5, r0, #0
   12d2c:	db07      	blt.n	12d3e <__sbprintf+0x62>
   12d2e:	4669      	mov	r1, sp
   12d30:	4630      	mov	r0, r6
   12d32:	f7fd fdb1 	bl	10898 <_fflush_r>
   12d36:	2800      	cmp	r0, #0
   12d38:	bf18      	it	ne
   12d3a:	f04f 35ff 	movne.w	r5, #4294967295
   12d3e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12d42:	065b      	lsls	r3, r3, #25
   12d44:	d503      	bpl.n	12d4e <__sbprintf+0x72>
   12d46:	89a3      	ldrh	r3, [r4, #12]
   12d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12d4c:	81a3      	strh	r3, [r4, #12]
   12d4e:	9816      	ldr	r0, [sp, #88]	; 0x58
   12d50:	f7fb f91e 	bl	df90 <__retarget_lock_close_recursive>
   12d54:	4628      	mov	r0, r5
   12d56:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   12d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012d5c <__sfvwrite_r>:
   12d5c:	6893      	ldr	r3, [r2, #8]
   12d5e:	2b00      	cmp	r3, #0
   12d60:	f000 8081 	beq.w	12e66 <__sfvwrite_r+0x10a>
   12d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d68:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   12d6c:	460c      	mov	r4, r1
   12d6e:	0719      	lsls	r1, r3, #28
   12d70:	4680      	mov	r8, r0
   12d72:	b083      	sub	sp, #12
   12d74:	4617      	mov	r7, r2
   12d76:	b298      	uxth	r0, r3
   12d78:	d523      	bpl.n	12dc2 <__sfvwrite_r+0x66>
   12d7a:	6923      	ldr	r3, [r4, #16]
   12d7c:	b30b      	cbz	r3, 12dc2 <__sfvwrite_r+0x66>
   12d7e:	f010 0302 	ands.w	r3, r0, #2
   12d82:	683d      	ldr	r5, [r7, #0]
   12d84:	d02b      	beq.n	12dde <__sfvwrite_r+0x82>
   12d86:	f04f 0a00 	mov.w	sl, #0
   12d8a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 13040 <__sfvwrite_r+0x2e4>
   12d8e:	4656      	mov	r6, sl
   12d90:	455e      	cmp	r6, fp
   12d92:	4633      	mov	r3, r6
   12d94:	4652      	mov	r2, sl
   12d96:	bf28      	it	cs
   12d98:	465b      	movcs	r3, fp
   12d9a:	4640      	mov	r0, r8
   12d9c:	2e00      	cmp	r6, #0
   12d9e:	d04f      	beq.n	12e40 <__sfvwrite_r+0xe4>
   12da0:	69e1      	ldr	r1, [r4, #28]
   12da2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   12da6:	47e0      	blx	ip
   12da8:	2800      	cmp	r0, #0
   12daa:	dd52      	ble.n	12e52 <__sfvwrite_r+0xf6>
   12dac:	68bb      	ldr	r3, [r7, #8]
   12dae:	1a1b      	subs	r3, r3, r0
   12db0:	4482      	add	sl, r0
   12db2:	1a36      	subs	r6, r6, r0
   12db4:	60bb      	str	r3, [r7, #8]
   12db6:	2b00      	cmp	r3, #0
   12db8:	d1ea      	bne.n	12d90 <__sfvwrite_r+0x34>
   12dba:	2000      	movs	r0, #0
   12dbc:	b003      	add	sp, #12
   12dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dc2:	4621      	mov	r1, r4
   12dc4:	4640      	mov	r0, r8
   12dc6:	f000 f93d 	bl	13044 <__swsetup_r>
   12dca:	2800      	cmp	r0, #0
   12dcc:	f040 8134 	bne.w	13038 <__sfvwrite_r+0x2dc>
   12dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12dd4:	683d      	ldr	r5, [r7, #0]
   12dd6:	b298      	uxth	r0, r3
   12dd8:	f010 0302 	ands.w	r3, r0, #2
   12ddc:	d1d3      	bne.n	12d86 <__sfvwrite_r+0x2a>
   12dde:	f010 0901 	ands.w	r9, r0, #1
   12de2:	d142      	bne.n	12e6a <__sfvwrite_r+0x10e>
   12de4:	464e      	mov	r6, r9
   12de6:	b33e      	cbz	r6, 12e38 <__sfvwrite_r+0xdc>
   12de8:	0582      	lsls	r2, r0, #22
   12dea:	f8d4 b008 	ldr.w	fp, [r4, #8]
   12dee:	f140 8081 	bpl.w	12ef4 <__sfvwrite_r+0x198>
   12df2:	45b3      	cmp	fp, r6
   12df4:	465a      	mov	r2, fp
   12df6:	f200 80b1 	bhi.w	12f5c <__sfvwrite_r+0x200>
   12dfa:	f410 6f90 	tst.w	r0, #1152	; 0x480
   12dfe:	f040 80be 	bne.w	12f7e <__sfvwrite_r+0x222>
   12e02:	6820      	ldr	r0, [r4, #0]
   12e04:	9201      	str	r2, [sp, #4]
   12e06:	4649      	mov	r1, r9
   12e08:	f7fa ff2a 	bl	dc60 <memmove>
   12e0c:	68a3      	ldr	r3, [r4, #8]
   12e0e:	9a01      	ldr	r2, [sp, #4]
   12e10:	eba3 010b 	sub.w	r1, r3, fp
   12e14:	6823      	ldr	r3, [r4, #0]
   12e16:	60a1      	str	r1, [r4, #8]
   12e18:	4413      	add	r3, r2
   12e1a:	46b2      	mov	sl, r6
   12e1c:	6023      	str	r3, [r4, #0]
   12e1e:	2600      	movs	r6, #0
   12e20:	68bb      	ldr	r3, [r7, #8]
   12e22:	eba3 030a 	sub.w	r3, r3, sl
   12e26:	44d1      	add	r9, sl
   12e28:	60bb      	str	r3, [r7, #8]
   12e2a:	2b00      	cmp	r3, #0
   12e2c:	d0c5      	beq.n	12dba <__sfvwrite_r+0x5e>
   12e2e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   12e32:	b280      	uxth	r0, r0
   12e34:	2e00      	cmp	r6, #0
   12e36:	d1d7      	bne.n	12de8 <__sfvwrite_r+0x8c>
   12e38:	e9d5 9600 	ldrd	r9, r6, [r5]
   12e3c:	3508      	adds	r5, #8
   12e3e:	e7d2      	b.n	12de6 <__sfvwrite_r+0x8a>
   12e40:	e9d5 a600 	ldrd	sl, r6, [r5]
   12e44:	3508      	adds	r5, #8
   12e46:	e7a3      	b.n	12d90 <__sfvwrite_r+0x34>
   12e48:	4621      	mov	r1, r4
   12e4a:	4640      	mov	r0, r8
   12e4c:	f7fd fd24 	bl	10898 <_fflush_r>
   12e50:	b380      	cbz	r0, 12eb4 <__sfvwrite_r+0x158>
   12e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12e5a:	f04f 30ff 	mov.w	r0, #4294967295
   12e5e:	81a3      	strh	r3, [r4, #12]
   12e60:	b003      	add	sp, #12
   12e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e66:	2000      	movs	r0, #0
   12e68:	4770      	bx	lr
   12e6a:	461e      	mov	r6, r3
   12e6c:	46ba      	mov	sl, r7
   12e6e:	4699      	mov	r9, r3
   12e70:	4618      	mov	r0, r3
   12e72:	461f      	mov	r7, r3
   12e74:	b366      	cbz	r6, 12ed0 <__sfvwrite_r+0x174>
   12e76:	b388      	cbz	r0, 12edc <__sfvwrite_r+0x180>
   12e78:	464a      	mov	r2, r9
   12e7a:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
   12e7e:	6820      	ldr	r0, [r4, #0]
   12e80:	68a1      	ldr	r1, [r4, #8]
   12e82:	42b2      	cmp	r2, r6
   12e84:	bf28      	it	cs
   12e86:	4632      	movcs	r2, r6
   12e88:	4560      	cmp	r0, ip
   12e8a:	d904      	bls.n	12e96 <__sfvwrite_r+0x13a>
   12e8c:	eb01 0b03 	add.w	fp, r1, r3
   12e90:	455a      	cmp	r2, fp
   12e92:	f300 80a7 	bgt.w	12fe4 <__sfvwrite_r+0x288>
   12e96:	4293      	cmp	r3, r2
   12e98:	dc64      	bgt.n	12f64 <__sfvwrite_r+0x208>
   12e9a:	69e1      	ldr	r1, [r4, #28]
   12e9c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   12ea0:	463a      	mov	r2, r7
   12ea2:	4640      	mov	r0, r8
   12ea4:	47e0      	blx	ip
   12ea6:	f1b0 0b00 	subs.w	fp, r0, #0
   12eaa:	ddd2      	ble.n	12e52 <__sfvwrite_r+0xf6>
   12eac:	ebb9 090b 	subs.w	r9, r9, fp
   12eb0:	d0ca      	beq.n	12e48 <__sfvwrite_r+0xec>
   12eb2:	2001      	movs	r0, #1
   12eb4:	f8da 3008 	ldr.w	r3, [sl, #8]
   12eb8:	eba3 030b 	sub.w	r3, r3, fp
   12ebc:	445f      	add	r7, fp
   12ebe:	eba6 060b 	sub.w	r6, r6, fp
   12ec2:	f8ca 3008 	str.w	r3, [sl, #8]
   12ec6:	2b00      	cmp	r3, #0
   12ec8:	f43f af77 	beq.w	12dba <__sfvwrite_r+0x5e>
   12ecc:	2e00      	cmp	r6, #0
   12ece:	d1d2      	bne.n	12e76 <__sfvwrite_r+0x11a>
   12ed0:	686e      	ldr	r6, [r5, #4]
   12ed2:	462b      	mov	r3, r5
   12ed4:	3508      	adds	r5, #8
   12ed6:	2e00      	cmp	r6, #0
   12ed8:	d0fa      	beq.n	12ed0 <__sfvwrite_r+0x174>
   12eda:	681f      	ldr	r7, [r3, #0]
   12edc:	4632      	mov	r2, r6
   12ede:	210a      	movs	r1, #10
   12ee0:	4638      	mov	r0, r7
   12ee2:	f7fd fd1d 	bl	10920 <memchr>
   12ee6:	2800      	cmp	r0, #0
   12ee8:	f000 809d 	beq.w	13026 <__sfvwrite_r+0x2ca>
   12eec:	3001      	adds	r0, #1
   12eee:	eba0 0907 	sub.w	r9, r0, r7
   12ef2:	e7c1      	b.n	12e78 <__sfvwrite_r+0x11c>
   12ef4:	6820      	ldr	r0, [r4, #0]
   12ef6:	6923      	ldr	r3, [r4, #16]
   12ef8:	4298      	cmp	r0, r3
   12efa:	d817      	bhi.n	12f2c <__sfvwrite_r+0x1d0>
   12efc:	6962      	ldr	r2, [r4, #20]
   12efe:	42b2      	cmp	r2, r6
   12f00:	d814      	bhi.n	12f2c <__sfvwrite_r+0x1d0>
   12f02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   12f06:	42b3      	cmp	r3, r6
   12f08:	bf28      	it	cs
   12f0a:	4633      	movcs	r3, r6
   12f0c:	69e1      	ldr	r1, [r4, #28]
   12f0e:	fb93 f3f2 	sdiv	r3, r3, r2
   12f12:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   12f16:	fb02 f303 	mul.w	r3, r2, r3
   12f1a:	4640      	mov	r0, r8
   12f1c:	464a      	mov	r2, r9
   12f1e:	47e0      	blx	ip
   12f20:	f1b0 0a00 	subs.w	sl, r0, #0
   12f24:	dd95      	ble.n	12e52 <__sfvwrite_r+0xf6>
   12f26:	eba6 060a 	sub.w	r6, r6, sl
   12f2a:	e779      	b.n	12e20 <__sfvwrite_r+0xc4>
   12f2c:	45b3      	cmp	fp, r6
   12f2e:	46da      	mov	sl, fp
   12f30:	bf28      	it	cs
   12f32:	46b2      	movcs	sl, r6
   12f34:	4652      	mov	r2, sl
   12f36:	4649      	mov	r1, r9
   12f38:	f7fa fe92 	bl	dc60 <memmove>
   12f3c:	68a3      	ldr	r3, [r4, #8]
   12f3e:	6822      	ldr	r2, [r4, #0]
   12f40:	eba3 030a 	sub.w	r3, r3, sl
   12f44:	4452      	add	r2, sl
   12f46:	60a3      	str	r3, [r4, #8]
   12f48:	6022      	str	r2, [r4, #0]
   12f4a:	2b00      	cmp	r3, #0
   12f4c:	d1eb      	bne.n	12f26 <__sfvwrite_r+0x1ca>
   12f4e:	4621      	mov	r1, r4
   12f50:	4640      	mov	r0, r8
   12f52:	f7fd fca1 	bl	10898 <_fflush_r>
   12f56:	2800      	cmp	r0, #0
   12f58:	d0e5      	beq.n	12f26 <__sfvwrite_r+0x1ca>
   12f5a:	e77a      	b.n	12e52 <__sfvwrite_r+0xf6>
   12f5c:	6820      	ldr	r0, [r4, #0]
   12f5e:	46b3      	mov	fp, r6
   12f60:	4632      	mov	r2, r6
   12f62:	e74f      	b.n	12e04 <__sfvwrite_r+0xa8>
   12f64:	4639      	mov	r1, r7
   12f66:	9201      	str	r2, [sp, #4]
   12f68:	f7fa fe7a 	bl	dc60 <memmove>
   12f6c:	9a01      	ldr	r2, [sp, #4]
   12f6e:	68a3      	ldr	r3, [r4, #8]
   12f70:	1a9b      	subs	r3, r3, r2
   12f72:	60a3      	str	r3, [r4, #8]
   12f74:	6823      	ldr	r3, [r4, #0]
   12f76:	4413      	add	r3, r2
   12f78:	6023      	str	r3, [r4, #0]
   12f7a:	4693      	mov	fp, r2
   12f7c:	e796      	b.n	12eac <__sfvwrite_r+0x150>
   12f7e:	6823      	ldr	r3, [r4, #0]
   12f80:	6921      	ldr	r1, [r4, #16]
   12f82:	eba3 0b01 	sub.w	fp, r3, r1
   12f86:	6963      	ldr	r3, [r4, #20]
   12f88:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   12f8c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   12f90:	f10b 0301 	add.w	r3, fp, #1
   12f94:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   12f98:	4433      	add	r3, r6
   12f9a:	4553      	cmp	r3, sl
   12f9c:	4652      	mov	r2, sl
   12f9e:	bf84      	itt	hi
   12fa0:	469a      	movhi	sl, r3
   12fa2:	4652      	movhi	r2, sl
   12fa4:	0543      	lsls	r3, r0, #21
   12fa6:	d52c      	bpl.n	13002 <__sfvwrite_r+0x2a6>
   12fa8:	4611      	mov	r1, r2
   12faa:	4640      	mov	r0, r8
   12fac:	f7fa f866 	bl	d07c <_malloc_r>
   12fb0:	2800      	cmp	r0, #0
   12fb2:	d03b      	beq.n	1302c <__sfvwrite_r+0x2d0>
   12fb4:	465a      	mov	r2, fp
   12fb6:	6921      	ldr	r1, [r4, #16]
   12fb8:	9001      	str	r0, [sp, #4]
   12fba:	f7f6 fd07 	bl	99cc <memcpy>
   12fbe:	89a2      	ldrh	r2, [r4, #12]
   12fc0:	9b01      	ldr	r3, [sp, #4]
   12fc2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   12fc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12fca:	81a2      	strh	r2, [r4, #12]
   12fcc:	eb03 000b 	add.w	r0, r3, fp
   12fd0:	6123      	str	r3, [r4, #16]
   12fd2:	ebaa 030b 	sub.w	r3, sl, fp
   12fd6:	f8c4 a014 	str.w	sl, [r4, #20]
   12fda:	60a3      	str	r3, [r4, #8]
   12fdc:	6020      	str	r0, [r4, #0]
   12fde:	46b3      	mov	fp, r6
   12fe0:	4632      	mov	r2, r6
   12fe2:	e70f      	b.n	12e04 <__sfvwrite_r+0xa8>
   12fe4:	4639      	mov	r1, r7
   12fe6:	465a      	mov	r2, fp
   12fe8:	f7fa fe3a 	bl	dc60 <memmove>
   12fec:	6823      	ldr	r3, [r4, #0]
   12fee:	445b      	add	r3, fp
   12ff0:	6023      	str	r3, [r4, #0]
   12ff2:	4621      	mov	r1, r4
   12ff4:	4640      	mov	r0, r8
   12ff6:	f7fd fc4f 	bl	10898 <_fflush_r>
   12ffa:	2800      	cmp	r0, #0
   12ffc:	f43f af56 	beq.w	12eac <__sfvwrite_r+0x150>
   13000:	e727      	b.n	12e52 <__sfvwrite_r+0xf6>
   13002:	4640      	mov	r0, r8
   13004:	f7fa faf6 	bl	d5f4 <_realloc_r>
   13008:	4603      	mov	r3, r0
   1300a:	2800      	cmp	r0, #0
   1300c:	d1de      	bne.n	12fcc <__sfvwrite_r+0x270>
   1300e:	6921      	ldr	r1, [r4, #16]
   13010:	4640      	mov	r0, r8
   13012:	f7fb f8a3 	bl	e15c <_free_r>
   13016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1301a:	220c      	movs	r2, #12
   1301c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13020:	f8c8 2000 	str.w	r2, [r8]
   13024:	e717      	b.n	12e56 <__sfvwrite_r+0xfa>
   13026:	1c72      	adds	r2, r6, #1
   13028:	4691      	mov	r9, r2
   1302a:	e726      	b.n	12e7a <__sfvwrite_r+0x11e>
   1302c:	220c      	movs	r2, #12
   1302e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13032:	f8c8 2000 	str.w	r2, [r8]
   13036:	e70e      	b.n	12e56 <__sfvwrite_r+0xfa>
   13038:	f04f 30ff 	mov.w	r0, #4294967295
   1303c:	e6be      	b.n	12dbc <__sfvwrite_r+0x60>
   1303e:	bf00      	nop
   13040:	7ffffc00 	.word	0x7ffffc00

00013044 <__swsetup_r>:
   13044:	b538      	push	{r3, r4, r5, lr}
   13046:	4b31      	ldr	r3, [pc, #196]	; (1310c <__swsetup_r+0xc8>)
   13048:	681b      	ldr	r3, [r3, #0]
   1304a:	4605      	mov	r5, r0
   1304c:	460c      	mov	r4, r1
   1304e:	b113      	cbz	r3, 13056 <__swsetup_r+0x12>
   13050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13052:	2a00      	cmp	r2, #0
   13054:	d04e      	beq.n	130f4 <__swsetup_r+0xb0>
   13056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1305a:	0718      	lsls	r0, r3, #28
   1305c:	b29a      	uxth	r2, r3
   1305e:	d51c      	bpl.n	1309a <__swsetup_r+0x56>
   13060:	6921      	ldr	r1, [r4, #16]
   13062:	b329      	cbz	r1, 130b0 <__swsetup_r+0x6c>
   13064:	f012 0001 	ands.w	r0, r2, #1
   13068:	d007      	beq.n	1307a <__swsetup_r+0x36>
   1306a:	2000      	movs	r0, #0
   1306c:	60a0      	str	r0, [r4, #8]
   1306e:	6960      	ldr	r0, [r4, #20]
   13070:	4240      	negs	r0, r0
   13072:	61a0      	str	r0, [r4, #24]
   13074:	b139      	cbz	r1, 13086 <__swsetup_r+0x42>
   13076:	2000      	movs	r0, #0
   13078:	bd38      	pop	{r3, r4, r5, pc}
   1307a:	0795      	lsls	r5, r2, #30
   1307c:	bf58      	it	pl
   1307e:	6960      	ldrpl	r0, [r4, #20]
   13080:	60a0      	str	r0, [r4, #8]
   13082:	2900      	cmp	r1, #0
   13084:	d1f7      	bne.n	13076 <__swsetup_r+0x32>
   13086:	0612      	lsls	r2, r2, #24
   13088:	bf58      	it	pl
   1308a:	4608      	movpl	r0, r1
   1308c:	d5f4      	bpl.n	13078 <__swsetup_r+0x34>
   1308e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13092:	81a3      	strh	r3, [r4, #12]
   13094:	f04f 30ff 	mov.w	r0, #4294967295
   13098:	bd38      	pop	{r3, r4, r5, pc}
   1309a:	06d1      	lsls	r1, r2, #27
   1309c:	d52e      	bpl.n	130fc <__swsetup_r+0xb8>
   1309e:	0752      	lsls	r2, r2, #29
   130a0:	d414      	bmi.n	130cc <__swsetup_r+0x88>
   130a2:	6921      	ldr	r1, [r4, #16]
   130a4:	f043 0308 	orr.w	r3, r3, #8
   130a8:	81a3      	strh	r3, [r4, #12]
   130aa:	b29a      	uxth	r2, r3
   130ac:	2900      	cmp	r1, #0
   130ae:	d1d9      	bne.n	13064 <__swsetup_r+0x20>
   130b0:	f402 7020 	and.w	r0, r2, #640	; 0x280
   130b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   130b8:	d0d4      	beq.n	13064 <__swsetup_r+0x20>
   130ba:	4621      	mov	r1, r4
   130bc:	4628      	mov	r0, r5
   130be:	f000 f93f 	bl	13340 <__smakebuf_r>
   130c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   130c6:	6921      	ldr	r1, [r4, #16]
   130c8:	b29a      	uxth	r2, r3
   130ca:	e7cb      	b.n	13064 <__swsetup_r+0x20>
   130cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   130ce:	b151      	cbz	r1, 130e6 <__swsetup_r+0xa2>
   130d0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   130d4:	4291      	cmp	r1, r2
   130d6:	d004      	beq.n	130e2 <__swsetup_r+0x9e>
   130d8:	4628      	mov	r0, r5
   130da:	f7fb f83f 	bl	e15c <_free_r>
   130de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   130e2:	2200      	movs	r2, #0
   130e4:	6322      	str	r2, [r4, #48]	; 0x30
   130e6:	6921      	ldr	r1, [r4, #16]
   130e8:	2200      	movs	r2, #0
   130ea:	e9c4 1200 	strd	r1, r2, [r4]
   130ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   130f2:	e7d7      	b.n	130a4 <__swsetup_r+0x60>
   130f4:	4618      	mov	r0, r3
   130f6:	f7fa fcff 	bl	daf8 <__sinit>
   130fa:	e7ac      	b.n	13056 <__swsetup_r+0x12>
   130fc:	2209      	movs	r2, #9
   130fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13102:	602a      	str	r2, [r5, #0]
   13104:	f04f 30ff 	mov.w	r0, #4294967295
   13108:	81a3      	strh	r3, [r4, #12]
   1310a:	bd38      	pop	{r3, r4, r5, pc}
   1310c:	1fff9160 	.word	0x1fff9160

00013110 <__fputwc>:
   13110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13114:	b083      	sub	sp, #12
   13116:	4607      	mov	r7, r0
   13118:	4688      	mov	r8, r1
   1311a:	4614      	mov	r4, r2
   1311c:	f7fa fea0 	bl	de60 <__locale_mb_cur_max>
   13120:	2801      	cmp	r0, #1
   13122:	d103      	bne.n	1312c <__fputwc+0x1c>
   13124:	f108 33ff 	add.w	r3, r8, #4294967295
   13128:	2bfe      	cmp	r3, #254	; 0xfe
   1312a:	d937      	bls.n	1319c <__fputwc+0x8c>
   1312c:	f10d 0904 	add.w	r9, sp, #4
   13130:	4642      	mov	r2, r8
   13132:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13136:	4649      	mov	r1, r9
   13138:	4638      	mov	r0, r7
   1313a:	f7fe fd09 	bl	11b50 <_wcrtomb_r>
   1313e:	1c42      	adds	r2, r0, #1
   13140:	4606      	mov	r6, r0
   13142:	d033      	beq.n	131ac <__fputwc+0x9c>
   13144:	b328      	cbz	r0, 13192 <__fputwc+0x82>
   13146:	f89d c004 	ldrb.w	ip, [sp, #4]
   1314a:	2500      	movs	r5, #0
   1314c:	e009      	b.n	13162 <__fputwc+0x52>
   1314e:	6823      	ldr	r3, [r4, #0]
   13150:	1c5a      	adds	r2, r3, #1
   13152:	6022      	str	r2, [r4, #0]
   13154:	f883 c000 	strb.w	ip, [r3]
   13158:	3501      	adds	r5, #1
   1315a:	42b5      	cmp	r5, r6
   1315c:	d219      	bcs.n	13192 <__fputwc+0x82>
   1315e:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13162:	68a3      	ldr	r3, [r4, #8]
   13164:	3b01      	subs	r3, #1
   13166:	2b00      	cmp	r3, #0
   13168:	60a3      	str	r3, [r4, #8]
   1316a:	daf0      	bge.n	1314e <__fputwc+0x3e>
   1316c:	f8d4 e018 	ldr.w	lr, [r4, #24]
   13170:	4573      	cmp	r3, lr
   13172:	4661      	mov	r1, ip
   13174:	4622      	mov	r2, r4
   13176:	4638      	mov	r0, r7
   13178:	db02      	blt.n	13180 <__fputwc+0x70>
   1317a:	f1bc 0f0a 	cmp.w	ip, #10
   1317e:	d1e6      	bne.n	1314e <__fputwc+0x3e>
   13180:	f000 f94a 	bl	13418 <__swbuf_r>
   13184:	1c43      	adds	r3, r0, #1
   13186:	d1e7      	bne.n	13158 <__fputwc+0x48>
   13188:	4606      	mov	r6, r0
   1318a:	4630      	mov	r0, r6
   1318c:	b003      	add	sp, #12
   1318e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13192:	4646      	mov	r6, r8
   13194:	4630      	mov	r0, r6
   13196:	b003      	add	sp, #12
   13198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1319c:	fa5f fc88 	uxtb.w	ip, r8
   131a0:	f88d c004 	strb.w	ip, [sp, #4]
   131a4:	4606      	mov	r6, r0
   131a6:	f10d 0904 	add.w	r9, sp, #4
   131aa:	e7ce      	b.n	1314a <__fputwc+0x3a>
   131ac:	89a3      	ldrh	r3, [r4, #12]
   131ae:	4630      	mov	r0, r6
   131b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   131b4:	81a3      	strh	r3, [r4, #12]
   131b6:	b003      	add	sp, #12
   131b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000131bc <_fputwc_r>:
   131bc:	b530      	push	{r4, r5, lr}
   131be:	6e53      	ldr	r3, [r2, #100]	; 0x64
   131c0:	f013 0f01 	tst.w	r3, #1
   131c4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   131c8:	4614      	mov	r4, r2
   131ca:	b083      	sub	sp, #12
   131cc:	4605      	mov	r5, r0
   131ce:	b29a      	uxth	r2, r3
   131d0:	d101      	bne.n	131d6 <_fputwc_r+0x1a>
   131d2:	0598      	lsls	r0, r3, #22
   131d4:	d51c      	bpl.n	13210 <_fputwc_r+0x54>
   131d6:	0490      	lsls	r0, r2, #18
   131d8:	d406      	bmi.n	131e8 <_fputwc_r+0x2c>
   131da:	6e62      	ldr	r2, [r4, #100]	; 0x64
   131dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   131e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   131e4:	81a3      	strh	r3, [r4, #12]
   131e6:	6662      	str	r2, [r4, #100]	; 0x64
   131e8:	4622      	mov	r2, r4
   131ea:	4628      	mov	r0, r5
   131ec:	f7ff ff90 	bl	13110 <__fputwc>
   131f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   131f2:	07da      	lsls	r2, r3, #31
   131f4:	4605      	mov	r5, r0
   131f6:	d402      	bmi.n	131fe <_fputwc_r+0x42>
   131f8:	89a3      	ldrh	r3, [r4, #12]
   131fa:	059b      	lsls	r3, r3, #22
   131fc:	d502      	bpl.n	13204 <_fputwc_r+0x48>
   131fe:	4628      	mov	r0, r5
   13200:	b003      	add	sp, #12
   13202:	bd30      	pop	{r4, r5, pc}
   13204:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13206:	f7fa fec7 	bl	df98 <__retarget_lock_release_recursive>
   1320a:	4628      	mov	r0, r5
   1320c:	b003      	add	sp, #12
   1320e:	bd30      	pop	{r4, r5, pc}
   13210:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13212:	9101      	str	r1, [sp, #4]
   13214:	f7fa febe 	bl	df94 <__retarget_lock_acquire_recursive>
   13218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1321c:	9901      	ldr	r1, [sp, #4]
   1321e:	b29a      	uxth	r2, r3
   13220:	e7d9      	b.n	131d6 <_fputwc_r+0x1a>
   13222:	bf00      	nop

00013224 <_wcsnrtombs_l>:
   13224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13228:	b089      	sub	sp, #36	; 0x24
   1322a:	e9dd 8a13 	ldrd	r8, sl, [sp, #76]	; 0x4c
   1322e:	9f12      	ldr	r7, [sp, #72]	; 0x48
   13230:	9101      	str	r1, [sp, #4]
   13232:	4681      	mov	r9, r0
   13234:	9203      	str	r2, [sp, #12]
   13236:	461e      	mov	r6, r3
   13238:	f1b8 0f00 	cmp.w	r8, #0
   1323c:	d055      	beq.n	132ea <_wcsnrtombs_l+0xc6>
   1323e:	9b01      	ldr	r3, [sp, #4]
   13240:	2b00      	cmp	r3, #0
   13242:	d057      	beq.n	132f4 <_wcsnrtombs_l+0xd0>
   13244:	9b03      	ldr	r3, [sp, #12]
   13246:	681d      	ldr	r5, [r3, #0]
   13248:	2f00      	cmp	r7, #0
   1324a:	d063      	beq.n	13314 <_wcsnrtombs_l+0xf0>
   1324c:	1e74      	subs	r4, r6, #1
   1324e:	b32e      	cbz	r6, 1329c <_wcsnrtombs_l+0x78>
   13250:	9b01      	ldr	r3, [sp, #4]
   13252:	9302      	str	r3, [sp, #8]
   13254:	3d04      	subs	r5, #4
   13256:	2600      	movs	r6, #0
   13258:	e00a      	b.n	13270 <_wcsnrtombs_l+0x4c>
   1325a:	9b01      	ldr	r3, [sp, #4]
   1325c:	bb13      	cbnz	r3, 132a4 <_wcsnrtombs_l+0x80>
   1325e:	682a      	ldr	r2, [r5, #0]
   13260:	2a00      	cmp	r2, #0
   13262:	d035      	beq.n	132d0 <_wcsnrtombs_l+0xac>
   13264:	45bc      	cmp	ip, r7
   13266:	d257      	bcs.n	13318 <_wcsnrtombs_l+0xf4>
   13268:	3c01      	subs	r4, #1
   1326a:	1c63      	adds	r3, r4, #1
   1326c:	4666      	mov	r6, ip
   1326e:	d015      	beq.n	1329c <_wcsnrtombs_l+0x78>
   13270:	f8d8 3000 	ldr.w	r3, [r8]
   13274:	f855 2f04 	ldr.w	r2, [r5, #4]!
   13278:	9300      	str	r3, [sp, #0]
   1327a:	f8da c0e0 	ldr.w	ip, [sl, #224]	; 0xe0
   1327e:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13282:	4643      	mov	r3, r8
   13284:	a905      	add	r1, sp, #20
   13286:	4648      	mov	r0, r9
   13288:	47e0      	blx	ip
   1328a:	1c42      	adds	r2, r0, #1
   1328c:	d037      	beq.n	132fe <_wcsnrtombs_l+0xda>
   1328e:	eb00 0c06 	add.w	ip, r0, r6
   13292:	45bc      	cmp	ip, r7
   13294:	d9e1      	bls.n	1325a <_wcsnrtombs_l+0x36>
   13296:	9b00      	ldr	r3, [sp, #0]
   13298:	e9c8 3b00 	strd	r3, fp, [r8]
   1329c:	4630      	mov	r0, r6
   1329e:	b009      	add	sp, #36	; 0x24
   132a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132a4:	2800      	cmp	r0, #0
   132a6:	dd0c      	ble.n	132c2 <_wcsnrtombs_l+0x9e>
   132a8:	9b02      	ldr	r3, [sp, #8]
   132aa:	4418      	add	r0, r3
   132ac:	1e5a      	subs	r2, r3, #1
   132ae:	a905      	add	r1, sp, #20
   132b0:	f100 3eff 	add.w	lr, r0, #4294967295
   132b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   132b8:	f802 3f01 	strb.w	r3, [r2, #1]!
   132bc:	4572      	cmp	r2, lr
   132be:	d1f9      	bne.n	132b4 <_wcsnrtombs_l+0x90>
   132c0:	9002      	str	r0, [sp, #8]
   132c2:	9b03      	ldr	r3, [sp, #12]
   132c4:	681a      	ldr	r2, [r3, #0]
   132c6:	3204      	adds	r2, #4
   132c8:	601a      	str	r2, [r3, #0]
   132ca:	682a      	ldr	r2, [r5, #0]
   132cc:	2a00      	cmp	r2, #0
   132ce:	d1c9      	bne.n	13264 <_wcsnrtombs_l+0x40>
   132d0:	9b01      	ldr	r3, [sp, #4]
   132d2:	b10b      	cbz	r3, 132d8 <_wcsnrtombs_l+0xb4>
   132d4:	9b03      	ldr	r3, [sp, #12]
   132d6:	601a      	str	r2, [r3, #0]
   132d8:	f10c 36ff 	add.w	r6, ip, #4294967295
   132dc:	2200      	movs	r2, #0
   132de:	4630      	mov	r0, r6
   132e0:	f8c8 2000 	str.w	r2, [r8]
   132e4:	b009      	add	sp, #36	; 0x24
   132e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132ea:	9b01      	ldr	r3, [sp, #4]
   132ec:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   132f0:	2b00      	cmp	r3, #0
   132f2:	d1a7      	bne.n	13244 <_wcsnrtombs_l+0x20>
   132f4:	9b03      	ldr	r3, [sp, #12]
   132f6:	f04f 37ff 	mov.w	r7, #4294967295
   132fa:	681d      	ldr	r5, [r3, #0]
   132fc:	e7a6      	b.n	1324c <_wcsnrtombs_l+0x28>
   132fe:	4606      	mov	r6, r0
   13300:	218a      	movs	r1, #138	; 0x8a
   13302:	2200      	movs	r2, #0
   13304:	4630      	mov	r0, r6
   13306:	f8c9 1000 	str.w	r1, [r9]
   1330a:	f8c8 2000 	str.w	r2, [r8]
   1330e:	b009      	add	sp, #36	; 0x24
   13310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13314:	463e      	mov	r6, r7
   13316:	e7c1      	b.n	1329c <_wcsnrtombs_l+0x78>
   13318:	4666      	mov	r6, ip
   1331a:	e7bf      	b.n	1329c <_wcsnrtombs_l+0x78>

0001331c <_wcsnrtombs_r>:
   1331c:	b510      	push	{r4, lr}
   1331e:	b084      	sub	sp, #16
   13320:	4c05      	ldr	r4, [pc, #20]	; (13338 <_wcsnrtombs_r+0x1c>)
   13322:	9806      	ldr	r0, [sp, #24]
   13324:	9000      	str	r0, [sp, #0]
   13326:	9807      	ldr	r0, [sp, #28]
   13328:	9001      	str	r0, [sp, #4]
   1332a:	4804      	ldr	r0, [pc, #16]	; (1333c <_wcsnrtombs_r+0x20>)
   1332c:	6800      	ldr	r0, [r0, #0]
   1332e:	9402      	str	r4, [sp, #8]
   13330:	f7ff ff78 	bl	13224 <_wcsnrtombs_l>
   13334:	b004      	add	sp, #16
   13336:	bd10      	pop	{r4, pc}
   13338:	1fff8ed4 	.word	0x1fff8ed4
   1333c:	1fff9160 	.word	0x1fff9160

00013340 <__smakebuf_r>:
   13340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13344:	898b      	ldrh	r3, [r1, #12]
   13346:	460c      	mov	r4, r1
   13348:	0799      	lsls	r1, r3, #30
   1334a:	b096      	sub	sp, #88	; 0x58
   1334c:	d508      	bpl.n	13360 <__smakebuf_r+0x20>
   1334e:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13352:	2201      	movs	r2, #1
   13354:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13358:	6023      	str	r3, [r4, #0]
   1335a:	b016      	add	sp, #88	; 0x58
   1335c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13364:	2900      	cmp	r1, #0
   13366:	4606      	mov	r6, r0
   13368:	db25      	blt.n	133b6 <__smakebuf_r+0x76>
   1336a:	466a      	mov	r2, sp
   1336c:	f000 f8ac 	bl	134c8 <_fstat_r>
   13370:	2800      	cmp	r0, #0
   13372:	db1f      	blt.n	133b4 <__smakebuf_r+0x74>
   13374:	9d01      	ldr	r5, [sp, #4]
   13376:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1337a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1337e:	fab5 f585 	clz	r5, r5
   13382:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13386:	096d      	lsrs	r5, r5, #5
   13388:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1338c:	4641      	mov	r1, r8
   1338e:	4630      	mov	r0, r6
   13390:	f7f9 fe74 	bl	d07c <_malloc_r>
   13394:	b1e0      	cbz	r0, 133d0 <__smakebuf_r+0x90>
   13396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1339a:	f8c4 8014 	str.w	r8, [r4, #20]
   1339e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   133a2:	6020      	str	r0, [r4, #0]
   133a4:	6120      	str	r0, [r4, #16]
   133a6:	81a3      	strh	r3, [r4, #12]
   133a8:	bb35      	cbnz	r5, 133f8 <__smakebuf_r+0xb8>
   133aa:	433b      	orrs	r3, r7
   133ac:	81a3      	strh	r3, [r4, #12]
   133ae:	b016      	add	sp, #88	; 0x58
   133b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   133b4:	89a3      	ldrh	r3, [r4, #12]
   133b6:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   133ba:	d019      	beq.n	133f0 <__smakebuf_r+0xb0>
   133bc:	f04f 0840 	mov.w	r8, #64	; 0x40
   133c0:	2500      	movs	r5, #0
   133c2:	4641      	mov	r1, r8
   133c4:	4630      	mov	r0, r6
   133c6:	462f      	mov	r7, r5
   133c8:	f7f9 fe58 	bl	d07c <_malloc_r>
   133cc:	2800      	cmp	r0, #0
   133ce:	d1e2      	bne.n	13396 <__smakebuf_r+0x56>
   133d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   133d4:	059a      	lsls	r2, r3, #22
   133d6:	d4c0      	bmi.n	1335a <__smakebuf_r+0x1a>
   133d8:	f023 0303 	bic.w	r3, r3, #3
   133dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   133e0:	f043 0302 	orr.w	r3, r3, #2
   133e4:	2101      	movs	r1, #1
   133e6:	e9c4 2104 	strd	r2, r1, [r4, #16]
   133ea:	81a3      	strh	r3, [r4, #12]
   133ec:	6022      	str	r2, [r4, #0]
   133ee:	e7b4      	b.n	1335a <__smakebuf_r+0x1a>
   133f0:	f44f 6880 	mov.w	r8, #1024	; 0x400
   133f4:	462f      	mov	r7, r5
   133f6:	e7c9      	b.n	1338c <__smakebuf_r+0x4c>
   133f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   133fc:	4630      	mov	r0, r6
   133fe:	f000 f879 	bl	134f4 <_isatty_r>
   13402:	b910      	cbnz	r0, 1340a <__smakebuf_r+0xca>
   13404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13408:	e7cf      	b.n	133aa <__smakebuf_r+0x6a>
   1340a:	89a3      	ldrh	r3, [r4, #12]
   1340c:	f023 0303 	bic.w	r3, r3, #3
   13410:	f043 0301 	orr.w	r3, r3, #1
   13414:	b21b      	sxth	r3, r3
   13416:	e7c8      	b.n	133aa <__smakebuf_r+0x6a>

00013418 <__swbuf_r>:
   13418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1341a:	460d      	mov	r5, r1
   1341c:	4614      	mov	r4, r2
   1341e:	4606      	mov	r6, r0
   13420:	b110      	cbz	r0, 13428 <__swbuf_r+0x10>
   13422:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13424:	2b00      	cmp	r3, #0
   13426:	d04c      	beq.n	134c2 <__swbuf_r+0xaa>
   13428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1342c:	69a3      	ldr	r3, [r4, #24]
   1342e:	60a3      	str	r3, [r4, #8]
   13430:	0717      	lsls	r7, r2, #28
   13432:	b290      	uxth	r0, r2
   13434:	d51b      	bpl.n	1346e <__swbuf_r+0x56>
   13436:	6923      	ldr	r3, [r4, #16]
   13438:	b1cb      	cbz	r3, 1346e <__swbuf_r+0x56>
   1343a:	b2ed      	uxtb	r5, r5
   1343c:	0481      	lsls	r1, r0, #18
   1343e:	462f      	mov	r7, r5
   13440:	d522      	bpl.n	13488 <__swbuf_r+0x70>
   13442:	6822      	ldr	r2, [r4, #0]
   13444:	6961      	ldr	r1, [r4, #20]
   13446:	1ad3      	subs	r3, r2, r3
   13448:	4299      	cmp	r1, r3
   1344a:	dd29      	ble.n	134a0 <__swbuf_r+0x88>
   1344c:	3301      	adds	r3, #1
   1344e:	68a1      	ldr	r1, [r4, #8]
   13450:	3901      	subs	r1, #1
   13452:	60a1      	str	r1, [r4, #8]
   13454:	1c51      	adds	r1, r2, #1
   13456:	6021      	str	r1, [r4, #0]
   13458:	7015      	strb	r5, [r2, #0]
   1345a:	6962      	ldr	r2, [r4, #20]
   1345c:	429a      	cmp	r2, r3
   1345e:	d027      	beq.n	134b0 <__swbuf_r+0x98>
   13460:	89a3      	ldrh	r3, [r4, #12]
   13462:	07db      	lsls	r3, r3, #31
   13464:	d501      	bpl.n	1346a <__swbuf_r+0x52>
   13466:	2d0a      	cmp	r5, #10
   13468:	d022      	beq.n	134b0 <__swbuf_r+0x98>
   1346a:	4638      	mov	r0, r7
   1346c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1346e:	4621      	mov	r1, r4
   13470:	4630      	mov	r0, r6
   13472:	f7ff fde7 	bl	13044 <__swsetup_r>
   13476:	bb08      	cbnz	r0, 134bc <__swbuf_r+0xa4>
   13478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1347c:	6923      	ldr	r3, [r4, #16]
   1347e:	b290      	uxth	r0, r2
   13480:	b2ed      	uxtb	r5, r5
   13482:	0481      	lsls	r1, r0, #18
   13484:	462f      	mov	r7, r5
   13486:	d4dc      	bmi.n	13442 <__swbuf_r+0x2a>
   13488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1348c:	81a2      	strh	r2, [r4, #12]
   1348e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13490:	6961      	ldr	r1, [r4, #20]
   13492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   13496:	6662      	str	r2, [r4, #100]	; 0x64
   13498:	6822      	ldr	r2, [r4, #0]
   1349a:	1ad3      	subs	r3, r2, r3
   1349c:	4299      	cmp	r1, r3
   1349e:	dcd5      	bgt.n	1344c <__swbuf_r+0x34>
   134a0:	4621      	mov	r1, r4
   134a2:	4630      	mov	r0, r6
   134a4:	f7fd f9f8 	bl	10898 <_fflush_r>
   134a8:	b940      	cbnz	r0, 134bc <__swbuf_r+0xa4>
   134aa:	6822      	ldr	r2, [r4, #0]
   134ac:	2301      	movs	r3, #1
   134ae:	e7ce      	b.n	1344e <__swbuf_r+0x36>
   134b0:	4621      	mov	r1, r4
   134b2:	4630      	mov	r0, r6
   134b4:	f7fd f9f0 	bl	10898 <_fflush_r>
   134b8:	2800      	cmp	r0, #0
   134ba:	d0d6      	beq.n	1346a <__swbuf_r+0x52>
   134bc:	f04f 37ff 	mov.w	r7, #4294967295
   134c0:	e7d3      	b.n	1346a <__swbuf_r+0x52>
   134c2:	f7fa fb19 	bl	daf8 <__sinit>
   134c6:	e7af      	b.n	13428 <__swbuf_r+0x10>

000134c8 <_fstat_r>:
   134c8:	b570      	push	{r4, r5, r6, lr}
   134ca:	460c      	mov	r4, r1
   134cc:	4d08      	ldr	r5, [pc, #32]	; (134f0 <_fstat_r+0x28>)
   134ce:	4603      	mov	r3, r0
   134d0:	2600      	movs	r6, #0
   134d2:	4620      	mov	r0, r4
   134d4:	4611      	mov	r1, r2
   134d6:	461c      	mov	r4, r3
   134d8:	602e      	str	r6, [r5, #0]
   134da:	f7f6 fb95 	bl	9c08 <_fstat>
   134de:	1c43      	adds	r3, r0, #1
   134e0:	d000      	beq.n	134e4 <_fstat_r+0x1c>
   134e2:	bd70      	pop	{r4, r5, r6, pc}
   134e4:	682b      	ldr	r3, [r5, #0]
   134e6:	2b00      	cmp	r3, #0
   134e8:	d0fb      	beq.n	134e2 <_fstat_r+0x1a>
   134ea:	6023      	str	r3, [r4, #0]
   134ec:	bd70      	pop	{r4, r5, r6, pc}
   134ee:	bf00      	nop
   134f0:	1fffe06c 	.word	0x1fffe06c

000134f4 <_isatty_r>:
   134f4:	b538      	push	{r3, r4, r5, lr}
   134f6:	4d07      	ldr	r5, [pc, #28]	; (13514 <_isatty_r+0x20>)
   134f8:	2200      	movs	r2, #0
   134fa:	4604      	mov	r4, r0
   134fc:	4608      	mov	r0, r1
   134fe:	602a      	str	r2, [r5, #0]
   13500:	f7f6 fb88 	bl	9c14 <_isatty>
   13504:	1c43      	adds	r3, r0, #1
   13506:	d000      	beq.n	1350a <_isatty_r+0x16>
   13508:	bd38      	pop	{r3, r4, r5, pc}
   1350a:	682b      	ldr	r3, [r5, #0]
   1350c:	2b00      	cmp	r3, #0
   1350e:	d0fb      	beq.n	13508 <_isatty_r+0x14>
   13510:	6023      	str	r3, [r4, #0]
   13512:	bd38      	pop	{r3, r4, r5, pc}
   13514:	1fffe06c 	.word	0x1fffe06c

00013518 <__aeabi_dmul>:
   13518:	b570      	push	{r4, r5, r6, lr}
   1351a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1351e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   13526:	bf1d      	ittte	ne
   13528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1352c:	ea94 0f0c 	teqne	r4, ip
   13530:	ea95 0f0c 	teqne	r5, ip
   13534:	f000 f8de 	bleq	136f4 <__aeabi_dmul+0x1dc>
   13538:	442c      	add	r4, r5
   1353a:	ea81 0603 	eor.w	r6, r1, r3
   1353e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   13542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   13546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1354a:	bf18      	it	ne
   1354c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   13550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13558:	d038      	beq.n	135cc <__aeabi_dmul+0xb4>
   1355a:	fba0 ce02 	umull	ip, lr, r0, r2
   1355e:	f04f 0500 	mov.w	r5, #0
   13562:	fbe1 e502 	umlal	lr, r5, r1, r2
   13566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1356a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1356e:	f04f 0600 	mov.w	r6, #0
   13572:	fbe1 5603 	umlal	r5, r6, r1, r3
   13576:	f09c 0f00 	teq	ip, #0
   1357a:	bf18      	it	ne
   1357c:	f04e 0e01 	orrne.w	lr, lr, #1
   13580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   13584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   13588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1358c:	d204      	bcs.n	13598 <__aeabi_dmul+0x80>
   1358e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   13592:	416d      	adcs	r5, r5
   13594:	eb46 0606 	adc.w	r6, r6, r6
   13598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1359c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   135a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   135a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   135a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   135ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   135b0:	bf88      	it	hi
   135b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   135b6:	d81e      	bhi.n	135f6 <__aeabi_dmul+0xde>
   135b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   135bc:	bf08      	it	eq
   135be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   135c2:	f150 0000 	adcs.w	r0, r0, #0
   135c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   135ca:	bd70      	pop	{r4, r5, r6, pc}
   135cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   135d0:	ea46 0101 	orr.w	r1, r6, r1
   135d4:	ea40 0002 	orr.w	r0, r0, r2
   135d8:	ea81 0103 	eor.w	r1, r1, r3
   135dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   135e0:	bfc2      	ittt	gt
   135e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   135e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   135ea:	bd70      	popgt	{r4, r5, r6, pc}
   135ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   135f0:	f04f 0e00 	mov.w	lr, #0
   135f4:	3c01      	subs	r4, #1
   135f6:	f300 80ab 	bgt.w	13750 <__aeabi_dmul+0x238>
   135fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   135fe:	bfde      	ittt	le
   13600:	2000      	movle	r0, #0
   13602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   13606:	bd70      	pople	{r4, r5, r6, pc}
   13608:	f1c4 0400 	rsb	r4, r4, #0
   1360c:	3c20      	subs	r4, #32
   1360e:	da35      	bge.n	1367c <__aeabi_dmul+0x164>
   13610:	340c      	adds	r4, #12
   13612:	dc1b      	bgt.n	1364c <__aeabi_dmul+0x134>
   13614:	f104 0414 	add.w	r4, r4, #20
   13618:	f1c4 0520 	rsb	r5, r4, #32
   1361c:	fa00 f305 	lsl.w	r3, r0, r5
   13620:	fa20 f004 	lsr.w	r0, r0, r4
   13624:	fa01 f205 	lsl.w	r2, r1, r5
   13628:	ea40 0002 	orr.w	r0, r0, r2
   1362c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   13630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   13634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   13638:	fa21 f604 	lsr.w	r6, r1, r4
   1363c:	eb42 0106 	adc.w	r1, r2, r6
   13640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13644:	bf08      	it	eq
   13646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1364a:	bd70      	pop	{r4, r5, r6, pc}
   1364c:	f1c4 040c 	rsb	r4, r4, #12
   13650:	f1c4 0520 	rsb	r5, r4, #32
   13654:	fa00 f304 	lsl.w	r3, r0, r4
   13658:	fa20 f005 	lsr.w	r0, r0, r5
   1365c:	fa01 f204 	lsl.w	r2, r1, r4
   13660:	ea40 0002 	orr.w	r0, r0, r2
   13664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1366c:	f141 0100 	adc.w	r1, r1, #0
   13670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13674:	bf08      	it	eq
   13676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1367a:	bd70      	pop	{r4, r5, r6, pc}
   1367c:	f1c4 0520 	rsb	r5, r4, #32
   13680:	fa00 f205 	lsl.w	r2, r0, r5
   13684:	ea4e 0e02 	orr.w	lr, lr, r2
   13688:	fa20 f304 	lsr.w	r3, r0, r4
   1368c:	fa01 f205 	lsl.w	r2, r1, r5
   13690:	ea43 0302 	orr.w	r3, r3, r2
   13694:	fa21 f004 	lsr.w	r0, r1, r4
   13698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1369c:	fa21 f204 	lsr.w	r2, r1, r4
   136a0:	ea20 0002 	bic.w	r0, r0, r2
   136a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   136a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   136ac:	bf08      	it	eq
   136ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   136b2:	bd70      	pop	{r4, r5, r6, pc}
   136b4:	f094 0f00 	teq	r4, #0
   136b8:	d10f      	bne.n	136da <__aeabi_dmul+0x1c2>
   136ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   136be:	0040      	lsls	r0, r0, #1
   136c0:	eb41 0101 	adc.w	r1, r1, r1
   136c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   136c8:	bf08      	it	eq
   136ca:	3c01      	subeq	r4, #1
   136cc:	d0f7      	beq.n	136be <__aeabi_dmul+0x1a6>
   136ce:	ea41 0106 	orr.w	r1, r1, r6
   136d2:	f095 0f00 	teq	r5, #0
   136d6:	bf18      	it	ne
   136d8:	4770      	bxne	lr
   136da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   136de:	0052      	lsls	r2, r2, #1
   136e0:	eb43 0303 	adc.w	r3, r3, r3
   136e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   136e8:	bf08      	it	eq
   136ea:	3d01      	subeq	r5, #1
   136ec:	d0f7      	beq.n	136de <__aeabi_dmul+0x1c6>
   136ee:	ea43 0306 	orr.w	r3, r3, r6
   136f2:	4770      	bx	lr
   136f4:	ea94 0f0c 	teq	r4, ip
   136f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   136fc:	bf18      	it	ne
   136fe:	ea95 0f0c 	teqne	r5, ip
   13702:	d00c      	beq.n	1371e <__aeabi_dmul+0x206>
   13704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13708:	bf18      	it	ne
   1370a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1370e:	d1d1      	bne.n	136b4 <__aeabi_dmul+0x19c>
   13710:	ea81 0103 	eor.w	r1, r1, r3
   13714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13718:	f04f 0000 	mov.w	r0, #0
   1371c:	bd70      	pop	{r4, r5, r6, pc}
   1371e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13722:	bf06      	itte	eq
   13724:	4610      	moveq	r0, r2
   13726:	4619      	moveq	r1, r3
   13728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1372c:	d019      	beq.n	13762 <__aeabi_dmul+0x24a>
   1372e:	ea94 0f0c 	teq	r4, ip
   13732:	d102      	bne.n	1373a <__aeabi_dmul+0x222>
   13734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   13738:	d113      	bne.n	13762 <__aeabi_dmul+0x24a>
   1373a:	ea95 0f0c 	teq	r5, ip
   1373e:	d105      	bne.n	1374c <__aeabi_dmul+0x234>
   13740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   13744:	bf1c      	itt	ne
   13746:	4610      	movne	r0, r2
   13748:	4619      	movne	r1, r3
   1374a:	d10a      	bne.n	13762 <__aeabi_dmul+0x24a>
   1374c:	ea81 0103 	eor.w	r1, r1, r3
   13750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1375c:	f04f 0000 	mov.w	r0, #0
   13760:	bd70      	pop	{r4, r5, r6, pc}
   13762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1376a:	bd70      	pop	{r4, r5, r6, pc}

0001376c <__aeabi_ddiv>:
   1376c:	b570      	push	{r4, r5, r6, lr}
   1376e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1377a:	bf1d      	ittte	ne
   1377c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   13780:	ea94 0f0c 	teqne	r4, ip
   13784:	ea95 0f0c 	teqne	r5, ip
   13788:	f000 f8a7 	bleq	138da <__aeabi_ddiv+0x16e>
   1378c:	eba4 0405 	sub.w	r4, r4, r5
   13790:	ea81 0e03 	eor.w	lr, r1, r3
   13794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13798:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1379c:	f000 8088 	beq.w	138b0 <__aeabi_ddiv+0x144>
   137a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   137a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   137a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   137ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   137b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   137b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   137b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   137bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   137c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   137c4:	429d      	cmp	r5, r3
   137c6:	bf08      	it	eq
   137c8:	4296      	cmpeq	r6, r2
   137ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   137ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   137d2:	d202      	bcs.n	137da <__aeabi_ddiv+0x6e>
   137d4:	085b      	lsrs	r3, r3, #1
   137d6:	ea4f 0232 	mov.w	r2, r2, rrx
   137da:	1ab6      	subs	r6, r6, r2
   137dc:	eb65 0503 	sbc.w	r5, r5, r3
   137e0:	085b      	lsrs	r3, r3, #1
   137e2:	ea4f 0232 	mov.w	r2, r2, rrx
   137e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   137ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   137ee:	ebb6 0e02 	subs.w	lr, r6, r2
   137f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   137f6:	bf22      	ittt	cs
   137f8:	1ab6      	subcs	r6, r6, r2
   137fa:	4675      	movcs	r5, lr
   137fc:	ea40 000c 	orrcs.w	r0, r0, ip
   13800:	085b      	lsrs	r3, r3, #1
   13802:	ea4f 0232 	mov.w	r2, r2, rrx
   13806:	ebb6 0e02 	subs.w	lr, r6, r2
   1380a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1380e:	bf22      	ittt	cs
   13810:	1ab6      	subcs	r6, r6, r2
   13812:	4675      	movcs	r5, lr
   13814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   13818:	085b      	lsrs	r3, r3, #1
   1381a:	ea4f 0232 	mov.w	r2, r2, rrx
   1381e:	ebb6 0e02 	subs.w	lr, r6, r2
   13822:	eb75 0e03 	sbcs.w	lr, r5, r3
   13826:	bf22      	ittt	cs
   13828:	1ab6      	subcs	r6, r6, r2
   1382a:	4675      	movcs	r5, lr
   1382c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   13830:	085b      	lsrs	r3, r3, #1
   13832:	ea4f 0232 	mov.w	r2, r2, rrx
   13836:	ebb6 0e02 	subs.w	lr, r6, r2
   1383a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1383e:	bf22      	ittt	cs
   13840:	1ab6      	subcs	r6, r6, r2
   13842:	4675      	movcs	r5, lr
   13844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   13848:	ea55 0e06 	orrs.w	lr, r5, r6
   1384c:	d018      	beq.n	13880 <__aeabi_ddiv+0x114>
   1384e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   13852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   13856:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1385a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1385e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   13862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   13866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1386a:	d1c0      	bne.n	137ee <__aeabi_ddiv+0x82>
   1386c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13870:	d10b      	bne.n	1388a <__aeabi_ddiv+0x11e>
   13872:	ea41 0100 	orr.w	r1, r1, r0
   13876:	f04f 0000 	mov.w	r0, #0
   1387a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1387e:	e7b6      	b.n	137ee <__aeabi_ddiv+0x82>
   13880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13884:	bf04      	itt	eq
   13886:	4301      	orreq	r1, r0
   13888:	2000      	moveq	r0, #0
   1388a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1388e:	bf88      	it	hi
   13890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13894:	f63f aeaf 	bhi.w	135f6 <__aeabi_dmul+0xde>
   13898:	ebb5 0c03 	subs.w	ip, r5, r3
   1389c:	bf04      	itt	eq
   1389e:	ebb6 0c02 	subseq.w	ip, r6, r2
   138a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   138a6:	f150 0000 	adcs.w	r0, r0, #0
   138aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   138ae:	bd70      	pop	{r4, r5, r6, pc}
   138b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   138b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   138b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   138bc:	bfc2      	ittt	gt
   138be:	ebd4 050c 	rsbsgt	r5, r4, ip
   138c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   138c6:	bd70      	popgt	{r4, r5, r6, pc}
   138c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   138cc:	f04f 0e00 	mov.w	lr, #0
   138d0:	3c01      	subs	r4, #1
   138d2:	e690      	b.n	135f6 <__aeabi_dmul+0xde>
   138d4:	ea45 0e06 	orr.w	lr, r5, r6
   138d8:	e68d      	b.n	135f6 <__aeabi_dmul+0xde>
   138da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   138de:	ea94 0f0c 	teq	r4, ip
   138e2:	bf08      	it	eq
   138e4:	ea95 0f0c 	teqeq	r5, ip
   138e8:	f43f af3b 	beq.w	13762 <__aeabi_dmul+0x24a>
   138ec:	ea94 0f0c 	teq	r4, ip
   138f0:	d10a      	bne.n	13908 <__aeabi_ddiv+0x19c>
   138f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   138f6:	f47f af34 	bne.w	13762 <__aeabi_dmul+0x24a>
   138fa:	ea95 0f0c 	teq	r5, ip
   138fe:	f47f af25 	bne.w	1374c <__aeabi_dmul+0x234>
   13902:	4610      	mov	r0, r2
   13904:	4619      	mov	r1, r3
   13906:	e72c      	b.n	13762 <__aeabi_dmul+0x24a>
   13908:	ea95 0f0c 	teq	r5, ip
   1390c:	d106      	bne.n	1391c <__aeabi_ddiv+0x1b0>
   1390e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13912:	f43f aefd 	beq.w	13710 <__aeabi_dmul+0x1f8>
   13916:	4610      	mov	r0, r2
   13918:	4619      	mov	r1, r3
   1391a:	e722      	b.n	13762 <__aeabi_dmul+0x24a>
   1391c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13920:	bf18      	it	ne
   13922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13926:	f47f aec5 	bne.w	136b4 <__aeabi_dmul+0x19c>
   1392a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1392e:	f47f af0d 	bne.w	1374c <__aeabi_dmul+0x234>
   13932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   13936:	f47f aeeb 	bne.w	13710 <__aeabi_dmul+0x1f8>
   1393a:	e712      	b.n	13762 <__aeabi_dmul+0x24a>

0001393c <__aeabi_d2iz>:
   1393c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13944:	d215      	bcs.n	13972 <__aeabi_d2iz+0x36>
   13946:	d511      	bpl.n	1396c <__aeabi_d2iz+0x30>
   13948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1394c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   13950:	d912      	bls.n	13978 <__aeabi_d2iz+0x3c>
   13952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1395a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1395e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13962:	fa23 f002 	lsr.w	r0, r3, r2
   13966:	bf18      	it	ne
   13968:	4240      	negne	r0, r0
   1396a:	4770      	bx	lr
   1396c:	f04f 0000 	mov.w	r0, #0
   13970:	4770      	bx	lr
   13972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13976:	d105      	bne.n	13984 <__aeabi_d2iz+0x48>
   13978:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1397c:	bf08      	it	eq
   1397e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13982:	4770      	bx	lr
   13984:	f04f 0000 	mov.w	r0, #0
   13988:	4770      	bx	lr
   1398a:	bf00      	nop
   1398c:	6d655420 	.word	0x6d655420
   13990:	6f462070 	.word	0x6f462070
   13994:	00646e75 	.word	0x00646e75
   13998:	ffff002c 	.word	0xffff002c
   1399c:	75646f4d 	.word	0x75646f4d
   139a0:	2520656c 	.word	0x2520656c
   139a4:	78652069 	.word	0x78652069
   139a8:	73747369 	.word	0x73747369
   139ac:	6552202e 	.word	0x6552202e
   139b0:	6e696461 	.word	0x6e696461
   139b4:	6f762067 	.word	0x6f762067
   139b8:	6761746c 	.word	0x6761746c
   139bc:	6e612065 	.word	0x6e612065
   139c0:	65742064 	.word	0x65742064
   139c4:	7265706d 	.word	0x7265706d
   139c8:	72757461 	.word	0x72757461
   139cc:	61762065 	.word	0x61762065
   139d0:	7365756c 	.word	0x7365756c
   139d4:	00000000 	.word	0x00000000
   139d8:	75646f4d 	.word	0x75646f4d
   139dc:	7620656c 	.word	0x7620656c
   139e0:	61746c6f 	.word	0x61746c6f
   139e4:	203a6567 	.word	0x203a6567
   139e8:	00006625 	.word	0x00006625
   139ec:	65776f4c 	.word	0x65776f4c
   139f0:	43207473 	.word	0x43207473
   139f4:	206c6c65 	.word	0x206c6c65
   139f8:	25203a56 	.word	0x25203a56
   139fc:	20202066 	.word	0x20202066
   13a00:	69482020 	.word	0x69482020
   13a04:	73656867 	.word	0x73656867
   13a08:	65432074 	.word	0x65432074
   13a0c:	56206c6c 	.word	0x56206c6c
   13a10:	6625203a 	.word	0x6625203a
   13a14:	00000000 	.word	0x00000000
   13a18:	706d6554 	.word	0x706d6554
   13a1c:	25203a31 	.word	0x25203a31
   13a20:	20202066 	.word	0x20202066
   13a24:	20202020 	.word	0x20202020
   13a28:	706d6554 	.word	0x706d6554
   13a2c:	25203a32 	.word	0x25203a32
   13a30:	00000066 	.word	0x00000066
   13a34:	20656e4f 	.word	0x20656e4f
   13a38:	6d20726f 	.word	0x6d20726f
   13a3c:	2065726f 	.word	0x2065726f
   13a40:	20534d42 	.word	0x20534d42
   13a44:	75646f6d 	.word	0x75646f6d
   13a48:	2073656c 	.word	0x2073656c
   13a4c:	65766168 	.word	0x65766168
   13a50:	746e6520 	.word	0x746e6520
   13a54:	64657265 	.word	0x64657265
   13a58:	65687420 	.word	0x65687420
   13a5c:	75616620 	.word	0x75616620
   13a60:	7320746c 	.word	0x7320746c
   13a64:	65746174 	.word	0x65746174
   13a68:	00000021 	.word	0x00000021
   13a6c:	206c6c41 	.word	0x206c6c41
   13a70:	75646f6d 	.word	0x75646f6d
   13a74:	2073656c 	.word	0x2073656c
   13a78:	65766168 	.word	0x65766168
   13a7c:	69786520 	.word	0x69786520
   13a80:	20646574 	.word	0x20646574
   13a84:	61662061 	.word	0x61662061
   13a88:	65746c75 	.word	0x65746c75
   13a8c:	74732064 	.word	0x74732064
   13a90:	00657461 	.word	0x00657461
   13a94:	75646f4d 	.word	0x75646f4d
   13a98:	3a73656c 	.word	0x3a73656c
   13a9c:	20692520 	.word	0x20692520
   13aa0:	6c654320 	.word	0x6c654320
   13aa4:	203a736c 	.word	0x203a736c
   13aa8:	20206925 	.word	0x20206925
   13aac:	746c6f56 	.word	0x746c6f56
   13ab0:	3a656761 	.word	0x3a656761
   13ab4:	56662520 	.word	0x56662520
   13ab8:	41202020 	.word	0x41202020
   13abc:	43206776 	.word	0x43206776
   13ac0:	206c6c65 	.word	0x206c6c65
   13ac4:	746c6f56 	.word	0x746c6f56
   13ac8:	3a656761 	.word	0x3a656761
   13acc:	56662520 	.word	0x56662520
   13ad0:	20202020 	.word	0x20202020
   13ad4:	67764120 	.word	0x67764120
   13ad8:	6d655420 	.word	0x6d655420
   13adc:	25203a70 	.word	0x25203a70
   13ae0:	00204366 	.word	0x00204366
   13ae4:	20202020 	.word	0x20202020
   13ae8:	20202020 	.word	0x20202020
   13aec:	20202020 	.word	0x20202020
   13af0:	20202020 	.word	0x20202020
   13af4:	20202020 	.word	0x20202020
   13af8:	20202020 	.word	0x20202020
   13afc:	20202020 	.word	0x20202020
   13b00:	4d202020 	.word	0x4d202020
   13b04:	6c75646f 	.word	0x6c75646f
   13b08:	25232065 	.word	0x25232065
   13b0c:	00000069 	.word	0x00000069
   13b10:	6f562020 	.word	0x6f562020
   13b14:	6761746c 	.word	0x6761746c
   13b18:	25203a65 	.word	0x25203a65
   13b1c:	20205666 	.word	0x20205666
   13b20:	66252820 	.word	0x66252820
   13b24:	66252d56 	.word	0x66252d56
   13b28:	20202956 	.word	0x20202956
   13b2c:	54202020 	.word	0x54202020
   13b30:	65706d65 	.word	0x65706d65
   13b34:	75746172 	.word	0x75746172
   13b38:	3a736572 	.word	0x3a736572
   13b3c:	66252820 	.word	0x66252820
   13b40:	66252d43 	.word	0x66252d43
   13b44:	00002943 	.word	0x00002943
   13b48:	4f4d2020 	.word	0x4f4d2020
   13b4c:	454c5544 	.word	0x454c5544
   13b50:	20534920 	.word	0x20534920
   13b54:	4c554146 	.word	0x4c554146
   13b58:	3a444554 	.word	0x3a444554
   13b5c:	00000000 	.word	0x00000000
   13b60:	20202020 	.word	0x20202020
   13b64:	7265764f 	.word	0x7265764f
   13b68:	746c6f76 	.word	0x746c6f76
   13b6c:	20656761 	.word	0x20656761
   13b70:	6c6c6543 	.word	0x6c6c6543
   13b74:	6d754e20 	.word	0x6d754e20
   13b78:	73726562 	.word	0x73726562
   13b7c:	2d312820 	.word	0x2d312820
   13b80:	203a2936 	.word	0x203a2936
   13b84:	00000000 	.word	0x00000000
   13b88:	20202020 	.word	0x20202020
   13b8c:	65646e55 	.word	0x65646e55
   13b90:	6c6f7672 	.word	0x6c6f7672
   13b94:	65676174 	.word	0x65676174
   13b98:	6c654320 	.word	0x6c654320
   13b9c:	754e206c 	.word	0x754e206c
   13ba0:	7265626d 	.word	0x7265626d
   13ba4:	31282073 	.word	0x31282073
   13ba8:	3a29362d 	.word	0x3a29362d
   13bac:	00000020 	.word	0x00000020
   13bb0:	20202020 	.word	0x20202020
   13bb4:	20435243 	.word	0x20435243
   13bb8:	6f727265 	.word	0x6f727265
   13bbc:	6e692072 	.word	0x6e692072
   13bc0:	63657220 	.word	0x63657220
   13bc4:	65766965 	.word	0x65766965
   13bc8:	61702064 	.word	0x61702064
   13bcc:	74656b63 	.word	0x74656b63
   13bd0:	00000000 	.word	0x00000000
   13bd4:	20202020 	.word	0x20202020
   13bd8:	65776f50 	.word	0x65776f50
   13bdc:	6e6f2072 	.word	0x6e6f2072
   13be0:	73657220 	.word	0x73657220
   13be4:	68207465 	.word	0x68207465
   13be8:	6f207361 	.word	0x6f207361
   13bec:	72756363 	.word	0x72756363
   13bf0:	00646572 	.word	0x00646572
   13bf4:	20202020 	.word	0x20202020
   13bf8:	74736554 	.word	0x74736554
   13bfc:	75616620 	.word	0x75616620
   13c00:	6120746c 	.word	0x6120746c
   13c04:	76697463 	.word	0x76697463
   13c08:	00000065 	.word	0x00000065
   13c0c:	20202020 	.word	0x20202020
   13c10:	65746e49 	.word	0x65746e49
   13c14:	6c616e72 	.word	0x6c616e72
   13c18:	67657220 	.word	0x67657220
   13c1c:	65747369 	.word	0x65747369
   13c20:	69207372 	.word	0x69207372
   13c24:	6e6f636e 	.word	0x6e6f636e
   13c28:	74736973 	.word	0x74736973
   13c2c:	00746e65 	.word	0x00746e65
   13c30:	4f4d2020 	.word	0x4f4d2020
   13c34:	454c5544 	.word	0x454c5544
   13c38:	53414820 	.word	0x53414820
   13c3c:	454c4120 	.word	0x454c4120
   13c40:	3a535452 	.word	0x3a535452
   13c44:	00000000 	.word	0x00000000
   13c48:	20202020 	.word	0x20202020
   13c4c:	7265764f 	.word	0x7265764f
   13c50:	6d657420 	.word	0x6d657420
   13c54:	61726570 	.word	0x61726570
   13c58:	65727574 	.word	0x65727574
   13c5c:	206e6f20 	.word	0x206e6f20
   13c60:	00315354 	.word	0x00315354
   13c64:	20202020 	.word	0x20202020
   13c68:	7265764f 	.word	0x7265764f
   13c6c:	6d657420 	.word	0x6d657420
   13c70:	61726570 	.word	0x61726570
   13c74:	65727574 	.word	0x65727574
   13c78:	206e6f20 	.word	0x206e6f20
   13c7c:	00325354 	.word	0x00325354
   13c80:	20202020 	.word	0x20202020
   13c84:	65656c53 	.word	0x65656c53
   13c88:	6f6d2070 	.word	0x6f6d2070
   13c8c:	61206564 	.word	0x61206564
   13c90:	76697463 	.word	0x76697463
   13c94:	00000065 	.word	0x00000065
   13c98:	20202020 	.word	0x20202020
   13c9c:	72656854 	.word	0x72656854
   13ca0:	206c616d 	.word	0x206c616d
   13ca4:	74756873 	.word	0x74756873
   13ca8:	6e776f64 	.word	0x6e776f64
   13cac:	74636120 	.word	0x74636120
   13cb0:	00657669 	.word	0x00657669
   13cb4:	20202020 	.word	0x20202020
   13cb8:	74736554 	.word	0x74736554
   13cbc:	656c4120 	.word	0x656c4120
   13cc0:	00007472 	.word	0x00007472
   13cc4:	20202020 	.word	0x20202020
   13cc8:	2050544f 	.word	0x2050544f
   13ccc:	4f525045 	.word	0x4f525045
   13cd0:	6e55204d 	.word	0x6e55204d
   13cd4:	72726f63 	.word	0x72726f63
   13cd8:	61746365 	.word	0x61746365
   13cdc:	20656c62 	.word	0x20656c62
   13ce0:	6f727245 	.word	0x6f727245
   13ce4:	00000072 	.word	0x00000072
   13ce8:	20202020 	.word	0x20202020
   13cec:	554f5247 	.word	0x554f5247
   13cf0:	52203350 	.word	0x52203350
   13cf4:	20736765 	.word	0x20736765
   13cf8:	61766e49 	.word	0x61766e49
   13cfc:	0064696c 	.word	0x0064696c
   13d00:	20202020 	.word	0x20202020
   13d04:	72646441 	.word	0x72646441
   13d08:	20737365 	.word	0x20737365
   13d0c:	20746f6e 	.word	0x20746f6e
   13d10:	69676572 	.word	0x69676572
   13d14:	72657473 	.word	0x72657473
   13d18:	ff006465 	.word	0xff006465
   13d1c:	75646f4d 	.word	0x75646f4d
   13d20:	3a73656c 	.word	0x3a73656c
   13d24:	20692520 	.word	0x20692520
   13d28:	6c6c6543 	.word	0x6c6c6543
   13d2c:	25203a73 	.word	0x25203a73
   13d30:	74532069 	.word	0x74532069
   13d34:	676e6972 	.word	0x676e6972
   13d38:	25203a73 	.word	0x25203a73
   13d3c:	56202069 	.word	0x56202069
   13d40:	61746c6f 	.word	0x61746c6f
   13d44:	203a6567 	.word	0x203a6567
   13d48:	20566625 	.word	0x20566625
   13d4c:	76412020 	.word	0x76412020
   13d50:	65432067 	.word	0x65432067
   13d54:	56206c6c 	.word	0x56206c6c
   13d58:	61746c6f 	.word	0x61746c6f
   13d5c:	203a6567 	.word	0x203a6567
   13d60:	20566625 	.word	0x20566625
   13d64:	776f4c20 	.word	0x776f4c20
   13d68:	6c654320 	.word	0x6c654320
   13d6c:	6f56206c 	.word	0x6f56206c
   13d70:	6761746c 	.word	0x6761746c
   13d74:	25203a65 	.word	0x25203a65
   13d78:	20205666 	.word	0x20205666
   13d7c:	67694820 	.word	0x67694820
   13d80:	65432068 	.word	0x65432068
   13d84:	56206c6c 	.word	0x56206c6c
   13d88:	61746c6f 	.word	0x61746c6f
   13d8c:	203a6567 	.word	0x203a6567
   13d90:	20566625 	.word	0x20566625
   13d94:	746c6544 	.word	0x746c6544
   13d98:	6f562061 	.word	0x6f562061
   13d9c:	6761746c 	.word	0x6761746c
   13da0:	25203a65 	.word	0x25203a65
   13da4:	20566d7a 	.word	0x20566d7a
   13da8:	76412020 	.word	0x76412020
   13dac:	65542067 	.word	0x65542067
   13db0:	203a706d 	.word	0x203a706d
   13db4:	20436625 	.word	0x20436625
   13db8:	00000000 	.word	0x00000000
   13dbc:	75646f4d 	.word	0x75646f4d
   13dc0:	2320656c 	.word	0x2320656c
   13dc4:	00000000 	.word	0x00000000
   13dc8:	00000056 	.word	0x00000056
   13dcc:	65432020 	.word	0x65432020
   13dd0:	00006c6c 	.word	0x00006c6c
   13dd4:	6d655420 	.word	0x6d655420
   13dd8:	3a312070 	.word	0x3a312070
   13ddc:	00000020 	.word	0x00000020
   13de0:	65542043 	.word	0x65542043
   13de4:	3220706d 	.word	0x3220706d
   13de8:	0000203a 	.word	0x0000203a
   13dec:	74532043 	.word	0x74532043
   13df0:	73757461 	.word	0x73757461
   13df4:	7830203a 	.word	0x7830203a
   13df8:	00000000 	.word	0x00000000
   13dfc:	6c614220 	.word	0x6c614220
   13e00:	7830203a 	.word	0x7830203a
   13e04:	ffffff00 	.word	0xffffff00
   13e08:	65736552 	.word	0x65736552
   13e0c:	6e697474 	.word	0x6e697474
   13e10:	6f742067 	.word	0x6f742067
   13e14:	63616620 	.word	0x63616620
   13e18:	79726f74 	.word	0x79726f74
   13e1c:	66656420 	.word	0x66656420
   13e20:	746c7561 	.word	0x746c7561
   13e24:	ffff0073 	.word	0xffff0073
   13e28:	20434f53 	.word	0x20434f53
   13e2c:	0000203a 	.word	0x0000203a
   13e30:	75662020 	.word	0x75662020
   13e34:	70206c65 	.word	0x70206c65
   13e38:	3a206d77 	.word	0x3a206d77
   13e3c:	ffff0020 	.word	0xffff0020
   13e40:	20534d42 	.word	0x20534d42
   13e44:	74617453 	.word	0x74617453
   13e48:	3a207375 	.word	0x3a207375
   13e4c:	00000020 	.word	0x00000020
   13e50:	20535345 	.word	0x20535345
   13e54:	65646f4d 	.word	0x65646f4d
   13e58:	00000020 	.word	0x00000020
   13e5c:	6e55203a 	.word	0x6e55203a
   13e60:	56726564 	.word	0x56726564
   13e64:	61746c6f 	.word	0x61746c6f
   13e68:	00206567 	.word	0x00206567
   13e6c:	764f203a 	.word	0x764f203a
   13e70:	6f567265 	.word	0x6f567265
   13e74:	6761746c 	.word	0x6761746c
   13e78:	00002065 	.word	0x00002065
   13e7c:	6543203a 	.word	0x6543203a
   13e80:	49206c6c 	.word	0x49206c6c
   13e84:	6c61626d 	.word	0x6c61626d
   13e88:	65636e61 	.word	0x65636e61
   13e8c:	00000020 	.word	0x00000020
   13e90:	764f203a 	.word	0x764f203a
   13e94:	54207265 	.word	0x54207265
   13e98:	20706d65 	.word	0x20706d65
   13e9c:	00000000 	.word	0x00000000
   13ea0:	6e55203a 	.word	0x6e55203a
   13ea4:	20726564 	.word	0x20726564
   13ea8:	706d6554 	.word	0x706d6554
   13eac:	00000020 	.word	0x00000020
   13eb0:	764f203a 	.word	0x764f203a
   13eb4:	6f567265 	.word	0x6f567265
   13eb8:	6761746c 	.word	0x6761746c
   13ebc:	74532065 	.word	0x74532065
   13ec0:	6761726f 	.word	0x6761726f
   13ec4:	00002065 	.word	0x00002065
   13ec8:	4e55203a 	.word	0x4e55203a
   13ecc:	70706168 	.word	0x70706168
   13ed0:	00003a79 	.word	0x00003a79
   13ed4:	6148203a 	.word	0x6148203a
   13ed8:	20797070 	.word	0x20797070
   13edc:	00000000 	.word	0x00000000
   13ee0:	6f6f4220 	.word	0x6f6f4220
   13ee4:	00002074 	.word	0x00002074
   13ee8:	61655220 	.word	0x61655220
   13eec:	00207964 	.word	0x00207964
   13ef0:	65725020 	.word	0x65725020
   13ef4:	72616863 	.word	0x72616863
   13ef8:	00206567 	.word	0x00206567
   13efc:	69724420 	.word	0x69724420
   13f00:	00206576 	.word	0x00206576
   13f04:	61684320 	.word	0x61684320
   13f08:	20656772 	.word	0x20656772
   13f0c:	00000000 	.word	0x00000000
   13f10:	72724520 	.word	0x72724520
   13f14:	0020726f 	.word	0x0020726f
   13f18:	4341207c 	.word	0x4341207c
   13f1c:	65725020 	.word	0x65725020
   13f20:	746e6573 	.word	0x746e6573
   13f24:	00007c20 	.word	0x00007c20
   13f28:	654b207c 	.word	0x654b207c
   13f2c:	4e4f2079 	.word	0x4e4f2079
   13f30:	00007c20 	.word	0x00007c20
   13f34:	6c61427c 	.word	0x6c61427c
   13f38:	69636e61 	.word	0x69636e61
   13f3c:	4120676e 	.word	0x4120676e
   13f40:	76697463 	.word	0x76697463
   13f44:	00000065 	.word	0x00000065
   13f48:	0000007c 	.word	0x0000007c
   13f4c:	3a74754f 	.word	0x3a74754f
   13f50:	00000000 	.word	0x00000000
   13f54:	6e6f4320 	.word	0x6e6f4320
   13f58:	00003a74 	.word	0x00003a74
   13f5c:	00000031 	.word	0x00000031
   13f60:	00000030 	.word	0x00000030
   13f64:	3a6e4920 	.word	0x3a6e4920
   13f68:	00000000 	.word	0x00000000
   13f6c:	61684320 	.word	0x61684320
   13f70:	20656772 	.word	0x20656772
   13f74:	72727543 	.word	0x72727543
   13f78:	20746e65 	.word	0x20746e65
   13f7c:	696d694c 	.word	0x696d694c
   13f80:	203a2074 	.word	0x203a2074
   13f84:	00000000 	.word	0x00000000
   13f88:	44204120 	.word	0x44204120
   13f8c:	68437369 	.word	0x68437369
   13f90:	65677261 	.word	0x65677261
   13f94:	72754320 	.word	0x72754320
   13f98:	746e6572 	.word	0x746e6572
   13f9c:	6d694c20 	.word	0x6d694c20
   13fa0:	3a207469 	.word	0x3a207469
   13fa4:	00000020 	.word	0x00000020
   13fa8:	00004120 	.word	0x00004120
   13fac:	50432020 	.word	0x50432020
   13fb0:	20434120 	.word	0x20434120
   13fb4:	72727543 	.word	0x72727543
   13fb8:	20746e65 	.word	0x20746e65
   13fbc:	696d694c 	.word	0x696d694c
   13fc0:	00203a74 	.word	0x00203a74
   13fc4:	43202041 	.word	0x43202041
   13fc8:	75442050 	.word	0x75442050
   13fcc:	00203a72 	.word	0x00203a72
   13fd0:	68432020 	.word	0x68432020
   13fd4:	65677261 	.word	0x65677261
   13fd8:	776f5020 	.word	0x776f5020
   13fdc:	3a207265 	.word	0x3a207265
   13fe0:	00000020 	.word	0x00000020
   13fe4:	6f4e2020 	.word	0x6f4e2020
   13fe8:	61684320 	.word	0x61684320
   13fec:	20656772 	.word	0x20656772
   13ff0:	72727543 	.word	0x72727543
   13ff4:	20746e65 	.word	0x20746e65
   13ff8:	696d694c 	.word	0x696d694c
   13ffc:	00000074 	.word	0x00000074
   14000:	68432020 	.word	0x68432020
   14004:	65677261 	.word	0x65677261
   14008:	72754320 	.word	0x72754320
   1400c:	746e6572 	.word	0x746e6572
   14010:	6d694c20 	.word	0x6d694c20
   14014:	41207469 	.word	0x41207469
   14018:	76697463 	.word	0x76697463
   1401c:	ffff0065 	.word	0xffff0065
   14020:	20776f4c 	.word	0x20776f4c
   14024:	676e6152 	.word	0x676e6152
   14028:	00203a65 	.word	0x00203a65
   1402c:	676e6953 	.word	0x676e6953
   14030:	4920656c 	.word	0x4920656c
   14034:	00203a6e 	.word	0x00203a6e
   14038:	756c6156 	.word	0x756c6156
   1403c:	44412065 	.word	0x44412065
   14040:	203a3043 	.word	0x203a3043
   14044:	00000000 	.word	0x00000000
   14048:	00416d20 	.word	0x00416d20
   1404c:	68676948 	.word	0x68676948
   14050:	6e615220 	.word	0x6e615220
   14054:	203a6567 	.word	0x203a6567
   14058:	00000000 	.word	0x00000000
   1405c:	0000416d 	.word	0x0000416d
   14060:	00207c20 	.word	0x00207c20
   14064:	2020416d 	.word	0x2020416d
   14068:	ffffff00 	.word	0xffffff00
   1406c:	2f2f2f2f 	.word	0x2f2f2f2f
   14070:	2f2f2f2f 	.word	0x2f2f2f2f
   14074:	2f2f2f2f 	.word	0x2f2f2f2f
   14078:	2f2f2f2f 	.word	0x2f2f2f2f
   1407c:	2f2f2f2f 	.word	0x2f2f2f2f
   14080:	2f2f2f2f 	.word	0x2f2f2f2f
   14084:	2f2f2f2f 	.word	0x2f2f2f2f
   14088:	2f2f2f2f 	.word	0x2f2f2f2f
   1408c:	2f2f2f2f 	.word	0x2f2f2f2f
   14090:	2f2f2f2f 	.word	0x2f2f2f2f
   14094:	434f5320 	.word	0x434f5320
   14098:	54455320 	.word	0x54455320
   1409c:	2f2f2f20 	.word	0x2f2f2f20
   140a0:	2f2f2f2f 	.word	0x2f2f2f2f
   140a4:	2f2f2f2f 	.word	0x2f2f2f2f
   140a8:	2f2f2f2f 	.word	0x2f2f2f2f
   140ac:	2f2f2f2f 	.word	0x2f2f2f2f
   140b0:	2f2f2f2f 	.word	0x2f2f2f2f
   140b4:	2f2f2f2f 	.word	0x2f2f2f2f
   140b8:	2f2f2f2f 	.word	0x2f2f2f2f
   140bc:	2f2f2f2f 	.word	0x2f2f2f2f
   140c0:	2f2f2f2f 	.word	0x2f2f2f2f
   140c4:	0000002f 	.word	0x0000002f
   140c8:	20776f4c 	.word	0x20776f4c
   140cc:	676e6152 	.word	0x676e6152
   140d0:	00002065 	.word	0x00002065
   140d4:	68676948 	.word	0x68676948
   140d8:	6e615220 	.word	0x6e615220
   140dc:	00006567 	.word	0x00006567
   140e0:	6c616e41 	.word	0x6c616e41
   140e4:	6575676f 	.word	0x6575676f
   140e8:	6e695320 	.word	0x6e695320
   140ec:	20656c67 	.word	0x20656c67
   140f0:	00000000 	.word	0x00000000
   140f4:	624e4143 	.word	0x624e4143
   140f8:	00207375 	.word	0x00207375
   140fc:	4f532025 	.word	0x4f532025
   14100:	00002043 	.word	0x00002043
   14104:	0068416d 	.word	0x0068416d
   14108:	6c6c7570 	.word	0x6c6c7570
   1410c:	206e6920 	.word	0x206e6920
   14110:	3654554f 	.word	0x3654554f
   14114:	00000000 	.word	0x00000000
   14118:	6c6c7570 	.word	0x6c6c7570
   1411c:	206e6920 	.word	0x206e6920
   14120:	3754554f 	.word	0x3754554f
   14124:	ffffff00 	.word	0xffffff00
   14128:	6c614320 	.word	0x6c614320
   1412c:	61726269 	.word	0x61726269
   14130:	676e6974 	.word	0x676e6974
   14134:	72754320 	.word	0x72754320
   14138:	746e6572 	.word	0x746e6572
   1413c:	66664f20 	.word	0x66664f20
   14140:	20746573 	.word	0x20746573
   14144:	3a3a3a3a 	.word	0x3a3a3a3a
   14148:	0000203a 	.word	0x0000203a
   1414c:	0000002e 	.word	0x0000002e
   14150:	72756320 	.word	0x72756320
   14154:	746e6572 	.word	0x746e6572
   14158:	66666f20 	.word	0x66666f20
   1415c:	20746573 	.word	0x20746573
   14160:	61632031 	.word	0x61632031
   14164:	7262696c 	.word	0x7262696c
   14168:	64657461 	.word	0x64657461
   1416c:	00000020 	.word	0x00000020
   14170:	72756320 	.word	0x72756320
   14174:	746e6572 	.word	0x746e6572
   14178:	66666f20 	.word	0x66666f20
   1417c:	20746573 	.word	0x20746573
   14180:	61632032 	.word	0x61632032
   14184:	7262696c 	.word	0x7262696c
   14188:	64657461 	.word	0x64657461
   1418c:	ffff0020 	.word	0xffff0020
   14190:	0020416d 	.word	0x0020416d
   14194:	65747845 	.word	0x65747845
   14198:	6465646e 	.word	0x6465646e
   1419c:	3a444920 	.word	0x3a444920
   141a0:	25783020 	.word	0x25783020
   141a4:	586c382e 	.word	0x586c382e
   141a8:	4c442020 	.word	0x4c442020
   141ac:	25203a43 	.word	0x25203a43
   141b0:	20206431 	.word	0x20206431
   141b4:	61746144 	.word	0x61746144
   141b8:	0000003a 	.word	0x0000003a
   141bc:	2578302c 	.word	0x2578302c
   141c0:	586c332e 	.word	0x586c332e
   141c4:	6c61662c 	.word	0x6c61662c
   141c8:	252c6573 	.word	0x252c6573
   141cc:	00006431 	.word	0x00006431
   141d0:	4d455220 	.word	0x4d455220
   141d4:	2045544f 	.word	0x2045544f
   141d8:	55514552 	.word	0x55514552
   141dc:	20545345 	.word	0x20545345
   141e0:	4d415246 	.word	0x4d415246
   141e4:	00000045 	.word	0x00000045
   141e8:	7830202c 	.word	0x7830202c
   141ec:	58322e25 	.word	0x58322e25
   141f0:	ffffff00 	.word	0xffffff00
   141f4:	75706e49 	.word	0x75706e49
   141f8:	00203a74 	.word	0x00203a74
   141fc:	4e4f2031 	.word	0x4e4f2031
   14200:	00002020 	.word	0x00002020
   14204:	464f2031 	.word	0x464f2031
   14208:	00002046 	.word	0x00002046
   1420c:	4e4f2032 	.word	0x4e4f2032
   14210:	00002020 	.word	0x00002020
   14214:	464f2032 	.word	0x464f2032
   14218:	00002046 	.word	0x00002046
   1421c:	4e4f2033 	.word	0x4e4f2033
   14220:	00002020 	.word	0x00002020
   14224:	464f2033 	.word	0x464f2033
   14228:	00002046 	.word	0x00002046
   1422c:	4e4f2034 	.word	0x4e4f2034
   14230:	00002020 	.word	0x00002020
   14234:	464f2034 	.word	0x464f2034
   14238:	ff002046 	.word	0xff002046
   1423c:	74617473 	.word	0x74617473
   14240:	7478742e 	.word	0x7478742e
   14244:	0000003d 	.word	0x0000003d
   14248:	74634120 	.word	0x74634120
   1424c:	20657669 	.word	0x20657669
   14250:	00000000 	.word	0x00000000
   14254:	2e636f73 	.word	0x2e636f73
   14258:	3d6c6176 	.word	0x3d6c6176
   1425c:	00000000 	.word	0x00000000
   14260:	31636f73 	.word	0x31636f73
   14264:	6c61762e 	.word	0x6c61762e
   14268:	0000003d 	.word	0x0000003d
   1426c:	72727563 	.word	0x72727563
   14270:	2e746e65 	.word	0x2e746e65
   14274:	3d6c6176 	.word	0x3d6c6176
   14278:	00000000 	.word	0x00000000
   1427c:	706d6574 	.word	0x706d6574
   14280:	6c61762e 	.word	0x6c61762e
   14284:	0000003d 	.word	0x0000003d
   14288:	706d6574 	.word	0x706d6574
   1428c:	2e776f6c 	.word	0x2e776f6c
   14290:	3d6c6176 	.word	0x3d6c6176
   14294:	00000000 	.word	0x00000000
   14298:	706d6574 	.word	0x706d6574
   1429c:	68676968 	.word	0x68676968
   142a0:	6c61762e 	.word	0x6c61762e
   142a4:	0000003d 	.word	0x0000003d
   142a8:	746c6f76 	.word	0x746c6f76
   142ac:	6c61762e 	.word	0x6c61762e
   142b0:	0000003d 	.word	0x0000003d
   142b4:	63776f6c 	.word	0x63776f6c
   142b8:	2e6c6c65 	.word	0x2e6c6c65
   142bc:	3d6c6176 	.word	0x3d6c6176
   142c0:	00000000 	.word	0x00000000
   142c4:	68676968 	.word	0x68676968
   142c8:	6c6c6563 	.word	0x6c6c6563
   142cc:	6c61762e 	.word	0x6c61762e
   142d0:	0000003d 	.word	0x0000003d
   142d4:	6d726966 	.word	0x6d726966
   142d8:	6c61762e 	.word	0x6c61762e
   142dc:	0000003d 	.word	0x0000003d
   142e0:	6c6c6563 	.word	0x6c6c6563
   142e4:	746c6564 	.word	0x746c6564
   142e8:	61762e61 	.word	0x61762e61
   142ec:	ff003d6c 	.word	0xff003d6c
   142f0:	65736552 	.word	0x65736552
   142f4:	61422074 	.word	0x61422074
   142f8:	636e616c 	.word	0x636e616c
   142fc:	69542065 	.word	0x69542065
   14300:	0072656d 	.word	0x0072656d
   14304:	646f4320 	.word	0x646f4320
   14308:	53206465 	.word	0x53206465
   1430c:	69747465 	.word	0x69747465
   14310:	2073676e 	.word	0x2073676e
   14314:	64616f4c 	.word	0x64616f4c
   14318:	00206465 	.word	0x00206465
   1431c:	68416d20 	.word	0x68416d20
   14320:	73655220 	.word	0x73655220
   14324:	00207465 	.word	0x00207465
   14328:	202d2031 	.word	0x202d2031
   1432c:	706d6554 	.word	0x706d6554
   14330:	6e655320 	.word	0x6e655320
   14334:	20726f73 	.word	0x20726f73
   14338:	74746553 	.word	0x74746553
   1433c:	3a676e69 	.word	0x3a676e69
   14340:	00000000 	.word	0x00000000
   14344:	202d2032 	.word	0x202d2032
   14348:	746c6f56 	.word	0x746c6f56
   1434c:	20656761 	.word	0x20656761
   14350:	65646e55 	.word	0x65646e55
   14354:	68572072 	.word	0x68572072
   14358:	20686369 	.word	0x20686369
   1435c:	49206f54 	.word	0x49206f54
   14360:	726f6e67 	.word	0x726f6e67
   14364:	65432065 	.word	0x65432065
   14368:	3a736c6c 	.word	0x3a736c6c
   1436c:	00000000 	.word	0x00000000
   14370:	0000566d 	.word	0x0000566d
   14374:	202d2034 	.word	0x202d2034
   14378:	706d6554 	.word	0x706d6554
   1437c:	66664f20 	.word	0x66664f20
   14380:	20746573 	.word	0x20746573
   14384:	74746553 	.word	0x74746553
   14388:	3a676e69 	.word	0x3a676e69
   1438c:	00000000 	.word	0x00000000
   14390:	202d2071 	.word	0x202d2071
   14394:	62206f47 	.word	0x62206f47
   14398:	206b6361 	.word	0x206b6361
   1439c:	6d206f74 	.word	0x6d206f74
   143a0:	00756e65 	.word	0x00756e65
   143a4:	202d2031 	.word	0x202d2031
   143a8:	6c6c6543 	.word	0x6c6c6543
   143ac:	61684320 	.word	0x61684320
   143b0:	20656772 	.word	0x20656772
   143b4:	746c6f56 	.word	0x746c6f56
   143b8:	20656761 	.word	0x20656761
   143bc:	696d694c 	.word	0x696d694c
   143c0:	65532074 	.word	0x65532074
   143c4:	696f7074 	.word	0x696f7074
   143c8:	203a746e 	.word	0x203a746e
   143cc:	00000000 	.word	0x00000000
   143d0:	202d2032 	.word	0x202d2032
   143d4:	72616843 	.word	0x72616843
   143d8:	48206567 	.word	0x48206567
   143dc:	65747379 	.word	0x65747379
   143e0:	73697372 	.word	0x73697372
   143e4:	0000203a 	.word	0x0000203a
   143e8:	202d2033 	.word	0x202d2033
   143ec:	6b636150 	.word	0x6b636150
   143f0:	78614d20 	.word	0x78614d20
   143f4:	61684320 	.word	0x61684320
   143f8:	20656772 	.word	0x20656772
   143fc:	72727543 	.word	0x72727543
   14400:	3a746e65 	.word	0x3a746e65
   14404:	00000020 	.word	0x00000020
   14408:	50202d34 	.word	0x50202d34
   1440c:	206b6361 	.word	0x206b6361
   14410:	20646e45 	.word	0x20646e45
   14414:	4320666f 	.word	0x4320666f
   14418:	67726168 	.word	0x67726168
   1441c:	75432065 	.word	0x75432065
   14420:	6e657272 	.word	0x6e657272
   14424:	00203a74 	.word	0x00203a74
   14428:	43202d35 	.word	0x43202d35
   1442c:	67726168 	.word	0x67726168
   14430:	54207265 	.word	0x54207265
   14434:	3a657079 	.word	0x3a657079
   14438:	00000020 	.word	0x00000020
   1443c:	616c6552 	.word	0x616c6552
   14440:	6f432079 	.word	0x6f432079
   14444:	6f72746e 	.word	0x6f72746e
   14448:	0000006c 	.word	0x0000006c
   1444c:	73757242 	.word	0x73757242
   14450:	4c4e2061 	.word	0x4c4e2061
   14454:	78783547 	.word	0x78783547
   14458:	00000000 	.word	0x00000000
   1445c:	746c6f56 	.word	0x746c6f56
   14460:	61684320 	.word	0x61684320
   14464:	72656772 	.word	0x72656772
   14468:	00000000 	.word	0x00000000
   1446c:	65746c45 	.word	0x65746c45
   14470:	6843206b 	.word	0x6843206b
   14474:	65677261 	.word	0x65677261
   14478:	00000072 	.word	0x00000072
   1447c:	6f636c45 	.word	0x6f636c45
   14480:	6843206e 	.word	0x6843206e
   14484:	65677261 	.word	0x65677261
   14488:	00000072 	.word	0x00000072
   1448c:	74636956 	.word	0x74636956
   14490:	2f6e6f72 	.word	0x2f6e6f72
   14494:	00414d53 	.word	0x00414d53
   14498:	61646f43 	.word	0x61646f43
   1449c:	00000000 	.word	0x00000000
   144a0:	43202d36 	.word	0x43202d36
   144a4:	67726168 	.word	0x67726168
   144a8:	43207265 	.word	0x43207265
   144ac:	4d206e61 	.word	0x4d206e61
   144b0:	53206773 	.word	0x53206773
   144b4:	203a6470 	.word	0x203a6470
   144b8:	00000000 	.word	0x00000000
   144bc:	0000536d 	.word	0x0000536d
   144c0:	202d2038 	.word	0x202d2038
   144c4:	72616843 	.word	0x72616843
   144c8:	20726567 	.word	0x20726567
   144cc:	43205648 	.word	0x43205648
   144d0:	656e6e6f 	.word	0x656e6e6f
   144d4:	6f697463 	.word	0x6f697463
   144d8:	00203a6e 	.word	0x00203a6e
   144dc:	68654220 	.word	0x68654220
   144e0:	20646e69 	.word	0x20646e69
   144e4:	746e6f43 	.word	0x746e6f43
   144e8:	6f746361 	.word	0x6f746361
   144ec:	00007372 	.word	0x00007372
   144f0:	65726944 	.word	0x65726944
   144f4:	54207463 	.word	0x54207463
   144f8:	6142206f 	.word	0x6142206f
   144fc:	72657474 	.word	0x72657474
   14500:	56482079 	.word	0x56482079
   14504:	00000000 	.word	0x00000000
   14508:	202d2039 	.word	0x202d2039
   1450c:	72616843 	.word	0x72616843
   14510:	43206567 	.word	0x43206567
   14514:	65727275 	.word	0x65727275
   14518:	6420746e 	.word	0x6420746e
   1451c:	74617265 	.word	0x74617265
   14520:	6f4c2065 	.word	0x6f4c2065
   14524:	00203a77 	.word	0x00203a77
   14528:	00004320 	.word	0x00004320
   1452c:	202d2061 	.word	0x202d2061
   14530:	65746c41 	.word	0x65746c41
   14534:	74616e72 	.word	0x74616e72
   14538:	61502065 	.word	0x61502065
   1453c:	4d206b63 	.word	0x4d206b63
   14540:	43207861 	.word	0x43207861
   14544:	67726168 	.word	0x67726168
   14548:	75432065 	.word	0x75432065
   1454c:	6e657272 	.word	0x6e657272
   14550:	00203a74 	.word	0x00203a74
   14554:	202d2062 	.word	0x202d2062
   14558:	72616843 	.word	0x72616843
   1455c:	20726567 	.word	0x20726567
   14560:	74204341 	.word	0x74204341
   14564:	4344206f 	.word	0x4344206f
   14568:	66666520 	.word	0x66666520
   1456c:	65636569 	.word	0x65636569
   14570:	3a79636e 	.word	0x3a79636e
   14574:	00000020 	.word	0x00000020
   14578:	00000025 	.word	0x00000025
   1457c:	202d2063 	.word	0x202d2063
   14580:	72616843 	.word	0x72616843
   14584:	20726567 	.word	0x20726567
   14588:	56204341 	.word	0x56204341
   1458c:	61746c6f 	.word	0x61746c6f
   14590:	203a6567 	.word	0x203a6567
   14594:	00000000 	.word	0x00000000
   14598:	00434156 	.word	0x00434156
   1459c:	72616c41 	.word	0x72616c41
   145a0:	6e61206d 	.word	0x6e61206d
   145a4:	61572064 	.word	0x61572064
   145a8:	6e696e72 	.word	0x6e696e72
   145ac:	65532067 	.word	0x65532067
   145b0:	6e697474 	.word	0x6e697474
   145b4:	4d207367 	.word	0x4d207367
   145b8:	00756e65 	.word	0x00756e65
   145bc:	202d2031 	.word	0x202d2031
   145c0:	746c6f56 	.word	0x746c6f56
   145c4:	20656761 	.word	0x20656761
   145c8:	6e726157 	.word	0x6e726157
   145cc:	20676e69 	.word	0x20676e69
   145d0:	7366664f 	.word	0x7366664f
   145d4:	203a7465 	.word	0x203a7465
   145d8:	00000000 	.word	0x00000000
   145dc:	202d2032 	.word	0x202d2032
   145e0:	6c6c6543 	.word	0x6c6c6543
   145e4:	6c6f5620 	.word	0x6c6f5620
   145e8:	65676174 	.word	0x65676174
   145ec:	66694420 	.word	0x66694420
   145f0:	65726566 	.word	0x65726566
   145f4:	2065636e 	.word	0x2065636e
   145f8:	72616c41 	.word	0x72616c41
   145fc:	00203a6d 	.word	0x00203a6d
   14600:	202d2033 	.word	0x202d2033
   14604:	706d6554 	.word	0x706d6554
   14608:	72615720 	.word	0x72615720
   1460c:	676e696e 	.word	0x676e696e
   14610:	66664f20 	.word	0x66664f20
   14614:	3a746573 	.word	0x3a746573
   14618:	00000020 	.word	0x00000020
   1461c:	202d2034 	.word	0x202d2034
   14620:	7265764f 	.word	0x7265764f
   14624:	646e6120 	.word	0x646e6120
   14628:	646e5520 	.word	0x646e5520
   1462c:	56207265 	.word	0x56207265
   14630:	61746c6f 	.word	0x61746c6f
   14634:	44206567 	.word	0x44206567
   14638:	79616c65 	.word	0x79616c65
   1463c:	0000203a 	.word	0x0000203a
   14640:	00536d20 	.word	0x00536d20
   14644:	746e6f43 	.word	0x746e6f43
   14648:	6f746361 	.word	0x6f746361
   1464c:	6e612072 	.word	0x6e612072
   14650:	61472064 	.word	0x61472064
   14654:	20656775 	.word	0x20656775
   14658:	74746553 	.word	0x74746553
   1465c:	73676e69 	.word	0x73676e69
   14660:	6e654d20 	.word	0x6e654d20
   14664:	00000075 	.word	0x00000075
   14668:	202d2031 	.word	0x202d2031
   1466c:	43657250 	.word	0x43657250
   14670:	67726168 	.word	0x67726168
   14674:	69542065 	.word	0x69542065
   14678:	3a72656d 	.word	0x3a72656d
   1467c:	00000020 	.word	0x00000020
   14680:	202d2032 	.word	0x202d2032
   14684:	43657250 	.word	0x43657250
   14688:	67726168 	.word	0x67726168
   1468c:	69462065 	.word	0x69462065
   14690:	6873696e 	.word	0x6873696e
   14694:	72754320 	.word	0x72754320
   14698:	746e6572 	.word	0x746e6572
   1469c:	0000203a 	.word	0x0000203a
   146a0:	202d2033 	.word	0x202d2033
   146a4:	204d5750 	.word	0x204d5750
   146a8:	746e6f63 	.word	0x746e6f63
   146ac:	6f746361 	.word	0x6f746361
   146b0:	6f482072 	.word	0x6f482072
   146b4:	3020646c 	.word	0x3020646c
   146b8:	3535322d 	.word	0x3535322d
   146bc:	00003a20 	.word	0x00003a20
   146c0:	202d2034 	.word	0x202d2034
   146c4:	204d5750 	.word	0x204d5750
   146c8:	20726f66 	.word	0x20726f66
   146cc:	67756147 	.word	0x67756147
   146d0:	6f4c2065 	.word	0x6f4c2065
   146d4:	2d302077 	.word	0x2d302077
   146d8:	20353532 	.word	0x20353532
   146dc:	0000003a 	.word	0x0000003a
   146e0:	202d2035 	.word	0x202d2035
   146e4:	204d5750 	.word	0x204d5750
   146e8:	20726f66 	.word	0x20726f66
   146ec:	67756147 	.word	0x67756147
   146f0:	69482065 	.word	0x69482065
   146f4:	30206867 	.word	0x30206867
   146f8:	3535322d 	.word	0x3535322d
   146fc:	00003a20 	.word	0x00003a20
   14700:	202d2036 	.word	0x202d2036
   14704:	20535345 	.word	0x20535345
   14708:	6e69614d 	.word	0x6e69614d
   1470c:	6e6f4320 	.word	0x6e6f4320
   14710:	74636174 	.word	0x74636174
   14714:	6f20726f 	.word	0x6f20726f
   14718:	72542072 	.word	0x72542072
   1471c:	3a207069 	.word	0x3a207069
   14720:	00000000 	.word	0x00000000
   14724:	70697254 	.word	0x70697254
   14728:	75685320 	.word	0x75685320
   1472c:	0000746e 	.word	0x0000746e
   14730:	6e69614d 	.word	0x6e69614d
   14734:	6e6f4320 	.word	0x6e6f4320
   14738:	74636174 	.word	0x74636174
   1473c:	6120726f 	.word	0x6120726f
   14740:	5020646e 	.word	0x5020646e
   14744:	68636572 	.word	0x68636572
   14748:	65677261 	.word	0x65677261
   1474c:	00000000 	.word	0x00000000
   14750:	554e454d 	.word	0x554e454d
   14754:	00000000 	.word	0x00000000
   14758:	75626544 	.word	0x75626544
   1475c:	6e696767 	.word	0x6e696767
   14760:	61502067 	.word	0x61502067
   14764:	64657375 	.word	0x64657375
   14768:	00000000 	.word	0x00000000
   1476c:	6d726946 	.word	0x6d726946
   14770:	65726177 	.word	0x65726177
   14774:	72655620 	.word	0x72655620
   14778:	6e6f6973 	.word	0x6e6f6973
   1477c:	00203a20 	.word	0x00203a20
   14780:	202d2062 	.word	0x202d2062
   14784:	74746142 	.word	0x74746142
   14788:	20797265 	.word	0x20797265
   1478c:	74746553 	.word	0x74746553
   14790:	73676e69 	.word	0x73676e69
   14794:	00000000 	.word	0x00000000
   14798:	202d2061 	.word	0x202d2061
   1479c:	72616c41 	.word	0x72616c41
   147a0:	6e61206d 	.word	0x6e61206d
   147a4:	61572064 	.word	0x61572064
   147a8:	6e696e72 	.word	0x6e696e72
   147ac:	65532067 	.word	0x65532067
   147b0:	6e697474 	.word	0x6e697474
   147b4:	00007367 	.word	0x00007367
   147b8:	202d2065 	.word	0x202d2065
   147bc:	72616843 	.word	0x72616843
   147c0:	676e6967 	.word	0x676e6967
   147c4:	74655320 	.word	0x74655320
   147c8:	676e6974 	.word	0x676e6974
   147cc:	00000073 	.word	0x00000073
   147d0:	202d2063 	.word	0x202d2063
   147d4:	72727543 	.word	0x72727543
   147d8:	20746e65 	.word	0x20746e65
   147dc:	736e6553 	.word	0x736e6553
   147e0:	4320726f 	.word	0x4320726f
   147e4:	62696c61 	.word	0x62696c61
   147e8:	69746172 	.word	0x69746172
   147ec:	00006e6f 	.word	0x00006e6f
   147f0:	202d206b 	.word	0x202d206b
   147f4:	746e6f43 	.word	0x746e6f43
   147f8:	6f746361 	.word	0x6f746361
   147fc:	6e612072 	.word	0x6e612072
   14800:	61472064 	.word	0x61472064
   14804:	20656775 	.word	0x20656775
   14808:	74746553 	.word	0x74746553
   1480c:	73676e69 	.word	0x73676e69
   14810:	00000000 	.word	0x00000000
   14814:	202d2069 	.word	0x202d2069
   14818:	6f6e6749 	.word	0x6f6e6749
   1481c:	56206572 	.word	0x56206572
   14820:	65756c61 	.word	0x65756c61
   14824:	74655320 	.word	0x74655320
   14828:	676e6974 	.word	0x676e6974
   1482c:	00000073 	.word	0x00000073
   14830:	202d2064 	.word	0x202d2064
   14834:	75626544 	.word	0x75626544
   14838:	65532067 	.word	0x65532067
   1483c:	6e697474 	.word	0x6e697474
   14840:	00007367 	.word	0x00007367
   14844:	202d2052 	.word	0x202d2052
   14848:	74736552 	.word	0x74736552
   1484c:	20747261 	.word	0x20747261
   14850:	00534d42 	.word	0x00534d42
   14854:	202d2071 	.word	0x202d2071
   14858:	74697865 	.word	0x74697865
   1485c:	6e656d20 	.word	0x6e656d20
   14860:	00000075 	.word	0x00000075
   14864:	75626544 	.word	0x75626544
   14868:	65532067 	.word	0x65532067
   1486c:	6e697474 	.word	0x6e697474
   14870:	4d207367 	.word	0x4d207367
   14874:	00756e65 	.word	0x00756e65
   14878:	67676f54 	.word	0x67676f54
   1487c:	6f20656c 	.word	0x6f20656c
   14880:	666f2f6e 	.word	0x666f2f6e
   14884:	00000066 	.word	0x00000066
   14888:	202d2031 	.word	0x202d2031
   1488c:	206e6143 	.word	0x206e6143
   14890:	75626544 	.word	0x75626544
   14894:	003a2067 	.word	0x003a2067
   14898:	202d2032 	.word	0x202d2032
   1489c:	72727543 	.word	0x72727543
   148a0:	20746e65 	.word	0x20746e65
   148a4:	75626544 	.word	0x75626544
   148a8:	003a2067 	.word	0x003a2067
   148ac:	202d2033 	.word	0x202d2033
   148b0:	7074754f 	.word	0x7074754f
   148b4:	43207475 	.word	0x43207475
   148b8:	6b636568 	.word	0x6b636568
   148bc:	00003a20 	.word	0x00003a20
   148c0:	202d2034 	.word	0x202d2034
   148c4:	75706e49 	.word	0x75706e49
   148c8:	68432074 	.word	0x68432074
   148cc:	206b6365 	.word	0x206b6365
   148d0:	0000003a 	.word	0x0000003a
   148d4:	202d2035 	.word	0x202d2035
   148d8:	20535345 	.word	0x20535345
   148dc:	65646f6d 	.word	0x65646f6d
   148e0:	00003a20 	.word	0x00003a20
   148e4:	202d2036 	.word	0x202d2036
   148e8:	6c6c6543 	.word	0x6c6c6543
   148ec:	72502073 	.word	0x72502073
   148f0:	6e657365 	.word	0x6e657365
   148f4:	65522074 	.word	0x65522074
   148f8:	20746573 	.word	0x20746573
   148fc:	0000003a 	.word	0x0000003a
   14900:	202d2037 	.word	0x202d2037
   14904:	67756147 	.word	0x67756147
   14908:	65442065 	.word	0x65442065
   1490c:	20677562 	.word	0x20677562
   14910:	0000003a 	.word	0x0000003a
   14914:	202d2038 	.word	0x202d2038
   14918:	20565343 	.word	0x20565343
   1491c:	7074754f 	.word	0x7074754f
   14920:	3a207475 	.word	0x3a207475
   14924:	00000000 	.word	0x00000000
   14928:	202d2039 	.word	0x202d2039
   1492c:	69636544 	.word	0x69636544
   14930:	206c616d 	.word	0x206c616d
   14934:	63616c50 	.word	0x63616c50
   14938:	74207365 	.word	0x74207365
   1493c:	6853206f 	.word	0x6853206f
   14940:	3a20776f 	.word	0x3a20776f
   14944:	00000000 	.word	0x00000000
   14948:	202d2062 	.word	0x202d2062
   1494c:	616c6162 	.word	0x616c6162
   14950:	2065636e 	.word	0x2065636e
   14954:	61727564 	.word	0x61727564
   14958:	6e6f6974 	.word	0x6e6f6974
   1495c:	00003a20 	.word	0x00003a20
   14960:	74205320 	.word	0x74205320
   14964:	20656d69 	.word	0x20656d69
   14968:	6f666562 	.word	0x6f666562
   1496c:	73206572 	.word	0x73206572
   14970:	74726174 	.word	0x74726174
   14974:	20676e69 	.word	0x20676e69
   14978:	36207369 	.word	0x36207369
   1497c:	00007330 	.word	0x00007330
   14980:	202d2079 	.word	0x202d2079
   14984:	7478654e 	.word	0x7478654e
   14988:	3a204449 	.word	0x3a204449
   1498c:	00000000 	.word	0x00000000
   14990:	202d2078 	.word	0x202d2078
   14994:	65706977 	.word	0x65706977
   14998:	43534320 	.word	0x43534320
   1499c:	73646920 	.word	0x73646920
   149a0:	00000000 	.word	0x00000000
   149a4:	202d2072 	.word	0x202d2072
   149a8:	65736572 	.word	0x65736572
   149ac:	61622074 	.word	0x61622074
   149b0:	636e616c 	.word	0x636e616c
   149b4:	65642065 	.word	0x65642065
   149b8:	00677562 	.word	0x00677562
   149bc:	72727543 	.word	0x72727543
   149c0:	20746e65 	.word	0x20746e65
   149c4:	736e6553 	.word	0x736e6553
   149c8:	4320726f 	.word	0x4320726f
   149cc:	62696c61 	.word	0x62696c61
   149d0:	69746172 	.word	0x69746172
   149d4:	4d206e6f 	.word	0x4d206e6f
   149d8:	00756e65 	.word	0x00756e65
   149dc:	202d2063 	.word	0x202d2063
   149e0:	63206f54 	.word	0x63206f54
   149e4:	62696c61 	.word	0x62696c61
   149e8:	65746172 	.word	0x65746172
   149ec:	6e657320 	.word	0x6e657320
   149f0:	20726f73 	.word	0x20726f73
   149f4:	7366666f 	.word	0x7366666f
   149f8:	00007465 	.word	0x00007465
   149fc:	202d2073 	.word	0x202d2073
   14a00:	72727543 	.word	0x72727543
   14a04:	20746e65 	.word	0x20746e65
   14a08:	736e6553 	.word	0x736e6553
   14a0c:	5420726f 	.word	0x5420726f
   14a10:	20657079 	.word	0x20657079
   14a14:	0000203a 	.word	0x0000203a
   14a18:	616e4120 	.word	0x616e4120
   14a1c:	75676f6c 	.word	0x75676f6c
   14a20:	75442065 	.word	0x75442065
   14a24:	43206c61 	.word	0x43206c61
   14a28:	65727275 	.word	0x65727275
   14a2c:	5320746e 	.word	0x5320746e
   14a30:	6f736e65 	.word	0x6f736e65
   14a34:	00002072 	.word	0x00002072
   14a38:	616e4120 	.word	0x616e4120
   14a3c:	75676f6c 	.word	0x75676f6c
   14a40:	69532065 	.word	0x69532065
   14a44:	656c676e 	.word	0x656c676e
   14a48:	72754320 	.word	0x72754320
   14a4c:	746e6572 	.word	0x746e6572
   14a50:	6e655320 	.word	0x6e655320
   14a54:	20726f73 	.word	0x20726f73
   14a58:	00000000 	.word	0x00000000
   14a5c:	6e614320 	.word	0x6e614320
   14a60:	20737562 	.word	0x20737562
   14a64:	72727543 	.word	0x72727543
   14a68:	20746e65 	.word	0x20746e65
   14a6c:	736e6553 	.word	0x736e6553
   14a70:	0020726f 	.word	0x0020726f
   14a74:	65646e55 	.word	0x65646e55
   14a78:	656e6966 	.word	0x656e6966
   14a7c:	00000064 	.word	0x00000064
   14a80:	202d2031 	.word	0x202d2031
   14a84:	65766e69 	.word	0x65766e69
   14a88:	63207472 	.word	0x63207472
   14a8c:	65727275 	.word	0x65727275
   14a90:	3a20746e 	.word	0x3a20746e
   14a94:	00000000 	.word	0x00000000
   14a98:	202d2032 	.word	0x202d2032
   14a9c:	65727550 	.word	0x65727550
   14aa0:	6c6f5620 	.word	0x6c6f5620
   14aa4:	65676174 	.word	0x65676174
   14aa8:	73616220 	.word	0x73616220
   14aac:	53206465 	.word	0x53206465
   14ab0:	3a20434f 	.word	0x3a20434f
   14ab4:	00000000 	.word	0x00000000
   14ab8:	202d2033 	.word	0x202d2033
   14abc:	72727543 	.word	0x72727543
   14ac0:	20746e65 	.word	0x20746e65
   14ac4:	746c754d 	.word	0x746c754d
   14ac8:	696c7069 	.word	0x696c7069
   14acc:	69746163 	.word	0x69746163
   14ad0:	3a206e6f 	.word	0x3a206e6f
   14ad4:	00000000 	.word	0x00000000
   14ad8:	202d2034 	.word	0x202d2034
   14adc:	6c616e41 	.word	0x6c616e41
   14ae0:	6575676f 	.word	0x6575676f
   14ae4:	776f4c20 	.word	0x776f4c20
   14ae8:	6e615220 	.word	0x6e615220
   14aec:	43206567 	.word	0x43206567
   14af0:	3a766e6f 	.word	0x3a766e6f
   14af4:	00000000 	.word	0x00000000
   14af8:	2f566d20 	.word	0x2f566d20
   14afc:	00000041 	.word	0x00000041
   14b00:	202d2035 	.word	0x202d2035
   14b04:	6c616e41 	.word	0x6c616e41
   14b08:	6575676f 	.word	0x6575676f
   14b0c:	67694820 	.word	0x67694820
   14b10:	61522068 	.word	0x61522068
   14b14:	2065676e 	.word	0x2065676e
   14b18:	766e6f43 	.word	0x766e6f43
   14b1c:	0000003a 	.word	0x0000003a
   14b20:	202d2036 	.word	0x202d2036
   14b24:	72727543 	.word	0x72727543
   14b28:	20746e65 	.word	0x20746e65
   14b2c:	736e6553 	.word	0x736e6553
   14b30:	4420726f 	.word	0x4420726f
   14b34:	62646165 	.word	0x62646165
   14b38:	3a646e61 	.word	0x3a646e61
   14b3c:	00000000 	.word	0x00000000
   14b40:	00566d20 	.word	0x00566d20
   14b44:	202d2038 	.word	0x202d2038
   14b48:	72727543 	.word	0x72727543
   14b4c:	20746e65 	.word	0x20746e65
   14b50:	6e616843 	.word	0x6e616843
   14b54:	206c656e 	.word	0x206c656e
   14b58:	6e616843 	.word	0x6e616843
   14b5c:	764f6567 	.word	0x764f6567
   14b60:	003a7265 	.word	0x003a7265
   14b64:	432d2037 	.word	0x432d2037
   14b68:	43206e61 	.word	0x43206e61
   14b6c:	65727275 	.word	0x65727275
   14b70:	5320746e 	.word	0x5320746e
   14b74:	6f736e65 	.word	0x6f736e65
   14b78:	003a2072 	.word	0x003a2072
   14b7c:	4d454c20 	.word	0x4d454c20
   14b80:	42414320 	.word	0x42414320
   14b84:	2f303033 	.word	0x2f303033
   14b88:	20303035 	.word	0x20303035
   14b8c:	69726573 	.word	0x69726573
   14b90:	00207365 	.word	0x00207365
   14b94:	4d454c20 	.word	0x4d454c20
   14b98:	42414320 	.word	0x42414320
   14b9c:	20303035 	.word	0x20303035
   14ba0:	63657053 	.word	0x63657053
   14ba4:	206c6169 	.word	0x206c6169
   14ba8:	00000000 	.word	0x00000000
   14bac:	61734920 	.word	0x61734920
   14bb0:	6c616353 	.word	0x6c616353
   14bb4:	56492065 	.word	0x56492065
   14bb8:	20532d54 	.word	0x20532d54
   14bbc:	00000000 	.word	0x00000000
   14bc0:	74746142 	.word	0x74746142
   14bc4:	20797265 	.word	0x20797265
   14bc8:	74746553 	.word	0x74746553
   14bcc:	73676e69 	.word	0x73676e69
   14bd0:	6e654d20 	.word	0x6e654d20
   14bd4:	00000075 	.word	0x00000075
   14bd8:	202d2072 	.word	0x202d2072
   14bdc:	65736552 	.word	0x65736552
   14be0:	48412074 	.word	0x48412074
   14be4:	756f6320 	.word	0x756f6320
   14be8:	7265746e 	.word	0x7265746e
   14bec:	00000000 	.word	0x00000000
   14bf0:	202d2066 	.word	0x202d2066
   14bf4:	65736552 	.word	0x65736552
   14bf8:	6f742074 	.word	0x6f742074
   14bfc:	646f4320 	.word	0x646f4320
   14c00:	53206465 	.word	0x53206465
   14c04:	69747465 	.word	0x69747465
   14c08:	0073676e 	.word	0x0073676e
   14c0c:	202d2031 	.word	0x202d2031
   14c10:	6c6c6543 	.word	0x6c6c6543
   14c14:	65764f20 	.word	0x65764f20
   14c18:	6f562072 	.word	0x6f562072
   14c1c:	6761746c 	.word	0x6761746c
   14c20:	65532065 	.word	0x65532065
   14c24:	696f7074 	.word	0x696f7074
   14c28:	203a746e 	.word	0x203a746e
   14c2c:	00000000 	.word	0x00000000
   14c30:	202d2032 	.word	0x202d2032
   14c34:	6c6c6543 	.word	0x6c6c6543
   14c38:	646e5520 	.word	0x646e5520
   14c3c:	56207265 	.word	0x56207265
   14c40:	61746c6f 	.word	0x61746c6f
   14c44:	53206567 	.word	0x53206567
   14c48:	6f707465 	.word	0x6f707465
   14c4c:	3a746e69 	.word	0x3a746e69
   14c50:	00000020 	.word	0x00000020
   14c54:	202d2033 	.word	0x202d2033
   14c58:	7265764f 	.word	0x7265764f
   14c5c:	6d655420 	.word	0x6d655420
   14c60:	61726570 	.word	0x61726570
   14c64:	65727574 	.word	0x65727574
   14c68:	74655320 	.word	0x74655320
   14c6c:	6e696f70 	.word	0x6e696f70
   14c70:	00203a74 	.word	0x00203a74
   14c74:	00000043 	.word	0x00000043
   14c78:	202d2034 	.word	0x202d2034
   14c7c:	65646e55 	.word	0x65646e55
   14c80:	65542072 	.word	0x65542072
   14c84:	7265706d 	.word	0x7265706d
   14c88:	72757461 	.word	0x72757461
   14c8c:	65532065 	.word	0x65532065
   14c90:	696f7074 	.word	0x696f7074
   14c94:	203a746e 	.word	0x203a746e
   14c98:	00000000 	.word	0x00000000
   14c9c:	202d2035 	.word	0x202d2035
   14ca0:	6c6c6543 	.word	0x6c6c6543
   14ca4:	6c614220 	.word	0x6c614220
   14ca8:	65636e61 	.word	0x65636e61
   14cac:	6c6f5620 	.word	0x6c6f5620
   14cb0:	65676174 	.word	0x65676174
   14cb4:	74655320 	.word	0x74655320
   14cb8:	6e696f70 	.word	0x6e696f70
   14cbc:	00203a74 	.word	0x00203a74
   14cc0:	202d2036 	.word	0x202d2036
   14cc4:	616c6142 	.word	0x616c6142
   14cc8:	2065636e 	.word	0x2065636e
   14ccc:	746c6f56 	.word	0x746c6f56
   14cd0:	20656761 	.word	0x20656761
   14cd4:	74737948 	.word	0x74737948
   14cd8:	69737265 	.word	0x69737265
   14cdc:	00203a73 	.word	0x00203a73
   14ce0:	202d2037 	.word	0x202d2037
   14ce4:	42206841 	.word	0x42206841
   14ce8:	65747461 	.word	0x65747461
   14cec:	43207972 	.word	0x43207972
   14cf0:	63617061 	.word	0x63617061
   14cf4:	3a797469 	.word	0x3a797469
   14cf8:	00000020 	.word	0x00000020
   14cfc:	00006841 	.word	0x00006841
   14d00:	202d2038 	.word	0x202d2038
   14d04:	6b636150 	.word	0x6b636150
   14d08:	78614d20 	.word	0x78614d20
   14d0c:	73694420 	.word	0x73694420
   14d10:	72616863 	.word	0x72616863
   14d14:	203a6567 	.word	0x203a6567
   14d18:	00000000 	.word	0x00000000
   14d1c:	202d2039 	.word	0x202d2039
   14d20:	6c6c6543 	.word	0x6c6c6543
   14d24:	73694420 	.word	0x73694420
   14d28:	72616863 	.word	0x72616863
   14d2c:	56206567 	.word	0x56206567
   14d30:	61746c6f 	.word	0x61746c6f
   14d34:	4c206567 	.word	0x4c206567
   14d38:	74696d69 	.word	0x74696d69
   14d3c:	74655320 	.word	0x74655320
   14d40:	6e696f70 	.word	0x6e696f70
   14d44:	00203a74 	.word	0x00203a74
   14d48:	202d2030 	.word	0x202d2030
   14d4c:	76616c53 	.word	0x76616c53
   14d50:	74732065 	.word	0x74732065
   14d54:	676e6972 	.word	0x676e6972
   14d58:	6e692073 	.word	0x6e692073
   14d5c:	72617020 	.word	0x72617020
   14d60:	656c6c61 	.word	0x656c6c61
   14d64:	00203a6c 	.word	0x00203a6c
   14d68:	202d2061 	.word	0x202d2061
   14d6c:	6c6c6543 	.word	0x6c6c6543
   14d70:	6e692073 	.word	0x6e692073
   14d74:	72655320 	.word	0x72655320
   14d78:	20736569 	.word	0x20736569
   14d7c:	20726570 	.word	0x20726570
   14d80:	69727453 	.word	0x69727453
   14d84:	203a676e 	.word	0x203a676e
   14d88:	00000000 	.word	0x00000000
   14d8c:	202d2062 	.word	0x202d2062
   14d90:	70746573 	.word	0x70746573
   14d94:	746e696f 	.word	0x746e696f
   14d98:	203a3120 	.word	0x203a3120
   14d9c:	00000000 	.word	0x00000000
   14da0:	202d2063 	.word	0x202d2063
   14da4:	20434f53 	.word	0x20434f53
   14da8:	70746573 	.word	0x70746573
   14dac:	746e696f 	.word	0x746e696f
   14db0:	003a3120 	.word	0x003a3120
   14db4:	202d2064 	.word	0x202d2064
   14db8:	70746573 	.word	0x70746573
   14dbc:	746e696f 	.word	0x746e696f
   14dc0:	203a3220 	.word	0x203a3220
   14dc4:	00000000 	.word	0x00000000
   14dc8:	202d2065 	.word	0x202d2065
   14dcc:	20434f53 	.word	0x20434f53
   14dd0:	70746573 	.word	0x70746573
   14dd4:	746e696f 	.word	0x746e696f
   14dd8:	203a3220 	.word	0x203a3220
   14ddc:	00000000 	.word	0x00000000
   14de0:	202d2067 	.word	0x202d2067
   14de4:	726f7453 	.word	0x726f7453
   14de8:	20656761 	.word	0x20656761
   14dec:	70746553 	.word	0x70746553
   14df0:	746e696f 	.word	0x746e696f
   14df4:	0000203a 	.word	0x0000203a
   14df8:	202d2068 	.word	0x202d2068
   14dfc:	63736944 	.word	0x63736944
   14e00:	67726168 	.word	0x67726168
   14e04:	75432065 	.word	0x75432065
   14e08:	6e657272 	.word	0x6e657272
   14e0c:	61542074 	.word	0x61542074
   14e10:	20726570 	.word	0x20726570
   14e14:	7366664f 	.word	0x7366664f
   14e18:	203a7465 	.word	0x203a7465
   14e1c:	00000000 	.word	0x00000000
   14e20:	202d206a 	.word	0x202d206a
   14e24:	63736944 	.word	0x63736944
   14e28:	67726168 	.word	0x67726168
   14e2c:	75432065 	.word	0x75432065
   14e30:	6e657272 	.word	0x6e657272
   14e34:	65542074 	.word	0x65542074
   14e38:	7265706d 	.word	0x7265706d
   14e3c:	72757461 	.word	0x72757461
   14e40:	65442065 	.word	0x65442065
   14e44:	65746172 	.word	0x65746172
   14e48:	00203a20 	.word	0x00203a20
   14e4c:	202d206b 	.word	0x202d206b
   14e50:	6c6c6543 	.word	0x6c6c6543
   14e54:	73694420 	.word	0x73694420
   14e58:	72616863 	.word	0x72616863
   14e5c:	56206567 	.word	0x56206567
   14e60:	61746c6f 	.word	0x61746c6f
   14e64:	48206567 	.word	0x48206567
   14e68:	65747379 	.word	0x65747379
   14e6c:	69736572 	.word	0x69736572
   14e70:	00203a73 	.word	0x00203a73
   14e74:	202d2078 	.word	0x202d2078
   14e78:	20435343 	.word	0x20435343
   14e7c:	69726156 	.word	0x69726156
   14e80:	20746e61 	.word	0x20746e61
   14e84:	64657355 	.word	0x64657355
   14e88:	0000203a 	.word	0x0000203a
   14e8c:	20776d42 	.word	0x20776d42
   14e90:	00003349 	.word	0x00003349
   14e94:	696e694d 	.word	0x696e694d
   14e98:	ff00452d 	.word	0xff00452d
   14e9c:	63657250 	.word	0x63657250
   14ea0:	67726168 	.word	0x67726168
   14ea4:	21212165 	.word	0x21212165
   14ea8:	00000000 	.word	0x00000000
   14eac:	6e69614d 	.word	0x6e69614d
   14eb0:	216e4f20 	.word	0x216e4f20
   14eb4:	00002121 	.word	0x00002121
   14eb8:	21202020 	.word	0x21202020
   14ebc:	55202121 	.word	0x55202121
   14ec0:	7265646e 	.word	0x7265646e
   14ec4:	746c6f76 	.word	0x746c6f76
   14ec8:	20656761 	.word	0x20656761
   14ecc:	6c756146 	.word	0x6c756146
   14ed0:	21212074 	.word	0x21212074
   14ed4:	00000021 	.word	0x00000021
   14ed8:	21202020 	.word	0x21202020
   14edc:	53202121 	.word	0x53202121
   14ee0:	65697265 	.word	0x65697265
   14ee4:	65432073 	.word	0x65432073
   14ee8:	20736c6c 	.word	0x20736c6c
   14eec:	6c756146 	.word	0x6c756146
   14ef0:	21212074 	.word	0x21212074
   14ef4:	00000021 	.word	0x00000021
   14ef8:	21202020 	.word	0x21202020
   14efc:	4d202121 	.word	0x4d202121
   14f00:	4c55444f 	.word	0x4c55444f
   14f04:	494d2045 	.word	0x494d2045
   14f08:	4e495353 	.word	0x4e495353
   14f0c:	21212047 	.word	0x21212047
   14f10:	ffff0021 	.word	0xffff0021
   14f14:	72617453 	.word	0x72617453
   14f18:	676e6974 	.word	0x676e6974
   14f1c:	21707520 	.word	0x21707520
   14f20:	00000000 	.word	0x00000000
   14f24:	706d6953 	.word	0x706d6953
   14f28:	20534d42 	.word	0x20534d42
   14f2c:	42203256 	.word	0x42203256
   14f30:	4920574d 	.word	0x4920574d
   14f34:	00000033 	.word	0x00000033
   14f38:	73616552 	.word	0x73616552
   14f3c:	66206e6f 	.word	0x66206e6f
   14f40:	6c20726f 	.word	0x6c20726f
   14f44:	20747361 	.word	0x20747361
   14f48:	65736552 	.word	0x65736552
   14f4c:	00203a74 	.word	0x00203a74
   14f50:	706f7453 	.word	0x706f7453
   14f54:	646f4d20 	.word	0x646f4d20
   14f58:	63412065 	.word	0x63412065
   14f5c:	776f6e6b 	.word	0x776f6e6b
   14f60:	6764656c 	.word	0x6764656c
   14f64:	72452065 	.word	0x72452065
   14f68:	20726f72 	.word	0x20726f72
   14f6c:	65736552 	.word	0x65736552
   14f70:	00000074 	.word	0x00000074
   14f74:	2d4d444d 	.word	0x2d4d444d
   14f78:	52205041 	.word	0x52205041
   14f7c:	74657365 	.word	0x74657365
   14f80:	00000000 	.word	0x00000000
   14f84:	74666f53 	.word	0x74666f53
   14f88:	65726177 	.word	0x65726177
   14f8c:	73655220 	.word	0x73655220
   14f90:	00007465 	.word	0x00007465
   14f94:	65726f43 	.word	0x65726f43
   14f98:	636f4c20 	.word	0x636f4c20
   14f9c:	2070756b 	.word	0x2070756b
   14fa0:	6e657645 	.word	0x6e657645
   14fa4:	65522074 	.word	0x65522074
   14fa8:	00746573 	.word	0x00746573
   14fac:	65776f50 	.word	0x65776f50
   14fb0:	6e6f2d72 	.word	0x6e6f2d72
   14fb4:	73655220 	.word	0x73655220
   14fb8:	00007465 	.word	0x00007465
   14fbc:	65747845 	.word	0x65747845
   14fc0:	6c616e72 	.word	0x6c616e72
   14fc4:	6e695020 	.word	0x6e695020
   14fc8:	73655220 	.word	0x73655220
   14fcc:	00007465 	.word	0x00007465
   14fd0:	63746157 	.word	0x63746157
   14fd4:	676f6468 	.word	0x676f6468
   14fd8:	504f4328 	.word	0x504f4328
   14fdc:	65522029 	.word	0x65522029
   14fe0:	00746573 	.word	0x00746573
   14fe4:	73736f4c 	.word	0x73736f4c
   14fe8:	20666f20 	.word	0x20666f20
   14fec:	65747845 	.word	0x65747845
   14ff0:	6c616e72 	.word	0x6c616e72
   14ff4:	6f6c4320 	.word	0x6f6c4320
   14ff8:	52206b63 	.word	0x52206b63
   14ffc:	74657365 	.word	0x74657365
   15000:	00000000 	.word	0x00000000
   15004:	73736f4c 	.word	0x73736f4c
   15008:	20666f20 	.word	0x20666f20
   1500c:	6b636f4c 	.word	0x6b636f4c
   15010:	206e6920 	.word	0x206e6920
   15014:	204c4c50 	.word	0x204c4c50
   15018:	65736552 	.word	0x65736552
   1501c:	00000074 	.word	0x00000074
   15020:	2d776f4c 	.word	0x2d776f4c
   15024:	746c6f76 	.word	0x746c6f76
   15028:	20656761 	.word	0x20656761
   1502c:	65746544 	.word	0x65746544
   15030:	52207463 	.word	0x52207463
   15034:	74657365 	.word	0x74657365
   15038:	00000000 	.word	0x00000000
   1503c:	72617453 	.word	0x72617453
   15040:	20646574 	.word	0x20646574
   15044:	69726573 	.word	0x69726573
   15048:	69206c61 	.word	0x69206c61
   1504c:	7265746e 	.word	0x7265746e
   15050:	65636166 	.word	0x65636166
   15054:	206f7420 	.word	0x206f7420
   15058:	2e534d42 	.word	0x2e534d42
   1505c:	ffffff00 	.word	0xffffff00

00015060 <finalxor>:
   15060:	81bbf5cf 69531d27 4c763802 00007830     ....'.Si.8vL0x..
   15070:	00006230 00000054 00000046 45555254     0b..T...F...TRUE
   15080:	00000000 534c4146 ffff0045 00202d20     ....FALSE... - .
   15090:	55424544 00000047 4f464e49 00000000     DEBUG...INFO....
   150a0:	4e524157 00474e49 4f525245 ffff0052     WARNING.ERROR...
   150b0:	726f6241 6e692074 4e414320 67656220     Abort in CAN beg
   150c0:	202e6e69 6c756f43 74276e64 6e696620     in. Couldn't fin
   150d0:	20612064 74697573 656c6261 75616220     d a suitable bau
   150e0:	6f632064 6769666e ffff0021              d config!...

000150ec <ADC::diff_table_ADC0>:
   150ec:	03248022                                ".$.

000150f0 <ADC::diff_table_ADC1>:
   150f0:	80240322                                ".$.

000150f4 <ADC::channel2sc1aADC0>:
   150f4:	09080e05 07060c0d 1300040f 0e051f03     ................
   15104:	0c0d0908 040f0706 1f1f1f1f 1f1f1f1f     ................
   15114:	53401f1f 161a5f43 1e1d1b17              ..@SC_......

00015120 <ADC::channel2sc1aADC1>:
   15120:	09081f1f 1f1f1f1f 1f031f1f 1f1f1300     ................
   15130:	1f1f0908 1f1f1f1f 05851f1f 84070604     ................
   15140:	5f431f1f 121a5340 1e1d1b1f              ..C_@S......

0001514c <SPIClass::spi0_hardware>:
   1514c:	4004803c 00001000 00001a04 00007fff     <..@............
   1515c:	00001011 00008e79 0000080c 00000200     ....y...........
   1516c:	00000200 0000070b 00000240 00000200     ........@.......
   1517c:	00000e0d 00000240 00000200 0609020a     ....@...........
   1518c:	16151714 0000000f 00000200 00000200     ................
   1519c:	00000200 00000200 00000200 00000200     ................
   151ac:	00000200 00000200 00000200 02020101     ................
   151bc:	08080404 00000010                       ........

000151c4 <_serialEvent_default>:
   151c4:	ffffff00                                ....

000151c8 <vtable for HardwareSerial2>:
	...
   151d0:	000090d1 000090f5 00009185 00009181     ................
   151e0:	0000917d 00009179 00009175 00009099     }...y...u.......
   151f0:	00009155 00009151 00009149 00009141     U...Q...I...A...
   15200:	00009139 00009129 00009119 00009115     9...)...........
   15210:	0000910d 00009105 000091a9 000091c9     ................
   15220:	000091e9 00009189 000090dd 000090c5     ................

00015230 <vtable for HardwareSerial3>:
	...
   15238:	00009241 00009265 000092f5 000092f1     A...e...........
   15248:	000092ed 000092e9 000092e5 00009209     ................
   15258:	000092c5 000092c1 000092b9 000092b1     ................
   15268:	000092a9 00009299 00009289 00009285     ................
   15278:	0000927d 00009275 00009319 00009339     }...u.......9...
   15288:	00009359 000092f9 0000924d 00009235     Y.......M...5...
   15298:	006e616e 00666e69 0066766f 037ff06f     nan.inf.ovf.o...
   152a8:	78037003 0f80f013 4770d0fb              .p.x......pG

000152b4 <CSWTCH.39>:
   152b4:	00000008 0000000c 0000000a 00000009     ................
   152c4:	0000000b                                ....

000152c8 <digital_pin_to_info_PGM>:
   152c8:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   152d8:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   152e8:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   152f8:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   15308:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   15318:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   15328:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   15338:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   15348:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   15358:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   15368:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   15378:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   15388:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   15398:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   153a8:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   153b8:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   153c8:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

000153d8 <vtable for usb_serial_class>:
	...
   153e0:	0000bd21 0000bd19 0000bd15 0000bd11     !...............
   153f0:	0000bd0d 0000bd09 0000bd05 0000bd01     ................

00015400 <usb_descriptor_list>:
   15400:	00000100 1fff8a58 00000012 00000200     ....X...........
   15410:	1fff8a14 00000043 00000300 1fff8a6c     ....C.......l...
   15420:	00000000 04090301 1fff8a70 00000000     ........p.......
   15430:	04090302 1fff8a88 00000000 04090303     ................
   15440:	1fff8aa0 00000000 00000000 00000000     ................
   15450:	00000000                                ....

00015454 <usb_endpoint_config_table>:
   15454:	15191500 3f000000 bf000000 3f317180     .......?.....q1?
   15464:	bf317180 3717f7d1 b717f7d1              .q1....7....

00015470 <_ctype_>:
   15470:	20202000 20202020 28282020 20282828     .         ((((( 
   15480:	20202020 20202020 20202020 20202020                     
   15490:	10108820 10101010 10101010 10101010      ...............
   154a0:	04040410 04040404 10040404 10101010     ................
   154b0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   154c0:	01010101 01010101 01010101 10101010     ................
   154d0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   154e0:	02020202 02020202 02020202 10101010     ................
   154f0:	00000020 00000000 00000000 00000000      ...............
	...
   15570:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
   15580:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
   15590:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
   155a0:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
   155b0:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
   155c0:	65636375 64656465 00000000 7461642f     ucceeded..../dat
   155d0:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   155e0:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   155f0:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   15600:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   15610:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   15620:	2e636572 ffff0063                       rec.c...

00015628 <__mprec_bigtens>:
   15628:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   15638:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   15648:	7f73bf3c 75154fdd                       <.s..O.u

00015650 <__mprec_tens>:
   15650:	00000000 3ff00000 00000000 40240000     .......?......$@
   15660:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   15670:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   15680:	00000000 412e8480 00000000 416312d0     .......A......cA
   15690:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   156a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   156b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   156c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   156d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   156e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   156f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   15700:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   15710:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
   15720:	0000007d 00464e49 004e414e 33323130     }...INF.NAN.0123
   15730:	37363534 62613938 66656463 00000000     456789abcdef....
   15740:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   15750:	00000000 6c756e28 ff00296c 20202020     ....(null)..    
   15760:	20202020 20202020 20202020 30303030                 0000
   15770:	30303030 30303030 30303030 7566202c     000000000000, fu
   15780:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   15790:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   157a0:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   157b0:	2520656e 25732564 ff000a73 69666e49     ne %d%s%s...Infi
   157c0:	7974696e 00000000 004e614e 7461642f     nity....NaN./dat
   157d0:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   157e0:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   157f0:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   15800:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   15810:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
   15820:	632e616f ffffff00 20202020 20202020     oa.c....        
   15830:	20202020 20202020 30303030 30303030             00000000
   15840:	30303030 30303030                       00000000

00015848 <_init>:
   15848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1584a:	bf00      	nop
   1584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1584e:	bc08      	pop	{r3}
   15850:	469e      	mov	lr, r3
   15852:	4770      	bx	lr

00015854 <__init_array_start>:
   15854:	0000e09d 	.word	0x0000e09d

00015858 <__frame_dummy_init_array_entry>:
   15858:	00000435 0000739d 0000864d 00008e89     5....s..M.......

Disassembly of section .fini:

00015868 <_fini>:
   15868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1586a:	bf00      	nop

Disassembly of section .data:

1fff8720 <port_E_isr>:
PORT_ISR_FUNCTION_CLZ(E)
1fff8720:	b538      	push	{r3, r4, r5, lr}
1fff8722:	4b0a      	ldr	r3, [pc, #40]	; (1fff874c <port_E_isr+0x2c>)
1fff8724:	4d0a      	ldr	r5, [pc, #40]	; (1fff8750 <port_E_isr+0x30>)
1fff8726:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff872a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff872e:	e005      	b.n	1fff873c <port_E_isr+0x1c>
1fff8730:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8734:	4798      	blx	r3
1fff8736:	1e63      	subs	r3, r4, #1
1fff8738:	401c      	ands	r4, r3
1fff873a:	d005      	beq.n	1fff8748 <port_E_isr+0x28>
1fff873c:	fa94 f3a4 	rbit	r3, r4
1fff8740:	fab3 f383 	clz	r3, r3
1fff8744:	2c00      	cmp	r4, #0
1fff8746:	d1f3      	bne.n	1fff8730 <port_E_isr+0x10>
1fff8748:	bd38      	pop	{r3, r4, r5, pc}
1fff874a:	bf00      	nop
1fff874c:	4004d000 	.word	0x4004d000
1fff8750:	1fff89c8 	.word	0x1fff89c8

1fff8754 <port_D_isr>:
PORT_ISR_FUNCTION_CLZ(D)
1fff8754:	b538      	push	{r3, r4, r5, lr}
1fff8756:	4b0a      	ldr	r3, [pc, #40]	; (1fff8780 <port_D_isr+0x2c>)
1fff8758:	4d0a      	ldr	r5, [pc, #40]	; (1fff8784 <port_D_isr+0x30>)
1fff875a:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff875e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8762:	e005      	b.n	1fff8770 <port_D_isr+0x1c>
1fff8764:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8768:	4798      	blx	r3
1fff876a:	1e63      	subs	r3, r4, #1
1fff876c:	401c      	ands	r4, r3
1fff876e:	d005      	beq.n	1fff877c <port_D_isr+0x28>
1fff8770:	fa94 f3a4 	rbit	r3, r4
1fff8774:	fab3 f383 	clz	r3, r3
1fff8778:	2c00      	cmp	r4, #0
1fff877a:	d1f3      	bne.n	1fff8764 <port_D_isr+0x10>
1fff877c:	bd38      	pop	{r3, r4, r5, pc}
1fff877e:	bf00      	nop
1fff8780:	4004c000 	.word	0x4004c000
1fff8784:	1fff89a8 	.word	0x1fff89a8

1fff8788 <port_C_isr>:
PORT_ISR_FUNCTION_CLZ(C)
1fff8788:	b538      	push	{r3, r4, r5, lr}
1fff878a:	4b0a      	ldr	r3, [pc, #40]	; (1fff87b4 <port_C_isr+0x2c>)
1fff878c:	4d0a      	ldr	r5, [pc, #40]	; (1fff87b8 <port_C_isr+0x30>)
1fff878e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8792:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8796:	e005      	b.n	1fff87a4 <port_C_isr+0x1c>
1fff8798:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff879c:	4798      	blx	r3
1fff879e:	1e63      	subs	r3, r4, #1
1fff87a0:	401c      	ands	r4, r3
1fff87a2:	d005      	beq.n	1fff87b0 <port_C_isr+0x28>
1fff87a4:	fa94 f3a4 	rbit	r3, r4
1fff87a8:	fab3 f383 	clz	r3, r3
1fff87ac:	2c00      	cmp	r4, #0
1fff87ae:	d1f3      	bne.n	1fff8798 <port_C_isr+0x10>
1fff87b0:	bd38      	pop	{r3, r4, r5, pc}
1fff87b2:	bf00      	nop
1fff87b4:	4004b000 	.word	0x4004b000
1fff87b8:	1fff8978 	.word	0x1fff8978

1fff87bc <port_B_isr>:
PORT_ISR_FUNCTION_CLZ(B)
1fff87bc:	b538      	push	{r3, r4, r5, lr}
1fff87be:	4b0a      	ldr	r3, [pc, #40]	; (1fff87e8 <port_B_isr+0x2c>)
1fff87c0:	4d0a      	ldr	r5, [pc, #40]	; (1fff87ec <port_B_isr+0x30>)
1fff87c2:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87c6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87ca:	e005      	b.n	1fff87d8 <port_B_isr+0x1c>
1fff87cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87d0:	4798      	blx	r3
1fff87d2:	1e63      	subs	r3, r4, #1
1fff87d4:	401c      	ands	r4, r3
1fff87d6:	d005      	beq.n	1fff87e4 <port_B_isr+0x28>
1fff87d8:	fa94 f3a4 	rbit	r3, r4
1fff87dc:	fab3 f383 	clz	r3, r3
1fff87e0:	2c00      	cmp	r4, #0
1fff87e2:	d1f3      	bne.n	1fff87cc <port_B_isr+0x10>
1fff87e4:	bd38      	pop	{r3, r4, r5, pc}
1fff87e6:	bf00      	nop
1fff87e8:	4004a000 	.word	0x4004a000
1fff87ec:	1fff8928 	.word	0x1fff8928

1fff87f0 <port_A_isr>:
PORT_ISR_FUNCTION_CLZ(A)
1fff87f0:	b538      	push	{r3, r4, r5, lr}
1fff87f2:	4b0a      	ldr	r3, [pc, #40]	; (1fff881c <port_A_isr+0x2c>)
1fff87f4:	4d0a      	ldr	r5, [pc, #40]	; (1fff8820 <port_A_isr+0x30>)
1fff87f6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87fa:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87fe:	e005      	b.n	1fff880c <port_A_isr+0x1c>
1fff8800:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8804:	4798      	blx	r3
1fff8806:	1e63      	subs	r3, r4, #1
1fff8808:	401c      	ands	r4, r3
1fff880a:	d005      	beq.n	1fff8818 <port_A_isr+0x28>
1fff880c:	fa94 f3a4 	rbit	r3, r4
1fff8810:	fab3 f383 	clz	r3, r3
1fff8814:	2c00      	cmp	r4, #0
1fff8816:	d1f3      	bne.n	1fff8800 <port_A_isr+0x10>
1fff8818:	bd38      	pop	{r3, r4, r5, pc}
1fff881a:	bf00      	nop
1fff881c:	40049000 	.word	0x40049000
1fff8820:	1fff88f0 	.word	0x1fff88f0

1fff8824 <SOC>:
1fff8824:	00000064                                d...

1fff8828 <SOH>:
1fff8828:	00000064                                d...

1fff882c <bmsmanu>:
1fff882c:	204d4f54 42204544                       TOM DE B

1fff8834 <bmsname>:
1fff8834:	504d4953 534d4220                       SIMP BMS

1fff883c <chargerid1>:
1fff883c:	00000618                                ....

1fff8840 <chargerid2>:
1fff8840:	00000638                                8...

1fff8844 <commandrate>:
1fff8844:	00000032                                2...

1fff8848 <debug>:
1fff8848:	00000001                                ....

1fff884c <debugdigits>:
1fff884c:	00000002                                ....

1fff8850 <filterFrequency>:
1fff8850:	40a00000                                ...@

1fff8854 <firmver>:
1fff8854:	0003846e                                n...

1fff8858 <maxac1>:
1fff8858:	00000010                                ....

1fff885c <maxac2>:
1fff885c:	0000000a                                ....

1fff8860 <ncharger>:
1fff8860:	00000001                                ....

1fff8864 <pulltime>:
1fff8864:	00000064                                d...

1fff8868 <pwmcurmax>:
1fff8868:	00000032                                2...

1fff886c <pwmcurmid>:
1fff886c:	00000032                                2...

1fff8870 <pwmfreq>:
1fff8870:	00004650                                PF..

1fff8874 <sensor>:
1fff8874:	00000001                                ....

1fff8878 <Logger::logLevel>:
1fff8878:	00000001                                ....

1fff887c <bitTimingTable>:
1fff887c:	01010000 01010100 01010201 02010202     ................
1fff888c:	03020103 02040202 02020502 06020305     ................
1fff889c:	03070203 03040702 07030407 05070405     ................
1fff88ac:	05060704 07060607 07070606 00070707     ................

1fff88bc <Serial2>:
1fff88bc:	000151d0 00000000 000003e8 00000000     .Q..............
1fff88cc:	0000b385                                ....

1fff88d0 <Serial3>:
1fff88d0:	00015238 00000000 000003e8 00000000     8R..............
1fff88e0:	0000b389                                ....

1fff88e4 <analog_config_bits>:
1fff88e4:	                                         .

1fff88e5 <analog_num_average>:
1fff88e5:	                                         ...

1fff88e8 <__brkval>:
1fff88e8:	1fffe210                                ....

1fff88ec <analog_write_res>:
1fff88ec:	00000008                                ....

1fff88f0 <isr_table_portA>:
1fff88f0:	00009ccd 00009ccd 00009ccd 00009ccd     ................
1fff8900:	00009ccd 00009ccd 00009ccd 00009ccd     ................
1fff8910:	00009ccd 00009ccd 00009ccd 00009ccd     ................
1fff8920:	00009ccd 00009ccd                       ........

1fff8928 <isr_table_portB>:
1fff8928:	00009ccd 00009ccd 00009ccd 00009ccd     ................
1fff8938:	00009ccd 00009ccd 00009ccd 00009ccd     ................
1fff8948:	00009ccd 00009ccd 00009ccd 00009ccd     ................
1fff8958:	00009ccd 00009ccd 00009ccd 00009ccd     ................
1fff8968:	00009ccd 00009ccd 00009ccd 00009ccd     ................

1fff8978 <isr_table_portC>:
1fff8978:	00009ccd 00009ccd 00009ccd 00009ccd     ................
1fff8988:	00009ccd 00009ccd 00009ccd 00009ccd     ................
1fff8998:	00009ccd 00009ccd 00009ccd 00009ccd     ................

1fff89a8 <isr_table_portD>:
1fff89a8:	00009ccd 00009ccd 00009ccd 00009ccd     ................
1fff89b8:	00009ccd 00009ccd 00009ccd 00009ccd     ................

1fff89c8 <isr_table_portE>:
1fff89c8:	00009ccd 00009ccd                       ........

1fff89d0 <rts_high_watermark_>:
1fff89d0:	00000028                                (...

1fff89d4 <rts_low_watermark_>:
1fff89d4:	0000001a                                ....

1fff89d8 <rx_buffer_total_size_>:
1fff89d8:	00000040                                @...

1fff89dc <rx_pin_num>:
1fff89dc:	00000009                                ....

1fff89e0 <tx_buffer_total_size_>:
1fff89e0:	00000028                                (...

1fff89e4 <tx_pin_num>:
1fff89e4:	0000000a                                ....

1fff89e8 <rts_high_watermark_>:
1fff89e8:	00000028                                (...

1fff89ec <rts_low_watermark_>:
1fff89ec:	0000001a                                ....

1fff89f0 <rx_buffer_total_size_>:
1fff89f0:	00000040                                @...

1fff89f4 <tx_buffer_total_size_>:
1fff89f4:	00000028                                (...

1fff89f8 <tx_pin_num>:
1fff89f8:	                                         .

1fff89f9 <_serialEvent2_default>:
1fff89f9:	                                         .

1fff89fa <_serialEvent3_default>:
1fff89fa:	                                         ..

1fff89fc <Serial>:
1fff89fc:	000153e0 00000000 000003e8 00000000     .S..............

1fff8a0c <usb_buffer_available>:
1fff8a0c:	ffffffff                                ....

1fff8a10 <yield_active_check_flags>:
1fff8a10:	00000001                                ....

1fff8a14 <config_descriptor>:
1fff8a14:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff8a24:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff8a34:	00062405 82050701 40001003 00010409     .$.........@....
1fff8a44:	00000a02 03050700 00004002 02840507     .........@......
1fff8a54:	00000040                                @...

1fff8a58 <device_descriptor>:
1fff8a58:	01100112 40000002 048316c0 02010275     .......@....u...
1fff8a68:	00000103                                ....

1fff8a6c <string0>:
1fff8a6c:	04090304                                ....

1fff8a70 <usb_string_manufacturer_name_default>:
1fff8a70:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff8a80:	00690075 006f006e                       u.i.n.o.

1fff8a88 <usb_string_product_name_default>:
1fff8a88:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff8a98:	00610069 0000006c                       i.a.l...

1fff8aa0 <usb_string_serial_number_default>:
1fff8aa0:	0000030c 00000000 00000000 00000000     ................
	...

1fff8ab8 <__malloc_av_>:
	...
1fff8ac0:	1fff8ab8 1fff8ab8 1fff8ac0 1fff8ac0     ................
1fff8ad0:	1fff8ac8 1fff8ac8 1fff8ad0 1fff8ad0     ................
1fff8ae0:	1fff8ad8 1fff8ad8 1fff8ae0 1fff8ae0     ................
1fff8af0:	1fff8ae8 1fff8ae8 1fff8af0 1fff8af0     ................
1fff8b00:	1fff8af8 1fff8af8 1fff8b00 1fff8b00     ................
1fff8b10:	1fff8b08 1fff8b08 1fff8b10 1fff8b10     ................
1fff8b20:	1fff8b18 1fff8b18 1fff8b20 1fff8b20     ........ ... ...
1fff8b30:	1fff8b28 1fff8b28 1fff8b30 1fff8b30     (...(...0...0...
1fff8b40:	1fff8b38 1fff8b38 1fff8b40 1fff8b40     8...8...@...@...
1fff8b50:	1fff8b48 1fff8b48 1fff8b50 1fff8b50     H...H...P...P...
1fff8b60:	1fff8b58 1fff8b58 1fff8b60 1fff8b60     X...X...`...`...
1fff8b70:	1fff8b68 1fff8b68 1fff8b70 1fff8b70     h...h...p...p...
1fff8b80:	1fff8b78 1fff8b78 1fff8b80 1fff8b80     x...x...........
1fff8b90:	1fff8b88 1fff8b88 1fff8b90 1fff8b90     ................
1fff8ba0:	1fff8b98 1fff8b98 1fff8ba0 1fff8ba0     ................
1fff8bb0:	1fff8ba8 1fff8ba8 1fff8bb0 1fff8bb0     ................
1fff8bc0:	1fff8bb8 1fff8bb8 1fff8bc0 1fff8bc0     ................
1fff8bd0:	1fff8bc8 1fff8bc8 1fff8bd0 1fff8bd0     ................
1fff8be0:	1fff8bd8 1fff8bd8 1fff8be0 1fff8be0     ................
1fff8bf0:	1fff8be8 1fff8be8 1fff8bf0 1fff8bf0     ................
1fff8c00:	1fff8bf8 1fff8bf8 1fff8c00 1fff8c00     ................
1fff8c10:	1fff8c08 1fff8c08 1fff8c10 1fff8c10     ................
1fff8c20:	1fff8c18 1fff8c18 1fff8c20 1fff8c20     ........ ... ...
1fff8c30:	1fff8c28 1fff8c28 1fff8c30 1fff8c30     (...(...0...0...
1fff8c40:	1fff8c38 1fff8c38 1fff8c40 1fff8c40     8...8...@...@...
1fff8c50:	1fff8c48 1fff8c48 1fff8c50 1fff8c50     H...H...P...P...
1fff8c60:	1fff8c58 1fff8c58 1fff8c60 1fff8c60     X...X...`...`...
1fff8c70:	1fff8c68 1fff8c68 1fff8c70 1fff8c70     h...h...p...p...
1fff8c80:	1fff8c78 1fff8c78 1fff8c80 1fff8c80     x...x...........
1fff8c90:	1fff8c88 1fff8c88 1fff8c90 1fff8c90     ................
1fff8ca0:	1fff8c98 1fff8c98 1fff8ca0 1fff8ca0     ................
1fff8cb0:	1fff8ca8 1fff8ca8 1fff8cb0 1fff8cb0     ................
1fff8cc0:	1fff8cb8 1fff8cb8 1fff8cc0 1fff8cc0     ................
1fff8cd0:	1fff8cc8 1fff8cc8 1fff8cd0 1fff8cd0     ................
1fff8ce0:	1fff8cd8 1fff8cd8 1fff8ce0 1fff8ce0     ................
1fff8cf0:	1fff8ce8 1fff8ce8 1fff8cf0 1fff8cf0     ................
1fff8d00:	1fff8cf8 1fff8cf8 1fff8d00 1fff8d00     ................
1fff8d10:	1fff8d08 1fff8d08 1fff8d10 1fff8d10     ................
1fff8d20:	1fff8d18 1fff8d18 1fff8d20 1fff8d20     ........ ... ...
1fff8d30:	1fff8d28 1fff8d28 1fff8d30 1fff8d30     (...(...0...0...
1fff8d40:	1fff8d38 1fff8d38 1fff8d40 1fff8d40     8...8...@...@...
1fff8d50:	1fff8d48 1fff8d48 1fff8d50 1fff8d50     H...H...P...P...
1fff8d60:	1fff8d58 1fff8d58 1fff8d60 1fff8d60     X...X...`...`...
1fff8d70:	1fff8d68 1fff8d68 1fff8d70 1fff8d70     h...h...p...p...
1fff8d80:	1fff8d78 1fff8d78 1fff8d80 1fff8d80     x...x...........
1fff8d90:	1fff8d88 1fff8d88 1fff8d90 1fff8d90     ................
1fff8da0:	1fff8d98 1fff8d98 1fff8da0 1fff8da0     ................
1fff8db0:	1fff8da8 1fff8da8 1fff8db0 1fff8db0     ................
1fff8dc0:	1fff8db8 1fff8db8 1fff8dc0 1fff8dc0     ................
1fff8dd0:	1fff8dc8 1fff8dc8 1fff8dd0 1fff8dd0     ................
1fff8de0:	1fff8dd8 1fff8dd8 1fff8de0 1fff8de0     ................
1fff8df0:	1fff8de8 1fff8de8 1fff8df0 1fff8df0     ................
1fff8e00:	1fff8df8 1fff8df8 1fff8e00 1fff8e00     ................
1fff8e10:	1fff8e08 1fff8e08 1fff8e10 1fff8e10     ................
1fff8e20:	1fff8e18 1fff8e18 1fff8e20 1fff8e20     ........ ... ...
1fff8e30:	1fff8e28 1fff8e28 1fff8e30 1fff8e30     (...(...0...0...
1fff8e40:	1fff8e38 1fff8e38 1fff8e40 1fff8e40     8...8...@...@...
1fff8e50:	1fff8e48 1fff8e48 1fff8e50 1fff8e50     H...H...P...P...
1fff8e60:	1fff8e58 1fff8e58 1fff8e60 1fff8e60     X...X...`...`...
1fff8e70:	1fff8e68 1fff8e68 1fff8e70 1fff8e70     h...h...p...p...
1fff8e80:	1fff8e78 1fff8e78 1fff8e80 1fff8e80     x...x...........
1fff8e90:	1fff8e88 1fff8e88 1fff8e90 1fff8e90     ................
1fff8ea0:	1fff8e98 1fff8e98 1fff8ea0 1fff8ea0     ................
1fff8eb0:	1fff8ea8 1fff8ea8 1fff8eb0 1fff8eb0     ................

1fff8ec0 <__malloc_sbrk_base>:
1fff8ec0:	ffffffff                                ....

1fff8ec4 <__malloc_trim_threshold>:
1fff8ec4:	00020000                                ....

1fff8ec8 <__sglue>:
1fff8ec8:	00000000 00000003 1fffdf30              ........0...

1fff8ed4 <__global_locale>:
1fff8ed4:	00000043 00000000 00000000 00000000     C...............
	...
1fff8ef4:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f14:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f34:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f54:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f74:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f94:	00000043 00000000 00000000 00000000     C...............
	...
1fff8fb4:	0000eaf1 0000e369 00000000 00015470     ....i.......pT..
1fff8fc4:	0001414c 00014068 00014068 00014068     LA..h@..h@..h@..
1fff8fd4:	00014068 00014068 00014068 00014068     h@..h@..h@..h@..
1fff8fe4:	00014068 00014068 ffffffff ffffffff     h@..h@..........
1fff8ff4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
1fff901c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

1fff9040 <_impure_data>:
1fff9040:	00000000 1fffdf30 1fffdf98 1fffe000     ....0...........
	...
1fff90d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff90e8:	0005deec 0000000b 00000000 00000000     ................
	...

1fff9160 <_impure_ptr>:
1fff9160:	1fff9040                                @...

1fff9164 <__atexit_recursive_mutex>:
1fff9164:	1fffe070                                p...
